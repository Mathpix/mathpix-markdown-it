"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postcss";
exports.ids = ["vendor-chunks/postcss"];
exports.modules = {

/***/ "(ssr)/./node_modules/postcss/lib/at-rule.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/at-rule.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nclass AtRule extends Container {\n    constructor(defaults){\n        super(defaults);\n        this.type = \"atrule\";\n    }\n    append(...children) {\n        if (!this.proxyOf.nodes) this.nodes = [];\n        return super.append(...children);\n    }\n    prepend(...children) {\n        if (!this.proxyOf.nodes) this.nodes = [];\n        return super.prepend(...children);\n    }\n}\nmodule.exports = AtRule;\nAtRule.default = AtRule;\nContainer.registerAtRule(AtRule);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvYXQtcnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCLE1BQU1DLGVBQWVGO0lBQ25CRyxZQUFZQyxRQUFRLENBQUU7UUFDcEIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ2Q7SUFFQUMsT0FBTyxHQUFHQyxRQUFRLEVBQUU7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDQSxLQUFLLEdBQUcsRUFBRTtRQUN4QyxPQUFPLEtBQUssQ0FBQ0gsVUFBVUM7SUFDekI7SUFFQUcsUUFBUSxHQUFHSCxRQUFRLEVBQUU7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDQSxLQUFLLEdBQUcsRUFBRTtRQUN4QyxPQUFPLEtBQUssQ0FBQ0MsV0FBV0g7SUFDMUI7QUFDRjtBQUVBSSxPQUFPQyxPQUFPLEdBQUdWO0FBQ2pCQSxPQUFPVyxPQUFPLEdBQUdYO0FBRWpCRixVQUFVYyxjQUFjLENBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2F0LXJ1bGUuanM/Y2VmNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcblxuY2xhc3MgQXRSdWxlIGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICBzdXBlcihkZWZhdWx0cylcbiAgICB0aGlzLnR5cGUgPSAnYXRydWxlJ1xuICB9XG5cbiAgYXBwZW5kKC4uLmNoaWxkcmVuKSB7XG4gICAgaWYgKCF0aGlzLnByb3h5T2Yubm9kZXMpIHRoaXMubm9kZXMgPSBbXVxuICAgIHJldHVybiBzdXBlci5hcHBlbmQoLi4uY2hpbGRyZW4pXG4gIH1cblxuICBwcmVwZW5kKC4uLmNoaWxkcmVuKSB7XG4gICAgaWYgKCF0aGlzLnByb3h5T2Yubm9kZXMpIHRoaXMubm9kZXMgPSBbXVxuICAgIHJldHVybiBzdXBlci5wcmVwZW5kKC4uLmNoaWxkcmVuKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXRSdWxlXG5BdFJ1bGUuZGVmYXVsdCA9IEF0UnVsZVxuXG5Db250YWluZXIucmVnaXN0ZXJBdFJ1bGUoQXRSdWxlKVxuIl0sIm5hbWVzIjpbIkNvbnRhaW5lciIsInJlcXVpcmUiLCJBdFJ1bGUiLCJjb25zdHJ1Y3RvciIsImRlZmF1bHRzIiwidHlwZSIsImFwcGVuZCIsImNoaWxkcmVuIiwicHJveHlPZiIsIm5vZGVzIiwicHJlcGVuZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwicmVnaXN0ZXJBdFJ1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/at-rule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/comment.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/comment.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Node = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/postcss/lib/node.js\");\nclass Comment extends Node {\n    constructor(defaults){\n        super(defaults);\n        this.type = \"comment\";\n    }\n}\nmodule.exports = Comment;\nComment.default = Comment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY29tbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1DLGdCQUFnQkY7SUFDcEJHLFlBQVlDLFFBQVEsQ0FBRTtRQUNwQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0w7QUFDakJBLFFBQVFNLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY29tbWVudC5qcz8zZjgzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgTm9kZSA9IHJlcXVpcmUoJy4vbm9kZScpXG5cbmNsYXNzIENvbW1lbnQgZXh0ZW5kcyBOb2RlIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICBzdXBlcihkZWZhdWx0cylcbiAgICB0aGlzLnR5cGUgPSAnY29tbWVudCdcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1lbnRcbkNvbW1lbnQuZGVmYXVsdCA9IENvbW1lbnRcbiJdLCJuYW1lcyI6WyJOb2RlIiwicmVxdWlyZSIsIkNvbW1lbnQiLCJjb25zdHJ1Y3RvciIsImRlZmF1bHRzIiwidHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/comment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/container.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/container.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { isClean, my } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/postcss/lib/symbols.js\");\nlet Declaration = __webpack_require__(/*! ./declaration */ \"(ssr)/./node_modules/postcss/lib/declaration.js\");\nlet Comment = __webpack_require__(/*! ./comment */ \"(ssr)/./node_modules/postcss/lib/comment.js\");\nlet Node = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/postcss/lib/node.js\");\nlet parse, Rule, AtRule, Root;\nfunction cleanSource(nodes) {\n    return nodes.map((i)=>{\n        if (i.nodes) i.nodes = cleanSource(i.nodes);\n        delete i.source;\n        return i;\n    });\n}\nfunction markDirtyUp(node) {\n    node[isClean] = false;\n    if (node.proxyOf.nodes) {\n        for (let i of node.proxyOf.nodes){\n            markDirtyUp(i);\n        }\n    }\n}\nclass Container extends Node {\n    append(...children) {\n        for (let child of children){\n            let nodes = this.normalize(child, this.last);\n            for (let node of nodes)this.proxyOf.nodes.push(node);\n        }\n        this.markDirty();\n        return this;\n    }\n    cleanRaws(keepBetween) {\n        super.cleanRaws(keepBetween);\n        if (this.nodes) {\n            for (let node of this.nodes)node.cleanRaws(keepBetween);\n        }\n    }\n    each(callback) {\n        if (!this.proxyOf.nodes) return undefined;\n        let iterator = this.getIterator();\n        let index, result;\n        while(this.indexes[iterator] < this.proxyOf.nodes.length){\n            index = this.indexes[iterator];\n            result = callback(this.proxyOf.nodes[index], index);\n            if (result === false) break;\n            this.indexes[iterator] += 1;\n        }\n        delete this.indexes[iterator];\n        return result;\n    }\n    every(condition) {\n        return this.nodes.every(condition);\n    }\n    getIterator() {\n        if (!this.lastEach) this.lastEach = 0;\n        if (!this.indexes) this.indexes = {};\n        this.lastEach += 1;\n        let iterator = this.lastEach;\n        this.indexes[iterator] = 0;\n        return iterator;\n    }\n    getProxyProcessor() {\n        return {\n            get (node, prop) {\n                if (prop === \"proxyOf\") {\n                    return node;\n                } else if (!node[prop]) {\n                    return node[prop];\n                } else if (prop === \"each\" || typeof prop === \"string\" && prop.startsWith(\"walk\")) {\n                    return (...args)=>{\n                        return node[prop](...args.map((i)=>{\n                            if (typeof i === \"function\") {\n                                return (child, index)=>i(child.toProxy(), index);\n                            } else {\n                                return i;\n                            }\n                        }));\n                    };\n                } else if (prop === \"every\" || prop === \"some\") {\n                    return (cb)=>{\n                        return node[prop]((child, ...other)=>cb(child.toProxy(), ...other));\n                    };\n                } else if (prop === \"root\") {\n                    return ()=>node.root().toProxy();\n                } else if (prop === \"nodes\") {\n                    return node.nodes.map((i)=>i.toProxy());\n                } else if (prop === \"first\" || prop === \"last\") {\n                    return node[prop].toProxy();\n                } else {\n                    return node[prop];\n                }\n            },\n            set (node, prop, value) {\n                if (node[prop] === value) return true;\n                node[prop] = value;\n                if (prop === \"name\" || prop === \"params\" || prop === \"selector\") {\n                    node.markDirty();\n                }\n                return true;\n            }\n        };\n    }\n    index(child) {\n        if (typeof child === \"number\") return child;\n        if (child.proxyOf) child = child.proxyOf;\n        return this.proxyOf.nodes.indexOf(child);\n    }\n    insertAfter(exist, add) {\n        let existIndex = this.index(exist);\n        let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();\n        existIndex = this.index(exist);\n        for (let node of nodes)this.proxyOf.nodes.splice(existIndex + 1, 0, node);\n        let index;\n        for(let id in this.indexes){\n            index = this.indexes[id];\n            if (existIndex < index) {\n                this.indexes[id] = index + nodes.length;\n            }\n        }\n        this.markDirty();\n        return this;\n    }\n    insertBefore(exist, add) {\n        let existIndex = this.index(exist);\n        let type = existIndex === 0 ? \"prepend\" : false;\n        let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();\n        existIndex = this.index(exist);\n        for (let node of nodes)this.proxyOf.nodes.splice(existIndex, 0, node);\n        let index;\n        for(let id in this.indexes){\n            index = this.indexes[id];\n            if (existIndex <= index) {\n                this.indexes[id] = index + nodes.length;\n            }\n        }\n        this.markDirty();\n        return this;\n    }\n    normalize(nodes, sample) {\n        if (typeof nodes === \"string\") {\n            nodes = cleanSource(parse(nodes).nodes);\n        } else if (typeof nodes === \"undefined\") {\n            nodes = [];\n        } else if (Array.isArray(nodes)) {\n            nodes = nodes.slice(0);\n            for (let i of nodes){\n                if (i.parent) i.parent.removeChild(i, \"ignore\");\n            }\n        } else if (nodes.type === \"root\" && this.type !== \"document\") {\n            nodes = nodes.nodes.slice(0);\n            for (let i of nodes){\n                if (i.parent) i.parent.removeChild(i, \"ignore\");\n            }\n        } else if (nodes.type) {\n            nodes = [\n                nodes\n            ];\n        } else if (nodes.prop) {\n            if (typeof nodes.value === \"undefined\") {\n                throw new Error(\"Value field is missed in node creation\");\n            } else if (typeof nodes.value !== \"string\") {\n                nodes.value = String(nodes.value);\n            }\n            nodes = [\n                new Declaration(nodes)\n            ];\n        } else if (nodes.selector) {\n            nodes = [\n                new Rule(nodes)\n            ];\n        } else if (nodes.name) {\n            nodes = [\n                new AtRule(nodes)\n            ];\n        } else if (nodes.text) {\n            nodes = [\n                new Comment(nodes)\n            ];\n        } else {\n            throw new Error(\"Unknown node type in node creation\");\n        }\n        let processed = nodes.map((i)=>{\n            /* c8 ignore next */ if (!i[my]) Container.rebuild(i);\n            i = i.proxyOf;\n            if (i.parent) i.parent.removeChild(i);\n            if (i[isClean]) markDirtyUp(i);\n            if (typeof i.raws.before === \"undefined\") {\n                if (sample && typeof sample.raws.before !== \"undefined\") {\n                    i.raws.before = sample.raws.before.replace(/\\S/g, \"\");\n                }\n            }\n            i.parent = this.proxyOf;\n            return i;\n        });\n        return processed;\n    }\n    prepend(...children) {\n        children = children.reverse();\n        for (let child of children){\n            let nodes = this.normalize(child, this.first, \"prepend\").reverse();\n            for (let node of nodes)this.proxyOf.nodes.unshift(node);\n            for(let id in this.indexes){\n                this.indexes[id] = this.indexes[id] + nodes.length;\n            }\n        }\n        this.markDirty();\n        return this;\n    }\n    push(child) {\n        child.parent = this;\n        this.proxyOf.nodes.push(child);\n        return this;\n    }\n    removeAll() {\n        for (let node of this.proxyOf.nodes)node.parent = undefined;\n        this.proxyOf.nodes = [];\n        this.markDirty();\n        return this;\n    }\n    removeChild(child) {\n        child = this.index(child);\n        this.proxyOf.nodes[child].parent = undefined;\n        this.proxyOf.nodes.splice(child, 1);\n        let index;\n        for(let id in this.indexes){\n            index = this.indexes[id];\n            if (index >= child) {\n                this.indexes[id] = index - 1;\n            }\n        }\n        this.markDirty();\n        return this;\n    }\n    replaceValues(pattern, opts, callback) {\n        if (!callback) {\n            callback = opts;\n            opts = {};\n        }\n        this.walkDecls((decl)=>{\n            if (opts.props && !opts.props.includes(decl.prop)) return;\n            if (opts.fast && !decl.value.includes(opts.fast)) return;\n            decl.value = decl.value.replace(pattern, callback);\n        });\n        this.markDirty();\n        return this;\n    }\n    some(condition) {\n        return this.nodes.some(condition);\n    }\n    walk(callback) {\n        return this.each((child, i)=>{\n            let result;\n            try {\n                result = callback(child, i);\n            } catch (e) {\n                throw child.addToError(e);\n            }\n            if (result !== false && child.walk) {\n                result = child.walk(callback);\n            }\n            return result;\n        });\n    }\n    walkAtRules(name, callback) {\n        if (!callback) {\n            callback = name;\n            return this.walk((child, i)=>{\n                if (child.type === \"atrule\") {\n                    return callback(child, i);\n                }\n            });\n        }\n        if (name instanceof RegExp) {\n            return this.walk((child, i)=>{\n                if (child.type === \"atrule\" && name.test(child.name)) {\n                    return callback(child, i);\n                }\n            });\n        }\n        return this.walk((child, i)=>{\n            if (child.type === \"atrule\" && child.name === name) {\n                return callback(child, i);\n            }\n        });\n    }\n    walkComments(callback) {\n        return this.walk((child, i)=>{\n            if (child.type === \"comment\") {\n                return callback(child, i);\n            }\n        });\n    }\n    walkDecls(prop, callback) {\n        if (!callback) {\n            callback = prop;\n            return this.walk((child, i)=>{\n                if (child.type === \"decl\") {\n                    return callback(child, i);\n                }\n            });\n        }\n        if (prop instanceof RegExp) {\n            return this.walk((child, i)=>{\n                if (child.type === \"decl\" && prop.test(child.prop)) {\n                    return callback(child, i);\n                }\n            });\n        }\n        return this.walk((child, i)=>{\n            if (child.type === \"decl\" && child.prop === prop) {\n                return callback(child, i);\n            }\n        });\n    }\n    walkRules(selector, callback) {\n        if (!callback) {\n            callback = selector;\n            return this.walk((child, i)=>{\n                if (child.type === \"rule\") {\n                    return callback(child, i);\n                }\n            });\n        }\n        if (selector instanceof RegExp) {\n            return this.walk((child, i)=>{\n                if (child.type === \"rule\" && selector.test(child.selector)) {\n                    return callback(child, i);\n                }\n            });\n        }\n        return this.walk((child, i)=>{\n            if (child.type === \"rule\" && child.selector === selector) {\n                return callback(child, i);\n            }\n        });\n    }\n    get first() {\n        if (!this.proxyOf.nodes) return undefined;\n        return this.proxyOf.nodes[0];\n    }\n    get last() {\n        if (!this.proxyOf.nodes) return undefined;\n        return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\n    }\n}\nContainer.registerParse = (dependant)=>{\n    parse = dependant;\n};\nContainer.registerRule = (dependant)=>{\n    Rule = dependant;\n};\nContainer.registerAtRule = (dependant)=>{\n    AtRule = dependant;\n};\nContainer.registerRoot = (dependant)=>{\n    Root = dependant;\n};\nmodule.exports = Container;\nContainer.default = Container;\n/* c8 ignore start */ Container.rebuild = (node)=>{\n    if (node.type === \"atrule\") {\n        Object.setPrototypeOf(node, AtRule.prototype);\n    } else if (node.type === \"rule\") {\n        Object.setPrototypeOf(node, Rule.prototype);\n    } else if (node.type === \"decl\") {\n        Object.setPrototypeOf(node, Declaration.prototype);\n    } else if (node.type === \"comment\") {\n        Object.setPrototypeOf(node, Comment.prototype);\n    } else if (node.type === \"root\") {\n        Object.setPrototypeOf(node, Root.prototype);\n    }\n    node[my] = true;\n    if (node.nodes) {\n        node.nodes.forEach((child)=>{\n            Container.rebuild(child);\n        });\n    }\n} /* c8 ignore stop */ ;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/container.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/css-syntax-error.js":
/*!******************************************************!*\
  !*** ./node_modules/postcss/lib/css-syntax-error.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet pico = __webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\");\nlet terminalHighlight = __webpack_require__(/*! ./terminal-highlight */ \"(ssr)/./node_modules/postcss/lib/terminal-highlight.js\");\nclass CssSyntaxError extends Error {\n    constructor(message, line, column, source, file, plugin){\n        super(message);\n        this.name = \"CssSyntaxError\";\n        this.reason = message;\n        if (file) {\n            this.file = file;\n        }\n        if (source) {\n            this.source = source;\n        }\n        if (plugin) {\n            this.plugin = plugin;\n        }\n        if (typeof line !== \"undefined\" && typeof column !== \"undefined\") {\n            if (typeof line === \"number\") {\n                this.line = line;\n                this.column = column;\n            } else {\n                this.line = line.line;\n                this.column = line.column;\n                this.endLine = column.line;\n                this.endColumn = column.column;\n            }\n        }\n        this.setMessage();\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, CssSyntaxError);\n        }\n    }\n    setMessage() {\n        this.message = this.plugin ? this.plugin + \": \" : \"\";\n        this.message += this.file ? this.file : \"<css input>\";\n        if (typeof this.line !== \"undefined\") {\n            this.message += \":\" + this.line + \":\" + this.column;\n        }\n        this.message += \": \" + this.reason;\n    }\n    showSourceCode(color) {\n        if (!this.source) return \"\";\n        let css = this.source;\n        if (color == null) color = pico.isColorSupported;\n        if (terminalHighlight) {\n            if (color) css = terminalHighlight(css);\n        }\n        let lines = css.split(/\\r?\\n/);\n        let start = Math.max(this.line - 3, 0);\n        let end = Math.min(this.line + 2, lines.length);\n        let maxWidth = String(end).length;\n        let mark, aside;\n        if (color) {\n            let { bold, gray, red } = pico.createColors(true);\n            mark = (text)=>bold(red(text));\n            aside = (text)=>gray(text);\n        } else {\n            mark = aside = (str)=>str;\n        }\n        return lines.slice(start, end).map((line, index)=>{\n            let number = start + 1 + index;\n            let gutter = \" \" + (\" \" + number).slice(-maxWidth) + \" | \";\n            if (number === this.line) {\n                let spacing = aside(gutter.replace(/\\d/g, \" \")) + line.slice(0, this.column - 1).replace(/[^\\t]/g, \" \");\n                return mark(\">\") + aside(gutter) + line + \"\\n \" + spacing + mark(\"^\");\n            }\n            return \" \" + aside(gutter) + line;\n        }).join(\"\\n\");\n    }\n    toString() {\n        let code = this.showSourceCode();\n        if (code) {\n            code = \"\\n\\n\" + code + \"\\n\";\n        }\n        return this.name + \": \" + this.message + code;\n    }\n}\nmodule.exports = CssSyntaxError;\nCssSyntaxError.default = CssSyntaxError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY3NzLXN5bnRheC1lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLElBQUlDLG9CQUFvQkQsbUJBQU9BLENBQUM7QUFFaEMsTUFBTUUsdUJBQXVCQztJQUMzQkMsWUFBWUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sQ0FBRTtRQUN2RCxLQUFLLENBQUNMO1FBQ04sSUFBSSxDQUFDTSxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE1BQU0sR0FBR1A7UUFFZCxJQUFJSSxNQUFNO1lBQ1IsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO1FBQ2Q7UUFDQSxJQUFJRCxRQUFRO1lBQ1YsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO1FBQ2hCO1FBQ0EsSUFBSUUsUUFBUTtZQUNWLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtRQUNoQjtRQUNBLElBQUksT0FBT0osU0FBUyxlQUFlLE9BQU9DLFdBQVcsYUFBYTtZQUNoRSxJQUFJLE9BQU9ELFNBQVMsVUFBVTtnQkFDNUIsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO2dCQUNaLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtZQUNoQixPQUFPO2dCQUNMLElBQUksQ0FBQ0QsSUFBSSxHQUFHQSxLQUFLQSxJQUFJO2dCQUNyQixJQUFJLENBQUNDLE1BQU0sR0FBR0QsS0FBS0MsTUFBTTtnQkFDekIsSUFBSSxDQUFDTSxPQUFPLEdBQUdOLE9BQU9ELElBQUk7Z0JBQzFCLElBQUksQ0FBQ1EsU0FBUyxHQUFHUCxPQUFPQSxNQUFNO1lBQ2hDO1FBQ0Y7UUFFQSxJQUFJLENBQUNRLFVBQVU7UUFFZixJQUFJWixNQUFNYSxpQkFBaUIsRUFBRTtZQUMzQmIsTUFBTWEsaUJBQWlCLENBQUMsSUFBSSxFQUFFZDtRQUNoQztJQUNGO0lBRUFhLGFBQWE7UUFDWCxJQUFJLENBQUNWLE9BQU8sR0FBRyxJQUFJLENBQUNLLE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sR0FBRyxPQUFPO1FBQ2xELElBQUksQ0FBQ0wsT0FBTyxJQUFJLElBQUksQ0FBQ0ksSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxHQUFHO1FBQ3hDLElBQUksT0FBTyxJQUFJLENBQUNILElBQUksS0FBSyxhQUFhO1lBQ3BDLElBQUksQ0FBQ0QsT0FBTyxJQUFJLE1BQU0sSUFBSSxDQUFDQyxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUNDLE1BQU07UUFDckQ7UUFDQSxJQUFJLENBQUNGLE9BQU8sSUFBSSxPQUFPLElBQUksQ0FBQ08sTUFBTTtJQUNwQztJQUVBSyxlQUFlQyxLQUFLLEVBQUU7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQ1YsTUFBTSxFQUFFLE9BQU87UUFFekIsSUFBSVcsTUFBTSxJQUFJLENBQUNYLE1BQU07UUFDckIsSUFBSVUsU0FBUyxNQUFNQSxRQUFRbkIsS0FBS3FCLGdCQUFnQjtRQUNoRCxJQUFJbkIsbUJBQW1CO1lBQ3JCLElBQUlpQixPQUFPQyxNQUFNbEIsa0JBQWtCa0I7UUFDckM7UUFFQSxJQUFJRSxRQUFRRixJQUFJRyxLQUFLLENBQUM7UUFDdEIsSUFBSUMsUUFBUUMsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ25CLElBQUksR0FBRyxHQUFHO1FBQ3BDLElBQUlvQixNQUFNRixLQUFLRyxHQUFHLENBQUMsSUFBSSxDQUFDckIsSUFBSSxHQUFHLEdBQUdlLE1BQU1PLE1BQU07UUFFOUMsSUFBSUMsV0FBV0MsT0FBT0osS0FBS0UsTUFBTTtRQUVqQyxJQUFJRyxNQUFNQztRQUNWLElBQUlkLE9BQU87WUFDVCxJQUFJLEVBQUVlLElBQUksRUFBRUMsSUFBSSxFQUFFQyxHQUFHLEVBQUUsR0FBR3BDLEtBQUtxQyxZQUFZLENBQUM7WUFDNUNMLE9BQU9NLENBQUFBLE9BQVFKLEtBQUtFLElBQUlFO1lBQ3hCTCxRQUFRSyxDQUFBQSxPQUFRSCxLQUFLRztRQUN2QixPQUFPO1lBQ0xOLE9BQU9DLFFBQVFNLENBQUFBLE1BQU9BO1FBQ3hCO1FBRUEsT0FBT2pCLE1BQ0prQixLQUFLLENBQUNoQixPQUFPRyxLQUNiYyxHQUFHLENBQUMsQ0FBQ2xDLE1BQU1tQztZQUNWLElBQUlDLFNBQVNuQixRQUFRLElBQUlrQjtZQUN6QixJQUFJRSxTQUFTLE1BQU0sQ0FBQyxNQUFNRCxNQUFLLEVBQUdILEtBQUssQ0FBQyxDQUFDVixZQUFZO1lBQ3JELElBQUlhLFdBQVcsSUFBSSxDQUFDcEMsSUFBSSxFQUFFO2dCQUN4QixJQUFJc0MsVUFDRlosTUFBTVcsT0FBT0UsT0FBTyxDQUFDLE9BQU8sUUFDNUJ2QyxLQUFLaUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDaEMsTUFBTSxHQUFHLEdBQUdzQyxPQUFPLENBQUMsVUFBVTtnQkFDbkQsT0FBT2QsS0FBSyxPQUFPQyxNQUFNVyxVQUFVckMsT0FBTyxRQUFRc0MsVUFBVWIsS0FBSztZQUNuRTtZQUNBLE9BQU8sTUFBTUMsTUFBTVcsVUFBVXJDO1FBQy9CLEdBQ0N3QyxJQUFJLENBQUM7SUFDVjtJQUVBQyxXQUFXO1FBQ1QsSUFBSUMsT0FBTyxJQUFJLENBQUMvQixjQUFjO1FBQzlCLElBQUkrQixNQUFNO1lBQ1JBLE9BQU8sU0FBU0EsT0FBTztRQUN6QjtRQUNBLE9BQU8sSUFBSSxDQUFDckMsSUFBSSxHQUFHLE9BQU8sSUFBSSxDQUFDTixPQUFPLEdBQUcyQztJQUMzQztBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR2hEO0FBQ2pCQSxlQUFlaUQsT0FBTyxHQUFHakQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY3NzLXN5bnRheC1lcnJvci5qcz8xMTc2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgcGljbyA9IHJlcXVpcmUoJ3BpY29jb2xvcnMnKVxuXG5sZXQgdGVybWluYWxIaWdobGlnaHQgPSByZXF1aXJlKCcuL3Rlcm1pbmFsLWhpZ2hsaWdodCcpXG5cbmNsYXNzIENzc1N5bnRheEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBsaW5lLCBjb2x1bW4sIHNvdXJjZSwgZmlsZSwgcGx1Z2luKSB7XG4gICAgc3VwZXIobWVzc2FnZSlcbiAgICB0aGlzLm5hbWUgPSAnQ3NzU3ludGF4RXJyb3InXG4gICAgdGhpcy5yZWFzb24gPSBtZXNzYWdlXG5cbiAgICBpZiAoZmlsZSkge1xuICAgICAgdGhpcy5maWxlID0gZmlsZVxuICAgIH1cbiAgICBpZiAoc291cmNlKSB7XG4gICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZVxuICAgIH1cbiAgICBpZiAocGx1Z2luKSB7XG4gICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpblxuICAgIH1cbiAgICBpZiAodHlwZW9mIGxpbmUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb2x1bW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIGxpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmVcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmUubGluZVxuICAgICAgICB0aGlzLmNvbHVtbiA9IGxpbmUuY29sdW1uXG4gICAgICAgIHRoaXMuZW5kTGluZSA9IGNvbHVtbi5saW5lXG4gICAgICAgIHRoaXMuZW5kQ29sdW1uID0gY29sdW1uLmNvbHVtblxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0TWVzc2FnZSgpXG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIENzc1N5bnRheEVycm9yKVxuICAgIH1cbiAgfVxuXG4gIHNldE1lc3NhZ2UoKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy5wbHVnaW4gPyB0aGlzLnBsdWdpbiArICc6ICcgOiAnJ1xuICAgIHRoaXMubWVzc2FnZSArPSB0aGlzLmZpbGUgPyB0aGlzLmZpbGUgOiAnPGNzcyBpbnB1dD4nXG4gICAgaWYgKHR5cGVvZiB0aGlzLmxpbmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgKz0gJzonICsgdGhpcy5saW5lICsgJzonICsgdGhpcy5jb2x1bW5cbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlICs9ICc6ICcgKyB0aGlzLnJlYXNvblxuICB9XG5cbiAgc2hvd1NvdXJjZUNvZGUoY29sb3IpIHtcbiAgICBpZiAoIXRoaXMuc291cmNlKSByZXR1cm4gJydcblxuICAgIGxldCBjc3MgPSB0aGlzLnNvdXJjZVxuICAgIGlmIChjb2xvciA9PSBudWxsKSBjb2xvciA9IHBpY28uaXNDb2xvclN1cHBvcnRlZFxuICAgIGlmICh0ZXJtaW5hbEhpZ2hsaWdodCkge1xuICAgICAgaWYgKGNvbG9yKSBjc3MgPSB0ZXJtaW5hbEhpZ2hsaWdodChjc3MpXG4gICAgfVxuXG4gICAgbGV0IGxpbmVzID0gY3NzLnNwbGl0KC9cXHI/XFxuLylcbiAgICBsZXQgc3RhcnQgPSBNYXRoLm1heCh0aGlzLmxpbmUgLSAzLCAwKVxuICAgIGxldCBlbmQgPSBNYXRoLm1pbih0aGlzLmxpbmUgKyAyLCBsaW5lcy5sZW5ndGgpXG5cbiAgICBsZXQgbWF4V2lkdGggPSBTdHJpbmcoZW5kKS5sZW5ndGhcblxuICAgIGxldCBtYXJrLCBhc2lkZVxuICAgIGlmIChjb2xvcikge1xuICAgICAgbGV0IHsgYm9sZCwgZ3JheSwgcmVkIH0gPSBwaWNvLmNyZWF0ZUNvbG9ycyh0cnVlKVxuICAgICAgbWFyayA9IHRleHQgPT4gYm9sZChyZWQodGV4dCkpXG4gICAgICBhc2lkZSA9IHRleHQgPT4gZ3JheSh0ZXh0KVxuICAgIH0gZWxzZSB7XG4gICAgICBtYXJrID0gYXNpZGUgPSBzdHIgPT4gc3RyXG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmVzXG4gICAgICAuc2xpY2Uoc3RhcnQsIGVuZClcbiAgICAgIC5tYXAoKGxpbmUsIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBudW1iZXIgPSBzdGFydCArIDEgKyBpbmRleFxuICAgICAgICBsZXQgZ3V0dGVyID0gJyAnICsgKCcgJyArIG51bWJlcikuc2xpY2UoLW1heFdpZHRoKSArICcgfCAnXG4gICAgICAgIGlmIChudW1iZXIgPT09IHRoaXMubGluZSkge1xuICAgICAgICAgIGxldCBzcGFjaW5nID1cbiAgICAgICAgICAgIGFzaWRlKGd1dHRlci5yZXBsYWNlKC9cXGQvZywgJyAnKSkgK1xuICAgICAgICAgICAgbGluZS5zbGljZSgwLCB0aGlzLmNvbHVtbiAtIDEpLnJlcGxhY2UoL1teXFx0XS9nLCAnICcpXG4gICAgICAgICAgcmV0dXJuIG1hcmsoJz4nKSArIGFzaWRlKGd1dHRlcikgKyBsaW5lICsgJ1xcbiAnICsgc3BhY2luZyArIG1hcmsoJ14nKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnICcgKyBhc2lkZShndXR0ZXIpICsgbGluZVxuICAgICAgfSlcbiAgICAgIC5qb2luKCdcXG4nKVxuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IGNvZGUgPSB0aGlzLnNob3dTb3VyY2VDb2RlKClcbiAgICBpZiAoY29kZSkge1xuICAgICAgY29kZSA9ICdcXG5cXG4nICsgY29kZSArICdcXG4nXG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5hbWUgKyAnOiAnICsgdGhpcy5tZXNzYWdlICsgY29kZVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3NzU3ludGF4RXJyb3JcbkNzc1N5bnRheEVycm9yLmRlZmF1bHQgPSBDc3NTeW50YXhFcnJvclxuIl0sIm5hbWVzIjpbInBpY28iLCJyZXF1aXJlIiwidGVybWluYWxIaWdobGlnaHQiLCJDc3NTeW50YXhFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwibGluZSIsImNvbHVtbiIsInNvdXJjZSIsImZpbGUiLCJwbHVnaW4iLCJuYW1lIiwicmVhc29uIiwiZW5kTGluZSIsImVuZENvbHVtbiIsInNldE1lc3NhZ2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInNob3dTb3VyY2VDb2RlIiwiY29sb3IiLCJjc3MiLCJpc0NvbG9yU3VwcG9ydGVkIiwibGluZXMiLCJzcGxpdCIsInN0YXJ0IiwiTWF0aCIsIm1heCIsImVuZCIsIm1pbiIsImxlbmd0aCIsIm1heFdpZHRoIiwiU3RyaW5nIiwibWFyayIsImFzaWRlIiwiYm9sZCIsImdyYXkiLCJyZWQiLCJjcmVhdGVDb2xvcnMiLCJ0ZXh0Iiwic3RyIiwic2xpY2UiLCJtYXAiLCJpbmRleCIsIm51bWJlciIsImd1dHRlciIsInNwYWNpbmciLCJyZXBsYWNlIiwiam9pbiIsInRvU3RyaW5nIiwiY29kZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/css-syntax-error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/declaration.js":
/*!*************************************************!*\
  !*** ./node_modules/postcss/lib/declaration.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Node = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/postcss/lib/node.js\");\nclass Declaration extends Node {\n    constructor(defaults){\n        if (defaults && typeof defaults.value !== \"undefined\" && typeof defaults.value !== \"string\") {\n            defaults = {\n                ...defaults,\n                value: String(defaults.value)\n            };\n        }\n        super(defaults);\n        this.type = \"decl\";\n    }\n    get variable() {\n        return this.prop.startsWith(\"--\") || this.prop[0] === \"$\";\n    }\n}\nmodule.exports = Declaration;\nDeclaration.default = Declaration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZGVjbGFyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVuQixNQUFNQyxvQkFBb0JGO0lBQ3hCRyxZQUFZQyxRQUFRLENBQUU7UUFDcEIsSUFDRUEsWUFDQSxPQUFPQSxTQUFTQyxLQUFLLEtBQUssZUFDMUIsT0FBT0QsU0FBU0MsS0FBSyxLQUFLLFVBQzFCO1lBQ0FELFdBQVc7Z0JBQUUsR0FBR0EsUUFBUTtnQkFBRUMsT0FBT0MsT0FBT0YsU0FBU0MsS0FBSztZQUFFO1FBQzFEO1FBQ0EsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0csSUFBSSxHQUFHO0lBQ2Q7SUFFQSxJQUFJQyxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQ0MsVUFBVSxDQUFDLFNBQVMsSUFBSSxDQUFDRCxJQUFJLENBQUMsRUFBRSxLQUFLO0lBQ3hEO0FBQ0Y7QUFFQUUsT0FBT0MsT0FBTyxHQUFHVjtBQUNqQkEsWUFBWVcsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9kZWNsYXJhdGlvbi5qcz9lMTIxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgTm9kZSA9IHJlcXVpcmUoJy4vbm9kZScpXG5cbmNsYXNzIERlY2xhcmF0aW9uIGV4dGVuZHMgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgaWYgKFxuICAgICAgZGVmYXVsdHMgJiZcbiAgICAgIHR5cGVvZiBkZWZhdWx0cy52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBkZWZhdWx0cy52YWx1ZSAhPT0gJ3N0cmluZydcbiAgICApIHtcbiAgICAgIGRlZmF1bHRzID0geyAuLi5kZWZhdWx0cywgdmFsdWU6IFN0cmluZyhkZWZhdWx0cy52YWx1ZSkgfVxuICAgIH1cbiAgICBzdXBlcihkZWZhdWx0cylcbiAgICB0aGlzLnR5cGUgPSAnZGVjbCdcbiAgfVxuXG4gIGdldCB2YXJpYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wLnN0YXJ0c1dpdGgoJy0tJykgfHwgdGhpcy5wcm9wWzBdID09PSAnJCdcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERlY2xhcmF0aW9uXG5EZWNsYXJhdGlvbi5kZWZhdWx0ID0gRGVjbGFyYXRpb25cbiJdLCJuYW1lcyI6WyJOb2RlIiwicmVxdWlyZSIsIkRlY2xhcmF0aW9uIiwiY29uc3RydWN0b3IiLCJkZWZhdWx0cyIsInZhbHVlIiwiU3RyaW5nIiwidHlwZSIsInZhcmlhYmxlIiwicHJvcCIsInN0YXJ0c1dpdGgiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/declaration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/document.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/document.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet LazyResult, Processor;\nclass Document extends Container {\n    constructor(defaults){\n        // type needs to be passed to super, otherwise child roots won't be normalized correctly\n        super({\n            type: \"document\",\n            ...defaults\n        });\n        if (!this.nodes) {\n            this.nodes = [];\n        }\n    }\n    toResult(opts = {}) {\n        let lazy = new LazyResult(new Processor(), this, opts);\n        return lazy.stringify();\n    }\n}\nDocument.registerLazyResult = (dependant)=>{\n    LazyResult = dependant;\n};\nDocument.registerProcessor = (dependant)=>{\n    Processor = dependant;\n};\nmodule.exports = Document;\nDocument.default = Document;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZG9jdW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQztBQUV4QixJQUFJQyxZQUFZQztBQUVoQixNQUFNQyxpQkFBaUJKO0lBQ3JCSyxZQUFZQyxRQUFRLENBQUU7UUFDcEIsd0ZBQXdGO1FBQ3hGLEtBQUssQ0FBQztZQUFFQyxNQUFNO1lBQVksR0FBR0QsUUFBUTtRQUFDO1FBRXRDLElBQUksQ0FBQyxJQUFJLENBQUNFLEtBQUssRUFBRTtZQUNmLElBQUksQ0FBQ0EsS0FBSyxHQUFHLEVBQUU7UUFDakI7SUFDRjtJQUVBQyxTQUFTQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ2xCLElBQUlDLE9BQU8sSUFBSVQsV0FBVyxJQUFJQyxhQUFhLElBQUksRUFBRU87UUFFakQsT0FBT0MsS0FBS0MsU0FBUztJQUN2QjtBQUNGO0FBRUFSLFNBQVNTLGtCQUFrQixHQUFHQyxDQUFBQTtJQUM1QlosYUFBYVk7QUFDZjtBQUVBVixTQUFTVyxpQkFBaUIsR0FBR0QsQ0FBQUE7SUFDM0JYLFlBQVlXO0FBQ2Q7QUFFQUUsT0FBT0MsT0FBTyxHQUFHYjtBQUNqQkEsU0FBU2MsT0FBTyxHQUFHZCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9kb2N1bWVudC5qcz9iYzUxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgQ29udGFpbmVyID0gcmVxdWlyZSgnLi9jb250YWluZXInKVxuXG5sZXQgTGF6eVJlc3VsdCwgUHJvY2Vzc29yXG5cbmNsYXNzIERvY3VtZW50IGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICAvLyB0eXBlIG5lZWRzIHRvIGJlIHBhc3NlZCB0byBzdXBlciwgb3RoZXJ3aXNlIGNoaWxkIHJvb3RzIHdvbid0IGJlIG5vcm1hbGl6ZWQgY29ycmVjdGx5XG4gICAgc3VwZXIoeyB0eXBlOiAnZG9jdW1lbnQnLCAuLi5kZWZhdWx0cyB9KVxuXG4gICAgaWYgKCF0aGlzLm5vZGVzKSB7XG4gICAgICB0aGlzLm5vZGVzID0gW11cbiAgICB9XG4gIH1cblxuICB0b1Jlc3VsdChvcHRzID0ge30pIHtcbiAgICBsZXQgbGF6eSA9IG5ldyBMYXp5UmVzdWx0KG5ldyBQcm9jZXNzb3IoKSwgdGhpcywgb3B0cylcblxuICAgIHJldHVybiBsYXp5LnN0cmluZ2lmeSgpXG4gIH1cbn1cblxuRG9jdW1lbnQucmVnaXN0ZXJMYXp5UmVzdWx0ID0gZGVwZW5kYW50ID0+IHtcbiAgTGF6eVJlc3VsdCA9IGRlcGVuZGFudFxufVxuXG5Eb2N1bWVudC5yZWdpc3RlclByb2Nlc3NvciA9IGRlcGVuZGFudCA9PiB7XG4gIFByb2Nlc3NvciA9IGRlcGVuZGFudFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERvY3VtZW50XG5Eb2N1bWVudC5kZWZhdWx0ID0gRG9jdW1lbnRcbiJdLCJuYW1lcyI6WyJDb250YWluZXIiLCJyZXF1aXJlIiwiTGF6eVJlc3VsdCIsIlByb2Nlc3NvciIsIkRvY3VtZW50IiwiY29uc3RydWN0b3IiLCJkZWZhdWx0cyIsInR5cGUiLCJub2RlcyIsInRvUmVzdWx0Iiwib3B0cyIsImxhenkiLCJzdHJpbmdpZnkiLCJyZWdpc3RlckxhenlSZXN1bHQiLCJkZXBlbmRhbnQiLCJyZWdpc3RlclByb2Nlc3NvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/document.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/fromJSON.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/fromJSON.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Declaration = __webpack_require__(/*! ./declaration */ \"(ssr)/./node_modules/postcss/lib/declaration.js\");\nlet PreviousMap = __webpack_require__(/*! ./previous-map */ \"(ssr)/./node_modules/postcss/lib/previous-map.js\");\nlet Comment = __webpack_require__(/*! ./comment */ \"(ssr)/./node_modules/postcss/lib/comment.js\");\nlet AtRule = __webpack_require__(/*! ./at-rule */ \"(ssr)/./node_modules/postcss/lib/at-rule.js\");\nlet Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/postcss/lib/input.js\");\nlet Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/postcss/lib/root.js\");\nlet Rule = __webpack_require__(/*! ./rule */ \"(ssr)/./node_modules/postcss/lib/rule.js\");\nfunction fromJSON(json, inputs) {\n    if (Array.isArray(json)) return json.map((n)=>fromJSON(n));\n    let { inputs: ownInputs, ...defaults } = json;\n    if (ownInputs) {\n        inputs = [];\n        for (let input of ownInputs){\n            let inputHydrated = {\n                ...input,\n                __proto__: Input.prototype\n            };\n            if (inputHydrated.map) {\n                inputHydrated.map = {\n                    ...inputHydrated.map,\n                    __proto__: PreviousMap.prototype\n                };\n            }\n            inputs.push(inputHydrated);\n        }\n    }\n    if (defaults.nodes) {\n        defaults.nodes = json.nodes.map((n)=>fromJSON(n, inputs));\n    }\n    if (defaults.source) {\n        let { inputId, ...source } = defaults.source;\n        defaults.source = source;\n        if (inputId != null) {\n            defaults.source.input = inputs[inputId];\n        }\n    }\n    if (defaults.type === \"root\") {\n        return new Root(defaults);\n    } else if (defaults.type === \"decl\") {\n        return new Declaration(defaults);\n    } else if (defaults.type === \"rule\") {\n        return new Rule(defaults);\n    } else if (defaults.type === \"comment\") {\n        return new Comment(defaults);\n    } else if (defaults.type === \"atrule\") {\n        return new AtRule(defaults);\n    } else {\n        throw new Error(\"Unknown node type: \" + json.type);\n    }\n}\nmodule.exports = fromJSON;\nfromJSON.default = fromJSON;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZnJvbUpTT04uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUMxQixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUMxQixJQUFJRSxVQUFVRixtQkFBT0EsQ0FBQztBQUN0QixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJSSxRQUFRSixtQkFBT0EsQ0FBQztBQUNwQixJQUFJSyxPQUFPTCxtQkFBT0EsQ0FBQztBQUNuQixJQUFJTSxPQUFPTixtQkFBT0EsQ0FBQztBQUVuQixTQUFTTyxTQUFTQyxJQUFJLEVBQUVDLE1BQU07SUFDNUIsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSCxPQUFPLE9BQU9BLEtBQUtJLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS04sU0FBU007SUFFdkQsSUFBSSxFQUFFSixRQUFRSyxTQUFTLEVBQUUsR0FBR0MsVUFBVSxHQUFHUDtJQUN6QyxJQUFJTSxXQUFXO1FBQ2JMLFNBQVMsRUFBRTtRQUNYLEtBQUssSUFBSU8sU0FBU0YsVUFBVztZQUMzQixJQUFJRyxnQkFBZ0I7Z0JBQUUsR0FBR0QsS0FBSztnQkFBRUUsV0FBV2QsTUFBTWUsU0FBUztZQUFDO1lBQzNELElBQUlGLGNBQWNMLEdBQUcsRUFBRTtnQkFDckJLLGNBQWNMLEdBQUcsR0FBRztvQkFDbEIsR0FBR0ssY0FBY0wsR0FBRztvQkFDcEJNLFdBQVdqQixZQUFZa0IsU0FBUztnQkFDbEM7WUFDRjtZQUNBVixPQUFPVyxJQUFJLENBQUNIO1FBQ2Q7SUFDRjtJQUNBLElBQUlGLFNBQVNNLEtBQUssRUFBRTtRQUNsQk4sU0FBU00sS0FBSyxHQUFHYixLQUFLYSxLQUFLLENBQUNULEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS04sU0FBU00sR0FBR0o7SUFDbkQ7SUFDQSxJQUFJTSxTQUFTTyxNQUFNLEVBQUU7UUFDbkIsSUFBSSxFQUFFQyxPQUFPLEVBQUUsR0FBR0QsUUFBUSxHQUFHUCxTQUFTTyxNQUFNO1FBQzVDUCxTQUFTTyxNQUFNLEdBQUdBO1FBQ2xCLElBQUlDLFdBQVcsTUFBTTtZQUNuQlIsU0FBU08sTUFBTSxDQUFDTixLQUFLLEdBQUdQLE1BQU0sQ0FBQ2MsUUFBUTtRQUN6QztJQUNGO0lBQ0EsSUFBSVIsU0FBU1MsSUFBSSxLQUFLLFFBQVE7UUFDNUIsT0FBTyxJQUFJbkIsS0FBS1U7SUFDbEIsT0FBTyxJQUFJQSxTQUFTUyxJQUFJLEtBQUssUUFBUTtRQUNuQyxPQUFPLElBQUl6QixZQUFZZ0I7SUFDekIsT0FBTyxJQUFJQSxTQUFTUyxJQUFJLEtBQUssUUFBUTtRQUNuQyxPQUFPLElBQUlsQixLQUFLUztJQUNsQixPQUFPLElBQUlBLFNBQVNTLElBQUksS0FBSyxXQUFXO1FBQ3RDLE9BQU8sSUFBSXRCLFFBQVFhO0lBQ3JCLE9BQU8sSUFBSUEsU0FBU1MsSUFBSSxLQUFLLFVBQVU7UUFDckMsT0FBTyxJQUFJckIsT0FBT1k7SUFDcEIsT0FBTztRQUNMLE1BQU0sSUFBSVUsTUFBTSx3QkFBd0JqQixLQUFLZ0IsSUFBSTtJQUNuRDtBQUNGO0FBRUFFLE9BQU9DLE9BQU8sR0FBR3BCO0FBQ2pCQSxTQUFTcUIsT0FBTyxHQUFHckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZnJvbUpTT04uanM/YTM3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9kZWNsYXJhdGlvbicpXG5sZXQgUHJldmlvdXNNYXAgPSByZXF1aXJlKCcuL3ByZXZpb3VzLW1hcCcpXG5sZXQgQ29tbWVudCA9IHJlcXVpcmUoJy4vY29tbWVudCcpXG5sZXQgQXRSdWxlID0gcmVxdWlyZSgnLi9hdC1ydWxlJylcbmxldCBJbnB1dCA9IHJlcXVpcmUoJy4vaW5wdXQnKVxubGV0IFJvb3QgPSByZXF1aXJlKCcuL3Jvb3QnKVxubGV0IFJ1bGUgPSByZXF1aXJlKCcuL3J1bGUnKVxuXG5mdW5jdGlvbiBmcm9tSlNPTihqc29uLCBpbnB1dHMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHJldHVybiBqc29uLm1hcChuID0+IGZyb21KU09OKG4pKVxuXG4gIGxldCB7IGlucHV0czogb3duSW5wdXRzLCAuLi5kZWZhdWx0cyB9ID0ganNvblxuICBpZiAob3duSW5wdXRzKSB7XG4gICAgaW5wdXRzID0gW11cbiAgICBmb3IgKGxldCBpbnB1dCBvZiBvd25JbnB1dHMpIHtcbiAgICAgIGxldCBpbnB1dEh5ZHJhdGVkID0geyAuLi5pbnB1dCwgX19wcm90b19fOiBJbnB1dC5wcm90b3R5cGUgfVxuICAgICAgaWYgKGlucHV0SHlkcmF0ZWQubWFwKSB7XG4gICAgICAgIGlucHV0SHlkcmF0ZWQubWFwID0ge1xuICAgICAgICAgIC4uLmlucHV0SHlkcmF0ZWQubWFwLFxuICAgICAgICAgIF9fcHJvdG9fXzogUHJldmlvdXNNYXAucHJvdG90eXBlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlucHV0cy5wdXNoKGlucHV0SHlkcmF0ZWQpXG4gICAgfVxuICB9XG4gIGlmIChkZWZhdWx0cy5ub2Rlcykge1xuICAgIGRlZmF1bHRzLm5vZGVzID0ganNvbi5ub2Rlcy5tYXAobiA9PiBmcm9tSlNPTihuLCBpbnB1dHMpKVxuICB9XG4gIGlmIChkZWZhdWx0cy5zb3VyY2UpIHtcbiAgICBsZXQgeyBpbnB1dElkLCAuLi5zb3VyY2UgfSA9IGRlZmF1bHRzLnNvdXJjZVxuICAgIGRlZmF1bHRzLnNvdXJjZSA9IHNvdXJjZVxuICAgIGlmIChpbnB1dElkICE9IG51bGwpIHtcbiAgICAgIGRlZmF1bHRzLnNvdXJjZS5pbnB1dCA9IGlucHV0c1tpbnB1dElkXVxuICAgIH1cbiAgfVxuICBpZiAoZGVmYXVsdHMudHlwZSA9PT0gJ3Jvb3QnKSB7XG4gICAgcmV0dXJuIG5ldyBSb290KGRlZmF1bHRzKVxuICB9IGVsc2UgaWYgKGRlZmF1bHRzLnR5cGUgPT09ICdkZWNsJykge1xuICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb24oZGVmYXVsdHMpXG4gIH0gZWxzZSBpZiAoZGVmYXVsdHMudHlwZSA9PT0gJ3J1bGUnKSB7XG4gICAgcmV0dXJuIG5ldyBSdWxlKGRlZmF1bHRzKVxuICB9IGVsc2UgaWYgKGRlZmF1bHRzLnR5cGUgPT09ICdjb21tZW50Jykge1xuICAgIHJldHVybiBuZXcgQ29tbWVudChkZWZhdWx0cylcbiAgfSBlbHNlIGlmIChkZWZhdWx0cy50eXBlID09PSAnYXRydWxlJykge1xuICAgIHJldHVybiBuZXcgQXRSdWxlKGRlZmF1bHRzKVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBub2RlIHR5cGU6ICcgKyBqc29uLnR5cGUpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmcm9tSlNPTlxuZnJvbUpTT04uZGVmYXVsdCA9IGZyb21KU09OXG4iXSwibmFtZXMiOlsiRGVjbGFyYXRpb24iLCJyZXF1aXJlIiwiUHJldmlvdXNNYXAiLCJDb21tZW50IiwiQXRSdWxlIiwiSW5wdXQiLCJSb290IiwiUnVsZSIsImZyb21KU09OIiwianNvbiIsImlucHV0cyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIm4iLCJvd25JbnB1dHMiLCJkZWZhdWx0cyIsImlucHV0IiwiaW5wdXRIeWRyYXRlZCIsIl9fcHJvdG9fXyIsInByb3RvdHlwZSIsInB1c2giLCJub2RlcyIsInNvdXJjZSIsImlucHV0SWQiLCJ0eXBlIiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/fromJSON.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/input.js":
/*!*******************************************!*\
  !*** ./node_modules/postcss/lib/input.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"(ssr)/./node_modules/source-map-js/source-map.js\");\nlet { fileURLToPath, pathToFileURL } = __webpack_require__(/*! url */ \"url\");\nlet { isAbsolute, resolve } = __webpack_require__(/*! path */ \"path\");\nlet { nanoid } = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/./node_modules/nanoid/non-secure/index.cjs\");\nlet terminalHighlight = __webpack_require__(/*! ./terminal-highlight */ \"(ssr)/./node_modules/postcss/lib/terminal-highlight.js\");\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"(ssr)/./node_modules/postcss/lib/css-syntax-error.js\");\nlet PreviousMap = __webpack_require__(/*! ./previous-map */ \"(ssr)/./node_modules/postcss/lib/previous-map.js\");\nlet fromOffsetCache = Symbol(\"fromOffsetCache\");\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);\nlet pathAvailable = Boolean(resolve && isAbsolute);\nclass Input {\n    constructor(css, opts = {}){\n        if (css === null || typeof css === \"undefined\" || typeof css === \"object\" && !css.toString) {\n            throw new Error(`PostCSS received ${css} instead of CSS string`);\n        }\n        this.css = css.toString();\n        if (this.css[0] === \"\\uFEFF\" || this.css[0] === \"￾\") {\n            this.hasBOM = true;\n            this.css = this.css.slice(1);\n        } else {\n            this.hasBOM = false;\n        }\n        if (opts.from) {\n            if (!pathAvailable || /^\\w+:\\/\\//.test(opts.from) || isAbsolute(opts.from)) {\n                this.file = opts.from;\n            } else {\n                this.file = resolve(opts.from);\n            }\n        }\n        if (pathAvailable && sourceMapAvailable) {\n            let map = new PreviousMap(this.css, opts);\n            if (map.text) {\n                this.map = map;\n                let file = map.consumer().file;\n                if (!this.file && file) this.file = this.mapResolve(file);\n            }\n        }\n        if (!this.file) {\n            this.id = \"<input css \" + nanoid(6) + \">\";\n        }\n        if (this.map) this.map.file = this.from;\n    }\n    error(message, line, column, opts = {}) {\n        let result, endLine, endColumn;\n        if (line && typeof line === \"object\") {\n            let start = line;\n            let end = column;\n            if (typeof start.offset === \"number\") {\n                let pos = this.fromOffset(start.offset);\n                line = pos.line;\n                column = pos.col;\n            } else {\n                line = start.line;\n                column = start.column;\n            }\n            if (typeof end.offset === \"number\") {\n                let pos = this.fromOffset(end.offset);\n                endLine = pos.line;\n                endColumn = pos.col;\n            } else {\n                endLine = end.line;\n                endColumn = end.column;\n            }\n        } else if (!column) {\n            let pos = this.fromOffset(line);\n            line = pos.line;\n            column = pos.col;\n        }\n        let origin = this.origin(line, column, endLine, endColumn);\n        if (origin) {\n            result = new CssSyntaxError(message, origin.endLine === undefined ? origin.line : {\n                column: origin.column,\n                line: origin.line\n            }, origin.endLine === undefined ? origin.column : {\n                column: origin.endColumn,\n                line: origin.endLine\n            }, origin.source, origin.file, opts.plugin);\n        } else {\n            result = new CssSyntaxError(message, endLine === undefined ? line : {\n                column,\n                line\n            }, endLine === undefined ? column : {\n                column: endColumn,\n                line: endLine\n            }, this.css, this.file, opts.plugin);\n        }\n        result.input = {\n            column,\n            endColumn,\n            endLine,\n            line,\n            source: this.css\n        };\n        if (this.file) {\n            if (pathToFileURL) {\n                result.input.url = pathToFileURL(this.file).toString();\n            }\n            result.input.file = this.file;\n        }\n        return result;\n    }\n    fromOffset(offset) {\n        let lastLine, lineToIndex;\n        if (!this[fromOffsetCache]) {\n            let lines = this.css.split(\"\\n\");\n            lineToIndex = new Array(lines.length);\n            let prevIndex = 0;\n            for(let i = 0, l = lines.length; i < l; i++){\n                lineToIndex[i] = prevIndex;\n                prevIndex += lines[i].length + 1;\n            }\n            this[fromOffsetCache] = lineToIndex;\n        } else {\n            lineToIndex = this[fromOffsetCache];\n        }\n        lastLine = lineToIndex[lineToIndex.length - 1];\n        let min = 0;\n        if (offset >= lastLine) {\n            min = lineToIndex.length - 1;\n        } else {\n            let max = lineToIndex.length - 2;\n            let mid;\n            while(min < max){\n                mid = min + (max - min >> 1);\n                if (offset < lineToIndex[mid]) {\n                    max = mid - 1;\n                } else if (offset >= lineToIndex[mid + 1]) {\n                    min = mid + 1;\n                } else {\n                    min = mid;\n                    break;\n                }\n            }\n        }\n        return {\n            col: offset - lineToIndex[min] + 1,\n            line: min + 1\n        };\n    }\n    mapResolve(file) {\n        if (/^\\w+:\\/\\//.test(file)) {\n            return file;\n        }\n        return resolve(this.map.consumer().sourceRoot || this.map.root || \".\", file);\n    }\n    origin(line, column, endLine, endColumn) {\n        if (!this.map) return false;\n        let consumer = this.map.consumer();\n        let from = consumer.originalPositionFor({\n            column,\n            line\n        });\n        if (!from.source) return false;\n        let to;\n        if (typeof endLine === \"number\") {\n            to = consumer.originalPositionFor({\n                column: endColumn,\n                line: endLine\n            });\n        }\n        let fromUrl;\n        if (isAbsolute(from.source)) {\n            fromUrl = pathToFileURL(from.source);\n        } else {\n            fromUrl = new URL(from.source, this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile));\n        }\n        let result = {\n            column: from.column,\n            endColumn: to && to.column,\n            endLine: to && to.line,\n            line: from.line,\n            url: fromUrl.toString()\n        };\n        if (fromUrl.protocol === \"file:\") {\n            if (fileURLToPath) {\n                result.file = fileURLToPath(fromUrl);\n            } else {\n                /* c8 ignore next 2 */ throw new Error(`file: protocol is not available in this PostCSS build`);\n            }\n        }\n        let source = consumer.sourceContentFor(from.source);\n        if (source) result.source = source;\n        return result;\n    }\n    toJSON() {\n        let json = {};\n        for (let name of [\n            \"hasBOM\",\n            \"css\",\n            \"file\",\n            \"id\"\n        ]){\n            if (this[name] != null) {\n                json[name] = this[name];\n            }\n        }\n        if (this.map) {\n            json.map = {\n                ...this.map\n            };\n            if (json.map.consumerCache) {\n                json.map.consumerCache = undefined;\n            }\n        }\n        return json;\n    }\n    get from() {\n        return this.file || this.id;\n    }\n}\nmodule.exports = Input;\nInput.default = Input;\nif (terminalHighlight && terminalHighlight.registerInput) {\n    terminalHighlight.registerInput(Input);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvaW5wdXQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJLEVBQUVBLGlCQUFpQixFQUFFQyxrQkFBa0IsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUN4RCxJQUFJLEVBQUVDLGFBQWEsRUFBRUMsYUFBYSxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBQy9DLElBQUksRUFBRUcsVUFBVSxFQUFFQyxPQUFPLEVBQUUsR0FBR0osbUJBQU9BLENBQUM7QUFDdEMsSUFBSSxFQUFFSyxNQUFNLEVBQUUsR0FBR0wsbUJBQU9BLENBQUM7QUFFekIsSUFBSU0sb0JBQW9CTixtQkFBT0EsQ0FBQztBQUNoQyxJQUFJTyxpQkFBaUJQLG1CQUFPQSxDQUFDO0FBQzdCLElBQUlRLGNBQWNSLG1CQUFPQSxDQUFDO0FBRTFCLElBQUlTLGtCQUFrQkMsT0FBTztBQUU3QixJQUFJQyxxQkFBcUJDLFFBQVFkLHFCQUFxQkM7QUFDdEQsSUFBSWMsZ0JBQWdCRCxRQUFRUixXQUFXRDtBQUV2QyxNQUFNVztJQUNKQyxZQUFZQyxHQUFHLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLENBQUU7UUFDMUIsSUFDRUQsUUFBUSxRQUNSLE9BQU9BLFFBQVEsZUFDZCxPQUFPQSxRQUFRLFlBQVksQ0FBQ0EsSUFBSUUsUUFBUSxFQUN6QztZQUNBLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFSCxJQUFJLHNCQUFzQixDQUFDO1FBQ2pFO1FBRUEsSUFBSSxDQUFDQSxHQUFHLEdBQUdBLElBQUlFLFFBQVE7UUFFdkIsSUFBSSxJQUFJLENBQUNGLEdBQUcsQ0FBQyxFQUFFLEtBQUssWUFBWSxJQUFJLENBQUNBLEdBQUcsQ0FBQyxFQUFFLEtBQUssS0FBVTtZQUN4RCxJQUFJLENBQUNJLE1BQU0sR0FBRztZQUNkLElBQUksQ0FBQ0osR0FBRyxHQUFHLElBQUksQ0FBQ0EsR0FBRyxDQUFDSyxLQUFLLENBQUM7UUFDNUIsT0FBTztZQUNMLElBQUksQ0FBQ0QsTUFBTSxHQUFHO1FBQ2hCO1FBRUEsSUFBSUgsS0FBS0ssSUFBSSxFQUFFO1lBQ2IsSUFDRSxDQUFDVCxpQkFDRCxZQUFZVSxJQUFJLENBQUNOLEtBQUtLLElBQUksS0FDMUJuQixXQUFXYyxLQUFLSyxJQUFJLEdBQ3BCO2dCQUNBLElBQUksQ0FBQ0UsSUFBSSxHQUFHUCxLQUFLSyxJQUFJO1lBQ3ZCLE9BQU87Z0JBQ0wsSUFBSSxDQUFDRSxJQUFJLEdBQUdwQixRQUFRYSxLQUFLSyxJQUFJO1lBQy9CO1FBQ0Y7UUFFQSxJQUFJVCxpQkFBaUJGLG9CQUFvQjtZQUN2QyxJQUFJYyxNQUFNLElBQUlqQixZQUFZLElBQUksQ0FBQ1EsR0FBRyxFQUFFQztZQUNwQyxJQUFJUSxJQUFJQyxJQUFJLEVBQUU7Z0JBQ1osSUFBSSxDQUFDRCxHQUFHLEdBQUdBO2dCQUNYLElBQUlELE9BQU9DLElBQUlFLFFBQVEsR0FBR0gsSUFBSTtnQkFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQ0EsSUFBSSxJQUFJQSxNQUFNLElBQUksQ0FBQ0EsSUFBSSxHQUFHLElBQUksQ0FBQ0ksVUFBVSxDQUFDSjtZQUN0RDtRQUNGO1FBRUEsSUFBSSxDQUFDLElBQUksQ0FBQ0EsSUFBSSxFQUFFO1lBQ2QsSUFBSSxDQUFDSyxFQUFFLEdBQUcsZ0JBQWdCeEIsT0FBTyxLQUFLO1FBQ3hDO1FBQ0EsSUFBSSxJQUFJLENBQUNvQixHQUFHLEVBQUUsSUFBSSxDQUFDQSxHQUFHLENBQUNELElBQUksR0FBRyxJQUFJLENBQUNGLElBQUk7SUFDekM7SUFFQVEsTUFBTUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRWhCLE9BQU8sQ0FBQyxDQUFDLEVBQUU7UUFDdEMsSUFBSWlCLFFBQVFDLFNBQVNDO1FBRXJCLElBQUlKLFFBQVEsT0FBT0EsU0FBUyxVQUFVO1lBQ3BDLElBQUlLLFFBQVFMO1lBQ1osSUFBSU0sTUFBTUw7WUFDVixJQUFJLE9BQU9JLE1BQU1FLE1BQU0sS0FBSyxVQUFVO2dCQUNwQyxJQUFJQyxNQUFNLElBQUksQ0FBQ0MsVUFBVSxDQUFDSixNQUFNRSxNQUFNO2dCQUN0Q1AsT0FBT1EsSUFBSVIsSUFBSTtnQkFDZkMsU0FBU08sSUFBSUUsR0FBRztZQUNsQixPQUFPO2dCQUNMVixPQUFPSyxNQUFNTCxJQUFJO2dCQUNqQkMsU0FBU0ksTUFBTUosTUFBTTtZQUN2QjtZQUNBLElBQUksT0FBT0ssSUFBSUMsTUFBTSxLQUFLLFVBQVU7Z0JBQ2xDLElBQUlDLE1BQU0sSUFBSSxDQUFDQyxVQUFVLENBQUNILElBQUlDLE1BQU07Z0JBQ3BDSixVQUFVSyxJQUFJUixJQUFJO2dCQUNsQkksWUFBWUksSUFBSUUsR0FBRztZQUNyQixPQUFPO2dCQUNMUCxVQUFVRyxJQUFJTixJQUFJO2dCQUNsQkksWUFBWUUsSUFBSUwsTUFBTTtZQUN4QjtRQUNGLE9BQU8sSUFBSSxDQUFDQSxRQUFRO1lBQ2xCLElBQUlPLE1BQU0sSUFBSSxDQUFDQyxVQUFVLENBQUNUO1lBQzFCQSxPQUFPUSxJQUFJUixJQUFJO1lBQ2ZDLFNBQVNPLElBQUlFLEdBQUc7UUFDbEI7UUFFQSxJQUFJQyxTQUFTLElBQUksQ0FBQ0EsTUFBTSxDQUFDWCxNQUFNQyxRQUFRRSxTQUFTQztRQUNoRCxJQUFJTyxRQUFRO1lBQ1ZULFNBQVMsSUFBSTNCLGVBQ1h3QixTQUNBWSxPQUFPUixPQUFPLEtBQUtTLFlBQ2ZELE9BQU9YLElBQUksR0FDWDtnQkFBRUMsUUFBUVUsT0FBT1YsTUFBTTtnQkFBRUQsTUFBTVcsT0FBT1gsSUFBSTtZQUFDLEdBQy9DVyxPQUFPUixPQUFPLEtBQUtTLFlBQ2ZELE9BQU9WLE1BQU0sR0FDYjtnQkFBRUEsUUFBUVUsT0FBT1AsU0FBUztnQkFBRUosTUFBTVcsT0FBT1IsT0FBTztZQUFDLEdBQ3JEUSxPQUFPRSxNQUFNLEVBQ2JGLE9BQU9uQixJQUFJLEVBQ1hQLEtBQUs2QixNQUFNO1FBRWYsT0FBTztZQUNMWixTQUFTLElBQUkzQixlQUNYd0IsU0FDQUksWUFBWVMsWUFBWVosT0FBTztnQkFBRUM7Z0JBQVFEO1lBQUssR0FDOUNHLFlBQVlTLFlBQVlYLFNBQVM7Z0JBQUVBLFFBQVFHO2dCQUFXSixNQUFNRztZQUFRLEdBQ3BFLElBQUksQ0FBQ25CLEdBQUcsRUFDUixJQUFJLENBQUNRLElBQUksRUFDVFAsS0FBSzZCLE1BQU07UUFFZjtRQUVBWixPQUFPYSxLQUFLLEdBQUc7WUFBRWQ7WUFBUUc7WUFBV0Q7WUFBU0g7WUFBTWEsUUFBUSxJQUFJLENBQUM3QixHQUFHO1FBQUM7UUFDcEUsSUFBSSxJQUFJLENBQUNRLElBQUksRUFBRTtZQUNiLElBQUl0QixlQUFlO2dCQUNqQmdDLE9BQU9hLEtBQUssQ0FBQ0MsR0FBRyxHQUFHOUMsY0FBYyxJQUFJLENBQUNzQixJQUFJLEVBQUVOLFFBQVE7WUFDdEQ7WUFDQWdCLE9BQU9hLEtBQUssQ0FBQ3ZCLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUk7UUFDL0I7UUFFQSxPQUFPVTtJQUNUO0lBRUFPLFdBQVdGLE1BQU0sRUFBRTtRQUNqQixJQUFJVSxVQUFVQztRQUNkLElBQUksQ0FBQyxJQUFJLENBQUN6QyxnQkFBZ0IsRUFBRTtZQUMxQixJQUFJMEMsUUFBUSxJQUFJLENBQUNuQyxHQUFHLENBQUNvQyxLQUFLLENBQUM7WUFDM0JGLGNBQWMsSUFBSUcsTUFBTUYsTUFBTUcsTUFBTTtZQUNwQyxJQUFJQyxZQUFZO1lBRWhCLElBQUssSUFBSUMsSUFBSSxHQUFHQyxJQUFJTixNQUFNRyxNQUFNLEVBQUVFLElBQUlDLEdBQUdELElBQUs7Z0JBQzVDTixXQUFXLENBQUNNLEVBQUUsR0FBR0Q7Z0JBQ2pCQSxhQUFhSixLQUFLLENBQUNLLEVBQUUsQ0FBQ0YsTUFBTSxHQUFHO1lBQ2pDO1lBRUEsSUFBSSxDQUFDN0MsZ0JBQWdCLEdBQUd5QztRQUMxQixPQUFPO1lBQ0xBLGNBQWMsSUFBSSxDQUFDekMsZ0JBQWdCO1FBQ3JDO1FBQ0F3QyxXQUFXQyxXQUFXLENBQUNBLFlBQVlJLE1BQU0sR0FBRyxFQUFFO1FBRTlDLElBQUlJLE1BQU07UUFDVixJQUFJbkIsVUFBVVUsVUFBVTtZQUN0QlMsTUFBTVIsWUFBWUksTUFBTSxHQUFHO1FBQzdCLE9BQU87WUFDTCxJQUFJSyxNQUFNVCxZQUFZSSxNQUFNLEdBQUc7WUFDL0IsSUFBSU07WUFDSixNQUFPRixNQUFNQyxJQUFLO2dCQUNoQkMsTUFBTUYsTUFBTyxPQUFPQSxPQUFRO2dCQUM1QixJQUFJbkIsU0FBU1csV0FBVyxDQUFDVSxJQUFJLEVBQUU7b0JBQzdCRCxNQUFNQyxNQUFNO2dCQUNkLE9BQU8sSUFBSXJCLFVBQVVXLFdBQVcsQ0FBQ1UsTUFBTSxFQUFFLEVBQUU7b0JBQ3pDRixNQUFNRSxNQUFNO2dCQUNkLE9BQU87b0JBQ0xGLE1BQU1FO29CQUNOO2dCQUNGO1lBQ0Y7UUFDRjtRQUNBLE9BQU87WUFDTGxCLEtBQUtILFNBQVNXLFdBQVcsQ0FBQ1EsSUFBSSxHQUFHO1lBQ2pDMUIsTUFBTTBCLE1BQU07UUFDZDtJQUNGO0lBRUE5QixXQUFXSixJQUFJLEVBQUU7UUFDZixJQUFJLFlBQVlELElBQUksQ0FBQ0MsT0FBTztZQUMxQixPQUFPQTtRQUNUO1FBQ0EsT0FBT3BCLFFBQVEsSUFBSSxDQUFDcUIsR0FBRyxDQUFDRSxRQUFRLEdBQUdrQyxVQUFVLElBQUksSUFBSSxDQUFDcEMsR0FBRyxDQUFDcUMsSUFBSSxJQUFJLEtBQUt0QztJQUN6RTtJQUVBbUIsT0FBT1gsSUFBSSxFQUFFQyxNQUFNLEVBQUVFLE9BQU8sRUFBRUMsU0FBUyxFQUFFO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUNYLEdBQUcsRUFBRSxPQUFPO1FBQ3RCLElBQUlFLFdBQVcsSUFBSSxDQUFDRixHQUFHLENBQUNFLFFBQVE7UUFFaEMsSUFBSUwsT0FBT0ssU0FBU29DLG1CQUFtQixDQUFDO1lBQUU5QjtZQUFRRDtRQUFLO1FBQ3ZELElBQUksQ0FBQ1YsS0FBS3VCLE1BQU0sRUFBRSxPQUFPO1FBRXpCLElBQUltQjtRQUNKLElBQUksT0FBTzdCLFlBQVksVUFBVTtZQUMvQjZCLEtBQUtyQyxTQUFTb0MsbUJBQW1CLENBQUM7Z0JBQUU5QixRQUFRRztnQkFBV0osTUFBTUc7WUFBUTtRQUN2RTtRQUVBLElBQUk4QjtRQUVKLElBQUk5RCxXQUFXbUIsS0FBS3VCLE1BQU0sR0FBRztZQUMzQm9CLFVBQVUvRCxjQUFjb0IsS0FBS3VCLE1BQU07UUFDckMsT0FBTztZQUNMb0IsVUFBVSxJQUFJQyxJQUNaNUMsS0FBS3VCLE1BQU0sRUFDWCxJQUFJLENBQUNwQixHQUFHLENBQUNFLFFBQVEsR0FBR2tDLFVBQVUsSUFBSTNELGNBQWMsSUFBSSxDQUFDdUIsR0FBRyxDQUFDMEMsT0FBTztRQUVwRTtRQUVBLElBQUlqQyxTQUFTO1lBQ1hELFFBQVFYLEtBQUtXLE1BQU07WUFDbkJHLFdBQVc0QixNQUFNQSxHQUFHL0IsTUFBTTtZQUMxQkUsU0FBUzZCLE1BQU1BLEdBQUdoQyxJQUFJO1lBQ3RCQSxNQUFNVixLQUFLVSxJQUFJO1lBQ2ZnQixLQUFLaUIsUUFBUS9DLFFBQVE7UUFDdkI7UUFFQSxJQUFJK0MsUUFBUUcsUUFBUSxLQUFLLFNBQVM7WUFDaEMsSUFBSW5FLGVBQWU7Z0JBQ2pCaUMsT0FBT1YsSUFBSSxHQUFHdkIsY0FBY2dFO1lBQzlCLE9BQU87Z0JBQ0wsb0JBQW9CLEdBQ3BCLE1BQU0sSUFBSTlDLE1BQU0sQ0FBQyxxREFBcUQsQ0FBQztZQUN6RTtRQUNGO1FBRUEsSUFBSTBCLFNBQVNsQixTQUFTMEMsZ0JBQWdCLENBQUMvQyxLQUFLdUIsTUFBTTtRQUNsRCxJQUFJQSxRQUFRWCxPQUFPVyxNQUFNLEdBQUdBO1FBRTVCLE9BQU9YO0lBQ1Q7SUFFQW9DLFNBQVM7UUFDUCxJQUFJQyxPQUFPLENBQUM7UUFDWixLQUFLLElBQUlDLFFBQVE7WUFBQztZQUFVO1lBQU87WUFBUTtTQUFLLENBQUU7WUFDaEQsSUFBSSxJQUFJLENBQUNBLEtBQUssSUFBSSxNQUFNO2dCQUN0QkQsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDQSxLQUFLO1lBQ3pCO1FBQ0Y7UUFDQSxJQUFJLElBQUksQ0FBQy9DLEdBQUcsRUFBRTtZQUNaOEMsS0FBSzlDLEdBQUcsR0FBRztnQkFBRSxHQUFHLElBQUksQ0FBQ0EsR0FBRztZQUFDO1lBQ3pCLElBQUk4QyxLQUFLOUMsR0FBRyxDQUFDZ0QsYUFBYSxFQUFFO2dCQUMxQkYsS0FBSzlDLEdBQUcsQ0FBQ2dELGFBQWEsR0FBRzdCO1lBQzNCO1FBQ0Y7UUFDQSxPQUFPMkI7SUFDVDtJQUVBLElBQUlqRCxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUNFLElBQUksSUFBSSxJQUFJLENBQUNLLEVBQUU7SUFDN0I7QUFDRjtBQUVBNkMsT0FBT0MsT0FBTyxHQUFHN0Q7QUFDakJBLE1BQU04RCxPQUFPLEdBQUc5RDtBQUVoQixJQUFJUixxQkFBcUJBLGtCQUFrQnVFLGFBQWEsRUFBRTtJQUN4RHZFLGtCQUFrQnVFLGFBQWEsQ0FBQy9EO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2lucHV0LmpzPzE4N2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCB7IFNvdXJjZU1hcENvbnN1bWVyLCBTb3VyY2VNYXBHZW5lcmF0b3IgfSA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAtanMnKVxubGV0IHsgZmlsZVVSTFRvUGF0aCwgcGF0aFRvRmlsZVVSTCB9ID0gcmVxdWlyZSgndXJsJylcbmxldCB7IGlzQWJzb2x1dGUsIHJlc29sdmUgfSA9IHJlcXVpcmUoJ3BhdGgnKVxubGV0IHsgbmFub2lkIH0gPSByZXF1aXJlKCduYW5vaWQvbm9uLXNlY3VyZScpXG5cbmxldCB0ZXJtaW5hbEhpZ2hsaWdodCA9IHJlcXVpcmUoJy4vdGVybWluYWwtaGlnaGxpZ2h0JylcbmxldCBDc3NTeW50YXhFcnJvciA9IHJlcXVpcmUoJy4vY3NzLXN5bnRheC1lcnJvcicpXG5sZXQgUHJldmlvdXNNYXAgPSByZXF1aXJlKCcuL3ByZXZpb3VzLW1hcCcpXG5cbmxldCBmcm9tT2Zmc2V0Q2FjaGUgPSBTeW1ib2woJ2Zyb21PZmZzZXRDYWNoZScpXG5cbmxldCBzb3VyY2VNYXBBdmFpbGFibGUgPSBCb29sZWFuKFNvdXJjZU1hcENvbnN1bWVyICYmIFNvdXJjZU1hcEdlbmVyYXRvcilcbmxldCBwYXRoQXZhaWxhYmxlID0gQm9vbGVhbihyZXNvbHZlICYmIGlzQWJzb2x1dGUpXG5cbmNsYXNzIElucHV0IHtcbiAgY29uc3RydWN0b3IoY3NzLCBvcHRzID0ge30pIHtcbiAgICBpZiAoXG4gICAgICBjc3MgPT09IG51bGwgfHxcbiAgICAgIHR5cGVvZiBjc3MgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAodHlwZW9mIGNzcyA9PT0gJ29iamVjdCcgJiYgIWNzcy50b1N0cmluZylcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUG9zdENTUyByZWNlaXZlZCAke2Nzc30gaW5zdGVhZCBvZiBDU1Mgc3RyaW5nYClcbiAgICB9XG5cbiAgICB0aGlzLmNzcyA9IGNzcy50b1N0cmluZygpXG5cbiAgICBpZiAodGhpcy5jc3NbMF0gPT09ICdcXHVGRUZGJyB8fCB0aGlzLmNzc1swXSA9PT0gJ1xcdUZGRkUnKSB7XG4gICAgICB0aGlzLmhhc0JPTSA9IHRydWVcbiAgICAgIHRoaXMuY3NzID0gdGhpcy5jc3Muc2xpY2UoMSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oYXNCT00gPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChvcHRzLmZyb20pIHtcbiAgICAgIGlmIChcbiAgICAgICAgIXBhdGhBdmFpbGFibGUgfHxcbiAgICAgICAgL15cXHcrOlxcL1xcLy8udGVzdChvcHRzLmZyb20pIHx8XG4gICAgICAgIGlzQWJzb2x1dGUob3B0cy5mcm9tKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZmlsZSA9IG9wdHMuZnJvbVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5maWxlID0gcmVzb2x2ZShvcHRzLmZyb20pXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhdGhBdmFpbGFibGUgJiYgc291cmNlTWFwQXZhaWxhYmxlKSB7XG4gICAgICBsZXQgbWFwID0gbmV3IFByZXZpb3VzTWFwKHRoaXMuY3NzLCBvcHRzKVxuICAgICAgaWYgKG1hcC50ZXh0KSB7XG4gICAgICAgIHRoaXMubWFwID0gbWFwXG4gICAgICAgIGxldCBmaWxlID0gbWFwLmNvbnN1bWVyKCkuZmlsZVxuICAgICAgICBpZiAoIXRoaXMuZmlsZSAmJiBmaWxlKSB0aGlzLmZpbGUgPSB0aGlzLm1hcFJlc29sdmUoZmlsZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZmlsZSkge1xuICAgICAgdGhpcy5pZCA9ICc8aW5wdXQgY3NzICcgKyBuYW5vaWQoNikgKyAnPidcbiAgICB9XG4gICAgaWYgKHRoaXMubWFwKSB0aGlzLm1hcC5maWxlID0gdGhpcy5mcm9tXG4gIH1cblxuICBlcnJvcihtZXNzYWdlLCBsaW5lLCBjb2x1bW4sIG9wdHMgPSB7fSkge1xuICAgIGxldCByZXN1bHQsIGVuZExpbmUsIGVuZENvbHVtblxuXG4gICAgaWYgKGxpbmUgJiYgdHlwZW9mIGxpbmUgPT09ICdvYmplY3QnKSB7XG4gICAgICBsZXQgc3RhcnQgPSBsaW5lXG4gICAgICBsZXQgZW5kID0gY29sdW1uXG4gICAgICBpZiAodHlwZW9mIHN0YXJ0Lm9mZnNldCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMuZnJvbU9mZnNldChzdGFydC5vZmZzZXQpXG4gICAgICAgIGxpbmUgPSBwb3MubGluZVxuICAgICAgICBjb2x1bW4gPSBwb3MuY29sXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lID0gc3RhcnQubGluZVxuICAgICAgICBjb2x1bW4gPSBzdGFydC5jb2x1bW5cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZW5kLm9mZnNldCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMuZnJvbU9mZnNldChlbmQub2Zmc2V0KVxuICAgICAgICBlbmRMaW5lID0gcG9zLmxpbmVcbiAgICAgICAgZW5kQ29sdW1uID0gcG9zLmNvbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kTGluZSA9IGVuZC5saW5lXG4gICAgICAgIGVuZENvbHVtbiA9IGVuZC5jb2x1bW5cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFjb2x1bW4pIHtcbiAgICAgIGxldCBwb3MgPSB0aGlzLmZyb21PZmZzZXQobGluZSlcbiAgICAgIGxpbmUgPSBwb3MubGluZVxuICAgICAgY29sdW1uID0gcG9zLmNvbFxuICAgIH1cblxuICAgIGxldCBvcmlnaW4gPSB0aGlzLm9yaWdpbihsaW5lLCBjb2x1bW4sIGVuZExpbmUsIGVuZENvbHVtbilcbiAgICBpZiAob3JpZ2luKSB7XG4gICAgICByZXN1bHQgPSBuZXcgQ3NzU3ludGF4RXJyb3IoXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIG9yaWdpbi5lbmRMaW5lID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IG9yaWdpbi5saW5lXG4gICAgICAgICAgOiB7IGNvbHVtbjogb3JpZ2luLmNvbHVtbiwgbGluZTogb3JpZ2luLmxpbmUgfSxcbiAgICAgICAgb3JpZ2luLmVuZExpbmUgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gb3JpZ2luLmNvbHVtblxuICAgICAgICAgIDogeyBjb2x1bW46IG9yaWdpbi5lbmRDb2x1bW4sIGxpbmU6IG9yaWdpbi5lbmRMaW5lIH0sXG4gICAgICAgIG9yaWdpbi5zb3VyY2UsXG4gICAgICAgIG9yaWdpbi5maWxlLFxuICAgICAgICBvcHRzLnBsdWdpblxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBuZXcgQ3NzU3ludGF4RXJyb3IoXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIGVuZExpbmUgPT09IHVuZGVmaW5lZCA/IGxpbmUgOiB7IGNvbHVtbiwgbGluZSB9LFxuICAgICAgICBlbmRMaW5lID09PSB1bmRlZmluZWQgPyBjb2x1bW4gOiB7IGNvbHVtbjogZW5kQ29sdW1uLCBsaW5lOiBlbmRMaW5lIH0sXG4gICAgICAgIHRoaXMuY3NzLFxuICAgICAgICB0aGlzLmZpbGUsXG4gICAgICAgIG9wdHMucGx1Z2luXG4gICAgICApXG4gICAgfVxuXG4gICAgcmVzdWx0LmlucHV0ID0geyBjb2x1bW4sIGVuZENvbHVtbiwgZW5kTGluZSwgbGluZSwgc291cmNlOiB0aGlzLmNzcyB9XG4gICAgaWYgKHRoaXMuZmlsZSkge1xuICAgICAgaWYgKHBhdGhUb0ZpbGVVUkwpIHtcbiAgICAgICAgcmVzdWx0LmlucHV0LnVybCA9IHBhdGhUb0ZpbGVVUkwodGhpcy5maWxlKS50b1N0cmluZygpXG4gICAgICB9XG4gICAgICByZXN1bHQuaW5wdXQuZmlsZSA9IHRoaXMuZmlsZVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGZyb21PZmZzZXQob2Zmc2V0KSB7XG4gICAgbGV0IGxhc3RMaW5lLCBsaW5lVG9JbmRleFxuICAgIGlmICghdGhpc1tmcm9tT2Zmc2V0Q2FjaGVdKSB7XG4gICAgICBsZXQgbGluZXMgPSB0aGlzLmNzcy5zcGxpdCgnXFxuJylcbiAgICAgIGxpbmVUb0luZGV4ID0gbmV3IEFycmF5KGxpbmVzLmxlbmd0aClcbiAgICAgIGxldCBwcmV2SW5kZXggPSAwXG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGxpbmVUb0luZGV4W2ldID0gcHJldkluZGV4XG4gICAgICAgIHByZXZJbmRleCArPSBsaW5lc1tpXS5sZW5ndGggKyAxXG4gICAgICB9XG5cbiAgICAgIHRoaXNbZnJvbU9mZnNldENhY2hlXSA9IGxpbmVUb0luZGV4XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmVUb0luZGV4ID0gdGhpc1tmcm9tT2Zmc2V0Q2FjaGVdXG4gICAgfVxuICAgIGxhc3RMaW5lID0gbGluZVRvSW5kZXhbbGluZVRvSW5kZXgubGVuZ3RoIC0gMV1cblxuICAgIGxldCBtaW4gPSAwXG4gICAgaWYgKG9mZnNldCA+PSBsYXN0TGluZSkge1xuICAgICAgbWluID0gbGluZVRvSW5kZXgubGVuZ3RoIC0gMVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbWF4ID0gbGluZVRvSW5kZXgubGVuZ3RoIC0gMlxuICAgICAgbGV0IG1pZFxuICAgICAgd2hpbGUgKG1pbiA8IG1heCkge1xuICAgICAgICBtaWQgPSBtaW4gKyAoKG1heCAtIG1pbikgPj4gMSlcbiAgICAgICAgaWYgKG9mZnNldCA8IGxpbmVUb0luZGV4W21pZF0pIHtcbiAgICAgICAgICBtYXggPSBtaWQgLSAxXG4gICAgICAgIH0gZWxzZSBpZiAob2Zmc2V0ID49IGxpbmVUb0luZGV4W21pZCArIDFdKSB7XG4gICAgICAgICAgbWluID0gbWlkICsgMVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1pbiA9IG1pZFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbDogb2Zmc2V0IC0gbGluZVRvSW5kZXhbbWluXSArIDEsXG4gICAgICBsaW5lOiBtaW4gKyAxXG4gICAgfVxuICB9XG5cbiAgbWFwUmVzb2x2ZShmaWxlKSB7XG4gICAgaWYgKC9eXFx3KzpcXC9cXC8vLnRlc3QoZmlsZSkpIHtcbiAgICAgIHJldHVybiBmaWxlXG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlKHRoaXMubWFwLmNvbnN1bWVyKCkuc291cmNlUm9vdCB8fCB0aGlzLm1hcC5yb290IHx8ICcuJywgZmlsZSlcbiAgfVxuXG4gIG9yaWdpbihsaW5lLCBjb2x1bW4sIGVuZExpbmUsIGVuZENvbHVtbikge1xuICAgIGlmICghdGhpcy5tYXApIHJldHVybiBmYWxzZVxuICAgIGxldCBjb25zdW1lciA9IHRoaXMubWFwLmNvbnN1bWVyKClcblxuICAgIGxldCBmcm9tID0gY29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7IGNvbHVtbiwgbGluZSB9KVxuICAgIGlmICghZnJvbS5zb3VyY2UpIHJldHVybiBmYWxzZVxuXG4gICAgbGV0IHRvXG4gICAgaWYgKHR5cGVvZiBlbmRMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgdG8gPSBjb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHsgY29sdW1uOiBlbmRDb2x1bW4sIGxpbmU6IGVuZExpbmUgfSlcbiAgICB9XG5cbiAgICBsZXQgZnJvbVVybFxuXG4gICAgaWYgKGlzQWJzb2x1dGUoZnJvbS5zb3VyY2UpKSB7XG4gICAgICBmcm9tVXJsID0gcGF0aFRvRmlsZVVSTChmcm9tLnNvdXJjZSlcbiAgICB9IGVsc2Uge1xuICAgICAgZnJvbVVybCA9IG5ldyBVUkwoXG4gICAgICAgIGZyb20uc291cmNlLFxuICAgICAgICB0aGlzLm1hcC5jb25zdW1lcigpLnNvdXJjZVJvb3QgfHwgcGF0aFRvRmlsZVVSTCh0aGlzLm1hcC5tYXBGaWxlKVxuICAgICAgKVxuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICBjb2x1bW46IGZyb20uY29sdW1uLFxuICAgICAgZW5kQ29sdW1uOiB0byAmJiB0by5jb2x1bW4sXG4gICAgICBlbmRMaW5lOiB0byAmJiB0by5saW5lLFxuICAgICAgbGluZTogZnJvbS5saW5lLFxuICAgICAgdXJsOiBmcm9tVXJsLnRvU3RyaW5nKClcbiAgICB9XG5cbiAgICBpZiAoZnJvbVVybC5wcm90b2NvbCA9PT0gJ2ZpbGU6Jykge1xuICAgICAgaWYgKGZpbGVVUkxUb1BhdGgpIHtcbiAgICAgICAgcmVzdWx0LmZpbGUgPSBmaWxlVVJMVG9QYXRoKGZyb21VcmwpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAyICovXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZmlsZTogcHJvdG9jb2wgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIFBvc3RDU1MgYnVpbGRgKVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzb3VyY2UgPSBjb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKGZyb20uc291cmNlKVxuICAgIGlmIChzb3VyY2UpIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2VcblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBsZXQganNvbiA9IHt9XG4gICAgZm9yIChsZXQgbmFtZSBvZiBbJ2hhc0JPTScsICdjc3MnLCAnZmlsZScsICdpZCddKSB7XG4gICAgICBpZiAodGhpc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgIGpzb25bbmFtZV0gPSB0aGlzW25hbWVdXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLm1hcCkge1xuICAgICAganNvbi5tYXAgPSB7IC4uLnRoaXMubWFwIH1cbiAgICAgIGlmIChqc29uLm1hcC5jb25zdW1lckNhY2hlKSB7XG4gICAgICAgIGpzb24ubWFwLmNvbnN1bWVyQ2FjaGUgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGpzb25cbiAgfVxuXG4gIGdldCBmcm9tKCkge1xuICAgIHJldHVybiB0aGlzLmZpbGUgfHwgdGhpcy5pZFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW5wdXRcbklucHV0LmRlZmF1bHQgPSBJbnB1dFxuXG5pZiAodGVybWluYWxIaWdobGlnaHQgJiYgdGVybWluYWxIaWdobGlnaHQucmVnaXN0ZXJJbnB1dCkge1xuICB0ZXJtaW5hbEhpZ2hsaWdodC5yZWdpc3RlcklucHV0KElucHV0KVxufVxuIl0sIm5hbWVzIjpbIlNvdXJjZU1hcENvbnN1bWVyIiwiU291cmNlTWFwR2VuZXJhdG9yIiwicmVxdWlyZSIsImZpbGVVUkxUb1BhdGgiLCJwYXRoVG9GaWxlVVJMIiwiaXNBYnNvbHV0ZSIsInJlc29sdmUiLCJuYW5vaWQiLCJ0ZXJtaW5hbEhpZ2hsaWdodCIsIkNzc1N5bnRheEVycm9yIiwiUHJldmlvdXNNYXAiLCJmcm9tT2Zmc2V0Q2FjaGUiLCJTeW1ib2wiLCJzb3VyY2VNYXBBdmFpbGFibGUiLCJCb29sZWFuIiwicGF0aEF2YWlsYWJsZSIsIklucHV0IiwiY29uc3RydWN0b3IiLCJjc3MiLCJvcHRzIiwidG9TdHJpbmciLCJFcnJvciIsImhhc0JPTSIsInNsaWNlIiwiZnJvbSIsInRlc3QiLCJmaWxlIiwibWFwIiwidGV4dCIsImNvbnN1bWVyIiwibWFwUmVzb2x2ZSIsImlkIiwiZXJyb3IiLCJtZXNzYWdlIiwibGluZSIsImNvbHVtbiIsInJlc3VsdCIsImVuZExpbmUiLCJlbmRDb2x1bW4iLCJzdGFydCIsImVuZCIsIm9mZnNldCIsInBvcyIsImZyb21PZmZzZXQiLCJjb2wiLCJvcmlnaW4iLCJ1bmRlZmluZWQiLCJzb3VyY2UiLCJwbHVnaW4iLCJpbnB1dCIsInVybCIsImxhc3RMaW5lIiwibGluZVRvSW5kZXgiLCJsaW5lcyIsInNwbGl0IiwiQXJyYXkiLCJsZW5ndGgiLCJwcmV2SW5kZXgiLCJpIiwibCIsIm1pbiIsIm1heCIsIm1pZCIsInNvdXJjZVJvb3QiLCJyb290Iiwib3JpZ2luYWxQb3NpdGlvbkZvciIsInRvIiwiZnJvbVVybCIsIlVSTCIsIm1hcEZpbGUiLCJwcm90b2NvbCIsInNvdXJjZUNvbnRlbnRGb3IiLCJ0b0pTT04iLCJqc29uIiwibmFtZSIsImNvbnN1bWVyQ2FjaGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCIsInJlZ2lzdGVySW5wdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/input.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/lazy-result.js":
/*!*************************************************!*\
  !*** ./node_modules/postcss/lib/lazy-result.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { isClean, my } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/postcss/lib/symbols.js\");\nlet MapGenerator = __webpack_require__(/*! ./map-generator */ \"(ssr)/./node_modules/postcss/lib/map-generator.js\");\nlet stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/postcss/lib/stringify.js\");\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet Document = __webpack_require__(/*! ./document */ \"(ssr)/./node_modules/postcss/lib/document.js\");\nlet warnOnce = __webpack_require__(/*! ./warn-once */ \"(ssr)/./node_modules/postcss/lib/warn-once.js\");\nlet Result = __webpack_require__(/*! ./result */ \"(ssr)/./node_modules/postcss/lib/result.js\");\nlet parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/postcss/lib/parse.js\");\nlet Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/postcss/lib/root.js\");\nconst TYPE_TO_CLASS_NAME = {\n    atrule: \"AtRule\",\n    comment: \"Comment\",\n    decl: \"Declaration\",\n    document: \"Document\",\n    root: \"Root\",\n    rule: \"Rule\"\n};\nconst PLUGIN_PROPS = {\n    AtRule: true,\n    AtRuleExit: true,\n    Comment: true,\n    CommentExit: true,\n    Declaration: true,\n    DeclarationExit: true,\n    Document: true,\n    DocumentExit: true,\n    Once: true,\n    OnceExit: true,\n    postcssPlugin: true,\n    prepare: true,\n    Root: true,\n    RootExit: true,\n    Rule: true,\n    RuleExit: true\n};\nconst NOT_VISITORS = {\n    Once: true,\n    postcssPlugin: true,\n    prepare: true\n};\nconst CHILDREN = 0;\nfunction isPromise(obj) {\n    return typeof obj === \"object\" && typeof obj.then === \"function\";\n}\nfunction getEvents(node) {\n    let key = false;\n    let type = TYPE_TO_CLASS_NAME[node.type];\n    if (node.type === \"decl\") {\n        key = node.prop.toLowerCase();\n    } else if (node.type === \"atrule\") {\n        key = node.name.toLowerCase();\n    }\n    if (key && node.append) {\n        return [\n            type,\n            type + \"-\" + key,\n            CHILDREN,\n            type + \"Exit\",\n            type + \"Exit-\" + key\n        ];\n    } else if (key) {\n        return [\n            type,\n            type + \"-\" + key,\n            type + \"Exit\",\n            type + \"Exit-\" + key\n        ];\n    } else if (node.append) {\n        return [\n            type,\n            CHILDREN,\n            type + \"Exit\"\n        ];\n    } else {\n        return [\n            type,\n            type + \"Exit\"\n        ];\n    }\n}\nfunction toStack(node) {\n    let events;\n    if (node.type === \"document\") {\n        events = [\n            \"Document\",\n            CHILDREN,\n            \"DocumentExit\"\n        ];\n    } else if (node.type === \"root\") {\n        events = [\n            \"Root\",\n            CHILDREN,\n            \"RootExit\"\n        ];\n    } else {\n        events = getEvents(node);\n    }\n    return {\n        eventIndex: 0,\n        events,\n        iterator: 0,\n        node,\n        visitorIndex: 0,\n        visitors: []\n    };\n}\nfunction cleanMarks(node) {\n    node[isClean] = false;\n    if (node.nodes) node.nodes.forEach((i)=>cleanMarks(i));\n    return node;\n}\nlet postcss = {};\nclass LazyResult {\n    constructor(processor, css, opts){\n        this.stringified = false;\n        this.processed = false;\n        let root;\n        if (typeof css === \"object\" && css !== null && (css.type === \"root\" || css.type === \"document\")) {\n            root = cleanMarks(css);\n        } else if (css instanceof LazyResult || css instanceof Result) {\n            root = cleanMarks(css.root);\n            if (css.map) {\n                if (typeof opts.map === \"undefined\") opts.map = {};\n                if (!opts.map.inline) opts.map.inline = false;\n                opts.map.prev = css.map;\n            }\n        } else {\n            let parser = parse;\n            if (opts.syntax) parser = opts.syntax.parse;\n            if (opts.parser) parser = opts.parser;\n            if (parser.parse) parser = parser.parse;\n            try {\n                root = parser(css, opts);\n            } catch (error) {\n                this.processed = true;\n                this.error = error;\n            }\n            if (root && !root[my]) {\n                /* c8 ignore next 2 */ Container.rebuild(root);\n            }\n        }\n        this.result = new Result(processor, root, opts);\n        this.helpers = {\n            ...postcss,\n            postcss,\n            result: this.result\n        };\n        this.plugins = this.processor.plugins.map((plugin)=>{\n            if (typeof plugin === \"object\" && plugin.prepare) {\n                return {\n                    ...plugin,\n                    ...plugin.prepare(this.result)\n                };\n            } else {\n                return plugin;\n            }\n        });\n    }\n    async() {\n        if (this.error) return Promise.reject(this.error);\n        if (this.processed) return Promise.resolve(this.result);\n        if (!this.processing) {\n            this.processing = this.runAsync();\n        }\n        return this.processing;\n    }\n    catch(onRejected) {\n        return this.async().catch(onRejected);\n    }\n    finally(onFinally) {\n        return this.async().then(onFinally, onFinally);\n    }\n    getAsyncError() {\n        throw new Error(\"Use process(css).then(cb) to work with async plugins\");\n    }\n    handleError(error, node) {\n        let plugin = this.result.lastPlugin;\n        try {\n            if (node) node.addToError(error);\n            this.error = error;\n            if (error.name === \"CssSyntaxError\" && !error.plugin) {\n                error.plugin = plugin.postcssPlugin;\n                error.setMessage();\n            } else if (plugin.postcssVersion) {\n                if (true) {\n                    let pluginName = plugin.postcssPlugin;\n                    let pluginVer = plugin.postcssVersion;\n                    let runtimeVer = this.result.processor.version;\n                    let a = pluginVer.split(\".\");\n                    let b = runtimeVer.split(\".\");\n                    if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n                        // eslint-disable-next-line no-console\n                        console.error(\"Unknown error from PostCSS plugin. Your current PostCSS \" + \"version is \" + runtimeVer + \", but \" + pluginName + \" uses \" + pluginVer + \". Perhaps this is the source of the error below.\");\n                    }\n                }\n            }\n        } catch (err) {\n            /* c8 ignore next 3 */ // eslint-disable-next-line no-console\n            if (console && console.error) console.error(err);\n        }\n        return error;\n    }\n    prepareVisitors() {\n        this.listeners = {};\n        let add = (plugin, type, cb)=>{\n            if (!this.listeners[type]) this.listeners[type] = [];\n            this.listeners[type].push([\n                plugin,\n                cb\n            ]);\n        };\n        for (let plugin of this.plugins){\n            if (typeof plugin === \"object\") {\n                for(let event in plugin){\n                    if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n                        throw new Error(`Unknown event ${event} in ${plugin.postcssPlugin}. ` + `Try to update PostCSS (${this.processor.version} now).`);\n                    }\n                    if (!NOT_VISITORS[event]) {\n                        if (typeof plugin[event] === \"object\") {\n                            for(let filter in plugin[event]){\n                                if (filter === \"*\") {\n                                    add(plugin, event, plugin[event][filter]);\n                                } else {\n                                    add(plugin, event + \"-\" + filter.toLowerCase(), plugin[event][filter]);\n                                }\n                            }\n                        } else if (typeof plugin[event] === \"function\") {\n                            add(plugin, event, plugin[event]);\n                        }\n                    }\n                }\n            }\n        }\n        this.hasListener = Object.keys(this.listeners).length > 0;\n    }\n    async runAsync() {\n        this.plugin = 0;\n        for(let i = 0; i < this.plugins.length; i++){\n            let plugin = this.plugins[i];\n            let promise = this.runOnRoot(plugin);\n            if (isPromise(promise)) {\n                try {\n                    await promise;\n                } catch (error) {\n                    throw this.handleError(error);\n                }\n            }\n        }\n        this.prepareVisitors();\n        if (this.hasListener) {\n            let root = this.result.root;\n            while(!root[isClean]){\n                root[isClean] = true;\n                let stack = [\n                    toStack(root)\n                ];\n                while(stack.length > 0){\n                    let promise = this.visitTick(stack);\n                    if (isPromise(promise)) {\n                        try {\n                            await promise;\n                        } catch (e) {\n                            let node = stack[stack.length - 1].node;\n                            throw this.handleError(e, node);\n                        }\n                    }\n                }\n            }\n            if (this.listeners.OnceExit) {\n                for (let [plugin, visitor] of this.listeners.OnceExit){\n                    this.result.lastPlugin = plugin;\n                    try {\n                        if (root.type === \"document\") {\n                            let roots = root.nodes.map((subRoot)=>visitor(subRoot, this.helpers));\n                            await Promise.all(roots);\n                        } else {\n                            await visitor(root, this.helpers);\n                        }\n                    } catch (e) {\n                        throw this.handleError(e);\n                    }\n                }\n            }\n        }\n        this.processed = true;\n        return this.stringify();\n    }\n    runOnRoot(plugin) {\n        this.result.lastPlugin = plugin;\n        try {\n            if (typeof plugin === \"object\" && plugin.Once) {\n                if (this.result.root.type === \"document\") {\n                    let roots = this.result.root.nodes.map((root)=>plugin.Once(root, this.helpers));\n                    if (isPromise(roots[0])) {\n                        return Promise.all(roots);\n                    }\n                    return roots;\n                }\n                return plugin.Once(this.result.root, this.helpers);\n            } else if (typeof plugin === \"function\") {\n                return plugin(this.result.root, this.result);\n            }\n        } catch (error) {\n            throw this.handleError(error);\n        }\n    }\n    stringify() {\n        if (this.error) throw this.error;\n        if (this.stringified) return this.result;\n        this.stringified = true;\n        this.sync();\n        let opts = this.result.opts;\n        let str = stringify;\n        if (opts.syntax) str = opts.syntax.stringify;\n        if (opts.stringifier) str = opts.stringifier;\n        if (str.stringify) str = str.stringify;\n        let map = new MapGenerator(str, this.result.root, this.result.opts);\n        let data = map.generate();\n        this.result.css = data[0];\n        this.result.map = data[1];\n        return this.result;\n    }\n    sync() {\n        if (this.error) throw this.error;\n        if (this.processed) return this.result;\n        this.processed = true;\n        if (this.processing) {\n            throw this.getAsyncError();\n        }\n        for (let plugin of this.plugins){\n            let promise = this.runOnRoot(plugin);\n            if (isPromise(promise)) {\n                throw this.getAsyncError();\n            }\n        }\n        this.prepareVisitors();\n        if (this.hasListener) {\n            let root = this.result.root;\n            while(!root[isClean]){\n                root[isClean] = true;\n                this.walkSync(root);\n            }\n            if (this.listeners.OnceExit) {\n                if (root.type === \"document\") {\n                    for (let subRoot of root.nodes){\n                        this.visitSync(this.listeners.OnceExit, subRoot);\n                    }\n                } else {\n                    this.visitSync(this.listeners.OnceExit, root);\n                }\n            }\n        }\n        return this.result;\n    }\n    then(onFulfilled, onRejected) {\n        if (true) {\n            if (!(\"from\" in this.opts)) {\n                warnOnce(\"Without `from` option PostCSS could generate wrong source map \" + \"and will not find Browserslist config. Set it to CSS file path \" + \"or to `undefined` to prevent this warning.\");\n            }\n        }\n        return this.async().then(onFulfilled, onRejected);\n    }\n    toString() {\n        return this.css;\n    }\n    visitSync(visitors, node) {\n        for (let [plugin, visitor] of visitors){\n            this.result.lastPlugin = plugin;\n            let promise;\n            try {\n                promise = visitor(node, this.helpers);\n            } catch (e) {\n                throw this.handleError(e, node.proxyOf);\n            }\n            if (node.type !== \"root\" && node.type !== \"document\" && !node.parent) {\n                return true;\n            }\n            if (isPromise(promise)) {\n                throw this.getAsyncError();\n            }\n        }\n    }\n    visitTick(stack) {\n        let visit = stack[stack.length - 1];\n        let { node, visitors } = visit;\n        if (node.type !== \"root\" && node.type !== \"document\" && !node.parent) {\n            stack.pop();\n            return;\n        }\n        if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n            let [plugin, visitor] = visitors[visit.visitorIndex];\n            visit.visitorIndex += 1;\n            if (visit.visitorIndex === visitors.length) {\n                visit.visitors = [];\n                visit.visitorIndex = 0;\n            }\n            this.result.lastPlugin = plugin;\n            try {\n                return visitor(node.toProxy(), this.helpers);\n            } catch (e) {\n                throw this.handleError(e, node);\n            }\n        }\n        if (visit.iterator !== 0) {\n            let iterator = visit.iterator;\n            let child;\n            while(child = node.nodes[node.indexes[iterator]]){\n                node.indexes[iterator] += 1;\n                if (!child[isClean]) {\n                    child[isClean] = true;\n                    stack.push(toStack(child));\n                    return;\n                }\n            }\n            visit.iterator = 0;\n            delete node.indexes[iterator];\n        }\n        let events = visit.events;\n        while(visit.eventIndex < events.length){\n            let event = events[visit.eventIndex];\n            visit.eventIndex += 1;\n            if (event === CHILDREN) {\n                if (node.nodes && node.nodes.length) {\n                    node[isClean] = true;\n                    visit.iterator = node.getIterator();\n                }\n                return;\n            } else if (this.listeners[event]) {\n                visit.visitors = this.listeners[event];\n                return;\n            }\n        }\n        stack.pop();\n    }\n    walkSync(node) {\n        node[isClean] = true;\n        let events = getEvents(node);\n        for (let event of events){\n            if (event === CHILDREN) {\n                if (node.nodes) {\n                    node.each((child)=>{\n                        if (!child[isClean]) this.walkSync(child);\n                    });\n                }\n            } else {\n                let visitors = this.listeners[event];\n                if (visitors) {\n                    if (this.visitSync(visitors, node.toProxy())) return;\n                }\n            }\n        }\n    }\n    warnings() {\n        return this.sync().warnings();\n    }\n    get content() {\n        return this.stringify().content;\n    }\n    get css() {\n        return this.stringify().css;\n    }\n    get map() {\n        return this.stringify().map;\n    }\n    get messages() {\n        return this.sync().messages;\n    }\n    get opts() {\n        return this.result.opts;\n    }\n    get processor() {\n        return this.result.processor;\n    }\n    get root() {\n        return this.sync().root;\n    }\n    get [Symbol.toStringTag]() {\n        return \"LazyResult\";\n    }\n}\nLazyResult.registerPostcss = (dependant)=>{\n    postcss = dependant;\n};\nmodule.exports = LazyResult;\nLazyResult.default = LazyResult;\nRoot.registerLazyResult(LazyResult);\nDocument.registerLazyResult(LazyResult);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/lazy-result.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/list.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/list.js ***!
  \******************************************/
/***/ ((module) => {

eval("\nlet list = {\n    comma (string) {\n        return list.split(string, [\n            \",\"\n        ], true);\n    },\n    space (string) {\n        let spaces = [\n            \" \",\n            \"\\n\",\n            \"\t\"\n        ];\n        return list.split(string, spaces);\n    },\n    split (string, separators, last) {\n        let array = [];\n        let current = \"\";\n        let split = false;\n        let func = 0;\n        let inQuote = false;\n        let prevQuote = \"\";\n        let escape = false;\n        for (let letter of string){\n            if (escape) {\n                escape = false;\n            } else if (letter === \"\\\\\") {\n                escape = true;\n            } else if (inQuote) {\n                if (letter === prevQuote) {\n                    inQuote = false;\n                }\n            } else if (letter === '\"' || letter === \"'\") {\n                inQuote = true;\n                prevQuote = letter;\n            } else if (letter === \"(\") {\n                func += 1;\n            } else if (letter === \")\") {\n                if (func > 0) func -= 1;\n            } else if (func === 0) {\n                if (separators.includes(letter)) split = true;\n            }\n            if (split) {\n                if (current !== \"\") array.push(current.trim());\n                current = \"\";\n                split = false;\n            } else {\n                current += letter;\n            }\n        }\n        if (last || current !== \"\") array.push(current.trim());\n        return array;\n    }\n};\nmodule.exports = list;\nlist.default = list;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvbGlzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU87SUFDVEMsT0FBTUMsTUFBTTtRQUNWLE9BQU9GLEtBQUtHLEtBQUssQ0FBQ0QsUUFBUTtZQUFDO1NBQUksRUFBRTtJQUNuQztJQUVBRSxPQUFNRixNQUFNO1FBQ1YsSUFBSUcsU0FBUztZQUFDO1lBQUs7WUFBTTtTQUFLO1FBQzlCLE9BQU9MLEtBQUtHLEtBQUssQ0FBQ0QsUUFBUUc7SUFDNUI7SUFFQUYsT0FBTUQsTUFBTSxFQUFFSSxVQUFVLEVBQUVDLElBQUk7UUFDNUIsSUFBSUMsUUFBUSxFQUFFO1FBQ2QsSUFBSUMsVUFBVTtRQUNkLElBQUlOLFFBQVE7UUFFWixJQUFJTyxPQUFPO1FBQ1gsSUFBSUMsVUFBVTtRQUNkLElBQUlDLFlBQVk7UUFDaEIsSUFBSUMsU0FBUztRQUViLEtBQUssSUFBSUMsVUFBVVosT0FBUTtZQUN6QixJQUFJVyxRQUFRO2dCQUNWQSxTQUFTO1lBQ1gsT0FBTyxJQUFJQyxXQUFXLE1BQU07Z0JBQzFCRCxTQUFTO1lBQ1gsT0FBTyxJQUFJRixTQUFTO2dCQUNsQixJQUFJRyxXQUFXRixXQUFXO29CQUN4QkQsVUFBVTtnQkFDWjtZQUNGLE9BQU8sSUFBSUcsV0FBVyxPQUFPQSxXQUFXLEtBQUs7Z0JBQzNDSCxVQUFVO2dCQUNWQyxZQUFZRTtZQUNkLE9BQU8sSUFBSUEsV0FBVyxLQUFLO2dCQUN6QkosUUFBUTtZQUNWLE9BQU8sSUFBSUksV0FBVyxLQUFLO2dCQUN6QixJQUFJSixPQUFPLEdBQUdBLFFBQVE7WUFDeEIsT0FBTyxJQUFJQSxTQUFTLEdBQUc7Z0JBQ3JCLElBQUlKLFdBQVdTLFFBQVEsQ0FBQ0QsU0FBU1gsUUFBUTtZQUMzQztZQUVBLElBQUlBLE9BQU87Z0JBQ1QsSUFBSU0sWUFBWSxJQUFJRCxNQUFNUSxJQUFJLENBQUNQLFFBQVFRLElBQUk7Z0JBQzNDUixVQUFVO2dCQUNWTixRQUFRO1lBQ1YsT0FBTztnQkFDTE0sV0FBV0s7WUFDYjtRQUNGO1FBRUEsSUFBSVAsUUFBUUUsWUFBWSxJQUFJRCxNQUFNUSxJQUFJLENBQUNQLFFBQVFRLElBQUk7UUFDbkQsT0FBT1Q7SUFDVDtBQUNGO0FBRUFVLE9BQU9DLE9BQU8sR0FBR25CO0FBQ2pCQSxLQUFLb0IsT0FBTyxHQUFHcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvbGlzdC5qcz82ODUxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgbGlzdCA9IHtcbiAgY29tbWEoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGxpc3Quc3BsaXQoc3RyaW5nLCBbJywnXSwgdHJ1ZSlcbiAgfSxcblxuICBzcGFjZShzdHJpbmcpIHtcbiAgICBsZXQgc3BhY2VzID0gWycgJywgJ1xcbicsICdcXHQnXVxuICAgIHJldHVybiBsaXN0LnNwbGl0KHN0cmluZywgc3BhY2VzKVxuICB9LFxuXG4gIHNwbGl0KHN0cmluZywgc2VwYXJhdG9ycywgbGFzdCkge1xuICAgIGxldCBhcnJheSA9IFtdXG4gICAgbGV0IGN1cnJlbnQgPSAnJ1xuICAgIGxldCBzcGxpdCA9IGZhbHNlXG5cbiAgICBsZXQgZnVuYyA9IDBcbiAgICBsZXQgaW5RdW90ZSA9IGZhbHNlXG4gICAgbGV0IHByZXZRdW90ZSA9ICcnXG4gICAgbGV0IGVzY2FwZSA9IGZhbHNlXG5cbiAgICBmb3IgKGxldCBsZXR0ZXIgb2Ygc3RyaW5nKSB7XG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIGVzY2FwZSA9IGZhbHNlXG4gICAgICB9IGVsc2UgaWYgKGxldHRlciA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGVzY2FwZSA9IHRydWVcbiAgICAgIH0gZWxzZSBpZiAoaW5RdW90ZSkge1xuICAgICAgICBpZiAobGV0dGVyID09PSBwcmV2UXVvdGUpIHtcbiAgICAgICAgICBpblF1b3RlID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsZXR0ZXIgPT09ICdcIicgfHwgbGV0dGVyID09PSBcIidcIikge1xuICAgICAgICBpblF1b3RlID0gdHJ1ZVxuICAgICAgICBwcmV2UXVvdGUgPSBsZXR0ZXJcbiAgICAgIH0gZWxzZSBpZiAobGV0dGVyID09PSAnKCcpIHtcbiAgICAgICAgZnVuYyArPSAxXG4gICAgICB9IGVsc2UgaWYgKGxldHRlciA9PT0gJyknKSB7XG4gICAgICAgIGlmIChmdW5jID4gMCkgZnVuYyAtPSAxXG4gICAgICB9IGVsc2UgaWYgKGZ1bmMgPT09IDApIHtcbiAgICAgICAgaWYgKHNlcGFyYXRvcnMuaW5jbHVkZXMobGV0dGVyKSkgc3BsaXQgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChzcGxpdCkge1xuICAgICAgICBpZiAoY3VycmVudCAhPT0gJycpIGFycmF5LnB1c2goY3VycmVudC50cmltKCkpXG4gICAgICAgIGN1cnJlbnQgPSAnJ1xuICAgICAgICBzcGxpdCA9IGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50ICs9IGxldHRlclxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsYXN0IHx8IGN1cnJlbnQgIT09ICcnKSBhcnJheS5wdXNoKGN1cnJlbnQudHJpbSgpKVxuICAgIHJldHVybiBhcnJheVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdFxubGlzdC5kZWZhdWx0ID0gbGlzdFxuIl0sIm5hbWVzIjpbImxpc3QiLCJjb21tYSIsInN0cmluZyIsInNwbGl0Iiwic3BhY2UiLCJzcGFjZXMiLCJzZXBhcmF0b3JzIiwibGFzdCIsImFycmF5IiwiY3VycmVudCIsImZ1bmMiLCJpblF1b3RlIiwicHJldlF1b3RlIiwiZXNjYXBlIiwibGV0dGVyIiwiaW5jbHVkZXMiLCJwdXNoIiwidHJpbSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/list.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/map-generator.js":
/*!***************************************************!*\
  !*** ./node_modules/postcss/lib/map-generator.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"(ssr)/./node_modules/source-map-js/source-map.js\");\nlet { dirname, relative, resolve, sep } = __webpack_require__(/*! path */ \"path\");\nlet { pathToFileURL } = __webpack_require__(/*! url */ \"url\");\nlet Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/postcss/lib/input.js\");\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);\nlet pathAvailable = Boolean(dirname && resolve && relative && sep);\nclass MapGenerator {\n    constructor(stringify, root, opts, cssString){\n        this.stringify = stringify;\n        this.mapOpts = opts.map || {};\n        this.root = root;\n        this.opts = opts;\n        this.css = cssString;\n        this.originalCSS = cssString;\n        this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;\n        this.memoizedFileURLs = new Map();\n        this.memoizedPaths = new Map();\n        this.memoizedURLs = new Map();\n    }\n    addAnnotation() {\n        let content;\n        if (this.isInline()) {\n            content = \"data:application/json;base64,\" + this.toBase64(this.map.toString());\n        } else if (typeof this.mapOpts.annotation === \"string\") {\n            content = this.mapOpts.annotation;\n        } else if (typeof this.mapOpts.annotation === \"function\") {\n            content = this.mapOpts.annotation(this.opts.to, this.root);\n        } else {\n            content = this.outputFile() + \".map\";\n        }\n        let eol = \"\\n\";\n        if (this.css.includes(\"\\r\\n\")) eol = \"\\r\\n\";\n        this.css += eol + \"/*# sourceMappingURL=\" + content + \" */\";\n    }\n    applyPrevMaps() {\n        for (let prev of this.previous()){\n            let from = this.toUrl(this.path(prev.file));\n            let root = prev.root || dirname(prev.file);\n            let map;\n            if (this.mapOpts.sourcesContent === false) {\n                map = new SourceMapConsumer(prev.text);\n                if (map.sourcesContent) {\n                    map.sourcesContent = null;\n                }\n            } else {\n                map = prev.consumer();\n            }\n            this.map.applySourceMap(map, from, this.toUrl(this.path(root)));\n        }\n    }\n    clearAnnotation() {\n        if (this.mapOpts.annotation === false) return;\n        if (this.root) {\n            let node;\n            for(let i = this.root.nodes.length - 1; i >= 0; i--){\n                node = this.root.nodes[i];\n                if (node.type !== \"comment\") continue;\n                if (node.text.indexOf(\"# sourceMappingURL=\") === 0) {\n                    this.root.removeChild(i);\n                }\n            }\n        } else if (this.css) {\n            this.css = this.css.replace(/\\n*?\\/\\*#[\\S\\s]*?\\*\\/$/gm, \"\");\n        }\n    }\n    generate() {\n        this.clearAnnotation();\n        if (pathAvailable && sourceMapAvailable && this.isMap()) {\n            return this.generateMap();\n        } else {\n            let result = \"\";\n            this.stringify(this.root, (i)=>{\n                result += i;\n            });\n            return [\n                result\n            ];\n        }\n    }\n    generateMap() {\n        if (this.root) {\n            this.generateString();\n        } else if (this.previous().length === 1) {\n            let prev = this.previous()[0].consumer();\n            prev.file = this.outputFile();\n            this.map = SourceMapGenerator.fromSourceMap(prev);\n        } else {\n            this.map = new SourceMapGenerator({\n                file: this.outputFile()\n            });\n            this.map.addMapping({\n                generated: {\n                    column: 0,\n                    line: 1\n                },\n                original: {\n                    column: 0,\n                    line: 1\n                },\n                source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : \"<no source>\"\n            });\n        }\n        if (this.isSourcesContent()) this.setSourcesContent();\n        if (this.root && this.previous().length > 0) this.applyPrevMaps();\n        if (this.isAnnotation()) this.addAnnotation();\n        if (this.isInline()) {\n            return [\n                this.css\n            ];\n        } else {\n            return [\n                this.css,\n                this.map\n            ];\n        }\n    }\n    generateString() {\n        this.css = \"\";\n        this.map = new SourceMapGenerator({\n            file: this.outputFile()\n        });\n        let line = 1;\n        let column = 1;\n        let noSource = \"<no source>\";\n        let mapping = {\n            generated: {\n                column: 0,\n                line: 0\n            },\n            original: {\n                column: 0,\n                line: 0\n            },\n            source: \"\"\n        };\n        let lines, last;\n        this.stringify(this.root, (str, node, type)=>{\n            this.css += str;\n            if (node && type !== \"end\") {\n                mapping.generated.line = line;\n                mapping.generated.column = column - 1;\n                if (node.source && node.source.start) {\n                    mapping.source = this.sourcePath(node);\n                    mapping.original.line = node.source.start.line;\n                    mapping.original.column = node.source.start.column - 1;\n                    this.map.addMapping(mapping);\n                } else {\n                    mapping.source = noSource;\n                    mapping.original.line = 1;\n                    mapping.original.column = 0;\n                    this.map.addMapping(mapping);\n                }\n            }\n            lines = str.match(/\\n/g);\n            if (lines) {\n                line += lines.length;\n                last = str.lastIndexOf(\"\\n\");\n                column = str.length - last;\n            } else {\n                column += str.length;\n            }\n            if (node && type !== \"start\") {\n                let p = node.parent || {\n                    raws: {}\n                };\n                let childless = node.type === \"decl\" || node.type === \"atrule\" && !node.nodes;\n                if (!childless || node !== p.last || p.raws.semicolon) {\n                    if (node.source && node.source.end) {\n                        mapping.source = this.sourcePath(node);\n                        mapping.original.line = node.source.end.line;\n                        mapping.original.column = node.source.end.column - 1;\n                        mapping.generated.line = line;\n                        mapping.generated.column = column - 2;\n                        this.map.addMapping(mapping);\n                    } else {\n                        mapping.source = noSource;\n                        mapping.original.line = 1;\n                        mapping.original.column = 0;\n                        mapping.generated.line = line;\n                        mapping.generated.column = column - 1;\n                        this.map.addMapping(mapping);\n                    }\n                }\n            }\n        });\n    }\n    isAnnotation() {\n        if (this.isInline()) {\n            return true;\n        }\n        if (typeof this.mapOpts.annotation !== \"undefined\") {\n            return this.mapOpts.annotation;\n        }\n        if (this.previous().length) {\n            return this.previous().some((i)=>i.annotation);\n        }\n        return true;\n    }\n    isInline() {\n        if (typeof this.mapOpts.inline !== \"undefined\") {\n            return this.mapOpts.inline;\n        }\n        let annotation = this.mapOpts.annotation;\n        if (typeof annotation !== \"undefined\" && annotation !== true) {\n            return false;\n        }\n        if (this.previous().length) {\n            return this.previous().some((i)=>i.inline);\n        }\n        return true;\n    }\n    isMap() {\n        if (typeof this.opts.map !== \"undefined\") {\n            return !!this.opts.map;\n        }\n        return this.previous().length > 0;\n    }\n    isSourcesContent() {\n        if (typeof this.mapOpts.sourcesContent !== \"undefined\") {\n            return this.mapOpts.sourcesContent;\n        }\n        if (this.previous().length) {\n            return this.previous().some((i)=>i.withContent());\n        }\n        return true;\n    }\n    outputFile() {\n        if (this.opts.to) {\n            return this.path(this.opts.to);\n        } else if (this.opts.from) {\n            return this.path(this.opts.from);\n        } else {\n            return \"to.css\";\n        }\n    }\n    path(file) {\n        if (this.mapOpts.absolute) return file;\n        if (file.charCodeAt(0) === 60 /* `<` */ ) return file;\n        if (/^\\w+:\\/\\//.test(file)) return file;\n        let cached = this.memoizedPaths.get(file);\n        if (cached) return cached;\n        let from = this.opts.to ? dirname(this.opts.to) : \".\";\n        if (typeof this.mapOpts.annotation === \"string\") {\n            from = dirname(resolve(from, this.mapOpts.annotation));\n        }\n        let path = relative(from, file);\n        this.memoizedPaths.set(file, path);\n        return path;\n    }\n    previous() {\n        if (!this.previousMaps) {\n            this.previousMaps = [];\n            if (this.root) {\n                this.root.walk((node)=>{\n                    if (node.source && node.source.input.map) {\n                        let map = node.source.input.map;\n                        if (!this.previousMaps.includes(map)) {\n                            this.previousMaps.push(map);\n                        }\n                    }\n                });\n            } else {\n                let input = new Input(this.originalCSS, this.opts);\n                if (input.map) this.previousMaps.push(input.map);\n            }\n        }\n        return this.previousMaps;\n    }\n    setSourcesContent() {\n        let already = {};\n        if (this.root) {\n            this.root.walk((node)=>{\n                if (node.source) {\n                    let from = node.source.input.from;\n                    if (from && !already[from]) {\n                        already[from] = true;\n                        let fromUrl = this.usesFileUrls ? this.toFileUrl(from) : this.toUrl(this.path(from));\n                        this.map.setSourceContent(fromUrl, node.source.input.css);\n                    }\n                }\n            });\n        } else if (this.css) {\n            let from = this.opts.from ? this.toUrl(this.path(this.opts.from)) : \"<no source>\";\n            this.map.setSourceContent(from, this.css);\n        }\n    }\n    sourcePath(node) {\n        if (this.mapOpts.from) {\n            return this.toUrl(this.mapOpts.from);\n        } else if (this.usesFileUrls) {\n            return this.toFileUrl(node.source.input.from);\n        } else {\n            return this.toUrl(this.path(node.source.input.from));\n        }\n    }\n    toBase64(str) {\n        if (Buffer) {\n            return Buffer.from(str).toString(\"base64\");\n        } else {\n            return window.btoa(unescape(encodeURIComponent(str)));\n        }\n    }\n    toFileUrl(path) {\n        let cached = this.memoizedFileURLs.get(path);\n        if (cached) return cached;\n        if (pathToFileURL) {\n            let fileURL = pathToFileURL(path).toString();\n            this.memoizedFileURLs.set(path, fileURL);\n            return fileURL;\n        } else {\n            throw new Error(\"`map.absolute` option is not available in this PostCSS build\");\n        }\n    }\n    toUrl(path) {\n        let cached = this.memoizedURLs.get(path);\n        if (cached) return cached;\n        if (sep === \"\\\\\") {\n            path = path.replace(/\\\\/g, \"/\");\n        }\n        let url = encodeURI(path).replace(/[#?]/g, encodeURIComponent);\n        this.memoizedURLs.set(path, url);\n        return url;\n    }\n}\nmodule.exports = MapGenerator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/map-generator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/no-work-result.js":
/*!****************************************************!*\
  !*** ./node_modules/postcss/lib/no-work-result.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet MapGenerator = __webpack_require__(/*! ./map-generator */ \"(ssr)/./node_modules/postcss/lib/map-generator.js\");\nlet stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/postcss/lib/stringify.js\");\nlet warnOnce = __webpack_require__(/*! ./warn-once */ \"(ssr)/./node_modules/postcss/lib/warn-once.js\");\nlet parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/postcss/lib/parse.js\");\nconst Result = __webpack_require__(/*! ./result */ \"(ssr)/./node_modules/postcss/lib/result.js\");\nclass NoWorkResult {\n    constructor(processor, css, opts){\n        css = css.toString();\n        this.stringified = false;\n        this._processor = processor;\n        this._css = css;\n        this._opts = opts;\n        this._map = undefined;\n        let root;\n        let str = stringify;\n        this.result = new Result(this._processor, root, this._opts);\n        this.result.css = css;\n        let self = this;\n        Object.defineProperty(this.result, \"root\", {\n            get () {\n                return self.root;\n            }\n        });\n        let map = new MapGenerator(str, root, this._opts, css);\n        if (map.isMap()) {\n            let [generatedCSS, generatedMap] = map.generate();\n            if (generatedCSS) {\n                this.result.css = generatedCSS;\n            }\n            if (generatedMap) {\n                this.result.map = generatedMap;\n            }\n        } else {\n            map.clearAnnotation();\n            this.result.css = map.css;\n        }\n    }\n    async() {\n        if (this.error) return Promise.reject(this.error);\n        return Promise.resolve(this.result);\n    }\n    catch(onRejected) {\n        return this.async().catch(onRejected);\n    }\n    finally(onFinally) {\n        return this.async().then(onFinally, onFinally);\n    }\n    sync() {\n        if (this.error) throw this.error;\n        return this.result;\n    }\n    then(onFulfilled, onRejected) {\n        if (true) {\n            if (!(\"from\" in this._opts)) {\n                warnOnce(\"Without `from` option PostCSS could generate wrong source map \" + \"and will not find Browserslist config. Set it to CSS file path \" + \"or to `undefined` to prevent this warning.\");\n            }\n        }\n        return this.async().then(onFulfilled, onRejected);\n    }\n    toString() {\n        return this._css;\n    }\n    warnings() {\n        return [];\n    }\n    get content() {\n        return this.result.css;\n    }\n    get css() {\n        return this.result.css;\n    }\n    get map() {\n        return this.result.map;\n    }\n    get messages() {\n        return [];\n    }\n    get opts() {\n        return this.result.opts;\n    }\n    get processor() {\n        return this.result.processor;\n    }\n    get root() {\n        if (this._root) {\n            return this._root;\n        }\n        let root;\n        let parser = parse;\n        try {\n            root = parser(this._css, this._opts);\n        } catch (error) {\n            this.error = error;\n        }\n        if (this.error) {\n            throw this.error;\n        } else {\n            this._root = root;\n            return root;\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"NoWorkResult\";\n    }\n}\nmodule.exports = NoWorkResult;\nNoWorkResult.default = NoWorkResult;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvbm8td29yay1yZXN1bHQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUMzQixJQUFJQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUN4QixJQUFJRSxXQUFXRixtQkFBT0EsQ0FBQztBQUN2QixJQUFJRyxRQUFRSCxtQkFBT0EsQ0FBQztBQUNwQixNQUFNSSxTQUFTSixtQkFBT0EsQ0FBQztBQUV2QixNQUFNSztJQUNKQyxZQUFZQyxTQUFTLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxDQUFFO1FBQ2hDRCxNQUFNQSxJQUFJRSxRQUFRO1FBQ2xCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBRW5CLElBQUksQ0FBQ0MsVUFBVSxHQUFHTDtRQUNsQixJQUFJLENBQUNNLElBQUksR0FBR0w7UUFDWixJQUFJLENBQUNNLEtBQUssR0FBR0w7UUFDYixJQUFJLENBQUNNLElBQUksR0FBR0M7UUFDWixJQUFJQztRQUVKLElBQUlDLE1BQU1qQjtRQUNWLElBQUksQ0FBQ2tCLE1BQU0sR0FBRyxJQUFJZixPQUFPLElBQUksQ0FBQ1EsVUFBVSxFQUFFSyxNQUFNLElBQUksQ0FBQ0gsS0FBSztRQUMxRCxJQUFJLENBQUNLLE1BQU0sQ0FBQ1gsR0FBRyxHQUFHQTtRQUVsQixJQUFJWSxPQUFPLElBQUk7UUFDZkMsT0FBT0MsY0FBYyxDQUFDLElBQUksQ0FBQ0gsTUFBTSxFQUFFLFFBQVE7WUFDekNJO2dCQUNFLE9BQU9ILEtBQUtILElBQUk7WUFDbEI7UUFDRjtRQUVBLElBQUlPLE1BQU0sSUFBSXpCLGFBQWFtQixLQUFLRCxNQUFNLElBQUksQ0FBQ0gsS0FBSyxFQUFFTjtRQUNsRCxJQUFJZ0IsSUFBSUMsS0FBSyxJQUFJO1lBQ2YsSUFBSSxDQUFDQyxjQUFjQyxhQUFhLEdBQUdILElBQUlJLFFBQVE7WUFDL0MsSUFBSUYsY0FBYztnQkFDaEIsSUFBSSxDQUFDUCxNQUFNLENBQUNYLEdBQUcsR0FBR2tCO1lBQ3BCO1lBQ0EsSUFBSUMsY0FBYztnQkFDaEIsSUFBSSxDQUFDUixNQUFNLENBQUNLLEdBQUcsR0FBR0c7WUFDcEI7UUFDRixPQUFPO1lBQ0xILElBQUlLLGVBQWU7WUFDbkIsSUFBSSxDQUFDVixNQUFNLENBQUNYLEdBQUcsR0FBR2dCLElBQUloQixHQUFHO1FBQzNCO0lBQ0Y7SUFFQXNCLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQ0MsS0FBSyxFQUFFLE9BQU9DLFFBQVFDLE1BQU0sQ0FBQyxJQUFJLENBQUNGLEtBQUs7UUFDaEQsT0FBT0MsUUFBUUUsT0FBTyxDQUFDLElBQUksQ0FBQ2YsTUFBTTtJQUNwQztJQUVBZ0IsTUFBTUMsVUFBVSxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDTixLQUFLLEdBQUdLLEtBQUssQ0FBQ0M7SUFDNUI7SUFFQUMsUUFBUUMsU0FBUyxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDUixLQUFLLEdBQUdTLElBQUksQ0FBQ0QsV0FBV0E7SUFDdEM7SUFFQUUsT0FBTztRQUNMLElBQUksSUFBSSxDQUFDVCxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUNBLEtBQUs7UUFDaEMsT0FBTyxJQUFJLENBQUNaLE1BQU07SUFDcEI7SUFFQW9CLEtBQUtFLFdBQVcsRUFBRUwsVUFBVSxFQUFFO1FBQzVCLElBQUlNLElBQXlCLEVBQWM7WUFDekMsSUFBSSxDQUFFLFdBQVUsSUFBSSxDQUFDNUIsS0FBSyxHQUFHO2dCQUMzQlosU0FDRSxtRUFDRSxvRUFDQTtZQUVOO1FBQ0Y7UUFFQSxPQUFPLElBQUksQ0FBQzRCLEtBQUssR0FBR1MsSUFBSSxDQUFDRSxhQUFhTDtJQUN4QztJQUVBMUIsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDRyxJQUFJO0lBQ2xCO0lBRUE4QixXQUFXO1FBQ1QsT0FBTyxFQUFFO0lBQ1g7SUFFQSxJQUFJQyxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUN6QixNQUFNLENBQUNYLEdBQUc7SUFDeEI7SUFFQSxJQUFJQSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUNXLE1BQU0sQ0FBQ1gsR0FBRztJQUN4QjtJQUVBLElBQUlnQixNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUNMLE1BQU0sQ0FBQ0ssR0FBRztJQUN4QjtJQUVBLElBQUlxQixXQUFXO1FBQ2IsT0FBTyxFQUFFO0lBQ1g7SUFFQSxJQUFJcEMsT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDVSxNQUFNLENBQUNWLElBQUk7SUFDekI7SUFFQSxJQUFJRixZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUNZLE1BQU0sQ0FBQ1osU0FBUztJQUM5QjtJQUVBLElBQUlVLE9BQU87UUFDVCxJQUFJLElBQUksQ0FBQzZCLEtBQUssRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFDQSxLQUFLO1FBQ25CO1FBRUEsSUFBSTdCO1FBQ0osSUFBSThCLFNBQVM1QztRQUViLElBQUk7WUFDRmMsT0FBTzhCLE9BQU8sSUFBSSxDQUFDbEMsSUFBSSxFQUFFLElBQUksQ0FBQ0MsS0FBSztRQUNyQyxFQUFFLE9BQU9pQixPQUFPO1lBQ2QsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO1FBQ2Y7UUFFQSxJQUFJLElBQUksQ0FBQ0EsS0FBSyxFQUFFO1lBQ2QsTUFBTSxJQUFJLENBQUNBLEtBQUs7UUFDbEIsT0FBTztZQUNMLElBQUksQ0FBQ2UsS0FBSyxHQUFHN0I7WUFDYixPQUFPQTtRQUNUO0lBQ0Y7SUFFQSxJQUFJLENBQUMrQixPQUFPQyxXQUFXLENBQUMsR0FBRztRQUN6QixPQUFPO0lBQ1Q7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUc5QztBQUNqQkEsYUFBYStDLE9BQU8sR0FBRy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL25vLXdvcmstcmVzdWx0LmpzP2Q4OWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL21hcC1nZW5lcmF0b3InKVxubGV0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5JylcbmxldCB3YXJuT25jZSA9IHJlcXVpcmUoJy4vd2Fybi1vbmNlJylcbmxldCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgUmVzdWx0ID0gcmVxdWlyZSgnLi9yZXN1bHQnKVxuXG5jbGFzcyBOb1dvcmtSZXN1bHQge1xuICBjb25zdHJ1Y3Rvcihwcm9jZXNzb3IsIGNzcywgb3B0cykge1xuICAgIGNzcyA9IGNzcy50b1N0cmluZygpXG4gICAgdGhpcy5zdHJpbmdpZmllZCA9IGZhbHNlXG5cbiAgICB0aGlzLl9wcm9jZXNzb3IgPSBwcm9jZXNzb3JcbiAgICB0aGlzLl9jc3MgPSBjc3NcbiAgICB0aGlzLl9vcHRzID0gb3B0c1xuICAgIHRoaXMuX21hcCA9IHVuZGVmaW5lZFxuICAgIGxldCByb290XG5cbiAgICBsZXQgc3RyID0gc3RyaW5naWZ5XG4gICAgdGhpcy5yZXN1bHQgPSBuZXcgUmVzdWx0KHRoaXMuX3Byb2Nlc3Nvciwgcm9vdCwgdGhpcy5fb3B0cylcbiAgICB0aGlzLnJlc3VsdC5jc3MgPSBjc3NcblxuICAgIGxldCBzZWxmID0gdGhpc1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnJlc3VsdCwgJ3Jvb3QnLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnJvb3RcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgbGV0IG1hcCA9IG5ldyBNYXBHZW5lcmF0b3Ioc3RyLCByb290LCB0aGlzLl9vcHRzLCBjc3MpXG4gICAgaWYgKG1hcC5pc01hcCgpKSB7XG4gICAgICBsZXQgW2dlbmVyYXRlZENTUywgZ2VuZXJhdGVkTWFwXSA9IG1hcC5nZW5lcmF0ZSgpXG4gICAgICBpZiAoZ2VuZXJhdGVkQ1NTKSB7XG4gICAgICAgIHRoaXMucmVzdWx0LmNzcyA9IGdlbmVyYXRlZENTU1xuICAgICAgfVxuICAgICAgaWYgKGdlbmVyYXRlZE1hcCkge1xuICAgICAgICB0aGlzLnJlc3VsdC5tYXAgPSBnZW5lcmF0ZWRNYXBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWFwLmNsZWFyQW5ub3RhdGlvbigpXG4gICAgICB0aGlzLnJlc3VsdC5jc3MgPSBtYXAuY3NzXG4gICAgfVxuICB9XG5cbiAgYXN5bmMoKSB7XG4gICAgaWYgKHRoaXMuZXJyb3IpIHJldHVybiBQcm9taXNlLnJlamVjdCh0aGlzLmVycm9yKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5yZXN1bHQpXG4gIH1cblxuICBjYXRjaChvblJlamVjdGVkKSB7XG4gICAgcmV0dXJuIHRoaXMuYXN5bmMoKS5jYXRjaChvblJlamVjdGVkKVxuICB9XG5cbiAgZmluYWxseShvbkZpbmFsbHkpIHtcbiAgICByZXR1cm4gdGhpcy5hc3luYygpLnRoZW4ob25GaW5hbGx5LCBvbkZpbmFsbHkpXG4gIH1cblxuICBzeW5jKCkge1xuICAgIGlmICh0aGlzLmVycm9yKSB0aHJvdyB0aGlzLmVycm9yXG4gICAgcmV0dXJuIHRoaXMucmVzdWx0XG4gIH1cblxuICB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKCdmcm9tJyBpbiB0aGlzLl9vcHRzKSkge1xuICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAnV2l0aG91dCBgZnJvbWAgb3B0aW9uIFBvc3RDU1MgY291bGQgZ2VuZXJhdGUgd3Jvbmcgc291cmNlIG1hcCAnICtcbiAgICAgICAgICAgICdhbmQgd2lsbCBub3QgZmluZCBCcm93c2Vyc2xpc3QgY29uZmlnLiBTZXQgaXQgdG8gQ1NTIGZpbGUgcGF0aCAnICtcbiAgICAgICAgICAgICdvciB0byBgdW5kZWZpbmVkYCB0byBwcmV2ZW50IHRoaXMgd2FybmluZy4nXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hc3luYygpLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fY3NzXG4gIH1cblxuICB3YXJuaW5ncygpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIGdldCBjb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5jc3NcbiAgfVxuXG4gIGdldCBjc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0LmNzc1xuICB9XG5cbiAgZ2V0IG1hcCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQubWFwXG4gIH1cblxuICBnZXQgbWVzc2FnZXMoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICBnZXQgb3B0cygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQub3B0c1xuICB9XG5cbiAgZ2V0IHByb2Nlc3NvcigpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQucHJvY2Vzc29yXG4gIH1cblxuICBnZXQgcm9vdCgpIHtcbiAgICBpZiAodGhpcy5fcm9vdCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jvb3RcbiAgICB9XG5cbiAgICBsZXQgcm9vdFxuICAgIGxldCBwYXJzZXIgPSBwYXJzZVxuXG4gICAgdHJ5IHtcbiAgICAgIHJvb3QgPSBwYXJzZXIodGhpcy5fY3NzLCB0aGlzLl9vcHRzKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmVycm9yID0gZXJyb3JcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgdGhyb3cgdGhpcy5lcnJvclxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yb290ID0gcm9vdFxuICAgICAgcmV0dXJuIHJvb3RcbiAgICB9XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdOb1dvcmtSZXN1bHQnXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOb1dvcmtSZXN1bHRcbk5vV29ya1Jlc3VsdC5kZWZhdWx0ID0gTm9Xb3JrUmVzdWx0XG4iXSwibmFtZXMiOlsiTWFwR2VuZXJhdG9yIiwicmVxdWlyZSIsInN0cmluZ2lmeSIsIndhcm5PbmNlIiwicGFyc2UiLCJSZXN1bHQiLCJOb1dvcmtSZXN1bHQiLCJjb25zdHJ1Y3RvciIsInByb2Nlc3NvciIsImNzcyIsIm9wdHMiLCJ0b1N0cmluZyIsInN0cmluZ2lmaWVkIiwiX3Byb2Nlc3NvciIsIl9jc3MiLCJfb3B0cyIsIl9tYXAiLCJ1bmRlZmluZWQiLCJyb290Iiwic3RyIiwicmVzdWx0Iiwic2VsZiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwibWFwIiwiaXNNYXAiLCJnZW5lcmF0ZWRDU1MiLCJnZW5lcmF0ZWRNYXAiLCJnZW5lcmF0ZSIsImNsZWFyQW5ub3RhdGlvbiIsImFzeW5jIiwiZXJyb3IiLCJQcm9taXNlIiwicmVqZWN0IiwicmVzb2x2ZSIsImNhdGNoIiwib25SZWplY3RlZCIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJ0aGVuIiwic3luYyIsIm9uRnVsZmlsbGVkIiwicHJvY2VzcyIsIndhcm5pbmdzIiwiY29udGVudCIsIm1lc3NhZ2VzIiwiX3Jvb3QiLCJwYXJzZXIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/no-work-result.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/node.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/node.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { isClean, my } = __webpack_require__(/*! ./symbols */ \"(ssr)/./node_modules/postcss/lib/symbols.js\");\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"(ssr)/./node_modules/postcss/lib/css-syntax-error.js\");\nlet Stringifier = __webpack_require__(/*! ./stringifier */ \"(ssr)/./node_modules/postcss/lib/stringifier.js\");\nlet stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/postcss/lib/stringify.js\");\nfunction cloneNode(obj, parent) {\n    let cloned = new obj.constructor();\n    for(let i in obj){\n        if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n            continue;\n        }\n        if (i === \"proxyCache\") continue;\n        let value = obj[i];\n        let type = typeof value;\n        if (i === \"parent\" && type === \"object\") {\n            if (parent) cloned[i] = parent;\n        } else if (i === \"source\") {\n            cloned[i] = value;\n        } else if (Array.isArray(value)) {\n            cloned[i] = value.map((j)=>cloneNode(j, cloned));\n        } else {\n            if (type === \"object\" && value !== null) value = cloneNode(value);\n            cloned[i] = value;\n        }\n    }\n    return cloned;\n}\nclass Node {\n    constructor(defaults = {}){\n        this.raws = {};\n        this[isClean] = false;\n        this[my] = true;\n        for(let name in defaults){\n            if (name === \"nodes\") {\n                this.nodes = [];\n                for (let node of defaults[name]){\n                    if (typeof node.clone === \"function\") {\n                        this.append(node.clone());\n                    } else {\n                        this.append(node);\n                    }\n                }\n            } else {\n                this[name] = defaults[name];\n            }\n        }\n    }\n    addToError(error) {\n        error.postcssNode = this;\n        if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n            let s = this.source;\n            error.stack = error.stack.replace(/\\n\\s{4}at /, `$&${s.input.from}:${s.start.line}:${s.start.column}$&`);\n        }\n        return error;\n    }\n    after(add) {\n        this.parent.insertAfter(this, add);\n        return this;\n    }\n    assign(overrides = {}) {\n        for(let name in overrides){\n            this[name] = overrides[name];\n        }\n        return this;\n    }\n    before(add) {\n        this.parent.insertBefore(this, add);\n        return this;\n    }\n    cleanRaws(keepBetween) {\n        delete this.raws.before;\n        delete this.raws.after;\n        if (!keepBetween) delete this.raws.between;\n    }\n    clone(overrides = {}) {\n        let cloned = cloneNode(this);\n        for(let name in overrides){\n            cloned[name] = overrides[name];\n        }\n        return cloned;\n    }\n    cloneAfter(overrides = {}) {\n        let cloned = this.clone(overrides);\n        this.parent.insertAfter(this, cloned);\n        return cloned;\n    }\n    cloneBefore(overrides = {}) {\n        let cloned = this.clone(overrides);\n        this.parent.insertBefore(this, cloned);\n        return cloned;\n    }\n    error(message, opts = {}) {\n        if (this.source) {\n            let { end, start } = this.rangeBy(opts);\n            return this.source.input.error(message, {\n                column: start.column,\n                line: start.line\n            }, {\n                column: end.column,\n                line: end.line\n            }, opts);\n        }\n        return new CssSyntaxError(message);\n    }\n    getProxyProcessor() {\n        return {\n            get (node, prop) {\n                if (prop === \"proxyOf\") {\n                    return node;\n                } else if (prop === \"root\") {\n                    return ()=>node.root().toProxy();\n                } else {\n                    return node[prop];\n                }\n            },\n            set (node, prop, value) {\n                if (node[prop] === value) return true;\n                node[prop] = value;\n                if (prop === \"prop\" || prop === \"value\" || prop === \"name\" || prop === \"params\" || prop === \"important\" || /* c8 ignore next */ prop === \"text\") {\n                    node.markDirty();\n                }\n                return true;\n            }\n        };\n    }\n    markDirty() {\n        if (this[isClean]) {\n            this[isClean] = false;\n            let next = this;\n            while(next = next.parent){\n                next[isClean] = false;\n            }\n        }\n    }\n    next() {\n        if (!this.parent) return undefined;\n        let index = this.parent.index(this);\n        return this.parent.nodes[index + 1];\n    }\n    positionBy(opts, stringRepresentation) {\n        let pos = this.source.start;\n        if (opts.index) {\n            pos = this.positionInside(opts.index, stringRepresentation);\n        } else if (opts.word) {\n            stringRepresentation = this.toString();\n            let index = stringRepresentation.indexOf(opts.word);\n            if (index !== -1) pos = this.positionInside(index, stringRepresentation);\n        }\n        return pos;\n    }\n    positionInside(index, stringRepresentation) {\n        let string = stringRepresentation || this.toString();\n        let column = this.source.start.column;\n        let line = this.source.start.line;\n        for(let i = 0; i < index; i++){\n            if (string[i] === \"\\n\") {\n                column = 1;\n                line += 1;\n            } else {\n                column += 1;\n            }\n        }\n        return {\n            column,\n            line\n        };\n    }\n    prev() {\n        if (!this.parent) return undefined;\n        let index = this.parent.index(this);\n        return this.parent.nodes[index - 1];\n    }\n    rangeBy(opts) {\n        let start = {\n            column: this.source.start.column,\n            line: this.source.start.line\n        };\n        let end = this.source.end ? {\n            column: this.source.end.column + 1,\n            line: this.source.end.line\n        } : {\n            column: start.column + 1,\n            line: start.line\n        };\n        if (opts.word) {\n            let stringRepresentation = this.toString();\n            let index = stringRepresentation.indexOf(opts.word);\n            if (index !== -1) {\n                start = this.positionInside(index, stringRepresentation);\n                end = this.positionInside(index + opts.word.length, stringRepresentation);\n            }\n        } else {\n            if (opts.start) {\n                start = {\n                    column: opts.start.column,\n                    line: opts.start.line\n                };\n            } else if (opts.index) {\n                start = this.positionInside(opts.index);\n            }\n            if (opts.end) {\n                end = {\n                    column: opts.end.column,\n                    line: opts.end.line\n                };\n            } else if (opts.endIndex) {\n                end = this.positionInside(opts.endIndex);\n            } else if (opts.index) {\n                end = this.positionInside(opts.index + 1);\n            }\n        }\n        if (end.line < start.line || end.line === start.line && end.column <= start.column) {\n            end = {\n                column: start.column + 1,\n                line: start.line\n            };\n        }\n        return {\n            end,\n            start\n        };\n    }\n    raw(prop, defaultType) {\n        let str = new Stringifier();\n        return str.raw(this, prop, defaultType);\n    }\n    remove() {\n        if (this.parent) {\n            this.parent.removeChild(this);\n        }\n        this.parent = undefined;\n        return this;\n    }\n    replaceWith(...nodes) {\n        if (this.parent) {\n            let bookmark = this;\n            let foundSelf = false;\n            for (let node of nodes){\n                if (node === this) {\n                    foundSelf = true;\n                } else if (foundSelf) {\n                    this.parent.insertAfter(bookmark, node);\n                    bookmark = node;\n                } else {\n                    this.parent.insertBefore(bookmark, node);\n                }\n            }\n            if (!foundSelf) {\n                this.remove();\n            }\n        }\n        return this;\n    }\n    root() {\n        let result = this;\n        while(result.parent && result.parent.type !== \"document\"){\n            result = result.parent;\n        }\n        return result;\n    }\n    toJSON(_, inputs) {\n        let fixed = {};\n        let emitInputs = inputs == null;\n        inputs = inputs || new Map();\n        let inputsNextIndex = 0;\n        for(let name in this){\n            if (!Object.prototype.hasOwnProperty.call(this, name)) {\n                continue;\n            }\n            if (name === \"parent\" || name === \"proxyCache\") continue;\n            let value = this[name];\n            if (Array.isArray(value)) {\n                fixed[name] = value.map((i)=>{\n                    if (typeof i === \"object\" && i.toJSON) {\n                        return i.toJSON(null, inputs);\n                    } else {\n                        return i;\n                    }\n                });\n            } else if (typeof value === \"object\" && value.toJSON) {\n                fixed[name] = value.toJSON(null, inputs);\n            } else if (name === \"source\") {\n                let inputId = inputs.get(value.input);\n                if (inputId == null) {\n                    inputId = inputsNextIndex;\n                    inputs.set(value.input, inputsNextIndex);\n                    inputsNextIndex++;\n                }\n                fixed[name] = {\n                    end: value.end,\n                    inputId,\n                    start: value.start\n                };\n            } else {\n                fixed[name] = value;\n            }\n        }\n        if (emitInputs) {\n            fixed.inputs = [\n                ...inputs.keys()\n            ].map((input)=>input.toJSON());\n        }\n        return fixed;\n    }\n    toProxy() {\n        if (!this.proxyCache) {\n            this.proxyCache = new Proxy(this, this.getProxyProcessor());\n        }\n        return this.proxyCache;\n    }\n    toString(stringifier = stringify) {\n        if (stringifier.stringify) stringifier = stringifier.stringify;\n        let result = \"\";\n        stringifier(this, (i)=>{\n            result += i;\n        });\n        return result;\n    }\n    warn(result, text, opts) {\n        let data = {\n            node: this\n        };\n        for(let i in opts)data[i] = opts[i];\n        return result.warn(text, data);\n    }\n    get proxyOf() {\n        return this;\n    }\n}\nmodule.exports = Node;\nNode.default = Node;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/parse.js":
/*!*******************************************!*\
  !*** ./node_modules/postcss/lib/parse.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet Parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/postcss/lib/parser.js\");\nlet Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/postcss/lib/input.js\");\nfunction parse(css, opts) {\n    let input = new Input(css, opts);\n    let parser = new Parser(input);\n    try {\n        parser.parse();\n    } catch (e) {\n        if (true) {\n            if (e.name === \"CssSyntaxError\" && opts && opts.from) {\n                if (/\\.scss$/i.test(opts.from)) {\n                    e.message += \"\\nYou tried to parse SCSS with \" + \"the standard CSS parser; \" + \"try again with the postcss-scss parser\";\n                } else if (/\\.sass/i.test(opts.from)) {\n                    e.message += \"\\nYou tried to parse Sass with \" + \"the standard CSS parser; \" + \"try again with the postcss-sass parser\";\n                } else if (/\\.less$/i.test(opts.from)) {\n                    e.message += \"\\nYou tried to parse Less with \" + \"the standard CSS parser; \" + \"try again with the postcss-less parser\";\n                }\n            }\n        }\n        throw e;\n    }\n    return parser.root;\n}\nmodule.exports = parse;\nparse.default = parse;\nContainer.registerParse(parse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcGFyc2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQztBQUN4QixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxRQUFRRixtQkFBT0EsQ0FBQztBQUVwQixTQUFTRyxNQUFNQyxHQUFHLEVBQUVDLElBQUk7SUFDdEIsSUFBSUMsUUFBUSxJQUFJSixNQUFNRSxLQUFLQztJQUMzQixJQUFJRSxTQUFTLElBQUlOLE9BQU9LO0lBQ3hCLElBQUk7UUFDRkMsT0FBT0osS0FBSztJQUNkLEVBQUUsT0FBT0ssR0FBRztRQUNWLElBQUlDLElBQXlCLEVBQWM7WUFDekMsSUFBSUQsRUFBRUUsSUFBSSxLQUFLLG9CQUFvQkwsUUFBUUEsS0FBS00sSUFBSSxFQUFFO2dCQUNwRCxJQUFJLFdBQVdDLElBQUksQ0FBQ1AsS0FBS00sSUFBSSxHQUFHO29CQUM5QkgsRUFBRUssT0FBTyxJQUNQLG9DQUNBLDhCQUNBO2dCQUNKLE9BQU8sSUFBSSxVQUFVRCxJQUFJLENBQUNQLEtBQUtNLElBQUksR0FBRztvQkFDcENILEVBQUVLLE9BQU8sSUFDUCxvQ0FDQSw4QkFDQTtnQkFDSixPQUFPLElBQUksV0FBV0QsSUFBSSxDQUFDUCxLQUFLTSxJQUFJLEdBQUc7b0JBQ3JDSCxFQUFFSyxPQUFPLElBQ1Asb0NBQ0EsOEJBQ0E7Z0JBQ0o7WUFDRjtRQUNGO1FBQ0EsTUFBTUw7SUFDUjtJQUVBLE9BQU9ELE9BQU9PLElBQUk7QUFDcEI7QUFFQUMsT0FBT0MsT0FBTyxHQUFHYjtBQUNqQkEsTUFBTWMsT0FBTyxHQUFHZDtBQUVoQkosVUFBVW1CLGFBQWEsQ0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcGFyc2UuanM/MzYzMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcbmxldCBQYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpXG5sZXQgSW5wdXQgPSByZXF1aXJlKCcuL2lucHV0JylcblxuZnVuY3Rpb24gcGFyc2UoY3NzLCBvcHRzKSB7XG4gIGxldCBpbnB1dCA9IG5ldyBJbnB1dChjc3MsIG9wdHMpXG4gIGxldCBwYXJzZXIgPSBuZXcgUGFyc2VyKGlucHV0KVxuICB0cnkge1xuICAgIHBhcnNlci5wYXJzZSgpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGUubmFtZSA9PT0gJ0Nzc1N5bnRheEVycm9yJyAmJiBvcHRzICYmIG9wdHMuZnJvbSkge1xuICAgICAgICBpZiAoL1xcLnNjc3MkL2kudGVzdChvcHRzLmZyb20pKSB7XG4gICAgICAgICAgZS5tZXNzYWdlICs9XG4gICAgICAgICAgICAnXFxuWW91IHRyaWVkIHRvIHBhcnNlIFNDU1Mgd2l0aCAnICtcbiAgICAgICAgICAgICd0aGUgc3RhbmRhcmQgQ1NTIHBhcnNlcjsgJyArXG4gICAgICAgICAgICAndHJ5IGFnYWluIHdpdGggdGhlIHBvc3Rjc3Mtc2NzcyBwYXJzZXInXG4gICAgICAgIH0gZWxzZSBpZiAoL1xcLnNhc3MvaS50ZXN0KG9wdHMuZnJvbSkpIHtcbiAgICAgICAgICBlLm1lc3NhZ2UgKz1cbiAgICAgICAgICAgICdcXG5Zb3UgdHJpZWQgdG8gcGFyc2UgU2FzcyB3aXRoICcgK1xuICAgICAgICAgICAgJ3RoZSBzdGFuZGFyZCBDU1MgcGFyc2VyOyAnICtcbiAgICAgICAgICAgICd0cnkgYWdhaW4gd2l0aCB0aGUgcG9zdGNzcy1zYXNzIHBhcnNlcidcbiAgICAgICAgfSBlbHNlIGlmICgvXFwubGVzcyQvaS50ZXN0KG9wdHMuZnJvbSkpIHtcbiAgICAgICAgICBlLm1lc3NhZ2UgKz1cbiAgICAgICAgICAgICdcXG5Zb3UgdHJpZWQgdG8gcGFyc2UgTGVzcyB3aXRoICcgK1xuICAgICAgICAgICAgJ3RoZSBzdGFuZGFyZCBDU1MgcGFyc2VyOyAnICtcbiAgICAgICAgICAgICd0cnkgYWdhaW4gd2l0aCB0aGUgcG9zdGNzcy1sZXNzIHBhcnNlcidcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBlXG4gIH1cblxuICByZXR1cm4gcGFyc2VyLnJvb3Rcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVxucGFyc2UuZGVmYXVsdCA9IHBhcnNlXG5cbkNvbnRhaW5lci5yZWdpc3RlclBhcnNlKHBhcnNlKVxuIl0sIm5hbWVzIjpbIkNvbnRhaW5lciIsInJlcXVpcmUiLCJQYXJzZXIiLCJJbnB1dCIsInBhcnNlIiwiY3NzIiwib3B0cyIsImlucHV0IiwicGFyc2VyIiwiZSIsInByb2Nlc3MiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJtZXNzYWdlIiwicm9vdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwicmVnaXN0ZXJQYXJzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/parser.js":
/*!********************************************!*\
  !*** ./node_modules/postcss/lib/parser.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Declaration = __webpack_require__(/*! ./declaration */ \"(ssr)/./node_modules/postcss/lib/declaration.js\");\nlet tokenizer = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/postcss/lib/tokenize.js\");\nlet Comment = __webpack_require__(/*! ./comment */ \"(ssr)/./node_modules/postcss/lib/comment.js\");\nlet AtRule = __webpack_require__(/*! ./at-rule */ \"(ssr)/./node_modules/postcss/lib/at-rule.js\");\nlet Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/postcss/lib/root.js\");\nlet Rule = __webpack_require__(/*! ./rule */ \"(ssr)/./node_modules/postcss/lib/rule.js\");\nconst SAFE_COMMENT_NEIGHBOR = {\n    empty: true,\n    space: true\n};\nfunction findLastWithPosition(tokens) {\n    for(let i = tokens.length - 1; i >= 0; i--){\n        let token = tokens[i];\n        let pos = token[3] || token[2];\n        if (pos) return pos;\n    }\n}\nclass Parser {\n    constructor(input){\n        this.input = input;\n        this.root = new Root();\n        this.current = this.root;\n        this.spaces = \"\";\n        this.semicolon = false;\n        this.createTokenizer();\n        this.root.source = {\n            input,\n            start: {\n                column: 1,\n                line: 1,\n                offset: 0\n            }\n        };\n    }\n    atrule(token) {\n        let node = new AtRule();\n        node.name = token[1].slice(1);\n        if (node.name === \"\") {\n            this.unnamedAtrule(node, token);\n        }\n        this.init(node, token[2]);\n        let type;\n        let prev;\n        let shift;\n        let last = false;\n        let open = false;\n        let params = [];\n        let brackets = [];\n        while(!this.tokenizer.endOfFile()){\n            token = this.tokenizer.nextToken();\n            type = token[0];\n            if (type === \"(\" || type === \"[\") {\n                brackets.push(type === \"(\" ? \")\" : \"]\");\n            } else if (type === \"{\" && brackets.length > 0) {\n                brackets.push(\"}\");\n            } else if (type === brackets[brackets.length - 1]) {\n                brackets.pop();\n            }\n            if (brackets.length === 0) {\n                if (type === \";\") {\n                    node.source.end = this.getPosition(token[2]);\n                    node.source.end.offset++;\n                    this.semicolon = true;\n                    break;\n                } else if (type === \"{\") {\n                    open = true;\n                    break;\n                } else if (type === \"}\") {\n                    if (params.length > 0) {\n                        shift = params.length - 1;\n                        prev = params[shift];\n                        while(prev && prev[0] === \"space\"){\n                            prev = params[--shift];\n                        }\n                        if (prev) {\n                            node.source.end = this.getPosition(prev[3] || prev[2]);\n                            node.source.end.offset++;\n                        }\n                    }\n                    this.end(token);\n                    break;\n                } else {\n                    params.push(token);\n                }\n            } else {\n                params.push(token);\n            }\n            if (this.tokenizer.endOfFile()) {\n                last = true;\n                break;\n            }\n        }\n        node.raws.between = this.spacesAndCommentsFromEnd(params);\n        if (params.length) {\n            node.raws.afterName = this.spacesAndCommentsFromStart(params);\n            this.raw(node, \"params\", params);\n            if (last) {\n                token = params[params.length - 1];\n                node.source.end = this.getPosition(token[3] || token[2]);\n                node.source.end.offset++;\n                this.spaces = node.raws.between;\n                node.raws.between = \"\";\n            }\n        } else {\n            node.raws.afterName = \"\";\n            node.params = \"\";\n        }\n        if (open) {\n            node.nodes = [];\n            this.current = node;\n        }\n    }\n    checkMissedSemicolon(tokens) {\n        let colon = this.colon(tokens);\n        if (colon === false) return;\n        let founded = 0;\n        let token;\n        for(let j = colon - 1; j >= 0; j--){\n            token = tokens[j];\n            if (token[0] !== \"space\") {\n                founded += 1;\n                if (founded === 2) break;\n            }\n        }\n        // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n        // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n        // And because we need it after that one we do +1 to get the next one.\n        throw this.input.error(\"Missed semicolon\", token[0] === \"word\" ? token[3] + 1 : token[2]);\n    }\n    colon(tokens) {\n        let brackets = 0;\n        let token, type, prev;\n        for (let [i, element] of tokens.entries()){\n            token = element;\n            type = token[0];\n            if (type === \"(\") {\n                brackets += 1;\n            }\n            if (type === \")\") {\n                brackets -= 1;\n            }\n            if (brackets === 0 && type === \":\") {\n                if (!prev) {\n                    this.doubleColon(token);\n                } else if (prev[0] === \"word\" && prev[1] === \"progid\") {\n                    continue;\n                } else {\n                    return i;\n                }\n            }\n            prev = token;\n        }\n        return false;\n    }\n    comment(token) {\n        let node = new Comment();\n        this.init(node, token[2]);\n        node.source.end = this.getPosition(token[3] || token[2]);\n        node.source.end.offset++;\n        let text = token[1].slice(2, -2);\n        if (/^\\s*$/.test(text)) {\n            node.text = \"\";\n            node.raws.left = text;\n            node.raws.right = \"\";\n        } else {\n            let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/);\n            node.text = match[2];\n            node.raws.left = match[1];\n            node.raws.right = match[3];\n        }\n    }\n    createTokenizer() {\n        this.tokenizer = tokenizer(this.input);\n    }\n    decl(tokens, customProperty) {\n        let node = new Declaration();\n        this.init(node, tokens[0][2]);\n        let last = tokens[tokens.length - 1];\n        if (last[0] === \";\") {\n            this.semicolon = true;\n            tokens.pop();\n        }\n        node.source.end = this.getPosition(last[3] || last[2] || findLastWithPosition(tokens));\n        node.source.end.offset++;\n        while(tokens[0][0] !== \"word\"){\n            if (tokens.length === 1) this.unknownWord(tokens);\n            node.raws.before += tokens.shift()[1];\n        }\n        node.source.start = this.getPosition(tokens[0][2]);\n        node.prop = \"\";\n        while(tokens.length){\n            let type = tokens[0][0];\n            if (type === \":\" || type === \"space\" || type === \"comment\") {\n                break;\n            }\n            node.prop += tokens.shift()[1];\n        }\n        node.raws.between = \"\";\n        let token;\n        while(tokens.length){\n            token = tokens.shift();\n            if (token[0] === \":\") {\n                node.raws.between += token[1];\n                break;\n            } else {\n                if (token[0] === \"word\" && /\\w/.test(token[1])) {\n                    this.unknownWord([\n                        token\n                    ]);\n                }\n                node.raws.between += token[1];\n            }\n        }\n        if (node.prop[0] === \"_\" || node.prop[0] === \"*\") {\n            node.raws.before += node.prop[0];\n            node.prop = node.prop.slice(1);\n        }\n        let firstSpaces = [];\n        let next;\n        while(tokens.length){\n            next = tokens[0][0];\n            if (next !== \"space\" && next !== \"comment\") break;\n            firstSpaces.push(tokens.shift());\n        }\n        this.precheckMissedSemicolon(tokens);\n        for(let i = tokens.length - 1; i >= 0; i--){\n            token = tokens[i];\n            if (token[1].toLowerCase() === \"!important\") {\n                node.important = true;\n                let string = this.stringFrom(tokens, i);\n                string = this.spacesFromEnd(tokens) + string;\n                if (string !== \" !important\") node.raws.important = string;\n                break;\n            } else if (token[1].toLowerCase() === \"important\") {\n                let cache = tokens.slice(0);\n                let str = \"\";\n                for(let j = i; j > 0; j--){\n                    let type = cache[j][0];\n                    if (str.trim().indexOf(\"!\") === 0 && type !== \"space\") {\n                        break;\n                    }\n                    str = cache.pop()[1] + str;\n                }\n                if (str.trim().indexOf(\"!\") === 0) {\n                    node.important = true;\n                    node.raws.important = str;\n                    tokens = cache;\n                }\n            }\n            if (token[0] !== \"space\" && token[0] !== \"comment\") {\n                break;\n            }\n        }\n        let hasWord = tokens.some((i)=>i[0] !== \"space\" && i[0] !== \"comment\");\n        if (hasWord) {\n            node.raws.between += firstSpaces.map((i)=>i[1]).join(\"\");\n            firstSpaces = [];\n        }\n        this.raw(node, \"value\", firstSpaces.concat(tokens), customProperty);\n        if (node.value.includes(\":\") && !customProperty) {\n            this.checkMissedSemicolon(tokens);\n        }\n    }\n    doubleColon(token) {\n        throw this.input.error(\"Double colon\", {\n            offset: token[2]\n        }, {\n            offset: token[2] + token[1].length\n        });\n    }\n    emptyRule(token) {\n        let node = new Rule();\n        this.init(node, token[2]);\n        node.selector = \"\";\n        node.raws.between = \"\";\n        this.current = node;\n    }\n    end(token) {\n        if (this.current.nodes && this.current.nodes.length) {\n            this.current.raws.semicolon = this.semicolon;\n        }\n        this.semicolon = false;\n        this.current.raws.after = (this.current.raws.after || \"\") + this.spaces;\n        this.spaces = \"\";\n        if (this.current.parent) {\n            this.current.source.end = this.getPosition(token[2]);\n            this.current.source.end.offset++;\n            this.current = this.current.parent;\n        } else {\n            this.unexpectedClose(token);\n        }\n    }\n    endFile() {\n        if (this.current.parent) this.unclosedBlock();\n        if (this.current.nodes && this.current.nodes.length) {\n            this.current.raws.semicolon = this.semicolon;\n        }\n        this.current.raws.after = (this.current.raws.after || \"\") + this.spaces;\n        this.root.source.end = this.getPosition(this.tokenizer.position());\n    }\n    freeSemicolon(token) {\n        this.spaces += token[1];\n        if (this.current.nodes) {\n            let prev = this.current.nodes[this.current.nodes.length - 1];\n            if (prev && prev.type === \"rule\" && !prev.raws.ownSemicolon) {\n                prev.raws.ownSemicolon = this.spaces;\n                this.spaces = \"\";\n            }\n        }\n    }\n    // Helpers\n    getPosition(offset) {\n        let pos = this.input.fromOffset(offset);\n        return {\n            column: pos.col,\n            line: pos.line,\n            offset\n        };\n    }\n    init(node, offset) {\n        this.current.push(node);\n        node.source = {\n            input: this.input,\n            start: this.getPosition(offset)\n        };\n        node.raws.before = this.spaces;\n        this.spaces = \"\";\n        if (node.type !== \"comment\") this.semicolon = false;\n    }\n    other(start) {\n        let end = false;\n        let type = null;\n        let colon = false;\n        let bracket = null;\n        let brackets = [];\n        let customProperty = start[1].startsWith(\"--\");\n        let tokens = [];\n        let token = start;\n        while(token){\n            type = token[0];\n            tokens.push(token);\n            if (type === \"(\" || type === \"[\") {\n                if (!bracket) bracket = token;\n                brackets.push(type === \"(\" ? \")\" : \"]\");\n            } else if (customProperty && colon && type === \"{\") {\n                if (!bracket) bracket = token;\n                brackets.push(\"}\");\n            } else if (brackets.length === 0) {\n                if (type === \";\") {\n                    if (colon) {\n                        this.decl(tokens, customProperty);\n                        return;\n                    } else {\n                        break;\n                    }\n                } else if (type === \"{\") {\n                    this.rule(tokens);\n                    return;\n                } else if (type === \"}\") {\n                    this.tokenizer.back(tokens.pop());\n                    end = true;\n                    break;\n                } else if (type === \":\") {\n                    colon = true;\n                }\n            } else if (type === brackets[brackets.length - 1]) {\n                brackets.pop();\n                if (brackets.length === 0) bracket = null;\n            }\n            token = this.tokenizer.nextToken();\n        }\n        if (this.tokenizer.endOfFile()) end = true;\n        if (brackets.length > 0) this.unclosedBracket(bracket);\n        if (end && colon) {\n            if (!customProperty) {\n                while(tokens.length){\n                    token = tokens[tokens.length - 1][0];\n                    if (token !== \"space\" && token !== \"comment\") break;\n                    this.tokenizer.back(tokens.pop());\n                }\n            }\n            this.decl(tokens, customProperty);\n        } else {\n            this.unknownWord(tokens);\n        }\n    }\n    parse() {\n        let token;\n        while(!this.tokenizer.endOfFile()){\n            token = this.tokenizer.nextToken();\n            switch(token[0]){\n                case \"space\":\n                    this.spaces += token[1];\n                    break;\n                case \";\":\n                    this.freeSemicolon(token);\n                    break;\n                case \"}\":\n                    this.end(token);\n                    break;\n                case \"comment\":\n                    this.comment(token);\n                    break;\n                case \"at-word\":\n                    this.atrule(token);\n                    break;\n                case \"{\":\n                    this.emptyRule(token);\n                    break;\n                default:\n                    this.other(token);\n                    break;\n            }\n        }\n        this.endFile();\n    }\n    precheckMissedSemicolon() {\n    // Hook for Safe Parser\n    }\n    raw(node, prop, tokens, customProperty) {\n        let token, type;\n        let length = tokens.length;\n        let value = \"\";\n        let clean = true;\n        let next, prev;\n        for(let i = 0; i < length; i += 1){\n            token = tokens[i];\n            type = token[0];\n            if (type === \"space\" && i === length - 1 && !customProperty) {\n                clean = false;\n            } else if (type === \"comment\") {\n                prev = tokens[i - 1] ? tokens[i - 1][0] : \"empty\";\n                next = tokens[i + 1] ? tokens[i + 1][0] : \"empty\";\n                if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n                    if (value.slice(-1) === \",\") {\n                        clean = false;\n                    } else {\n                        value += token[1];\n                    }\n                } else {\n                    clean = false;\n                }\n            } else {\n                value += token[1];\n            }\n        }\n        if (!clean) {\n            let raw = tokens.reduce((all, i)=>all + i[1], \"\");\n            node.raws[prop] = {\n                raw,\n                value\n            };\n        }\n        node[prop] = value;\n    }\n    rule(tokens) {\n        tokens.pop();\n        let node = new Rule();\n        this.init(node, tokens[0][2]);\n        node.raws.between = this.spacesAndCommentsFromEnd(tokens);\n        this.raw(node, \"selector\", tokens);\n        this.current = node;\n    }\n    spacesAndCommentsFromEnd(tokens) {\n        let lastTokenType;\n        let spaces = \"\";\n        while(tokens.length){\n            lastTokenType = tokens[tokens.length - 1][0];\n            if (lastTokenType !== \"space\" && lastTokenType !== \"comment\") break;\n            spaces = tokens.pop()[1] + spaces;\n        }\n        return spaces;\n    }\n    // Errors\n    spacesAndCommentsFromStart(tokens) {\n        let next;\n        let spaces = \"\";\n        while(tokens.length){\n            next = tokens[0][0];\n            if (next !== \"space\" && next !== \"comment\") break;\n            spaces += tokens.shift()[1];\n        }\n        return spaces;\n    }\n    spacesFromEnd(tokens) {\n        let lastTokenType;\n        let spaces = \"\";\n        while(tokens.length){\n            lastTokenType = tokens[tokens.length - 1][0];\n            if (lastTokenType !== \"space\") break;\n            spaces = tokens.pop()[1] + spaces;\n        }\n        return spaces;\n    }\n    stringFrom(tokens, from) {\n        let result = \"\";\n        for(let i = from; i < tokens.length; i++){\n            result += tokens[i][1];\n        }\n        tokens.splice(from, tokens.length - from);\n        return result;\n    }\n    unclosedBlock() {\n        let pos = this.current.source.start;\n        throw this.input.error(\"Unclosed block\", pos.line, pos.column);\n    }\n    unclosedBracket(bracket) {\n        throw this.input.error(\"Unclosed bracket\", {\n            offset: bracket[2]\n        }, {\n            offset: bracket[2] + 1\n        });\n    }\n    unexpectedClose(token) {\n        throw this.input.error(\"Unexpected }\", {\n            offset: token[2]\n        }, {\n            offset: token[2] + 1\n        });\n    }\n    unknownWord(tokens) {\n        throw this.input.error(\"Unknown word\", {\n            offset: tokens[0][2]\n        }, {\n            offset: tokens[0][2] + tokens[0][1].length\n        });\n    }\n    unnamedAtrule(node, token) {\n        throw this.input.error(\"At-rule without name\", {\n            offset: token[2]\n        }, {\n            offset: token[2] + token[1].length\n        });\n    }\n}\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/postcss.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/postcss.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"(ssr)/./node_modules/postcss/lib/css-syntax-error.js\");\nlet Declaration = __webpack_require__(/*! ./declaration */ \"(ssr)/./node_modules/postcss/lib/declaration.js\");\nlet LazyResult = __webpack_require__(/*! ./lazy-result */ \"(ssr)/./node_modules/postcss/lib/lazy-result.js\");\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet Processor = __webpack_require__(/*! ./processor */ \"(ssr)/./node_modules/postcss/lib/processor.js\");\nlet stringify = __webpack_require__(/*! ./stringify */ \"(ssr)/./node_modules/postcss/lib/stringify.js\");\nlet fromJSON = __webpack_require__(/*! ./fromJSON */ \"(ssr)/./node_modules/postcss/lib/fromJSON.js\");\nlet Document = __webpack_require__(/*! ./document */ \"(ssr)/./node_modules/postcss/lib/document.js\");\nlet Warning = __webpack_require__(/*! ./warning */ \"(ssr)/./node_modules/postcss/lib/warning.js\");\nlet Comment = __webpack_require__(/*! ./comment */ \"(ssr)/./node_modules/postcss/lib/comment.js\");\nlet AtRule = __webpack_require__(/*! ./at-rule */ \"(ssr)/./node_modules/postcss/lib/at-rule.js\");\nlet Result = __webpack_require__(/*! ./result.js */ \"(ssr)/./node_modules/postcss/lib/result.js\");\nlet Input = __webpack_require__(/*! ./input */ \"(ssr)/./node_modules/postcss/lib/input.js\");\nlet parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/postcss/lib/parse.js\");\nlet list = __webpack_require__(/*! ./list */ \"(ssr)/./node_modules/postcss/lib/list.js\");\nlet Rule = __webpack_require__(/*! ./rule */ \"(ssr)/./node_modules/postcss/lib/rule.js\");\nlet Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/postcss/lib/root.js\");\nlet Node = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/postcss/lib/node.js\");\nfunction postcss(...plugins) {\n    if (plugins.length === 1 && Array.isArray(plugins[0])) {\n        plugins = plugins[0];\n    }\n    return new Processor(plugins);\n}\npostcss.plugin = function plugin(name, initializer) {\n    let warningPrinted = false;\n    function creator(...args) {\n        // eslint-disable-next-line no-console\n        if (console && console.warn && !warningPrinted) {\n            warningPrinted = true;\n            // eslint-disable-next-line no-console\n            console.warn(name + \": postcss.plugin was deprecated. Migration guide:\\n\" + \"https://evilmartians.com/chronicles/postcss-8-plugin-migration\");\n            if (process.env.LANG && process.env.LANG.startsWith(\"cn\")) {\n                /* c8 ignore next 7 */ // eslint-disable-next-line no-console\n                console.warn(name + \": 里面 postcss.plugin 被弃用. 迁移指南:\\n\" + \"https://www.w3ctech.com/topic/2226\");\n            }\n        }\n        let transformer = initializer(...args);\n        transformer.postcssPlugin = name;\n        transformer.postcssVersion = new Processor().version;\n        return transformer;\n    }\n    let cache;\n    Object.defineProperty(creator, \"postcss\", {\n        get () {\n            if (!cache) cache = creator();\n            return cache;\n        }\n    });\n    creator.process = function(css, processOpts, pluginOpts) {\n        return postcss([\n            creator(pluginOpts)\n        ]).process(css, processOpts);\n    };\n    return creator;\n};\npostcss.stringify = stringify;\npostcss.parse = parse;\npostcss.fromJSON = fromJSON;\npostcss.list = list;\npostcss.comment = (defaults)=>new Comment(defaults);\npostcss.atRule = (defaults)=>new AtRule(defaults);\npostcss.decl = (defaults)=>new Declaration(defaults);\npostcss.rule = (defaults)=>new Rule(defaults);\npostcss.root = (defaults)=>new Root(defaults);\npostcss.document = (defaults)=>new Document(defaults);\npostcss.CssSyntaxError = CssSyntaxError;\npostcss.Declaration = Declaration;\npostcss.Container = Container;\npostcss.Processor = Processor;\npostcss.Document = Document;\npostcss.Comment = Comment;\npostcss.Warning = Warning;\npostcss.AtRule = AtRule;\npostcss.Result = Result;\npostcss.Input = Input;\npostcss.Rule = Rule;\npostcss.Root = Root;\npostcss.Node = Node;\nLazyResult.registerPostcss(postcss);\nmodule.exports = postcss;\npostcss.default = postcss;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/postcss.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/previous-map.js":
/*!**************************************************!*\
  !*** ./node_modules/postcss/lib/previous-map.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"(ssr)/./node_modules/source-map-js/source-map.js\");\nlet { existsSync, readFileSync } = __webpack_require__(/*! fs */ \"fs\");\nlet { dirname, join } = __webpack_require__(/*! path */ \"path\");\nfunction fromBase64(str) {\n    if (Buffer) {\n        return Buffer.from(str, \"base64\").toString();\n    } else {\n        /* c8 ignore next 2 */ return window.atob(str);\n    }\n}\nclass PreviousMap {\n    constructor(css, opts){\n        if (opts.map === false) return;\n        this.loadAnnotation(css);\n        this.inline = this.startWith(this.annotation, \"data:\");\n        let prev = opts.map ? opts.map.prev : undefined;\n        let text = this.loadMap(opts.from, prev);\n        if (!this.mapFile && opts.from) {\n            this.mapFile = opts.from;\n        }\n        if (this.mapFile) this.root = dirname(this.mapFile);\n        if (text) this.text = text;\n    }\n    consumer() {\n        if (!this.consumerCache) {\n            this.consumerCache = new SourceMapConsumer(this.text);\n        }\n        return this.consumerCache;\n    }\n    decodeInline(text) {\n        let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/;\n        let baseUri = /^data:application\\/json;base64,/;\n        let charsetUri = /^data:application\\/json;charset=utf-?8,/;\n        let uri = /^data:application\\/json,/;\n        if (charsetUri.test(text) || uri.test(text)) {\n            return decodeURIComponent(text.substr(RegExp.lastMatch.length));\n        }\n        if (baseCharsetUri.test(text) || baseUri.test(text)) {\n            return fromBase64(text.substr(RegExp.lastMatch.length));\n        }\n        let encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n        throw new Error(\"Unsupported source map encoding \" + encoding);\n    }\n    getAnnotationURL(sourceMapString) {\n        return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, \"\").trim();\n    }\n    isMap(map) {\n        if (typeof map !== \"object\") return false;\n        return typeof map.mappings === \"string\" || typeof map._mappings === \"string\" || Array.isArray(map.sections);\n    }\n    loadAnnotation(css) {\n        let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm);\n        if (!comments) return;\n        // sourceMappingURLs from comments, strings, etc.\n        let start = css.lastIndexOf(comments.pop());\n        let end = css.indexOf(\"*/\", start);\n        if (start > -1 && end > -1) {\n            // Locate the last sourceMappingURL to avoid pickin\n            this.annotation = this.getAnnotationURL(css.substring(start, end));\n        }\n    }\n    loadFile(path) {\n        this.root = dirname(path);\n        if (existsSync(path)) {\n            this.mapFile = path;\n            return readFileSync(path, \"utf-8\").toString().trim();\n        }\n    }\n    loadMap(file, prev) {\n        if (prev === false) return false;\n        if (prev) {\n            if (typeof prev === \"string\") {\n                return prev;\n            } else if (typeof prev === \"function\") {\n                let prevPath = prev(file);\n                if (prevPath) {\n                    let map = this.loadFile(prevPath);\n                    if (!map) {\n                        throw new Error(\"Unable to load previous source map: \" + prevPath.toString());\n                    }\n                    return map;\n                }\n            } else if (prev instanceof SourceMapConsumer) {\n                return SourceMapGenerator.fromSourceMap(prev).toString();\n            } else if (prev instanceof SourceMapGenerator) {\n                return prev.toString();\n            } else if (this.isMap(prev)) {\n                return JSON.stringify(prev);\n            } else {\n                throw new Error(\"Unsupported previous source map format: \" + prev.toString());\n            }\n        } else if (this.inline) {\n            return this.decodeInline(this.annotation);\n        } else if (this.annotation) {\n            let map = this.annotation;\n            if (file) map = join(dirname(file), map);\n            return this.loadFile(map);\n        }\n    }\n    startWith(string, start) {\n        if (!string) return false;\n        return string.substr(0, start.length) === start;\n    }\n    withContent() {\n        return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n    }\n}\nmodule.exports = PreviousMap;\nPreviousMap.default = PreviousMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/previous-map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/processor.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/processor.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet NoWorkResult = __webpack_require__(/*! ./no-work-result */ \"(ssr)/./node_modules/postcss/lib/no-work-result.js\");\nlet LazyResult = __webpack_require__(/*! ./lazy-result */ \"(ssr)/./node_modules/postcss/lib/lazy-result.js\");\nlet Document = __webpack_require__(/*! ./document */ \"(ssr)/./node_modules/postcss/lib/document.js\");\nlet Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/postcss/lib/root.js\");\nclass Processor {\n    constructor(plugins = []){\n        this.version = \"8.4.35\";\n        this.plugins = this.normalize(plugins);\n    }\n    normalize(plugins) {\n        let normalized = [];\n        for (let i of plugins){\n            if (i.postcss === true) {\n                i = i();\n            } else if (i.postcss) {\n                i = i.postcss;\n            }\n            if (typeof i === \"object\" && Array.isArray(i.plugins)) {\n                normalized = normalized.concat(i.plugins);\n            } else if (typeof i === \"object\" && i.postcssPlugin) {\n                normalized.push(i);\n            } else if (typeof i === \"function\") {\n                normalized.push(i);\n            } else if (typeof i === \"object\" && (i.parse || i.stringify)) {\n                if (true) {\n                    throw new Error(\"PostCSS syntaxes cannot be used as plugins. Instead, please use \" + \"one of the syntax/parser/stringifier options as outlined \" + \"in your PostCSS runner documentation.\");\n                }\n            } else {\n                throw new Error(i + \" is not a PostCSS plugin\");\n            }\n        }\n        return normalized;\n    }\n    process(css, opts = {}) {\n        if (!this.plugins.length && !opts.parser && !opts.stringifier && !opts.syntax) {\n            return new NoWorkResult(this, css, opts);\n        } else {\n            return new LazyResult(this, css, opts);\n        }\n    }\n    use(plugin) {\n        this.plugins = this.plugins.concat(this.normalize([\n            plugin\n        ]));\n        return this;\n    }\n}\nmodule.exports = Processor;\nProcessor.default = Processor;\nRoot.registerProcessor(Processor);\nDocument.registerProcessor(Processor);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUM7QUFDM0IsSUFBSUMsYUFBYUQsbUJBQU9BLENBQUM7QUFDekIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUcsT0FBT0gsbUJBQU9BLENBQUM7QUFFbkIsTUFBTUk7SUFDSkMsWUFBWUMsVUFBVSxFQUFFLENBQUU7UUFDeEIsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNELE9BQU8sR0FBRyxJQUFJLENBQUNFLFNBQVMsQ0FBQ0Y7SUFDaEM7SUFFQUUsVUFBVUYsT0FBTyxFQUFFO1FBQ2pCLElBQUlHLGFBQWEsRUFBRTtRQUNuQixLQUFLLElBQUlDLEtBQUtKLFFBQVM7WUFDckIsSUFBSUksRUFBRUMsT0FBTyxLQUFLLE1BQU07Z0JBQ3RCRCxJQUFJQTtZQUNOLE9BQU8sSUFBSUEsRUFBRUMsT0FBTyxFQUFFO2dCQUNwQkQsSUFBSUEsRUFBRUMsT0FBTztZQUNmO1lBRUEsSUFBSSxPQUFPRCxNQUFNLFlBQVlFLE1BQU1DLE9BQU8sQ0FBQ0gsRUFBRUosT0FBTyxHQUFHO2dCQUNyREcsYUFBYUEsV0FBV0ssTUFBTSxDQUFDSixFQUFFSixPQUFPO1lBQzFDLE9BQU8sSUFBSSxPQUFPSSxNQUFNLFlBQVlBLEVBQUVLLGFBQWEsRUFBRTtnQkFDbkROLFdBQVdPLElBQUksQ0FBQ047WUFDbEIsT0FBTyxJQUFJLE9BQU9BLE1BQU0sWUFBWTtnQkFDbENELFdBQVdPLElBQUksQ0FBQ047WUFDbEIsT0FBTyxJQUFJLE9BQU9BLE1BQU0sWUFBYUEsQ0FBQUEsRUFBRU8sS0FBSyxJQUFJUCxFQUFFUSxTQUFTLEdBQUc7Z0JBQzVELElBQUlDLElBQXlCLEVBQWM7b0JBQ3pDLE1BQU0sSUFBSUMsTUFDUixxRUFDRSw4REFDQTtnQkFFTjtZQUNGLE9BQU87Z0JBQ0wsTUFBTSxJQUFJQSxNQUFNVixJQUFJO1lBQ3RCO1FBQ0Y7UUFDQSxPQUFPRDtJQUNUO0lBRUFVLFFBQVFFLEdBQUcsRUFBRUMsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUN0QixJQUNFLENBQUMsSUFBSSxDQUFDaEIsT0FBTyxDQUFDaUIsTUFBTSxJQUNwQixDQUFDRCxLQUFLRSxNQUFNLElBQ1osQ0FBQ0YsS0FBS0csV0FBVyxJQUNqQixDQUFDSCxLQUFLSSxNQUFNLEVBQ1o7WUFDQSxPQUFPLElBQUkzQixhQUFhLElBQUksRUFBRXNCLEtBQUtDO1FBQ3JDLE9BQU87WUFDTCxPQUFPLElBQUlyQixXQUFXLElBQUksRUFBRW9CLEtBQUtDO1FBQ25DO0lBQ0Y7SUFFQUssSUFBSUMsTUFBTSxFQUFFO1FBQ1YsSUFBSSxDQUFDdEIsT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTyxDQUFDUSxNQUFNLENBQUMsSUFBSSxDQUFDTixTQUFTLENBQUM7WUFBQ29CO1NBQU87UUFDMUQsT0FBTyxJQUFJO0lBQ2I7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUcxQjtBQUNqQkEsVUFBVTJCLE9BQU8sR0FBRzNCO0FBRXBCRCxLQUFLNkIsaUJBQWlCLENBQUM1QjtBQUN2QkYsU0FBUzhCLGlCQUFpQixDQUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcHJvY2Vzc29yLmpzPzIzMzMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBOb1dvcmtSZXN1bHQgPSByZXF1aXJlKCcuL25vLXdvcmstcmVzdWx0JylcbmxldCBMYXp5UmVzdWx0ID0gcmVxdWlyZSgnLi9sYXp5LXJlc3VsdCcpXG5sZXQgRG9jdW1lbnQgPSByZXF1aXJlKCcuL2RvY3VtZW50JylcbmxldCBSb290ID0gcmVxdWlyZSgnLi9yb290JylcblxuY2xhc3MgUHJvY2Vzc29yIHtcbiAgY29uc3RydWN0b3IocGx1Z2lucyA9IFtdKSB7XG4gICAgdGhpcy52ZXJzaW9uID0gJzguNC4zNSdcbiAgICB0aGlzLnBsdWdpbnMgPSB0aGlzLm5vcm1hbGl6ZShwbHVnaW5zKVxuICB9XG5cbiAgbm9ybWFsaXplKHBsdWdpbnMpIHtcbiAgICBsZXQgbm9ybWFsaXplZCA9IFtdXG4gICAgZm9yIChsZXQgaSBvZiBwbHVnaW5zKSB7XG4gICAgICBpZiAoaS5wb3N0Y3NzID09PSB0cnVlKSB7XG4gICAgICAgIGkgPSBpKClcbiAgICAgIH0gZWxzZSBpZiAoaS5wb3N0Y3NzKSB7XG4gICAgICAgIGkgPSBpLnBvc3Rjc3NcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KGkucGx1Z2lucykpIHtcbiAgICAgICAgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQuY29uY2F0KGkucGx1Z2lucylcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGkgPT09ICdvYmplY3QnICYmIGkucG9zdGNzc1BsdWdpbikge1xuICAgICAgICBub3JtYWxpemVkLnB1c2goaSlcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbm9ybWFsaXplZC5wdXNoKGkpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpID09PSAnb2JqZWN0JyAmJiAoaS5wYXJzZSB8fCBpLnN0cmluZ2lmeSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnUG9zdENTUyBzeW50YXhlcyBjYW5ub3QgYmUgdXNlZCBhcyBwbHVnaW5zLiBJbnN0ZWFkLCBwbGVhc2UgdXNlICcgK1xuICAgICAgICAgICAgICAnb25lIG9mIHRoZSBzeW50YXgvcGFyc2VyL3N0cmluZ2lmaWVyIG9wdGlvbnMgYXMgb3V0bGluZWQgJyArXG4gICAgICAgICAgICAgICdpbiB5b3VyIFBvc3RDU1MgcnVubmVyIGRvY3VtZW50YXRpb24uJ1xuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGkgKyAnIGlzIG5vdCBhIFBvc3RDU1MgcGx1Z2luJylcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRcbiAgfVxuXG4gIHByb2Nlc3MoY3NzLCBvcHRzID0ge30pIHtcbiAgICBpZiAoXG4gICAgICAhdGhpcy5wbHVnaW5zLmxlbmd0aCAmJlxuICAgICAgIW9wdHMucGFyc2VyICYmXG4gICAgICAhb3B0cy5zdHJpbmdpZmllciAmJlxuICAgICAgIW9wdHMuc3ludGF4XG4gICAgKSB7XG4gICAgICByZXR1cm4gbmV3IE5vV29ya1Jlc3VsdCh0aGlzLCBjc3MsIG9wdHMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgTGF6eVJlc3VsdCh0aGlzLCBjc3MsIG9wdHMpXG4gICAgfVxuICB9XG5cbiAgdXNlKHBsdWdpbikge1xuICAgIHRoaXMucGx1Z2lucyA9IHRoaXMucGx1Z2lucy5jb25jYXQodGhpcy5ub3JtYWxpemUoW3BsdWdpbl0pKVxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcm9jZXNzb3JcblByb2Nlc3Nvci5kZWZhdWx0ID0gUHJvY2Vzc29yXG5cblJvb3QucmVnaXN0ZXJQcm9jZXNzb3IoUHJvY2Vzc29yKVxuRG9jdW1lbnQucmVnaXN0ZXJQcm9jZXNzb3IoUHJvY2Vzc29yKVxuIl0sIm5hbWVzIjpbIk5vV29ya1Jlc3VsdCIsInJlcXVpcmUiLCJMYXp5UmVzdWx0IiwiRG9jdW1lbnQiLCJSb290IiwiUHJvY2Vzc29yIiwiY29uc3RydWN0b3IiLCJwbHVnaW5zIiwidmVyc2lvbiIsIm5vcm1hbGl6ZSIsIm5vcm1hbGl6ZWQiLCJpIiwicG9zdGNzcyIsIkFycmF5IiwiaXNBcnJheSIsImNvbmNhdCIsInBvc3Rjc3NQbHVnaW4iLCJwdXNoIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJwcm9jZXNzIiwiRXJyb3IiLCJjc3MiLCJvcHRzIiwibGVuZ3RoIiwicGFyc2VyIiwic3RyaW5naWZpZXIiLCJzeW50YXgiLCJ1c2UiLCJwbHVnaW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCIsInJlZ2lzdGVyUHJvY2Vzc29yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/processor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/result.js":
/*!********************************************!*\
  !*** ./node_modules/postcss/lib/result.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Warning = __webpack_require__(/*! ./warning */ \"(ssr)/./node_modules/postcss/lib/warning.js\");\nclass Result {\n    constructor(processor, root, opts){\n        this.processor = processor;\n        this.messages = [];\n        this.root = root;\n        this.opts = opts;\n        this.css = undefined;\n        this.map = undefined;\n    }\n    toString() {\n        return this.css;\n    }\n    warn(text, opts = {}) {\n        if (!opts.plugin) {\n            if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n                opts.plugin = this.lastPlugin.postcssPlugin;\n            }\n        }\n        let warning = new Warning(text, opts);\n        this.messages.push(warning);\n        return warning;\n    }\n    warnings() {\n        return this.messages.filter((i)=>i.type === \"warning\");\n    }\n    get content() {\n        return this.css;\n    }\n}\nmodule.exports = Result;\nResult.default = Result;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcmVzdWx0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUM7QUFFdEIsTUFBTUM7SUFDSkMsWUFBWUMsU0FBUyxFQUFFQyxJQUFJLEVBQUVDLElBQUksQ0FBRTtRQUNqQyxJQUFJLENBQUNGLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDRyxRQUFRLEdBQUcsRUFBRTtRQUNsQixJQUFJLENBQUNGLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNFLEdBQUcsR0FBR0M7UUFDWCxJQUFJLENBQUNDLEdBQUcsR0FBR0Q7SUFDYjtJQUVBRSxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUNILEdBQUc7SUFDakI7SUFFQUksS0FBS0MsSUFBSSxFQUFFUCxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3BCLElBQUksQ0FBQ0EsS0FBS1EsTUFBTSxFQUFFO1lBQ2hCLElBQUksSUFBSSxDQUFDQyxVQUFVLElBQUksSUFBSSxDQUFDQSxVQUFVLENBQUNDLGFBQWEsRUFBRTtnQkFDcERWLEtBQUtRLE1BQU0sR0FBRyxJQUFJLENBQUNDLFVBQVUsQ0FBQ0MsYUFBYTtZQUM3QztRQUNGO1FBRUEsSUFBSUMsVUFBVSxJQUFJakIsUUFBUWEsTUFBTVA7UUFDaEMsSUFBSSxDQUFDQyxRQUFRLENBQUNXLElBQUksQ0FBQ0Q7UUFFbkIsT0FBT0E7SUFDVDtJQUVBRSxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUNaLFFBQVEsQ0FBQ2EsTUFBTSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxJQUFJLEtBQUs7SUFDOUM7SUFFQSxJQUFJQyxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUNmLEdBQUc7SUFDakI7QUFDRjtBQUVBZ0IsT0FBT0MsT0FBTyxHQUFHdkI7QUFDakJBLE9BQU93QixPQUFPLEdBQUd4QiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9yZXN1bHQuanM/MzY4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IFdhcm5pbmcgPSByZXF1aXJlKCcuL3dhcm5pbmcnKVxuXG5jbGFzcyBSZXN1bHQge1xuICBjb25zdHJ1Y3Rvcihwcm9jZXNzb3IsIHJvb3QsIG9wdHMpIHtcbiAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvclxuICAgIHRoaXMubWVzc2FnZXMgPSBbXVxuICAgIHRoaXMucm9vdCA9IHJvb3RcbiAgICB0aGlzLm9wdHMgPSBvcHRzXG4gICAgdGhpcy5jc3MgPSB1bmRlZmluZWRcbiAgICB0aGlzLm1hcCA9IHVuZGVmaW5lZFxuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzXG4gIH1cblxuICB3YXJuKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGlmICghb3B0cy5wbHVnaW4pIHtcbiAgICAgIGlmICh0aGlzLmxhc3RQbHVnaW4gJiYgdGhpcy5sYXN0UGx1Z2luLnBvc3Rjc3NQbHVnaW4pIHtcbiAgICAgICAgb3B0cy5wbHVnaW4gPSB0aGlzLmxhc3RQbHVnaW4ucG9zdGNzc1BsdWdpblxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB3YXJuaW5nID0gbmV3IFdhcm5pbmcodGV4dCwgb3B0cylcbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2god2FybmluZylcblxuICAgIHJldHVybiB3YXJuaW5nXG4gIH1cblxuICB3YXJuaW5ncygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy5maWx0ZXIoaSA9PiBpLnR5cGUgPT09ICd3YXJuaW5nJylcbiAgfVxuXG4gIGdldCBjb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLmNzc1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzdWx0XG5SZXN1bHQuZGVmYXVsdCA9IFJlc3VsdFxuIl0sIm5hbWVzIjpbIldhcm5pbmciLCJyZXF1aXJlIiwiUmVzdWx0IiwiY29uc3RydWN0b3IiLCJwcm9jZXNzb3IiLCJyb290Iiwib3B0cyIsIm1lc3NhZ2VzIiwiY3NzIiwidW5kZWZpbmVkIiwibWFwIiwidG9TdHJpbmciLCJ3YXJuIiwidGV4dCIsInBsdWdpbiIsImxhc3RQbHVnaW4iLCJwb3N0Y3NzUGx1Z2luIiwid2FybmluZyIsInB1c2giLCJ3YXJuaW5ncyIsImZpbHRlciIsImkiLCJ0eXBlIiwiY29udGVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/result.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/root.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/root.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet LazyResult, Processor;\nclass Root extends Container {\n    constructor(defaults){\n        super(defaults);\n        this.type = \"root\";\n        if (!this.nodes) this.nodes = [];\n    }\n    normalize(child, sample, type) {\n        let nodes = super.normalize(child);\n        if (sample) {\n            if (type === \"prepend\") {\n                if (this.nodes.length > 1) {\n                    sample.raws.before = this.nodes[1].raws.before;\n                } else {\n                    delete sample.raws.before;\n                }\n            } else if (this.first !== sample) {\n                for (let node of nodes){\n                    node.raws.before = sample.raws.before;\n                }\n            }\n        }\n        return nodes;\n    }\n    removeChild(child, ignore) {\n        let index = this.index(child);\n        if (!ignore && index === 0 && this.nodes.length > 1) {\n            this.nodes[1].raws.before = this.nodes[index].raws.before;\n        }\n        return super.removeChild(child);\n    }\n    toResult(opts = {}) {\n        let lazy = new LazyResult(new Processor(), this, opts);\n        return lazy.stringify();\n    }\n}\nRoot.registerLazyResult = (dependant)=>{\n    LazyResult = dependant;\n};\nRoot.registerProcessor = (dependant)=>{\n    Processor = dependant;\n};\nmodule.exports = Root;\nRoot.default = Root;\nContainer.registerRoot(Root);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcm9vdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCLElBQUlDLFlBQVlDO0FBRWhCLE1BQU1DLGFBQWFKO0lBQ2pCSyxZQUFZQyxRQUFRLENBQUU7UUFDcEIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxHQUFHLEVBQUU7SUFDbEM7SUFFQUMsVUFBVUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVKLElBQUksRUFBRTtRQUM3QixJQUFJQyxRQUFRLEtBQUssQ0FBQ0MsVUFBVUM7UUFFNUIsSUFBSUMsUUFBUTtZQUNWLElBQUlKLFNBQVMsV0FBVztnQkFDdEIsSUFBSSxJQUFJLENBQUNDLEtBQUssQ0FBQ0ksTUFBTSxHQUFHLEdBQUc7b0JBQ3pCRCxPQUFPRSxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJLENBQUNOLEtBQUssQ0FBQyxFQUFFLENBQUNLLElBQUksQ0FBQ0MsTUFBTTtnQkFDaEQsT0FBTztvQkFDTCxPQUFPSCxPQUFPRSxJQUFJLENBQUNDLE1BQU07Z0JBQzNCO1lBQ0YsT0FBTyxJQUFJLElBQUksQ0FBQ0MsS0FBSyxLQUFLSixRQUFRO2dCQUNoQyxLQUFLLElBQUlLLFFBQVFSLE1BQU87b0JBQ3RCUSxLQUFLSCxJQUFJLENBQUNDLE1BQU0sR0FBR0gsT0FBT0UsSUFBSSxDQUFDQyxNQUFNO2dCQUN2QztZQUNGO1FBQ0Y7UUFFQSxPQUFPTjtJQUNUO0lBRUFTLFlBQVlQLEtBQUssRUFBRVEsTUFBTSxFQUFFO1FBQ3pCLElBQUlDLFFBQVEsSUFBSSxDQUFDQSxLQUFLLENBQUNUO1FBRXZCLElBQUksQ0FBQ1EsVUFBVUMsVUFBVSxLQUFLLElBQUksQ0FBQ1gsS0FBSyxDQUFDSSxNQUFNLEdBQUcsR0FBRztZQUNuRCxJQUFJLENBQUNKLEtBQUssQ0FBQyxFQUFFLENBQUNLLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUksQ0FBQ04sS0FBSyxDQUFDVyxNQUFNLENBQUNOLElBQUksQ0FBQ0MsTUFBTTtRQUMzRDtRQUVBLE9BQU8sS0FBSyxDQUFDRyxZQUFZUDtJQUMzQjtJQUVBVSxTQUFTQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ2xCLElBQUlDLE9BQU8sSUFBSXBCLFdBQVcsSUFBSUMsYUFBYSxJQUFJLEVBQUVrQjtRQUNqRCxPQUFPQyxLQUFLQyxTQUFTO0lBQ3ZCO0FBQ0Y7QUFFQW5CLEtBQUtvQixrQkFBa0IsR0FBR0MsQ0FBQUE7SUFDeEJ2QixhQUFhdUI7QUFDZjtBQUVBckIsS0FBS3NCLGlCQUFpQixHQUFHRCxDQUFBQTtJQUN2QnRCLFlBQVlzQjtBQUNkO0FBRUFFLE9BQU9DLE9BQU8sR0FBR3hCO0FBQ2pCQSxLQUFLeUIsT0FBTyxHQUFHekI7QUFFZkosVUFBVThCLFlBQVksQ0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Jvb3QuanM/NTlkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcblxubGV0IExhenlSZXN1bHQsIFByb2Nlc3NvclxuXG5jbGFzcyBSb290IGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICBzdXBlcihkZWZhdWx0cylcbiAgICB0aGlzLnR5cGUgPSAncm9vdCdcbiAgICBpZiAoIXRoaXMubm9kZXMpIHRoaXMubm9kZXMgPSBbXVxuICB9XG5cbiAgbm9ybWFsaXplKGNoaWxkLCBzYW1wbGUsIHR5cGUpIHtcbiAgICBsZXQgbm9kZXMgPSBzdXBlci5ub3JtYWxpemUoY2hpbGQpXG5cbiAgICBpZiAoc2FtcGxlKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ3ByZXBlbmQnKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBzYW1wbGUucmF3cy5iZWZvcmUgPSB0aGlzLm5vZGVzWzFdLnJhd3MuYmVmb3JlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHNhbXBsZS5yYXdzLmJlZm9yZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZmlyc3QgIT09IHNhbXBsZSkge1xuICAgICAgICBmb3IgKGxldCBub2RlIG9mIG5vZGVzKSB7XG4gICAgICAgICAgbm9kZS5yYXdzLmJlZm9yZSA9IHNhbXBsZS5yYXdzLmJlZm9yZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cblxuICByZW1vdmVDaGlsZChjaGlsZCwgaWdub3JlKSB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5pbmRleChjaGlsZClcblxuICAgIGlmICghaWdub3JlICYmIGluZGV4ID09PSAwICYmIHRoaXMubm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5ub2Rlc1sxXS5yYXdzLmJlZm9yZSA9IHRoaXMubm9kZXNbaW5kZXhdLnJhd3MuYmVmb3JlXG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLnJlbW92ZUNoaWxkKGNoaWxkKVxuICB9XG5cbiAgdG9SZXN1bHQob3B0cyA9IHt9KSB7XG4gICAgbGV0IGxhenkgPSBuZXcgTGF6eVJlc3VsdChuZXcgUHJvY2Vzc29yKCksIHRoaXMsIG9wdHMpXG4gICAgcmV0dXJuIGxhenkuc3RyaW5naWZ5KClcbiAgfVxufVxuXG5Sb290LnJlZ2lzdGVyTGF6eVJlc3VsdCA9IGRlcGVuZGFudCA9PiB7XG4gIExhenlSZXN1bHQgPSBkZXBlbmRhbnRcbn1cblxuUm9vdC5yZWdpc3RlclByb2Nlc3NvciA9IGRlcGVuZGFudCA9PiB7XG4gIFByb2Nlc3NvciA9IGRlcGVuZGFudFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJvb3RcblJvb3QuZGVmYXVsdCA9IFJvb3RcblxuQ29udGFpbmVyLnJlZ2lzdGVyUm9vdChSb290KVxuIl0sIm5hbWVzIjpbIkNvbnRhaW5lciIsInJlcXVpcmUiLCJMYXp5UmVzdWx0IiwiUHJvY2Vzc29yIiwiUm9vdCIsImNvbnN0cnVjdG9yIiwiZGVmYXVsdHMiLCJ0eXBlIiwibm9kZXMiLCJub3JtYWxpemUiLCJjaGlsZCIsInNhbXBsZSIsImxlbmd0aCIsInJhd3MiLCJiZWZvcmUiLCJmaXJzdCIsIm5vZGUiLCJyZW1vdmVDaGlsZCIsImlnbm9yZSIsImluZGV4IiwidG9SZXN1bHQiLCJvcHRzIiwibGF6eSIsInN0cmluZ2lmeSIsInJlZ2lzdGVyTGF6eVJlc3VsdCIsImRlcGVuZGFudCIsInJlZ2lzdGVyUHJvY2Vzc29yIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiLCJyZWdpc3RlclJvb3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/root.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/rule.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/rule.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Container = __webpack_require__(/*! ./container */ \"(ssr)/./node_modules/postcss/lib/container.js\");\nlet list = __webpack_require__(/*! ./list */ \"(ssr)/./node_modules/postcss/lib/list.js\");\nclass Rule extends Container {\n    constructor(defaults){\n        super(defaults);\n        this.type = \"rule\";\n        if (!this.nodes) this.nodes = [];\n    }\n    get selectors() {\n        return list.comma(this.selector);\n    }\n    set selectors(values) {\n        let match = this.selector ? this.selector.match(/,\\s*/) : null;\n        let sep = match ? match[0] : \",\" + this.raw(\"between\", \"beforeOpen\");\n        this.selector = values.join(sep);\n    }\n}\nmodule.exports = Rule;\nRule.default = Rule;\nContainer.registerRule(Rule);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcnVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBRW5CLE1BQU1FLGFBQWFIO0lBQ2pCSSxZQUFZQyxRQUFRLENBQUU7UUFDcEIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxHQUFHLEVBQUU7SUFDbEM7SUFFQSxJQUFJQyxZQUFZO1FBQ2QsT0FBT04sS0FBS08sS0FBSyxDQUFDLElBQUksQ0FBQ0MsUUFBUTtJQUNqQztJQUVBLElBQUlGLFVBQVVHLE1BQU0sRUFBRTtRQUNwQixJQUFJQyxRQUFRLElBQUksQ0FBQ0YsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUSxDQUFDRSxLQUFLLENBQUMsVUFBVTtRQUMxRCxJQUFJQyxNQUFNRCxRQUFRQSxLQUFLLENBQUMsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDRSxHQUFHLENBQUMsV0FBVztRQUN2RCxJQUFJLENBQUNKLFFBQVEsR0FBR0MsT0FBT0ksSUFBSSxDQUFDRjtJQUM5QjtBQUNGO0FBRUFHLE9BQU9DLE9BQU8sR0FBR2Q7QUFDakJBLEtBQUtlLE9BQU8sR0FBR2Y7QUFFZkgsVUFBVW1CLFlBQVksQ0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3J1bGUuanM/NTNiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcbmxldCBsaXN0ID0gcmVxdWlyZSgnLi9saXN0JylcblxuY2xhc3MgUnVsZSBleHRlbmRzIENvbnRhaW5lciB7XG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgc3VwZXIoZGVmYXVsdHMpXG4gICAgdGhpcy50eXBlID0gJ3J1bGUnXG4gICAgaWYgKCF0aGlzLm5vZGVzKSB0aGlzLm5vZGVzID0gW11cbiAgfVxuXG4gIGdldCBzZWxlY3RvcnMoKSB7XG4gICAgcmV0dXJuIGxpc3QuY29tbWEodGhpcy5zZWxlY3RvcilcbiAgfVxuXG4gIHNldCBzZWxlY3RvcnModmFsdWVzKSB7XG4gICAgbGV0IG1hdGNoID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IubWF0Y2goLyxcXHMqLykgOiBudWxsXG4gICAgbGV0IHNlcCA9IG1hdGNoID8gbWF0Y2hbMF0gOiAnLCcgKyB0aGlzLnJhdygnYmV0d2VlbicsICdiZWZvcmVPcGVuJylcbiAgICB0aGlzLnNlbGVjdG9yID0gdmFsdWVzLmpvaW4oc2VwKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUnVsZVxuUnVsZS5kZWZhdWx0ID0gUnVsZVxuXG5Db250YWluZXIucmVnaXN0ZXJSdWxlKFJ1bGUpXG4iXSwibmFtZXMiOlsiQ29udGFpbmVyIiwicmVxdWlyZSIsImxpc3QiLCJSdWxlIiwiY29uc3RydWN0b3IiLCJkZWZhdWx0cyIsInR5cGUiLCJub2RlcyIsInNlbGVjdG9ycyIsImNvbW1hIiwic2VsZWN0b3IiLCJ2YWx1ZXMiLCJtYXRjaCIsInNlcCIsInJhdyIsImpvaW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCIsInJlZ2lzdGVyUnVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/rule.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/stringifier.js":
/*!*************************************************!*\
  !*** ./node_modules/postcss/lib/stringifier.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nconst DEFAULT_RAW = {\n    after: \"\\n\",\n    beforeClose: \"\\n\",\n    beforeComment: \"\\n\",\n    beforeDecl: \"\\n\",\n    beforeOpen: \" \",\n    beforeRule: \"\\n\",\n    colon: \": \",\n    commentLeft: \" \",\n    commentRight: \" \",\n    emptyBody: \"\",\n    indent: \"    \",\n    semicolon: false\n};\nfunction capitalize(str) {\n    return str[0].toUpperCase() + str.slice(1);\n}\nclass Stringifier {\n    constructor(builder){\n        this.builder = builder;\n    }\n    atrule(node, semicolon) {\n        let name = \"@\" + node.name;\n        let params = node.params ? this.rawValue(node, \"params\") : \"\";\n        if (typeof node.raws.afterName !== \"undefined\") {\n            name += node.raws.afterName;\n        } else if (params) {\n            name += \" \";\n        }\n        if (node.nodes) {\n            this.block(node, name + params);\n        } else {\n            let end = (node.raws.between || \"\") + (semicolon ? \";\" : \"\");\n            this.builder(name + params + end, node);\n        }\n    }\n    beforeAfter(node, detect) {\n        let value;\n        if (node.type === \"decl\") {\n            value = this.raw(node, null, \"beforeDecl\");\n        } else if (node.type === \"comment\") {\n            value = this.raw(node, null, \"beforeComment\");\n        } else if (detect === \"before\") {\n            value = this.raw(node, null, \"beforeRule\");\n        } else {\n            value = this.raw(node, null, \"beforeClose\");\n        }\n        let buf = node.parent;\n        let depth = 0;\n        while(buf && buf.type !== \"root\"){\n            depth += 1;\n            buf = buf.parent;\n        }\n        if (value.includes(\"\\n\")) {\n            let indent = this.raw(node, null, \"indent\");\n            if (indent.length) {\n                for(let step = 0; step < depth; step++)value += indent;\n            }\n        }\n        return value;\n    }\n    block(node, start) {\n        let between = this.raw(node, \"between\", \"beforeOpen\");\n        this.builder(start + between + \"{\", node, \"start\");\n        let after;\n        if (node.nodes && node.nodes.length) {\n            this.body(node);\n            after = this.raw(node, \"after\");\n        } else {\n            after = this.raw(node, \"after\", \"emptyBody\");\n        }\n        if (after) this.builder(after);\n        this.builder(\"}\", node, \"end\");\n    }\n    body(node) {\n        let last = node.nodes.length - 1;\n        while(last > 0){\n            if (node.nodes[last].type !== \"comment\") break;\n            last -= 1;\n        }\n        let semicolon = this.raw(node, \"semicolon\");\n        for(let i = 0; i < node.nodes.length; i++){\n            let child = node.nodes[i];\n            let before = this.raw(child, \"before\");\n            if (before) this.builder(before);\n            this.stringify(child, last !== i || semicolon);\n        }\n    }\n    comment(node) {\n        let left = this.raw(node, \"left\", \"commentLeft\");\n        let right = this.raw(node, \"right\", \"commentRight\");\n        this.builder(\"/*\" + left + node.text + right + \"*/\", node);\n    }\n    decl(node, semicolon) {\n        let between = this.raw(node, \"between\", \"colon\");\n        let string = node.prop + between + this.rawValue(node, \"value\");\n        if (node.important) {\n            string += node.raws.important || \" !important\";\n        }\n        if (semicolon) string += \";\";\n        this.builder(string, node);\n    }\n    document(node) {\n        this.body(node);\n    }\n    raw(node, own, detect) {\n        let value;\n        if (!detect) detect = own;\n        // Already had\n        if (own) {\n            value = node.raws[own];\n            if (typeof value !== \"undefined\") return value;\n        }\n        let parent = node.parent;\n        if (detect === \"before\") {\n            // Hack for first rule in CSS\n            if (!parent || parent.type === \"root\" && parent.first === node) {\n                return \"\";\n            }\n            // `root` nodes in `document` should use only their own raws\n            if (parent && parent.type === \"document\") {\n                return \"\";\n            }\n        }\n        // Floating child without parent\n        if (!parent) return DEFAULT_RAW[detect];\n        // Detect style by other nodes\n        let root = node.root();\n        if (!root.rawCache) root.rawCache = {};\n        if (typeof root.rawCache[detect] !== \"undefined\") {\n            return root.rawCache[detect];\n        }\n        if (detect === \"before\" || detect === \"after\") {\n            return this.beforeAfter(node, detect);\n        } else {\n            let method = \"raw\" + capitalize(detect);\n            if (this[method]) {\n                value = this[method](root, node);\n            } else {\n                root.walk((i)=>{\n                    value = i.raws[own];\n                    if (typeof value !== \"undefined\") return false;\n                });\n            }\n        }\n        if (typeof value === \"undefined\") value = DEFAULT_RAW[detect];\n        root.rawCache[detect] = value;\n        return value;\n    }\n    rawBeforeClose(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && i.nodes.length > 0) {\n                if (typeof i.raws.after !== \"undefined\") {\n                    value = i.raws.after;\n                    if (value.includes(\"\\n\")) {\n                        value = value.replace(/[^\\n]+$/, \"\");\n                    }\n                    return false;\n                }\n            }\n        });\n        if (value) value = value.replace(/\\S/g, \"\");\n        return value;\n    }\n    rawBeforeComment(root, node) {\n        let value;\n        root.walkComments((i)=>{\n            if (typeof i.raws.before !== \"undefined\") {\n                value = i.raws.before;\n                if (value.includes(\"\\n\")) {\n                    value = value.replace(/[^\\n]+$/, \"\");\n                }\n                return false;\n            }\n        });\n        if (typeof value === \"undefined\") {\n            value = this.raw(node, null, \"beforeDecl\");\n        } else if (value) {\n            value = value.replace(/\\S/g, \"\");\n        }\n        return value;\n    }\n    rawBeforeDecl(root, node) {\n        let value;\n        root.walkDecls((i)=>{\n            if (typeof i.raws.before !== \"undefined\") {\n                value = i.raws.before;\n                if (value.includes(\"\\n\")) {\n                    value = value.replace(/[^\\n]+$/, \"\");\n                }\n                return false;\n            }\n        });\n        if (typeof value === \"undefined\") {\n            value = this.raw(node, null, \"beforeRule\");\n        } else if (value) {\n            value = value.replace(/\\S/g, \"\");\n        }\n        return value;\n    }\n    rawBeforeOpen(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.type !== \"decl\") {\n                value = i.raws.between;\n                if (typeof value !== \"undefined\") return false;\n            }\n        });\n        return value;\n    }\n    rawBeforeRule(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && (i.parent !== root || root.first !== i)) {\n                if (typeof i.raws.before !== \"undefined\") {\n                    value = i.raws.before;\n                    if (value.includes(\"\\n\")) {\n                        value = value.replace(/[^\\n]+$/, \"\");\n                    }\n                    return false;\n                }\n            }\n        });\n        if (value) value = value.replace(/\\S/g, \"\");\n        return value;\n    }\n    rawColon(root) {\n        let value;\n        root.walkDecls((i)=>{\n            if (typeof i.raws.between !== \"undefined\") {\n                value = i.raws.between.replace(/[^\\s:]/g, \"\");\n                return false;\n            }\n        });\n        return value;\n    }\n    rawEmptyBody(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && i.nodes.length === 0) {\n                value = i.raws.after;\n                if (typeof value !== \"undefined\") return false;\n            }\n        });\n        return value;\n    }\n    rawIndent(root) {\n        if (root.raws.indent) return root.raws.indent;\n        let value;\n        root.walk((i)=>{\n            let p = i.parent;\n            if (p && p !== root && p.parent && p.parent === root) {\n                if (typeof i.raws.before !== \"undefined\") {\n                    let parts = i.raws.before.split(\"\\n\");\n                    value = parts[parts.length - 1];\n                    value = value.replace(/\\S/g, \"\");\n                    return false;\n                }\n            }\n        });\n        return value;\n    }\n    rawSemicolon(root) {\n        let value;\n        root.walk((i)=>{\n            if (i.nodes && i.nodes.length && i.last.type === \"decl\") {\n                value = i.raws.semicolon;\n                if (typeof value !== \"undefined\") return false;\n            }\n        });\n        return value;\n    }\n    rawValue(node, prop) {\n        let value = node[prop];\n        let raw = node.raws[prop];\n        if (raw && raw.value === value) {\n            return raw.raw;\n        }\n        return value;\n    }\n    root(node) {\n        this.body(node);\n        if (node.raws.after) this.builder(node.raws.after);\n    }\n    rule(node) {\n        this.block(node, this.rawValue(node, \"selector\"));\n        if (node.raws.ownSemicolon) {\n            this.builder(node.raws.ownSemicolon, node, \"end\");\n        }\n    }\n    stringify(node, semicolon) {\n        /* c8 ignore start */ if (!this[node.type]) {\n            throw new Error(\"Unknown AST node type \" + node.type + \". \" + \"Maybe you need to change PostCSS stringifier.\");\n        }\n        /* c8 ignore stop */ this[node.type](node, semicolon);\n    }\n}\nmodule.exports = Stringifier;\nStringifier.default = Stringifier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/stringifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/stringify.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/stringify.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet Stringifier = __webpack_require__(/*! ./stringifier */ \"(ssr)/./node_modules/postcss/lib/stringifier.js\");\nfunction stringify(node, builder) {\n    let str = new Stringifier(builder);\n    str.stringify(node);\n}\nmodule.exports = stringify;\nstringify.default = stringify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUM7QUFFMUIsU0FBU0MsVUFBVUMsSUFBSSxFQUFFQyxPQUFPO0lBQzlCLElBQUlDLE1BQU0sSUFBSUwsWUFBWUk7SUFDMUJDLElBQUlILFNBQVMsQ0FBQ0M7QUFDaEI7QUFFQUcsT0FBT0MsT0FBTyxHQUFHTDtBQUNqQkEsVUFBVU0sT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9zdHJpbmdpZnkuanM/ZDdjMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IFN0cmluZ2lmaWVyID0gcmVxdWlyZSgnLi9zdHJpbmdpZmllcicpXG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShub2RlLCBidWlsZGVyKSB7XG4gIGxldCBzdHIgPSBuZXcgU3RyaW5naWZpZXIoYnVpbGRlcilcbiAgc3RyLnN0cmluZ2lmeShub2RlKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeVxuc3RyaW5naWZ5LmRlZmF1bHQgPSBzdHJpbmdpZnlcbiJdLCJuYW1lcyI6WyJTdHJpbmdpZmllciIsInJlcXVpcmUiLCJzdHJpbmdpZnkiLCJub2RlIiwiYnVpbGRlciIsInN0ciIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/symbols.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/symbols.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nmodule.exports.isClean = Symbol(\"isClean\");\nmodule.exports.my = Symbol(\"my\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3ltYm9scy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxzQkFBc0IsR0FBR0csT0FBTztBQUVoQ0gsaUJBQWlCLEdBQUdHLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3ltYm9scy5qcz9iMGNiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cy5pc0NsZWFuID0gU3ltYm9sKCdpc0NsZWFuJylcblxubW9kdWxlLmV4cG9ydHMubXkgPSBTeW1ib2woJ215JylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaXNDbGVhbiIsIlN5bWJvbCIsIm15Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/symbols.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/terminal-highlight.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss/lib/terminal-highlight.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet pico = __webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\");\nlet tokenizer = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/postcss/lib/tokenize.js\");\nlet Input;\nfunction registerInput(dependant) {\n    Input = dependant;\n}\nconst HIGHLIGHT_THEME = {\n    \";\": pico.yellow,\n    \":\": pico.yellow,\n    \"(\": pico.cyan,\n    \")\": pico.cyan,\n    \"[\": pico.yellow,\n    \"]\": pico.yellow,\n    \"{\": pico.yellow,\n    \"}\": pico.yellow,\n    \"at-word\": pico.cyan,\n    \"brackets\": pico.cyan,\n    \"call\": pico.cyan,\n    \"class\": pico.yellow,\n    \"comment\": pico.gray,\n    \"hash\": pico.magenta,\n    \"string\": pico.green\n};\nfunction getTokenType([type, value], processor) {\n    if (type === \"word\") {\n        if (value[0] === \".\") {\n            return \"class\";\n        }\n        if (value[0] === \"#\") {\n            return \"hash\";\n        }\n    }\n    if (!processor.endOfFile()) {\n        let next = processor.nextToken();\n        processor.back(next);\n        if (next[0] === \"brackets\" || next[0] === \"(\") return \"call\";\n    }\n    return type;\n}\nfunction terminalHighlight(css) {\n    let processor = tokenizer(new Input(css), {\n        ignoreErrors: true\n    });\n    let result = \"\";\n    while(!processor.endOfFile()){\n        let token = processor.nextToken();\n        let color = HIGHLIGHT_THEME[getTokenType(token, processor)];\n        if (color) {\n            result += token[1].split(/\\r?\\n/).map((i)=>color(i)).join(\"\\n\");\n        } else {\n            result += token[1];\n        }\n    }\n    return result;\n}\nterminalHighlight.registerInput = registerInput;\nmodule.exports = terminalHighlight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvdGVybWluYWwtaGlnaGxpZ2h0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUM7QUFFeEIsSUFBSUU7QUFFSixTQUFTQyxjQUFjQyxTQUFTO0lBQzlCRixRQUFRRTtBQUNWO0FBRUEsTUFBTUMsa0JBQWtCO0lBQ3RCLEtBQUtOLEtBQUtPLE1BQU07SUFDaEIsS0FBS1AsS0FBS08sTUFBTTtJQUNoQixLQUFLUCxLQUFLUSxJQUFJO0lBQ2QsS0FBS1IsS0FBS1EsSUFBSTtJQUNkLEtBQUtSLEtBQUtPLE1BQU07SUFDaEIsS0FBS1AsS0FBS08sTUFBTTtJQUNoQixLQUFLUCxLQUFLTyxNQUFNO0lBQ2hCLEtBQUtQLEtBQUtPLE1BQU07SUFDaEIsV0FBV1AsS0FBS1EsSUFBSTtJQUNwQixZQUFZUixLQUFLUSxJQUFJO0lBQ3JCLFFBQVFSLEtBQUtRLElBQUk7SUFDakIsU0FBU1IsS0FBS08sTUFBTTtJQUNwQixXQUFXUCxLQUFLUyxJQUFJO0lBQ3BCLFFBQVFULEtBQUtVLE9BQU87SUFDcEIsVUFBVVYsS0FBS1csS0FBSztBQUN0QjtBQUVBLFNBQVNDLGFBQWEsQ0FBQ0MsTUFBTUMsTUFBTSxFQUFFQyxTQUFTO0lBQzVDLElBQUlGLFNBQVMsUUFBUTtRQUNuQixJQUFJQyxLQUFLLENBQUMsRUFBRSxLQUFLLEtBQUs7WUFDcEIsT0FBTztRQUNUO1FBQ0EsSUFBSUEsS0FBSyxDQUFDLEVBQUUsS0FBSyxLQUFLO1lBQ3BCLE9BQU87UUFDVDtJQUNGO0lBRUEsSUFBSSxDQUFDQyxVQUFVQyxTQUFTLElBQUk7UUFDMUIsSUFBSUMsT0FBT0YsVUFBVUcsU0FBUztRQUM5QkgsVUFBVUksSUFBSSxDQUFDRjtRQUNmLElBQUlBLElBQUksQ0FBQyxFQUFFLEtBQUssY0FBY0EsSUFBSSxDQUFDLEVBQUUsS0FBSyxLQUFLLE9BQU87SUFDeEQ7SUFFQSxPQUFPSjtBQUNUO0FBRUEsU0FBU08sa0JBQWtCQyxHQUFHO0lBQzVCLElBQUlOLFlBQVliLFVBQVUsSUFBSUMsTUFBTWtCLE1BQU07UUFBRUMsY0FBYztJQUFLO0lBQy9ELElBQUlDLFNBQVM7SUFDYixNQUFPLENBQUNSLFVBQVVDLFNBQVMsR0FBSTtRQUM3QixJQUFJUSxRQUFRVCxVQUFVRyxTQUFTO1FBQy9CLElBQUlPLFFBQVFuQixlQUFlLENBQUNNLGFBQWFZLE9BQU9ULFdBQVc7UUFDM0QsSUFBSVUsT0FBTztZQUNURixVQUFVQyxLQUFLLENBQUMsRUFBRSxDQUNmRSxLQUFLLENBQUMsU0FDTkMsR0FBRyxDQUFDQyxDQUFBQSxJQUFLSCxNQUFNRyxJQUNmQyxJQUFJLENBQUM7UUFDVixPQUFPO1lBQ0xOLFVBQVVDLEtBQUssQ0FBQyxFQUFFO1FBQ3BCO0lBQ0Y7SUFDQSxPQUFPRDtBQUNUO0FBRUFILGtCQUFrQmhCLGFBQWEsR0FBR0E7QUFFbEMwQixPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Rlcm1pbmFsLWhpZ2hsaWdodC5qcz84ZDg1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgcGljbyA9IHJlcXVpcmUoJ3BpY29jb2xvcnMnKVxuXG5sZXQgdG9rZW5pemVyID0gcmVxdWlyZSgnLi90b2tlbml6ZScpXG5cbmxldCBJbnB1dFxuXG5mdW5jdGlvbiByZWdpc3RlcklucHV0KGRlcGVuZGFudCkge1xuICBJbnB1dCA9IGRlcGVuZGFudFxufVxuXG5jb25zdCBISUdITElHSFRfVEhFTUUgPSB7XG4gICc7JzogcGljby55ZWxsb3csXG4gICc6JzogcGljby55ZWxsb3csXG4gICcoJzogcGljby5jeWFuLFxuICAnKSc6IHBpY28uY3lhbixcbiAgJ1snOiBwaWNvLnllbGxvdyxcbiAgJ10nOiBwaWNvLnllbGxvdyxcbiAgJ3snOiBwaWNvLnllbGxvdyxcbiAgJ30nOiBwaWNvLnllbGxvdyxcbiAgJ2F0LXdvcmQnOiBwaWNvLmN5YW4sXG4gICdicmFja2V0cyc6IHBpY28uY3lhbixcbiAgJ2NhbGwnOiBwaWNvLmN5YW4sXG4gICdjbGFzcyc6IHBpY28ueWVsbG93LFxuICAnY29tbWVudCc6IHBpY28uZ3JheSxcbiAgJ2hhc2gnOiBwaWNvLm1hZ2VudGEsXG4gICdzdHJpbmcnOiBwaWNvLmdyZWVuXG59XG5cbmZ1bmN0aW9uIGdldFRva2VuVHlwZShbdHlwZSwgdmFsdWVdLCBwcm9jZXNzb3IpIHtcbiAgaWYgKHR5cGUgPT09ICd3b3JkJykge1xuICAgIGlmICh2YWx1ZVswXSA9PT0gJy4nKSB7XG4gICAgICByZXR1cm4gJ2NsYXNzJ1xuICAgIH1cbiAgICBpZiAodmFsdWVbMF0gPT09ICcjJykge1xuICAgICAgcmV0dXJuICdoYXNoJ1xuICAgIH1cbiAgfVxuXG4gIGlmICghcHJvY2Vzc29yLmVuZE9mRmlsZSgpKSB7XG4gICAgbGV0IG5leHQgPSBwcm9jZXNzb3IubmV4dFRva2VuKClcbiAgICBwcm9jZXNzb3IuYmFjayhuZXh0KVxuICAgIGlmIChuZXh0WzBdID09PSAnYnJhY2tldHMnIHx8IG5leHRbMF0gPT09ICcoJykgcmV0dXJuICdjYWxsJ1xuICB9XG5cbiAgcmV0dXJuIHR5cGVcbn1cblxuZnVuY3Rpb24gdGVybWluYWxIaWdobGlnaHQoY3NzKSB7XG4gIGxldCBwcm9jZXNzb3IgPSB0b2tlbml6ZXIobmV3IElucHV0KGNzcyksIHsgaWdub3JlRXJyb3JzOiB0cnVlIH0pXG4gIGxldCByZXN1bHQgPSAnJ1xuICB3aGlsZSAoIXByb2Nlc3Nvci5lbmRPZkZpbGUoKSkge1xuICAgIGxldCB0b2tlbiA9IHByb2Nlc3Nvci5uZXh0VG9rZW4oKVxuICAgIGxldCBjb2xvciA9IEhJR0hMSUdIVF9USEVNRVtnZXRUb2tlblR5cGUodG9rZW4sIHByb2Nlc3NvcildXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICByZXN1bHQgKz0gdG9rZW5bMV1cbiAgICAgICAgLnNwbGl0KC9cXHI/XFxuLylcbiAgICAgICAgLm1hcChpID0+IGNvbG9yKGkpKVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IHRva2VuWzFdXG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxudGVybWluYWxIaWdobGlnaHQucmVnaXN0ZXJJbnB1dCA9IHJlZ2lzdGVySW5wdXRcblxubW9kdWxlLmV4cG9ydHMgPSB0ZXJtaW5hbEhpZ2hsaWdodFxuIl0sIm5hbWVzIjpbInBpY28iLCJyZXF1aXJlIiwidG9rZW5pemVyIiwiSW5wdXQiLCJyZWdpc3RlcklucHV0IiwiZGVwZW5kYW50IiwiSElHSExJR0hUX1RIRU1FIiwieWVsbG93IiwiY3lhbiIsImdyYXkiLCJtYWdlbnRhIiwiZ3JlZW4iLCJnZXRUb2tlblR5cGUiLCJ0eXBlIiwidmFsdWUiLCJwcm9jZXNzb3IiLCJlbmRPZkZpbGUiLCJuZXh0IiwibmV4dFRva2VuIiwiYmFjayIsInRlcm1pbmFsSGlnaGxpZ2h0IiwiY3NzIiwiaWdub3JlRXJyb3JzIiwicmVzdWx0IiwidG9rZW4iLCJjb2xvciIsInNwbGl0IiwibWFwIiwiaSIsImpvaW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/terminal-highlight.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/tokenize.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/tokenize.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nconst SINGLE_QUOTE = \"'\".charCodeAt(0);\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0);\nconst BACKSLASH = \"\\\\\".charCodeAt(0);\nconst SLASH = \"/\".charCodeAt(0);\nconst NEWLINE = \"\\n\".charCodeAt(0);\nconst SPACE = \" \".charCodeAt(0);\nconst FEED = \"\\f\".charCodeAt(0);\nconst TAB = \"\t\".charCodeAt(0);\nconst CR = \"\\r\".charCodeAt(0);\nconst OPEN_SQUARE = \"[\".charCodeAt(0);\nconst CLOSE_SQUARE = \"]\".charCodeAt(0);\nconst OPEN_PARENTHESES = \"(\".charCodeAt(0);\nconst CLOSE_PARENTHESES = \")\".charCodeAt(0);\nconst OPEN_CURLY = \"{\".charCodeAt(0);\nconst CLOSE_CURLY = \"}\".charCodeAt(0);\nconst SEMICOLON = \";\".charCodeAt(0);\nconst ASTERISK = \"*\".charCodeAt(0);\nconst COLON = \":\".charCodeAt(0);\nconst AT = \"@\".charCodeAt(0);\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g;\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g;\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/;\nconst RE_HEX_ESCAPE = /[\\da-f]/i;\nmodule.exports = function tokenizer(input, options = {}) {\n    let css = input.css.valueOf();\n    let ignore = options.ignoreErrors;\n    let code, next, quote, content, escape;\n    let escaped, escapePos, prev, n, currentToken;\n    let length = css.length;\n    let pos = 0;\n    let buffer = [];\n    let returned = [];\n    function position() {\n        return pos;\n    }\n    function unclosed(what) {\n        throw input.error(\"Unclosed \" + what, pos);\n    }\n    function endOfFile() {\n        return returned.length === 0 && pos >= length;\n    }\n    function nextToken(opts) {\n        if (returned.length) return returned.pop();\n        if (pos >= length) return;\n        let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;\n        code = css.charCodeAt(pos);\n        switch(code){\n            case NEWLINE:\n            case SPACE:\n            case TAB:\n            case CR:\n            case FEED:\n                {\n                    next = pos;\n                    do {\n                        next += 1;\n                        code = css.charCodeAt(next);\n                    }while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n                    currentToken = [\n                        \"space\",\n                        css.slice(pos, next)\n                    ];\n                    pos = next - 1;\n                    break;\n                }\n            case OPEN_SQUARE:\n            case CLOSE_SQUARE:\n            case OPEN_CURLY:\n            case CLOSE_CURLY:\n            case COLON:\n            case SEMICOLON:\n            case CLOSE_PARENTHESES:\n                {\n                    let controlChar = String.fromCharCode(code);\n                    currentToken = [\n                        controlChar,\n                        controlChar,\n                        pos\n                    ];\n                    break;\n                }\n            case OPEN_PARENTHESES:\n                {\n                    prev = buffer.length ? buffer.pop()[1] : \"\";\n                    n = css.charCodeAt(pos + 1);\n                    if (prev === \"url\" && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {\n                        next = pos;\n                        do {\n                            escaped = false;\n                            next = css.indexOf(\")\", next + 1);\n                            if (next === -1) {\n                                if (ignore || ignoreUnclosed) {\n                                    next = pos;\n                                    break;\n                                } else {\n                                    unclosed(\"bracket\");\n                                }\n                            }\n                            escapePos = next;\n                            while(css.charCodeAt(escapePos - 1) === BACKSLASH){\n                                escapePos -= 1;\n                                escaped = !escaped;\n                            }\n                        }while (escaped);\n                        currentToken = [\n                            \"brackets\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        pos = next;\n                    } else {\n                        next = css.indexOf(\")\", pos + 1);\n                        content = css.slice(pos, next + 1);\n                        if (next === -1 || RE_BAD_BRACKET.test(content)) {\n                            currentToken = [\n                                \"(\",\n                                \"(\",\n                                pos\n                            ];\n                        } else {\n                            currentToken = [\n                                \"brackets\",\n                                content,\n                                pos,\n                                next\n                            ];\n                            pos = next;\n                        }\n                    }\n                    break;\n                }\n            case SINGLE_QUOTE:\n            case DOUBLE_QUOTE:\n                {\n                    quote = code === SINGLE_QUOTE ? \"'\" : '\"';\n                    next = pos;\n                    do {\n                        escaped = false;\n                        next = css.indexOf(quote, next + 1);\n                        if (next === -1) {\n                            if (ignore || ignoreUnclosed) {\n                                next = pos + 1;\n                                break;\n                            } else {\n                                unclosed(\"string\");\n                            }\n                        }\n                        escapePos = next;\n                        while(css.charCodeAt(escapePos - 1) === BACKSLASH){\n                            escapePos -= 1;\n                            escaped = !escaped;\n                        }\n                    }while (escaped);\n                    currentToken = [\n                        \"string\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            case AT:\n                {\n                    RE_AT_END.lastIndex = pos + 1;\n                    RE_AT_END.test(css);\n                    if (RE_AT_END.lastIndex === 0) {\n                        next = css.length - 1;\n                    } else {\n                        next = RE_AT_END.lastIndex - 2;\n                    }\n                    currentToken = [\n                        \"at-word\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            case BACKSLASH:\n                {\n                    next = pos;\n                    escape = true;\n                    while(css.charCodeAt(next + 1) === BACKSLASH){\n                        next += 1;\n                        escape = !escape;\n                    }\n                    code = css.charCodeAt(next + 1);\n                    if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {\n                        next += 1;\n                        if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n                            while(RE_HEX_ESCAPE.test(css.charAt(next + 1))){\n                                next += 1;\n                            }\n                            if (css.charCodeAt(next + 1) === SPACE) {\n                                next += 1;\n                            }\n                        }\n                    }\n                    currentToken = [\n                        \"word\",\n                        css.slice(pos, next + 1),\n                        pos,\n                        next\n                    ];\n                    pos = next;\n                    break;\n                }\n            default:\n                {\n                    if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n                        next = css.indexOf(\"*/\", pos + 2) + 1;\n                        if (next === 0) {\n                            if (ignore || ignoreUnclosed) {\n                                next = css.length;\n                            } else {\n                                unclosed(\"comment\");\n                            }\n                        }\n                        currentToken = [\n                            \"comment\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        pos = next;\n                    } else {\n                        RE_WORD_END.lastIndex = pos + 1;\n                        RE_WORD_END.test(css);\n                        if (RE_WORD_END.lastIndex === 0) {\n                            next = css.length - 1;\n                        } else {\n                            next = RE_WORD_END.lastIndex - 2;\n                        }\n                        currentToken = [\n                            \"word\",\n                            css.slice(pos, next + 1),\n                            pos,\n                            next\n                        ];\n                        buffer.push(currentToken);\n                        pos = next;\n                    }\n                    break;\n                }\n        }\n        pos++;\n        return currentToken;\n    }\n    function back(token) {\n        returned.push(token);\n    }\n    return {\n        back,\n        endOfFile,\n        nextToken,\n        position\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/tokenize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/warn-once.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/warn-once.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/* eslint-disable no-console */ \nlet printed = {};\nmodule.exports = function warnOnce(message) {\n    if (printed[message]) return;\n    printed[message] = true;\n    if (typeof console !== \"undefined\" && console.warn) {\n        console.warn(message);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvd2Fybi1vbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QixHQUM3QjtBQUVBLElBQUlBLFVBQVUsQ0FBQztBQUVmQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsU0FBU0MsT0FBTztJQUN4QyxJQUFJSixPQUFPLENBQUNJLFFBQVEsRUFBRTtJQUN0QkosT0FBTyxDQUFDSSxRQUFRLEdBQUc7SUFFbkIsSUFBSSxPQUFPQyxZQUFZLGVBQWVBLFFBQVFDLElBQUksRUFBRTtRQUNsREQsUUFBUUMsSUFBSSxDQUFDRjtJQUNmO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvd2Fybi1vbmNlLmpzPzM5NzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuJ3VzZSBzdHJpY3QnXG5cbmxldCBwcmludGVkID0ge31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3YXJuT25jZShtZXNzYWdlKSB7XG4gIGlmIChwcmludGVkW21lc3NhZ2VdKSByZXR1cm5cbiAgcHJpbnRlZFttZXNzYWdlXSA9IHRydWVcblxuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgIGNvbnNvbGUud2FybihtZXNzYWdlKVxuICB9XG59XG4iXSwibmFtZXMiOlsicHJpbnRlZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3YXJuT25jZSIsIm1lc3NhZ2UiLCJjb25zb2xlIiwid2FybiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/warn-once.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/postcss/lib/warning.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/warning.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nclass Warning {\n    constructor(text, opts = {}){\n        this.type = \"warning\";\n        this.text = text;\n        if (opts.node && opts.node.source) {\n            let range = opts.node.rangeBy(opts);\n            this.line = range.start.line;\n            this.column = range.start.column;\n            this.endLine = range.end.line;\n            this.endColumn = range.end.column;\n        }\n        for(let opt in opts)this[opt] = opts[opt];\n    }\n    toString() {\n        if (this.node) {\n            return this.node.error(this.text, {\n                index: this.index,\n                plugin: this.plugin,\n                word: this.word\n            }).message;\n        }\n        if (this.plugin) {\n            return this.plugin + \": \" + this.text;\n        }\n        return this.text;\n    }\n}\nmodule.exports = Warning;\nWarning.default = Warning;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvd2FybmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BO0lBQ0pDLFlBQVlDLElBQUksRUFBRUMsT0FBTyxDQUFDLENBQUMsQ0FBRTtRQUMzQixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0YsSUFBSSxHQUFHQTtRQUVaLElBQUlDLEtBQUtFLElBQUksSUFBSUYsS0FBS0UsSUFBSSxDQUFDQyxNQUFNLEVBQUU7WUFDakMsSUFBSUMsUUFBUUosS0FBS0UsSUFBSSxDQUFDRyxPQUFPLENBQUNMO1lBQzlCLElBQUksQ0FBQ00sSUFBSSxHQUFHRixNQUFNRyxLQUFLLENBQUNELElBQUk7WUFDNUIsSUFBSSxDQUFDRSxNQUFNLEdBQUdKLE1BQU1HLEtBQUssQ0FBQ0MsTUFBTTtZQUNoQyxJQUFJLENBQUNDLE9BQU8sR0FBR0wsTUFBTU0sR0FBRyxDQUFDSixJQUFJO1lBQzdCLElBQUksQ0FBQ0ssU0FBUyxHQUFHUCxNQUFNTSxHQUFHLENBQUNGLE1BQU07UUFDbkM7UUFFQSxJQUFLLElBQUlJLE9BQU9aLEtBQU0sSUFBSSxDQUFDWSxJQUFJLEdBQUdaLElBQUksQ0FBQ1ksSUFBSTtJQUM3QztJQUVBQyxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUNYLElBQUksRUFBRTtZQUNiLE9BQU8sSUFBSSxDQUFDQSxJQUFJLENBQUNZLEtBQUssQ0FBQyxJQUFJLENBQUNmLElBQUksRUFBRTtnQkFDaENnQixPQUFPLElBQUksQ0FBQ0EsS0FBSztnQkFDakJDLFFBQVEsSUFBSSxDQUFDQSxNQUFNO2dCQUNuQkMsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDakIsR0FBR0MsT0FBTztRQUNaO1FBRUEsSUFBSSxJQUFJLENBQUNGLE1BQU0sRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDQSxNQUFNLEdBQUcsT0FBTyxJQUFJLENBQUNqQixJQUFJO1FBQ3ZDO1FBRUEsT0FBTyxJQUFJLENBQUNBLElBQUk7SUFDbEI7QUFDRjtBQUVBb0IsT0FBT0MsT0FBTyxHQUFHdkI7QUFDakJBLFFBQVF3QixPQUFPLEdBQUd4QiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi93YXJuaW5nLmpzP2E0YjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNsYXNzIFdhcm5pbmcge1xuICBjb25zdHJ1Y3Rvcih0ZXh0LCBvcHRzID0ge30pIHtcbiAgICB0aGlzLnR5cGUgPSAnd2FybmluZydcbiAgICB0aGlzLnRleHQgPSB0ZXh0XG5cbiAgICBpZiAob3B0cy5ub2RlICYmIG9wdHMubm9kZS5zb3VyY2UpIHtcbiAgICAgIGxldCByYW5nZSA9IG9wdHMubm9kZS5yYW5nZUJ5KG9wdHMpXG4gICAgICB0aGlzLmxpbmUgPSByYW5nZS5zdGFydC5saW5lXG4gICAgICB0aGlzLmNvbHVtbiA9IHJhbmdlLnN0YXJ0LmNvbHVtblxuICAgICAgdGhpcy5lbmRMaW5lID0gcmFuZ2UuZW5kLmxpbmVcbiAgICAgIHRoaXMuZW5kQ29sdW1uID0gcmFuZ2UuZW5kLmNvbHVtblxuICAgIH1cblxuICAgIGZvciAobGV0IG9wdCBpbiBvcHRzKSB0aGlzW29wdF0gPSBvcHRzW29wdF1cbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGlmICh0aGlzLm5vZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGUuZXJyb3IodGhpcy50ZXh0LCB7XG4gICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICBwbHVnaW46IHRoaXMucGx1Z2luLFxuICAgICAgICB3b3JkOiB0aGlzLndvcmRcbiAgICAgIH0pLm1lc3NhZ2VcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wbHVnaW4pIHtcbiAgICAgIHJldHVybiB0aGlzLnBsdWdpbiArICc6ICcgKyB0aGlzLnRleHRcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXh0XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXYXJuaW5nXG5XYXJuaW5nLmRlZmF1bHQgPSBXYXJuaW5nXG4iXSwibmFtZXMiOlsiV2FybmluZyIsImNvbnN0cnVjdG9yIiwidGV4dCIsIm9wdHMiLCJ0eXBlIiwibm9kZSIsInNvdXJjZSIsInJhbmdlIiwicmFuZ2VCeSIsImxpbmUiLCJzdGFydCIsImNvbHVtbiIsImVuZExpbmUiLCJlbmQiLCJlbmRDb2x1bW4iLCJvcHQiLCJ0b1N0cmluZyIsImVycm9yIiwiaW5kZXgiLCJwbHVnaW4iLCJ3b3JkIiwibWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/postcss/lib/warning.js\n");

/***/ })

};
;