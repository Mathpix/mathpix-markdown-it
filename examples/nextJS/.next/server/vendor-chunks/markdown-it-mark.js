"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/markdown-it-mark";
exports.ids = ["vendor-chunks/markdown-it-mark"];
exports.modules = {

/***/ "(ssr)/./node_modules/markdown-it-mark/index.js":
/*!************************************************!*\
  !*** ./node_modules/markdown-it-mark/index.js ***!
  \************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function ins_plugin(md) {\n    // Insert each marker as a separate text token, and add it to delimiter list\n    //\n    function tokenize(state, silent) {\n        var i, scanned, token, len, ch, start = state.pos, marker = state.src.charCodeAt(start);\n        if (silent) {\n            return false;\n        }\n        if (marker !== 0x3D /* = */ ) {\n            return false;\n        }\n        scanned = state.scanDelims(state.pos, true);\n        len = scanned.length;\n        ch = String.fromCharCode(marker);\n        if (len < 2) {\n            return false;\n        }\n        if (len % 2) {\n            token = state.push(\"text\", \"\", 0);\n            token.content = ch;\n            len--;\n        }\n        for(i = 0; i < len; i += 2){\n            token = state.push(\"text\", \"\", 0);\n            token.content = ch + ch;\n            state.delimiters.push({\n                marker: marker,\n                jump: i,\n                token: state.tokens.length - 1,\n                level: state.level,\n                end: -1,\n                open: scanned.can_open,\n                close: scanned.can_close\n            });\n        }\n        state.pos += scanned.length;\n        return true;\n    }\n    // Walk through delimiter list and replace text tokens with tags\n    //\n    function postProcess(state) {\n        var i, j, startDelim, endDelim, token, loneMarkers = [], delimiters = state.delimiters, max = state.delimiters.length;\n        for(i = 0; i < max; i++){\n            startDelim = delimiters[i];\n            if (startDelim.marker !== 0x3D /* = */ ) {\n                continue;\n            }\n            if (startDelim.end === -1) {\n                continue;\n            }\n            endDelim = delimiters[startDelim.end];\n            token = state.tokens[startDelim.token];\n            token.type = \"mark_open\";\n            token.tag = \"mark\";\n            token.nesting = 1;\n            token.markup = \"==\";\n            token.content = \"\";\n            token = state.tokens[endDelim.token];\n            token.type = \"mark_close\";\n            token.tag = \"mark\";\n            token.nesting = -1;\n            token.markup = \"==\";\n            token.content = \"\";\n            if (state.tokens[endDelim.token - 1].type === \"text\" && state.tokens[endDelim.token - 1].content === \"=\") {\n                loneMarkers.push(endDelim.token - 1);\n            }\n        }\n        // If a marker sequence has an odd number of characters, it's splitted\n        // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n        // start of the sequence.\n        //\n        // So, we have to move all those markers after subsequent s_close tags.\n        //\n        while(loneMarkers.length){\n            i = loneMarkers.pop();\n            j = i + 1;\n            while(j < state.tokens.length && state.tokens[j].type === \"mark_close\"){\n                j++;\n            }\n            j--;\n            if (i !== j) {\n                token = state.tokens[j];\n                state.tokens[j] = state.tokens[i];\n                state.tokens[i] = token;\n            }\n        }\n    }\n    md.inline.ruler.before(\"emphasis\", \"mark\", tokenize);\n    md.inline.ruler2.before(\"emphasis\", \"mark\", postProcess);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQtbWFyay9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUdBQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsV0FBV0MsRUFBRTtJQUNyQyw0RUFBNEU7SUFDNUUsRUFBRTtJQUNGLFNBQVNDLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUM3QixJQUFJQyxHQUFHQyxTQUFTQyxPQUFPQyxLQUFLQyxJQUN4QkMsUUFBUVAsTUFBTVEsR0FBRyxFQUNqQkMsU0FBU1QsTUFBTVUsR0FBRyxDQUFDQyxVQUFVLENBQUNKO1FBRWxDLElBQUlOLFFBQVE7WUFBRSxPQUFPO1FBQU87UUFFNUIsSUFBSVEsV0FBVyxLQUFJLEtBQUssS0FBSTtZQUFFLE9BQU87UUFBTztRQUU1Q04sVUFBVUgsTUFBTVksVUFBVSxDQUFDWixNQUFNUSxHQUFHLEVBQUU7UUFDdENILE1BQU1GLFFBQVFVLE1BQU07UUFDcEJQLEtBQUtRLE9BQU9DLFlBQVksQ0FBQ047UUFFekIsSUFBSUosTUFBTSxHQUFHO1lBQUUsT0FBTztRQUFPO1FBRTdCLElBQUlBLE1BQU0sR0FBRztZQUNYRCxRQUFnQkosTUFBTWdCLElBQUksQ0FBQyxRQUFRLElBQUk7WUFDdkNaLE1BQU1hLE9BQU8sR0FBR1g7WUFDaEJEO1FBQ0Y7UUFFQSxJQUFLSCxJQUFJLEdBQUdBLElBQUlHLEtBQUtILEtBQUssRUFBRztZQUMzQkUsUUFBZ0JKLE1BQU1nQixJQUFJLENBQUMsUUFBUSxJQUFJO1lBQ3ZDWixNQUFNYSxPQUFPLEdBQUdYLEtBQUtBO1lBRXJCTixNQUFNa0IsVUFBVSxDQUFDRixJQUFJLENBQUM7Z0JBQ3BCUCxRQUFRQTtnQkFDUlUsTUFBUWpCO2dCQUNSRSxPQUFRSixNQUFNb0IsTUFBTSxDQUFDUCxNQUFNLEdBQUc7Z0JBQzlCUSxPQUFRckIsTUFBTXFCLEtBQUs7Z0JBQ25CQyxLQUFRLENBQUM7Z0JBQ1RDLE1BQVFwQixRQUFRcUIsUUFBUTtnQkFDeEJDLE9BQVF0QixRQUFRdUIsU0FBUztZQUMzQjtRQUNGO1FBRUExQixNQUFNUSxHQUFHLElBQUlMLFFBQVFVLE1BQU07UUFFM0IsT0FBTztJQUNUO0lBR0EsZ0VBQWdFO0lBQ2hFLEVBQUU7SUFDRixTQUFTYyxZQUFZM0IsS0FBSztRQUN4QixJQUFJRSxHQUFHMEIsR0FDSEMsWUFDQUMsVUFDQTFCLE9BQ0EyQixjQUFjLEVBQUUsRUFDaEJiLGFBQWFsQixNQUFNa0IsVUFBVSxFQUM3QmMsTUFBTWhDLE1BQU1rQixVQUFVLENBQUNMLE1BQU07UUFFakMsSUFBS1gsSUFBSSxHQUFHQSxJQUFJOEIsS0FBSzlCLElBQUs7WUFDeEIyQixhQUFhWCxVQUFVLENBQUNoQixFQUFFO1lBRTFCLElBQUkyQixXQUFXcEIsTUFBTSxLQUFLLEtBQUksS0FBSyxLQUFJO2dCQUNyQztZQUNGO1lBRUEsSUFBSW9CLFdBQVdQLEdBQUcsS0FBSyxDQUFDLEdBQUc7Z0JBQ3pCO1lBQ0Y7WUFFQVEsV0FBV1osVUFBVSxDQUFDVyxXQUFXUCxHQUFHLENBQUM7WUFFckNsQixRQUFnQkosTUFBTW9CLE1BQU0sQ0FBQ1MsV0FBV3pCLEtBQUssQ0FBQztZQUM5Q0EsTUFBTTZCLElBQUksR0FBTTtZQUNoQjdCLE1BQU04QixHQUFHLEdBQU87WUFDaEI5QixNQUFNK0IsT0FBTyxHQUFHO1lBQ2hCL0IsTUFBTWdDLE1BQU0sR0FBSTtZQUNoQmhDLE1BQU1hLE9BQU8sR0FBRztZQUVoQmIsUUFBZ0JKLE1BQU1vQixNQUFNLENBQUNVLFNBQVMxQixLQUFLLENBQUM7WUFDNUNBLE1BQU02QixJQUFJLEdBQU07WUFDaEI3QixNQUFNOEIsR0FBRyxHQUFPO1lBQ2hCOUIsTUFBTStCLE9BQU8sR0FBRyxDQUFDO1lBQ2pCL0IsTUFBTWdDLE1BQU0sR0FBSTtZQUNoQmhDLE1BQU1hLE9BQU8sR0FBRztZQUVoQixJQUFJakIsTUFBTW9CLE1BQU0sQ0FBQ1UsU0FBUzFCLEtBQUssR0FBRyxFQUFFLENBQUM2QixJQUFJLEtBQUssVUFDMUNqQyxNQUFNb0IsTUFBTSxDQUFDVSxTQUFTMUIsS0FBSyxHQUFHLEVBQUUsQ0FBQ2EsT0FBTyxLQUFLLEtBQUs7Z0JBRXBEYyxZQUFZZixJQUFJLENBQUNjLFNBQVMxQixLQUFLLEdBQUc7WUFDcEM7UUFDRjtRQUVBLHNFQUFzRTtRQUN0RSxxRUFBcUU7UUFDckUseUJBQXlCO1FBQ3pCLEVBQUU7UUFDRix1RUFBdUU7UUFDdkUsRUFBRTtRQUNGLE1BQU8yQixZQUFZbEIsTUFBTSxDQUFFO1lBQ3pCWCxJQUFJNkIsWUFBWU0sR0FBRztZQUNuQlQsSUFBSTFCLElBQUk7WUFFUixNQUFPMEIsSUFBSTVCLE1BQU1vQixNQUFNLENBQUNQLE1BQU0sSUFBSWIsTUFBTW9CLE1BQU0sQ0FBQ1EsRUFBRSxDQUFDSyxJQUFJLEtBQUssYUFBYztnQkFDdkVMO1lBQ0Y7WUFFQUE7WUFFQSxJQUFJMUIsTUFBTTBCLEdBQUc7Z0JBQ1h4QixRQUFRSixNQUFNb0IsTUFBTSxDQUFDUSxFQUFFO2dCQUN2QjVCLE1BQU1vQixNQUFNLENBQUNRLEVBQUUsR0FBRzVCLE1BQU1vQixNQUFNLENBQUNsQixFQUFFO2dCQUNqQ0YsTUFBTW9CLE1BQU0sQ0FBQ2xCLEVBQUUsR0FBR0U7WUFDcEI7UUFDRjtJQUNGO0lBRUFOLEdBQUd3QyxNQUFNLENBQUNDLEtBQUssQ0FBQ0MsTUFBTSxDQUFDLFlBQVksUUFBUXpDO0lBQzNDRCxHQUFHd0MsTUFBTSxDQUFDRyxNQUFNLENBQUNELE1BQU0sQ0FBQyxZQUFZLFFBQVFiO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0LW1hcmsvaW5kZXguanM/ZjQyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbnNfcGx1Z2luKG1kKSB7XG4gIC8vIEluc2VydCBlYWNoIG1hcmtlciBhcyBhIHNlcGFyYXRlIHRleHQgdG9rZW4sIGFuZCBhZGQgaXQgdG8gZGVsaW1pdGVyIGxpc3RcbiAgLy9cbiAgZnVuY3Rpb24gdG9rZW5pemUoc3RhdGUsIHNpbGVudCkge1xuICAgIHZhciBpLCBzY2FubmVkLCB0b2tlbiwgbGVuLCBjaCxcbiAgICAgICAgc3RhcnQgPSBzdGF0ZS5wb3MsXG4gICAgICAgIG1hcmtlciA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHN0YXJ0KTtcblxuICAgIGlmIChzaWxlbnQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICBpZiAobWFya2VyICE9PSAweDNELyogPSAqLykgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIHNjYW5uZWQgPSBzdGF0ZS5zY2FuRGVsaW1zKHN0YXRlLnBvcywgdHJ1ZSk7XG4gICAgbGVuID0gc2Nhbm5lZC5sZW5ndGg7XG4gICAgY2ggPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG1hcmtlcik7XG5cbiAgICBpZiAobGVuIDwgMikgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIGlmIChsZW4gJSAyKSB7XG4gICAgICB0b2tlbiAgICAgICAgID0gc3RhdGUucHVzaCgndGV4dCcsICcnLCAwKTtcbiAgICAgIHRva2VuLmNvbnRlbnQgPSBjaDtcbiAgICAgIGxlbi0tO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMCk7XG4gICAgICB0b2tlbi5jb250ZW50ID0gY2ggKyBjaDtcblxuICAgICAgc3RhdGUuZGVsaW1pdGVycy5wdXNoKHtcbiAgICAgICAgbWFya2VyOiBtYXJrZXIsXG4gICAgICAgIGp1bXA6ICAgaSxcbiAgICAgICAgdG9rZW46ICBzdGF0ZS50b2tlbnMubGVuZ3RoIC0gMSxcbiAgICAgICAgbGV2ZWw6ICBzdGF0ZS5sZXZlbCxcbiAgICAgICAgZW5kOiAgICAtMSxcbiAgICAgICAgb3BlbjogICBzY2FubmVkLmNhbl9vcGVuLFxuICAgICAgICBjbG9zZTogIHNjYW5uZWQuY2FuX2Nsb3NlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0ZS5wb3MgKz0gc2Nhbm5lZC5sZW5ndGg7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG5cbiAgLy8gV2FsayB0aHJvdWdoIGRlbGltaXRlciBsaXN0IGFuZCByZXBsYWNlIHRleHQgdG9rZW5zIHdpdGggdGFnc1xuICAvL1xuICBmdW5jdGlvbiBwb3N0UHJvY2VzcyhzdGF0ZSkge1xuICAgIHZhciBpLCBqLFxuICAgICAgICBzdGFydERlbGltLFxuICAgICAgICBlbmREZWxpbSxcbiAgICAgICAgdG9rZW4sXG4gICAgICAgIGxvbmVNYXJrZXJzID0gW10sXG4gICAgICAgIGRlbGltaXRlcnMgPSBzdGF0ZS5kZWxpbWl0ZXJzLFxuICAgICAgICBtYXggPSBzdGF0ZS5kZWxpbWl0ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBtYXg7IGkrKykge1xuICAgICAgc3RhcnREZWxpbSA9IGRlbGltaXRlcnNbaV07XG5cbiAgICAgIGlmIChzdGFydERlbGltLm1hcmtlciAhPT0gMHgzRC8qID0gKi8pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydERlbGltLmVuZCA9PT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVuZERlbGltID0gZGVsaW1pdGVyc1tzdGFydERlbGltLmVuZF07XG5cbiAgICAgIHRva2VuICAgICAgICAgPSBzdGF0ZS50b2tlbnNbc3RhcnREZWxpbS50b2tlbl07XG4gICAgICB0b2tlbi50eXBlICAgID0gJ21hcmtfb3Blbic7XG4gICAgICB0b2tlbi50YWcgICAgID0gJ21hcmsnO1xuICAgICAgdG9rZW4ubmVzdGluZyA9IDE7XG4gICAgICB0b2tlbi5tYXJrdXAgID0gJz09JztcbiAgICAgIHRva2VuLmNvbnRlbnQgPSAnJztcblxuICAgICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnRva2Vuc1tlbmREZWxpbS50b2tlbl07XG4gICAgICB0b2tlbi50eXBlICAgID0gJ21hcmtfY2xvc2UnO1xuICAgICAgdG9rZW4udGFnICAgICA9ICdtYXJrJztcbiAgICAgIHRva2VuLm5lc3RpbmcgPSAtMTtcbiAgICAgIHRva2VuLm1hcmt1cCAgPSAnPT0nO1xuICAgICAgdG9rZW4uY29udGVudCA9ICcnO1xuXG4gICAgICBpZiAoc3RhdGUudG9rZW5zW2VuZERlbGltLnRva2VuIC0gMV0udHlwZSA9PT0gJ3RleHQnICYmXG4gICAgICAgICAgc3RhdGUudG9rZW5zW2VuZERlbGltLnRva2VuIC0gMV0uY29udGVudCA9PT0gJz0nKSB7XG5cbiAgICAgICAgbG9uZU1hcmtlcnMucHVzaChlbmREZWxpbS50b2tlbiAtIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIGEgbWFya2VyIHNlcXVlbmNlIGhhcyBhbiBvZGQgbnVtYmVyIG9mIGNoYXJhY3RlcnMsIGl0J3Mgc3BsaXR0ZWRcbiAgICAvLyBsaWtlIHRoaXM6IGB+fn5+fmAgLT4gYH5gICsgYH5+YCArIGB+fmAsIGxlYXZpbmcgb25lIG1hcmtlciBhdCB0aGVcbiAgICAvLyBzdGFydCBvZiB0aGUgc2VxdWVuY2UuXG4gICAgLy9cbiAgICAvLyBTbywgd2UgaGF2ZSB0byBtb3ZlIGFsbCB0aG9zZSBtYXJrZXJzIGFmdGVyIHN1YnNlcXVlbnQgc19jbG9zZSB0YWdzLlxuICAgIC8vXG4gICAgd2hpbGUgKGxvbmVNYXJrZXJzLmxlbmd0aCkge1xuICAgICAgaSA9IGxvbmVNYXJrZXJzLnBvcCgpO1xuICAgICAgaiA9IGkgKyAxO1xuXG4gICAgICB3aGlsZSAoaiA8IHN0YXRlLnRva2Vucy5sZW5ndGggJiYgc3RhdGUudG9rZW5zW2pdLnR5cGUgPT09ICdtYXJrX2Nsb3NlJykge1xuICAgICAgICBqKys7XG4gICAgICB9XG5cbiAgICAgIGotLTtcblxuICAgICAgaWYgKGkgIT09IGopIHtcbiAgICAgICAgdG9rZW4gPSBzdGF0ZS50b2tlbnNbal07XG4gICAgICAgIHN0YXRlLnRva2Vuc1tqXSA9IHN0YXRlLnRva2Vuc1tpXTtcbiAgICAgICAgc3RhdGUudG9rZW5zW2ldID0gdG9rZW47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbWQuaW5saW5lLnJ1bGVyLmJlZm9yZSgnZW1waGFzaXMnLCAnbWFyaycsIHRva2VuaXplKTtcbiAgbWQuaW5saW5lLnJ1bGVyMi5iZWZvcmUoJ2VtcGhhc2lzJywgJ21hcmsnLCBwb3N0UHJvY2Vzcyk7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpbnNfcGx1Z2luIiwibWQiLCJ0b2tlbml6ZSIsInN0YXRlIiwic2lsZW50IiwiaSIsInNjYW5uZWQiLCJ0b2tlbiIsImxlbiIsImNoIiwic3RhcnQiLCJwb3MiLCJtYXJrZXIiLCJzcmMiLCJjaGFyQ29kZUF0Iiwic2NhbkRlbGltcyIsImxlbmd0aCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInB1c2giLCJjb250ZW50IiwiZGVsaW1pdGVycyIsImp1bXAiLCJ0b2tlbnMiLCJsZXZlbCIsImVuZCIsIm9wZW4iLCJjYW5fb3BlbiIsImNsb3NlIiwiY2FuX2Nsb3NlIiwicG9zdFByb2Nlc3MiLCJqIiwic3RhcnREZWxpbSIsImVuZERlbGltIiwibG9uZU1hcmtlcnMiLCJtYXgiLCJ0eXBlIiwidGFnIiwibmVzdGluZyIsIm1hcmt1cCIsInBvcCIsImlubGluZSIsInJ1bGVyIiwiYmVmb3JlIiwicnVsZXIyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/markdown-it-mark/index.js\n");

/***/ })

};
;