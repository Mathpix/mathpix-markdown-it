"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/markdown-it-multimd-table";
exports.ids = ["vendor-chunks/markdown-it-multimd-table"];
exports.modules = {

/***/ "(ssr)/./node_modules/markdown-it-multimd-table/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/markdown-it-multimd-table/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar DFA = __webpack_require__(/*! ./lib/dfa.js */ \"(ssr)/./node_modules/markdown-it-multimd-table/lib/dfa.js\");\nmodule.exports = function multimd_table_plugin(md, options) {\n    var defaults = {\n        multiline: false,\n        rowspan: false,\n        headerless: false,\n        multibody: true,\n        autolabel: true\n    };\n    options = md.utils.assign({}, defaults, options || {});\n    function scan_bound_indices(state, line) {\n        /**\n     * Naming convention of positional variables\n     * - list-item\n     * ·········longtext······\\n\n     *   ^head  ^start  ^end  ^max\n     */ var start = state.bMarks[line] + state.sCount[line], head = state.bMarks[line] + state.blkIndent, end = state.skipSpacesBack(state.eMarks[line], head), bounds = [], pos, posjump, escape = false, code = false, serial = 0;\n        /* Scan for valid pipe character position */ for(pos = start; pos < end; pos++){\n            switch(state.src.charCodeAt(pos)){\n                case 0x5c /* \\ */ :\n                    escape = true;\n                    break;\n                case 0x60 /* ` */ :\n                    posjump = state.skipChars(pos, 0x60) - 1;\n                    /* make \\` closes the code sequence, but not open it;\n             the reason is that `\\` is correct code block */ /* eslint-disable-next-line brace-style */ if (posjump > pos) {\n                        if (!code) {\n                            if (serial === 0) {\n                                serial = posjump - pos;\n                            } else if (serial === posjump - pos) {\n                                serial = 0;\n                            }\n                        }\n                        pos = posjump;\n                    } else if (code || !escape && !serial) {\n                        code = !code;\n                    }\n                    escape = false;\n                    break;\n                case 0x7c /* | */ :\n                    if (!code && !escape) {\n                        bounds.push(pos);\n                    }\n                    escape = false;\n                    break;\n                default:\n                    escape = false;\n                    break;\n            }\n        }\n        if (bounds.length === 0) return bounds;\n        /* Pad in newline characters on last and this line */ if (bounds[0] > head) {\n            bounds.unshift(head - 1);\n        }\n        if (bounds[bounds.length - 1] < end - 1) {\n            bounds.push(end);\n        }\n        return bounds;\n    }\n    function table_caption(state, silent, line) {\n        var meta = {\n            text: null,\n            label: null\n        }, start = state.bMarks[line] + state.sCount[line], max = state.eMarks[line], /* A non-greedy qualifier allows the label to be matched */ capRE = /^\\[(.+?)\\](\\[([^\\[\\]]+)\\])?\\s*$/, matches = state.src.slice(start, max).match(capRE);\n        if (!matches) {\n            return false;\n        }\n        if (silent) {\n            return true;\n        }\n        meta.text = matches[1];\n        if (!options.autolabel && !matches[2]) {\n            return meta;\n        }\n        meta.label = matches[2] || matches[1];\n        meta.label = meta.label.toLowerCase().replace(/\\W+/g, \"\");\n        return meta;\n    }\n    function table_row(state, silent, line) {\n        var meta = {\n            bounds: null,\n            multiline: null\n        }, bounds = scan_bound_indices(state, line), start, pos, oldMax;\n        if (bounds.length < 2) {\n            return false;\n        }\n        if (silent) {\n            return true;\n        }\n        meta.bounds = bounds;\n        /* Multiline. Scan boundaries again since it's very complicated */ if (options.multiline) {\n            start = state.bMarks[line] + state.sCount[line];\n            pos = state.eMarks[line] - 1; /* where backslash should be */ \n            meta.multiline = state.src.charCodeAt(pos) === 0x5C /* \\ */ ;\n            if (meta.multiline) {\n                oldMax = state.eMarks[line];\n                state.eMarks[line] = state.skipSpacesBack(pos, start);\n                meta.bounds = scan_bound_indices(state, line);\n                state.eMarks[line] = oldMax;\n            }\n        }\n        return meta;\n    }\n    function table_separator(state, silent, line) {\n        var meta = {\n            aligns: [],\n            wraps: []\n        }, bounds = scan_bound_indices(state, line), sepRE = /^:?(-+|=+):?\\+?$/, c, text, align;\n        /* Only separator needs to check indents */ if (state.sCount[line] - state.blkIndent >= 4) {\n            return false;\n        }\n        if (bounds.length === 0) {\n            return false;\n        }\n        for(c = 0; c < bounds.length - 1; c++){\n            text = state.src.slice(bounds[c] + 1, bounds[c + 1]).trim();\n            if (!sepRE.test(text)) {\n                return false;\n            }\n            meta.wraps.push(text.charCodeAt(text.length - 1) === 0x2B /* + */ );\n            align = (text.charCodeAt(0) === 0x3A /* : */ ) << 4 | text.charCodeAt(text.length - 1 - meta.wraps[c]) === 0x3A;\n            switch(align){\n                case 0x00:\n                    meta.aligns.push(\"\");\n                    break;\n                case 0x01:\n                    meta.aligns.push(\"right\");\n                    break;\n                case 0x10:\n                    meta.aligns.push(\"left\");\n                    break;\n                case 0x11:\n                    meta.aligns.push(\"center\");\n                    break;\n            }\n        }\n        if (silent) {\n            return true;\n        }\n        return meta;\n    }\n    function table_empty(state, silent, line) {\n        return state.isEmpty(line);\n    }\n    function table(state, startLine, endLine, silent) {\n        /**\n     * Regex pseudo code for table:\n     *     caption? header+ separator (data+ empty)* data+ caption?\n     *\n     * We use DFA to emulate this plugin. Types with lower precedence are\n     * set-minus from all the formers.  Noted that separator should have higher\n     * precedence than header or data.\n     *   |  state  | caption separator header data empty | --> lower precedence\n     *   | 0x10100 |    1        0       1     0     0   |\n     */ var tableDFA = new DFA(), grp = 0x10, mtr = -1, token, tableToken, trToken, colspan, leftToken, rowspan, upTokens = [], tableLines, tgroupLines, tag, text, range, r, c, b, t, blockState;\n        if (startLine + 2 > endLine) {\n            return false;\n        }\n        /**\n     * First pass: validate and collect info into table token. IR is stored in\n     * markdown-it `token.meta` to be pushed later. table/tr open tokens are\n     * generated here.\n     */ tableToken = new state.Token(\"table_open\", \"table\", 1);\n        tableToken.meta = {\n            sep: null,\n            cap: null,\n            tr: []\n        };\n        tableDFA.set_highest_alphabet(0x10000);\n        tableDFA.set_initial_state(0x10100);\n        tableDFA.set_accept_states([\n            0x10010,\n            0x10011,\n            0x00000\n        ]);\n        tableDFA.set_match_alphabets({\n            0x10000: table_caption.bind(this, state, true),\n            0x01000: table_separator.bind(this, state, true),\n            0x00100: table_row.bind(this, state, true),\n            0x00010: table_row.bind(this, state, true),\n            0x00001: table_empty.bind(this, state, true)\n        });\n        tableDFA.set_transitions({\n            0x10100: {\n                0x10000: 0x00100,\n                0x00100: 0x01100\n            },\n            0x00100: {\n                0x00100: 0x01100\n            },\n            0x01100: {\n                0x01000: 0x10010,\n                0x00100: 0x01100\n            },\n            0x10010: {\n                0x10000: 0x00000,\n                0x00010: 0x10011\n            },\n            0x10011: {\n                0x10000: 0x00000,\n                0x00010: 0x10011,\n                0x00001: 0x10010\n            }\n        });\n        if (options.headerless) {\n            tableDFA.set_initial_state(0x11100);\n            tableDFA.update_transition(0x11100, {\n                0x10000: 0x01100,\n                0x01000: 0x10010,\n                0x00100: 0x01100\n            });\n            trToken = new state.Token(\"tr_placeholder\", \"tr\", 0);\n            trToken.meta = Object(); // avoid trToken.meta.grp throws exception\n        }\n        if (!options.multibody) {\n            tableDFA.update_transition(0x10010, {\n                0x10000: 0x00000,\n                0x00010: 0x10010\n            } // 0x10011 is never reached\n            );\n        }\n        /* Don't mix up DFA `_state` and markdown-it `state` */ tableDFA.set_actions(function(_line, _state, _type) {\n            // console.log(_line, _state.toString(16), _type.toString(16))  // for test\n            switch(_type){\n                case 0x10000:\n                    if (tableToken.meta.cap) {\n                        break;\n                    }\n                    tableToken.meta.cap = table_caption(state, false, _line);\n                    tableToken.meta.cap.map = [\n                        _line,\n                        _line + 1\n                    ];\n                    tableToken.meta.cap.first = _line === startLine;\n                    break;\n                case 0x01000:\n                    tableToken.meta.sep = table_separator(state, false, _line);\n                    tableToken.meta.sep.map = [\n                        _line,\n                        _line + 1\n                    ];\n                    trToken.meta.grp |= 0x01; // previously assigned at case 0x00110\n                    grp = 0x10;\n                    break;\n                case 0x00100:\n                case 0x00010:\n                    trToken = new state.Token(\"tr_open\", \"tr\", 1);\n                    trToken.map = [\n                        _line,\n                        _line + 1\n                    ];\n                    trToken.meta = table_row(state, false, _line);\n                    trToken.meta.type = _type;\n                    trToken.meta.grp = grp;\n                    grp = 0x00;\n                    tableToken.meta.tr.push(trToken);\n                    /* Multiline. Merge trTokens as an entire multiline trToken */ if (options.multiline) {\n                        if (trToken.meta.multiline && mtr < 0) {\n                            /* Start line of multiline row. mark this trToken */ mtr = tableToken.meta.tr.length - 1;\n                        } else if (!trToken.meta.multiline && mtr >= 0) {\n                            /* End line of multiline row. merge forward until the marked trToken */ token = tableToken.meta.tr[mtr];\n                            token.meta.mbounds = tableToken.meta.tr.slice(mtr).map(function(tk) {\n                                return tk.meta.bounds;\n                            });\n                            token.map[1] = trToken.map[1];\n                            tableToken.meta.tr = tableToken.meta.tr.slice(0, mtr + 1);\n                            mtr = -1;\n                        }\n                    }\n                    break;\n                case 0x00001:\n                    trToken.meta.grp |= 0x01;\n                    grp = 0x10;\n                    break;\n            }\n        });\n        if (tableDFA.execute(startLine, endLine) === false) {\n            return false;\n        }\n        // if (!tableToken.meta.sep) { return false; } // always evaluated true\n        if (!tableToken.meta.tr.length) {\n            return false;\n        } // false under headerless corner case\n        if (silent) {\n            return true;\n        }\n        /* Last data row cannot be detected. not stored to trToken outside? */ tableToken.meta.tr[tableToken.meta.tr.length - 1].meta.grp |= 0x01;\n        /**\n     * Second pass: actually push the tokens into `state.tokens`.\n     * thead/tbody/th/td open tokens and all closed tokens are generated here;\n     * thead/tbody are generally called tgroup; td/th are generally called tcol.\n     */ tableToken.map = tableLines = [\n            startLine,\n            0\n        ];\n        tableToken.block = true;\n        tableToken.level = state.level++;\n        state.tokens.push(tableToken);\n        if (tableToken.meta.cap) {\n            token = state.push(\"caption_open\", \"caption\", 1);\n            token.map = tableToken.meta.cap.map;\n            var attrs = [];\n            var capSide = tableToken.meta.cap.first ? \"top\" : \"bottom\";\n            /* Null is possible when disabled the option autolabel */ if (tableToken.meta.cap.label !== null) {\n                attrs.push([\n                    \"id\",\n                    tableToken.meta.cap.label\n                ]);\n            }\n            /* Add caption-side inline-CSS to <caption> tag, if caption is below the markdown table. */ if (capSide !== \"top\") {\n                attrs.push([\n                    \"style\",\n                    \"caption-side: \" + capSide\n                ]);\n            }\n            token.attrs = attrs;\n            token = state.push(\"inline\", \"\", 0);\n            token.content = tableToken.meta.cap.text;\n            token.map = tableToken.meta.cap.map;\n            token.children = [];\n            token = state.push(\"caption_close\", \"caption\", -1);\n        }\n        for(r = 0; r < tableToken.meta.tr.length; r++){\n            leftToken = new state.Token(\"td_th_placeholder\", \"\", 0);\n            /* Push in thead/tbody and tr open tokens */ trToken = tableToken.meta.tr[r];\n            // console.log(trToken.meta); // for test\n            if (trToken.meta.grp & 0x10) {\n                tag = trToken.meta.type === 0x00100 ? \"thead\" : \"tbody\";\n                token = state.push(tag + \"_open\", tag, 1);\n                token.map = tgroupLines = [\n                    trToken.map[0],\n                    0\n                ]; // array ref\n                upTokens = [];\n            }\n            trToken.block = true;\n            trToken.level = state.level++;\n            state.tokens.push(trToken);\n            /* Push in th/td tokens */ for(c = 0; c < trToken.meta.bounds.length - 1; c++){\n                range = [\n                    trToken.meta.bounds[c] + 1,\n                    trToken.meta.bounds[c + 1]\n                ];\n                text = state.src.slice.apply(state.src, range);\n                if (text === \"\") {\n                    colspan = leftToken.attrGet(\"colspan\");\n                    leftToken.attrSet(\"colspan\", colspan === null ? 2 : colspan + 1);\n                    continue;\n                }\n                if (options.rowspan && upTokens[c] && text.trim() === \"^^\") {\n                    rowspan = upTokens[c].attrGet(\"rowspan\");\n                    upTokens[c].attrSet(\"rowspan\", rowspan === null ? 2 : rowspan + 1);\n                    leftToken = new state.Token(\"td_th_placeholder\", \"\", 0);\n                    continue;\n                }\n                tag = trToken.meta.type === 0x00100 ? \"th\" : \"td\";\n                token = state.push(tag + \"_open\", tag, 1);\n                token.map = trToken.map;\n                token.attrs = [];\n                if (tableToken.meta.sep.aligns[c]) {\n                    token.attrs.push([\n                        \"style\",\n                        \"text-align:\" + tableToken.meta.sep.aligns[c]\n                    ]);\n                }\n                if (tableToken.meta.sep.wraps[c]) {\n                    token.attrs.push([\n                        \"class\",\n                        \"extend\"\n                    ]);\n                }\n                leftToken = upTokens[c] = token;\n                /* Multiline. Join the text and feed into markdown-it blockParser. */ if (options.multiline && trToken.meta.multiline && trToken.meta.mbounds) {\n                    // Pad the text with empty lines to ensure the line number mapping is correct\n                    text = new Array(trToken.map[0]).fill(\"\").concat([\n                        text.trimRight()\n                    ]);\n                    for(b = 1; b < trToken.meta.mbounds.length; b++){\n                        /* Line with N bounds has cells indexed from 0 to N-2 */ if (c > trToken.meta.mbounds[b].length - 2) {\n                            continue;\n                        }\n                        range = [\n                            trToken.meta.mbounds[b][c] + 1,\n                            trToken.meta.mbounds[b][c + 1]\n                        ];\n                        text.push(state.src.slice.apply(state.src, range).trimRight());\n                    }\n                    blockState = new state.md.block.State(text.join(\"\\n\"), state.md, state.env, []);\n                    blockState.level = trToken.level + 1;\n                    // Start tokenizing from the actual content (trToken.map[0])\n                    state.md.block.tokenize(blockState, trToken.map[0], blockState.lineMax);\n                    for(t = 0; t < blockState.tokens.length; t++){\n                        state.tokens.push(blockState.tokens[t]);\n                    }\n                } else {\n                    token = state.push(\"inline\", \"\", 0);\n                    token.content = text.trim();\n                    token.map = trToken.map;\n                    token.level = trToken.level + 1;\n                    token.children = [];\n                }\n                token = state.push(tag + \"_close\", tag, -1);\n            }\n            /* Push in tr and thead/tbody closed tokens */ state.push(\"tr_close\", \"tr\", -1);\n            if (trToken.meta.grp & 0x01) {\n                tag = trToken.meta.type === 0x00100 ? \"thead\" : \"tbody\";\n                token = state.push(tag + \"_close\", tag, -1);\n                tgroupLines[1] = trToken.map[1];\n            }\n        }\n        tableLines[1] = Math.max(tgroupLines[1], tableToken.meta.sep.map[1], tableToken.meta.cap ? tableToken.meta.cap.map[1] : -1);\n        token = state.push(\"table_close\", \"table\", -1);\n        state.line = tableLines[1];\n        return true;\n    }\n    md.block.ruler.at(\"table\", table, {\n        alt: [\n            \"paragraph\",\n            \"reference\"\n        ]\n    });\n}; /* vim: set ts=2 sw=2 et: */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/markdown-it-multimd-table/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/markdown-it-multimd-table/lib/dfa.js":
/*!***********************************************************!*\
  !*** ./node_modules/markdown-it-multimd-table/lib/dfa.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\n// constructor\nfunction DFA() {\n    // alphabets are encoded by numbers in 16^N form, presenting its precedence\n    this.__highest_alphabet__ = 0x0;\n    this.__match_alphabets__ = {};\n    // states are union (bitwise OR) of its accepted alphabets\n    this.__initial_state__ = 0x0;\n    this.__accept_states__ = {};\n    // transitions are in the form: {prev_state: {alphabet: next_state}}\n    this.__transitions__ = {};\n    // actions take two parameters: step (line number), prev_state and alphabet\n    this.__actions__ = {};\n}\n// setters\nDFA.prototype.set_highest_alphabet = function(alphabet) {\n    this.__highest_alphabet__ = alphabet;\n};\nDFA.prototype.set_match_alphabets = function(matches) {\n    this.__match_alphabets__ = matches;\n};\nDFA.prototype.set_initial_state = function(initial) {\n    this.__initial_state__ = initial;\n};\nDFA.prototype.set_accept_states = function(accepts) {\n    for(var i = 0; i < accepts.length; i++){\n        this.__accept_states__[accepts[i]] = true;\n    }\n};\nDFA.prototype.set_transitions = function(transitions) {\n    this.__transitions__ = transitions;\n};\nDFA.prototype.set_actions = function(actions) {\n    this.__actions__ = actions;\n};\nDFA.prototype.update_transition = function(state, alphabets) {\n    this.__transitions__[state] = Object.assign(this.__transitions__[state] || Object(), alphabets);\n};\n// methods\nDFA.prototype.execute = function(start, end) {\n    var state, step, alphabet;\n    for(state = this.__initial_state__, step = start; state && step < end; step++){\n        for(alphabet = this.__highest_alphabet__; alphabet > 0x0; alphabet >>= 4){\n            if (state & alphabet && this.__match_alphabets__[alphabet].call(this, step, state, alphabet)) {\n                break;\n            }\n        }\n        this.__actions__(step, state, alphabet);\n        if (alphabet === 0x0) {\n            break;\n        }\n        state = this.__transitions__[state][alphabet] || 0x0;\n    }\n    return !!this.__accept_states__[state];\n};\nmodule.exports = DFA; /* vim: set ts=2 sw=2 et: */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQtbXVsdGltZC10YWJsZS9saWIvZGZhLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsY0FBYztBQUVkLFNBQVNBO0lBQ1AsMkVBQTJFO0lBQzNFLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUc7SUFDNUIsSUFBSSxDQUFDQyxtQkFBbUIsR0FBRyxDQUFDO0lBQzVCLDBEQUEwRDtJQUMxRCxJQUFJLENBQUNDLGlCQUFpQixHQUFHO0lBQ3pCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsQ0FBQztJQUMxQixvRUFBb0U7SUFDcEUsSUFBSSxDQUFDQyxlQUFlLEdBQUcsQ0FBQztJQUN4QiwyRUFBMkU7SUFDM0UsSUFBSSxDQUFDQyxXQUFXLEdBQUcsQ0FBQztBQUN0QjtBQUVBLFVBQVU7QUFFVk4sSUFBSU8sU0FBUyxDQUFDQyxvQkFBb0IsR0FBRyxTQUFVQyxRQUFRO0lBQ3JELElBQUksQ0FBQ1Isb0JBQW9CLEdBQUdRO0FBQzlCO0FBRUFULElBQUlPLFNBQVMsQ0FBQ0csbUJBQW1CLEdBQUcsU0FBVUMsT0FBTztJQUNuRCxJQUFJLENBQUNULG1CQUFtQixHQUFHUztBQUM3QjtBQUVBWCxJQUFJTyxTQUFTLENBQUNLLGlCQUFpQixHQUFHLFNBQVVDLE9BQU87SUFDakQsSUFBSSxDQUFDVixpQkFBaUIsR0FBR1U7QUFDM0I7QUFFQWIsSUFBSU8sU0FBUyxDQUFDTyxpQkFBaUIsR0FBRyxTQUFVQyxPQUFPO0lBQ2pELElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRCxRQUFRRSxNQUFNLEVBQUVELElBQUs7UUFDdkMsSUFBSSxDQUFDWixpQkFBaUIsQ0FBQ1csT0FBTyxDQUFDQyxFQUFFLENBQUMsR0FBRztJQUN2QztBQUNGO0FBRUFoQixJQUFJTyxTQUFTLENBQUNXLGVBQWUsR0FBRyxTQUFVQyxXQUFXO0lBQ25ELElBQUksQ0FBQ2QsZUFBZSxHQUFHYztBQUN6QjtBQUVBbkIsSUFBSU8sU0FBUyxDQUFDYSxXQUFXLEdBQUcsU0FBVUMsT0FBTztJQUMzQyxJQUFJLENBQUNmLFdBQVcsR0FBR2U7QUFDckI7QUFFQXJCLElBQUlPLFNBQVMsQ0FBQ2UsaUJBQWlCLEdBQUcsU0FBVUMsS0FBSyxFQUFFQyxTQUFTO0lBQzFELElBQUksQ0FBQ25CLGVBQWUsQ0FBQ2tCLE1BQU0sR0FBR0UsT0FBT0MsTUFBTSxDQUN6QyxJQUFJLENBQUNyQixlQUFlLENBQUNrQixNQUFNLElBQUlFLFVBQVVEO0FBRTdDO0FBRUEsVUFBVTtBQUVWeEIsSUFBSU8sU0FBUyxDQUFDb0IsT0FBTyxHQUFHLFNBQVVDLEtBQUssRUFBRUMsR0FBRztJQUMxQyxJQUFJTixPQUFPTyxNQUFNckI7SUFDakIsSUFBS2MsUUFBUSxJQUFJLENBQUNwQixpQkFBaUIsRUFBRTJCLE9BQU9GLE9BQU9MLFNBQVNPLE9BQU9ELEtBQUtDLE9BQVE7UUFDOUUsSUFBS3JCLFdBQVcsSUFBSSxDQUFDUixvQkFBb0IsRUFBRVEsV0FBVyxLQUFLQSxhQUFhLEVBQUc7WUFDekUsSUFBSSxRQUFTQSxZQUNOLElBQUksQ0FBQ1AsbUJBQW1CLENBQUNPLFNBQVMsQ0FBQ3NCLElBQUksQ0FBQyxJQUFJLEVBQUVELE1BQU1QLE9BQU9kLFdBQVc7Z0JBQUU7WUFBTztRQUN4RjtRQUVBLElBQUksQ0FBQ0gsV0FBVyxDQUFDd0IsTUFBTVAsT0FBT2Q7UUFFOUIsSUFBSUEsYUFBYSxLQUFLO1lBQUU7UUFBTztRQUMvQmMsUUFBUSxJQUFJLENBQUNsQixlQUFlLENBQUNrQixNQUFNLENBQUNkLFNBQVMsSUFBSTtJQUNuRDtJQUNBLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0wsaUJBQWlCLENBQUNtQixNQUFNO0FBQ3hDO0FBRUFTLE9BQU9DLE9BQU8sR0FBR2pDLEtBRWpCLDBCQUEwQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC1tdWx0aW1kLXRhYmxlL2xpYi9kZmEuanM/YmM4NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIGNvbnN0cnVjdG9yXG5cbmZ1bmN0aW9uIERGQSgpIHtcbiAgLy8gYWxwaGFiZXRzIGFyZSBlbmNvZGVkIGJ5IG51bWJlcnMgaW4gMTZeTiBmb3JtLCBwcmVzZW50aW5nIGl0cyBwcmVjZWRlbmNlXG4gIHRoaXMuX19oaWdoZXN0X2FscGhhYmV0X18gPSAweDA7XG4gIHRoaXMuX19tYXRjaF9hbHBoYWJldHNfXyA9IHt9O1xuICAvLyBzdGF0ZXMgYXJlIHVuaW9uIChiaXR3aXNlIE9SKSBvZiBpdHMgYWNjZXB0ZWQgYWxwaGFiZXRzXG4gIHRoaXMuX19pbml0aWFsX3N0YXRlX18gPSAweDA7XG4gIHRoaXMuX19hY2NlcHRfc3RhdGVzX18gPSB7fTtcbiAgLy8gdHJhbnNpdGlvbnMgYXJlIGluIHRoZSBmb3JtOiB7cHJldl9zdGF0ZToge2FscGhhYmV0OiBuZXh0X3N0YXRlfX1cbiAgdGhpcy5fX3RyYW5zaXRpb25zX18gPSB7fTtcbiAgLy8gYWN0aW9ucyB0YWtlIHR3byBwYXJhbWV0ZXJzOiBzdGVwIChsaW5lIG51bWJlciksIHByZXZfc3RhdGUgYW5kIGFscGhhYmV0XG4gIHRoaXMuX19hY3Rpb25zX18gPSB7fTtcbn1cblxuLy8gc2V0dGVyc1xuXG5ERkEucHJvdG90eXBlLnNldF9oaWdoZXN0X2FscGhhYmV0ID0gZnVuY3Rpb24gKGFscGhhYmV0KSB7XG4gIHRoaXMuX19oaWdoZXN0X2FscGhhYmV0X18gPSBhbHBoYWJldDtcbn07XG5cbkRGQS5wcm90b3R5cGUuc2V0X21hdGNoX2FscGhhYmV0cyA9IGZ1bmN0aW9uIChtYXRjaGVzKSB7XG4gIHRoaXMuX19tYXRjaF9hbHBoYWJldHNfXyA9IG1hdGNoZXM7XG59O1xuXG5ERkEucHJvdG90eXBlLnNldF9pbml0aWFsX3N0YXRlID0gZnVuY3Rpb24gKGluaXRpYWwpIHtcbiAgdGhpcy5fX2luaXRpYWxfc3RhdGVfXyA9IGluaXRpYWw7XG59O1xuXG5ERkEucHJvdG90eXBlLnNldF9hY2NlcHRfc3RhdGVzID0gZnVuY3Rpb24gKGFjY2VwdHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY2NlcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5fX2FjY2VwdF9zdGF0ZXNfX1thY2NlcHRzW2ldXSA9IHRydWU7XG4gIH1cbn07XG5cbkRGQS5wcm90b3R5cGUuc2V0X3RyYW5zaXRpb25zID0gZnVuY3Rpb24gKHRyYW5zaXRpb25zKSB7XG4gIHRoaXMuX190cmFuc2l0aW9uc19fID0gdHJhbnNpdGlvbnM7XG59O1xuXG5ERkEucHJvdG90eXBlLnNldF9hY3Rpb25zID0gZnVuY3Rpb24gKGFjdGlvbnMpIHtcbiAgdGhpcy5fX2FjdGlvbnNfXyA9IGFjdGlvbnM7XG59O1xuXG5ERkEucHJvdG90eXBlLnVwZGF0ZV90cmFuc2l0aW9uID0gZnVuY3Rpb24gKHN0YXRlLCBhbHBoYWJldHMpIHtcbiAgdGhpcy5fX3RyYW5zaXRpb25zX19bc3RhdGVdID0gT2JqZWN0LmFzc2lnbihcbiAgICB0aGlzLl9fdHJhbnNpdGlvbnNfX1tzdGF0ZV0gfHwgT2JqZWN0KCksIGFscGhhYmV0c1xuICApO1xufTtcblxuLy8gbWV0aG9kc1xuXG5ERkEucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICB2YXIgc3RhdGUsIHN0ZXAsIGFscGhhYmV0O1xuICBmb3IgKHN0YXRlID0gdGhpcy5fX2luaXRpYWxfc3RhdGVfXywgc3RlcCA9IHN0YXJ0OyBzdGF0ZSAmJiBzdGVwIDwgZW5kOyBzdGVwKyspIHtcbiAgICBmb3IgKGFscGhhYmV0ID0gdGhpcy5fX2hpZ2hlc3RfYWxwaGFiZXRfXzsgYWxwaGFiZXQgPiAweDA7IGFscGhhYmV0ID4+PSA0KSB7XG4gICAgICBpZiAoKHN0YXRlICYgYWxwaGFiZXQpXG4gICAgICAgICAgJiYgdGhpcy5fX21hdGNoX2FscGhhYmV0c19fW2FscGhhYmV0XS5jYWxsKHRoaXMsIHN0ZXAsIHN0YXRlLCBhbHBoYWJldCkpIHsgYnJlYWs7IH1cbiAgICB9XG5cbiAgICB0aGlzLl9fYWN0aW9uc19fKHN0ZXAsIHN0YXRlLCBhbHBoYWJldCk7XG5cbiAgICBpZiAoYWxwaGFiZXQgPT09IDB4MCkgeyBicmVhazsgfVxuICAgIHN0YXRlID0gdGhpcy5fX3RyYW5zaXRpb25zX19bc3RhdGVdW2FscGhhYmV0XSB8fCAweDA7XG4gIH1cbiAgcmV0dXJuICEhdGhpcy5fX2FjY2VwdF9zdGF0ZXNfX1tzdGF0ZV07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERGQTtcblxuLyogdmltOiBzZXQgdHM9MiBzdz0yIGV0OiAqL1xuIl0sIm5hbWVzIjpbIkRGQSIsIl9faGlnaGVzdF9hbHBoYWJldF9fIiwiX19tYXRjaF9hbHBoYWJldHNfXyIsIl9faW5pdGlhbF9zdGF0ZV9fIiwiX19hY2NlcHRfc3RhdGVzX18iLCJfX3RyYW5zaXRpb25zX18iLCJfX2FjdGlvbnNfXyIsInByb3RvdHlwZSIsInNldF9oaWdoZXN0X2FscGhhYmV0IiwiYWxwaGFiZXQiLCJzZXRfbWF0Y2hfYWxwaGFiZXRzIiwibWF0Y2hlcyIsInNldF9pbml0aWFsX3N0YXRlIiwiaW5pdGlhbCIsInNldF9hY2NlcHRfc3RhdGVzIiwiYWNjZXB0cyIsImkiLCJsZW5ndGgiLCJzZXRfdHJhbnNpdGlvbnMiLCJ0cmFuc2l0aW9ucyIsInNldF9hY3Rpb25zIiwiYWN0aW9ucyIsInVwZGF0ZV90cmFuc2l0aW9uIiwic3RhdGUiLCJhbHBoYWJldHMiLCJPYmplY3QiLCJhc3NpZ24iLCJleGVjdXRlIiwic3RhcnQiLCJlbmQiLCJzdGVwIiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/markdown-it-multimd-table/lib/dfa.js\n");

/***/ })

};
;