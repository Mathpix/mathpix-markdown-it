"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/htmlparser2";
exports.ids = ["vendor-chunks/htmlparser2"];
exports.modules = {

/***/ "(ssr)/./node_modules/htmlparser2/lib/CollectingHandler.js":
/*!***********************************************************!*\
  !*** ./node_modules/htmlparser2/lib/CollectingHandler.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar MultiplexHandler_1 = __importDefault(__webpack_require__(/*! ./MultiplexHandler */ \"(ssr)/./node_modules/htmlparser2/lib/MultiplexHandler.js\"));\nvar CollectingHandler = /** @class */ function(_super) {\n    __extends(CollectingHandler, _super);\n    function CollectingHandler(cbs) {\n        if (cbs === void 0) {\n            cbs = {};\n        }\n        var _this = _super.call(this, function(name) {\n            var _a;\n            var args = [];\n            for(var _i = 1; _i < arguments.length; _i++){\n                args[_i - 1] = arguments[_i];\n            }\n            _this.events.push([\n                name\n            ].concat(args));\n            // @ts-ignore\n            if (_this._cbs[name]) (_a = _this._cbs)[name].apply(_a, args);\n        }) || this;\n        _this._cbs = cbs;\n        _this.events = [];\n        return _this;\n    }\n    CollectingHandler.prototype.onreset = function() {\n        this.events = [];\n        if (this._cbs.onreset) this._cbs.onreset();\n    };\n    CollectingHandler.prototype.restart = function() {\n        var _a;\n        if (this._cbs.onreset) this._cbs.onreset();\n        for(var i = 0; i < this.events.length; i++){\n            var _b = this.events[i], name_1 = _b[0], args = _b.slice(1);\n            if (!this._cbs[name_1]) {\n                continue;\n            }\n            // @ts-ignore\n            (_a = this._cbs)[name_1].apply(_a, args);\n        }\n    };\n    return CollectingHandler;\n}(MultiplexHandler_1.default);\nexports.CollectingHandler = CollectingHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL0NvbGxlY3RpbmdIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsWUFBWSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFNBQVMsSUFBSztJQUN4QyxJQUFJQyxnQkFBZ0IsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDO1FBQzlCRixnQkFBZ0JHLE9BQU9DLGNBQWMsSUFDaEM7WUFBRUMsV0FBVyxFQUFFO1FBQUMsY0FBYUMsU0FBUyxTQUFVTCxDQUFDLEVBQUVDLENBQUM7WUFBSUQsRUFBRUksU0FBUyxHQUFHSDtRQUFHLEtBQzFFLFNBQVVELENBQUMsRUFBRUMsQ0FBQztZQUFJLElBQUssSUFBSUssS0FBS0wsRUFBRyxJQUFJQSxFQUFFTSxjQUFjLENBQUNELElBQUlOLENBQUMsQ0FBQ00sRUFBRSxHQUFHTCxDQUFDLENBQUNLLEVBQUU7UUFBRTtRQUM3RSxPQUFPUCxjQUFjQyxHQUFHQztJQUM1QjtJQUNBLE9BQU8sU0FBVUQsQ0FBQyxFQUFFQyxDQUFDO1FBQ2pCRixjQUFjQyxHQUFHQztRQUNqQixTQUFTTztZQUFPLElBQUksQ0FBQ0MsV0FBVyxHQUFHVDtRQUFHO1FBQ3RDQSxFQUFFVSxTQUFTLEdBQUdULE1BQU0sT0FBT0MsT0FBT1MsTUFBTSxDQUFDVixLQUFNTyxDQUFBQSxHQUFHRSxTQUFTLEdBQUdULEVBQUVTLFNBQVMsRUFBRSxJQUFJRixJQUFHO0lBQ3RGO0FBQ0o7QUFDQSxJQUFJSSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQVgsOENBQTZDO0lBQUVlLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsSUFBSUMscUJBQXFCTixnQkFBZ0JPLG1CQUFPQSxDQUFDLG9GQUFvQjtBQUNyRSxJQUFJQyxvQkFBb0IsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDbkR2QixVQUFVc0IsbUJBQW1CQztJQUM3QixTQUFTRCxrQkFBa0JFLEdBQUc7UUFDMUIsSUFBSUEsUUFBUSxLQUFLLEdBQUc7WUFBRUEsTUFBTSxDQUFDO1FBQUc7UUFDaEMsSUFBSUMsUUFBUUYsT0FBT0csSUFBSSxDQUFDLElBQUksRUFBRSxTQUFVQyxJQUFJO1lBQ3hDLElBQUlDO1lBQ0osSUFBSUMsT0FBTyxFQUFFO1lBQ2IsSUFBSyxJQUFJQyxLQUFLLEdBQUdBLEtBQUtDLFVBQVVDLE1BQU0sRUFBRUYsS0FBTTtnQkFDMUNELElBQUksQ0FBQ0MsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztZQUNoQztZQUNBTCxNQUFNUSxNQUFNLENBQUNDLElBQUksQ0FBQztnQkFBQ1A7YUFBSyxDQUFDUSxNQUFNLENBQUNOO1lBQ2hDLGFBQWE7WUFDYixJQUFJSixNQUFNVyxJQUFJLENBQUNULEtBQUssRUFDaEIsQ0FBQ0MsS0FBS0gsTUFBTVcsSUFBSSxDQUFDLENBQUNULEtBQUssQ0FBQ1UsS0FBSyxDQUFDVCxJQUFJQztRQUMxQyxNQUFNLElBQUk7UUFDVkosTUFBTVcsSUFBSSxHQUFHWjtRQUNiQyxNQUFNUSxNQUFNLEdBQUcsRUFBRTtRQUNqQixPQUFPUjtJQUNYO0lBQ0FILGtCQUFrQlYsU0FBUyxDQUFDMEIsT0FBTyxHQUFHO1FBQ2xDLElBQUksQ0FBQ0wsTUFBTSxHQUFHLEVBQUU7UUFDaEIsSUFBSSxJQUFJLENBQUNHLElBQUksQ0FBQ0UsT0FBTyxFQUNqQixJQUFJLENBQUNGLElBQUksQ0FBQ0UsT0FBTztJQUN6QjtJQUNBaEIsa0JBQWtCVixTQUFTLENBQUMyQixPQUFPLEdBQUc7UUFDbEMsSUFBSVg7UUFDSixJQUFJLElBQUksQ0FBQ1EsSUFBSSxDQUFDRSxPQUFPLEVBQ2pCLElBQUksQ0FBQ0YsSUFBSSxDQUFDRSxPQUFPO1FBQ3JCLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJLElBQUksQ0FBQ1AsTUFBTSxDQUFDRCxNQUFNLEVBQUVRLElBQUs7WUFDekMsSUFBSUMsS0FBSyxJQUFJLENBQUNSLE1BQU0sQ0FBQ08sRUFBRSxFQUFFRSxTQUFTRCxFQUFFLENBQUMsRUFBRSxFQUFFWixPQUFPWSxHQUFHRSxLQUFLLENBQUM7WUFDekQsSUFBSSxDQUFDLElBQUksQ0FBQ1AsSUFBSSxDQUFDTSxPQUFPLEVBQUU7Z0JBQ3BCO1lBQ0o7WUFDQSxhQUFhO1lBQ1pkLENBQUFBLEtBQUssSUFBSSxDQUFDUSxJQUFJLENBQUMsQ0FBQ00sT0FBTyxDQUFDTCxLQUFLLENBQUNULElBQUlDO1FBQ3ZDO0lBQ0o7SUFDQSxPQUFPUDtBQUNYLEVBQUVGLG1CQUFtQndCLE9BQU87QUFDNUIxQix5QkFBeUIsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL0NvbGxlY3RpbmdIYW5kbGVyLmpzPzgwYWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBNdWx0aXBsZXhIYW5kbGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTXVsdGlwbGV4SGFuZGxlclwiKSk7XG52YXIgQ29sbGVjdGluZ0hhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbGxlY3RpbmdIYW5kbGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbGxlY3RpbmdIYW5kbGVyKGNicykge1xuICAgICAgICBpZiAoY2JzID09PSB2b2lkIDApIHsgY2JzID0ge307IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5ldmVudHMucHVzaChbbmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGlmIChfdGhpcy5fY2JzW25hbWVdKVxuICAgICAgICAgICAgICAgIChfYSA9IF90aGlzLl9jYnMpW25hbWVdLmFwcGx5KF9hLCBhcmdzKTtcbiAgICAgICAgfSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2NicyA9IGNicztcbiAgICAgICAgX3RoaXMuZXZlbnRzID0gW107XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29sbGVjdGluZ0hhbmRsZXIucHJvdG90eXBlLm9ucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgICAgIGlmICh0aGlzLl9jYnMub25yZXNldClcbiAgICAgICAgICAgIHRoaXMuX2Nicy5vbnJlc2V0KCk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGUucmVzdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5fY2JzLm9ucmVzZXQpXG4gICAgICAgICAgICB0aGlzLl9jYnMub25yZXNldCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgX2IgPSB0aGlzLmV2ZW50c1tpXSwgbmFtZV8xID0gX2JbMF0sIGFyZ3MgPSBfYi5zbGljZSgxKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2JzW25hbWVfMV0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIChfYSA9IHRoaXMuX2NicylbbmFtZV8xXS5hcHBseShfYSwgYXJncyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb2xsZWN0aW5nSGFuZGxlcjtcbn0oTXVsdGlwbGV4SGFuZGxlcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuQ29sbGVjdGluZ0hhbmRsZXIgPSBDb2xsZWN0aW5nSGFuZGxlcjtcbiJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImNyZWF0ZSIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk11bHRpcGxleEhhbmRsZXJfMSIsInJlcXVpcmUiLCJDb2xsZWN0aW5nSGFuZGxlciIsIl9zdXBlciIsImNicyIsIl90aGlzIiwiY2FsbCIsIm5hbWUiLCJfYSIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImV2ZW50cyIsInB1c2giLCJjb25jYXQiLCJfY2JzIiwiYXBwbHkiLCJvbnJlc2V0IiwicmVzdGFydCIsImkiLCJfYiIsIm5hbWVfMSIsInNsaWNlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/CollectingHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/FeedHandler.js":
/*!*****************************************************!*\
  !*** ./node_modules/htmlparser2/lib/FeedHandler.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar domhandler_1 = __importDefault(__webpack_require__(/*! domhandler */ \"(ssr)/./node_modules/domhandler/lib/index.js\"));\nvar DomUtils = __importStar(__webpack_require__(/*! domutils */ \"(ssr)/./node_modules/domutils/lib/index.js\"));\nvar Parser_1 = __webpack_require__(/*! ./Parser */ \"(ssr)/./node_modules/htmlparser2/lib/Parser.js\");\n//TODO: Consume data as it is coming in\nvar FeedHandler = /** @class */ function(_super) {\n    __extends(FeedHandler, _super);\n    /**\n     *\n     * @param callback\n     * @param options\n     */ function FeedHandler(callback, options) {\n        var _this = this;\n        if (typeof callback === \"object\" && callback !== null) {\n            callback = undefined;\n            options = callback;\n        }\n        _this = _super.call(this, callback, options) || this;\n        return _this;\n    }\n    FeedHandler.prototype.onend = function() {\n        var feed = {};\n        var feedRoot = getOneElement(isValidFeed, this.dom);\n        if (feedRoot) {\n            if (feedRoot.name === \"feed\") {\n                var childs = feedRoot.children;\n                feed.type = \"atom\";\n                addConditionally(feed, \"id\", \"id\", childs);\n                addConditionally(feed, \"title\", \"title\", childs);\n                var href = getAttribute(\"href\", getOneElement(\"link\", childs));\n                if (href) {\n                    feed.link = href;\n                }\n                addConditionally(feed, \"description\", \"subtitle\", childs);\n                var updated = fetch(\"updated\", childs);\n                if (updated) {\n                    feed.updated = new Date(updated);\n                }\n                addConditionally(feed, \"author\", \"email\", childs, true);\n                feed.items = getElements(\"entry\", childs).map(function(item) {\n                    var entry = {};\n                    var children = item.children;\n                    addConditionally(entry, \"id\", \"id\", children);\n                    addConditionally(entry, \"title\", \"title\", children);\n                    var href = getAttribute(\"href\", getOneElement(\"link\", children));\n                    if (href) {\n                        entry.link = href;\n                    }\n                    var description = fetch(\"summary\", children) || fetch(\"content\", children);\n                    if (description) {\n                        entry.description = description;\n                    }\n                    var pubDate = fetch(\"updated\", children);\n                    if (pubDate) {\n                        entry.pubDate = new Date(pubDate);\n                    }\n                    return entry;\n                });\n            } else {\n                var childs = getOneElement(\"channel\", feedRoot.children).children;\n                feed.type = feedRoot.name.substr(0, 3);\n                feed.id = \"\";\n                addConditionally(feed, \"title\", \"title\", childs);\n                addConditionally(feed, \"link\", \"link\", childs);\n                addConditionally(feed, \"description\", \"description\", childs);\n                var updated = fetch(\"lastBuildDate\", childs);\n                if (updated) {\n                    feed.updated = new Date(updated);\n                }\n                addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n                feed.items = getElements(\"item\", feedRoot.children).map(function(item) {\n                    var entry = {};\n                    var children = item.children;\n                    addConditionally(entry, \"id\", \"guid\", children);\n                    addConditionally(entry, \"title\", \"title\", children);\n                    addConditionally(entry, \"link\", \"link\", children);\n                    addConditionally(entry, \"description\", \"description\", children);\n                    var pubDate = fetch(\"pubDate\", children);\n                    if (pubDate) entry.pubDate = new Date(pubDate);\n                    return entry;\n                });\n            }\n        }\n        this.feed = feed;\n        this.handleCallback(feedRoot ? null : Error(\"couldn't find root of feed\"));\n    };\n    return FeedHandler;\n}(domhandler_1.default);\nexports.FeedHandler = FeedHandler;\nfunction getElements(what, where) {\n    return DomUtils.getElementsByTagName(what, where, true);\n}\nfunction getOneElement(what, where) {\n    return DomUtils.getElementsByTagName(what, where, true, 1)[0];\n}\nfunction fetch(what, where, recurse) {\n    if (recurse === void 0) {\n        recurse = false;\n    }\n    return DomUtils.getText(DomUtils.getElementsByTagName(what, where, recurse, 1)).trim();\n}\nfunction getAttribute(name, elem) {\n    if (!elem) {\n        return null;\n    }\n    var attribs = elem.attribs;\n    return attribs[name];\n}\nfunction addConditionally(obj, prop, what, where, recurse) {\n    if (recurse === void 0) {\n        recurse = false;\n    }\n    var tmp = fetch(what, where, recurse);\n    // @ts-ignore\n    if (tmp) obj[prop] = tmp;\n}\nfunction isValidFeed(value) {\n    return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n}\nvar defaultOptions = {\n    xmlMode: true\n};\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this option, you probably want to set `xmlMode` to `true`.\n */ function parseFeed(feed, options) {\n    if (options === void 0) {\n        options = defaultOptions;\n    }\n    var handler = new FeedHandler(options);\n    new Parser_1.Parser(handler, options).end(feed);\n    return handler.feed;\n}\nexports.parseFeed = parseFeed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/FeedHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/MultiplexHandler.js":
/*!**********************************************************!*\
  !*** ./node_modules/htmlparser2/lib/MultiplexHandler.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Calls a specific handler function for all events that are encountered.\n *\n * @param func — The function to multiplex all events to.\n */ var MultiplexHandler = /** @class */ function() {\n    function MultiplexHandler(func) {\n        this._func = func;\n    }\n    /* Format: eventname: number of arguments */ MultiplexHandler.prototype.onattribute = function(name, value) {\n        this._func(\"onattribute\", name, value);\n    };\n    MultiplexHandler.prototype.oncdatastart = function() {\n        this._func(\"oncdatastart\");\n    };\n    MultiplexHandler.prototype.oncdataend = function() {\n        this._func(\"oncdataend\");\n    };\n    MultiplexHandler.prototype.ontext = function(text) {\n        this._func(\"ontext\", text);\n    };\n    MultiplexHandler.prototype.onprocessinginstruction = function(name, value) {\n        this._func(\"onprocessinginstruction\", name, value);\n    };\n    MultiplexHandler.prototype.oncomment = function(comment) {\n        this._func(\"oncomment\", comment);\n    };\n    MultiplexHandler.prototype.oncommentend = function() {\n        this._func(\"oncommentend\");\n    };\n    MultiplexHandler.prototype.onclosetag = function(name) {\n        this._func(\"onclosetag\", name);\n    };\n    MultiplexHandler.prototype.onopentag = function(name, attribs) {\n        this._func(\"onopentag\", name, attribs);\n    };\n    MultiplexHandler.prototype.onopentagname = function(name) {\n        this._func(\"onopentagname\", name);\n    };\n    MultiplexHandler.prototype.onerror = function(error) {\n        this._func(\"onerror\", error);\n    };\n    MultiplexHandler.prototype.onend = function() {\n        this._func(\"onend\");\n    };\n    MultiplexHandler.prototype.onparserinit = function(parser) {\n        this._func(\"onparserinit\", parser);\n    };\n    MultiplexHandler.prototype.onreset = function() {\n        this._func(\"onreset\");\n    };\n    return MultiplexHandler;\n}();\nexports[\"default\"] = MultiplexHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL011bHRpcGxleEhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0Q7Ozs7Q0FJQyxHQUNELElBQUlDLG1CQUFtQixXQUFXLEdBQUk7SUFDbEMsU0FBU0EsaUJBQWlCQyxJQUFJO1FBQzFCLElBQUksQ0FBQ0MsS0FBSyxHQUFHRDtJQUNqQjtJQUNBLDBDQUEwQyxHQUMxQ0QsaUJBQWlCRyxTQUFTLENBQUNDLFdBQVcsR0FBRyxTQUFVQyxJQUFJLEVBQUVOLEtBQUs7UUFDMUQsSUFBSSxDQUFDRyxLQUFLLENBQUMsZUFBZUcsTUFBTU47SUFDcEM7SUFDQUMsaUJBQWlCRyxTQUFTLENBQUNHLFlBQVksR0FBRztRQUN0QyxJQUFJLENBQUNKLEtBQUssQ0FBQztJQUNmO0lBQ0FGLGlCQUFpQkcsU0FBUyxDQUFDSSxVQUFVLEdBQUc7UUFDcEMsSUFBSSxDQUFDTCxLQUFLLENBQUM7SUFDZjtJQUNBRixpQkFBaUJHLFNBQVMsQ0FBQ0ssTUFBTSxHQUFHLFNBQVVDLElBQUk7UUFDOUMsSUFBSSxDQUFDUCxLQUFLLENBQUMsVUFBVU87SUFDekI7SUFDQVQsaUJBQWlCRyxTQUFTLENBQUNPLHVCQUF1QixHQUFHLFNBQVVMLElBQUksRUFBRU4sS0FBSztRQUN0RSxJQUFJLENBQUNHLEtBQUssQ0FBQywyQkFBMkJHLE1BQU1OO0lBQ2hEO0lBQ0FDLGlCQUFpQkcsU0FBUyxDQUFDUSxTQUFTLEdBQUcsU0FBVUMsT0FBTztRQUNwRCxJQUFJLENBQUNWLEtBQUssQ0FBQyxhQUFhVTtJQUM1QjtJQUNBWixpQkFBaUJHLFNBQVMsQ0FBQ1UsWUFBWSxHQUFHO1FBQ3RDLElBQUksQ0FBQ1gsS0FBSyxDQUFDO0lBQ2Y7SUFDQUYsaUJBQWlCRyxTQUFTLENBQUNXLFVBQVUsR0FBRyxTQUFVVCxJQUFJO1FBQ2xELElBQUksQ0FBQ0gsS0FBSyxDQUFDLGNBQWNHO0lBQzdCO0lBQ0FMLGlCQUFpQkcsU0FBUyxDQUFDWSxTQUFTLEdBQUcsU0FBVVYsSUFBSSxFQUFFVyxPQUFPO1FBQzFELElBQUksQ0FBQ2QsS0FBSyxDQUFDLGFBQWFHLE1BQU1XO0lBQ2xDO0lBQ0FoQixpQkFBaUJHLFNBQVMsQ0FBQ2MsYUFBYSxHQUFHLFNBQVVaLElBQUk7UUFDckQsSUFBSSxDQUFDSCxLQUFLLENBQUMsaUJBQWlCRztJQUNoQztJQUNBTCxpQkFBaUJHLFNBQVMsQ0FBQ2UsT0FBTyxHQUFHLFNBQVVDLEtBQUs7UUFDaEQsSUFBSSxDQUFDakIsS0FBSyxDQUFDLFdBQVdpQjtJQUMxQjtJQUNBbkIsaUJBQWlCRyxTQUFTLENBQUNpQixLQUFLLEdBQUc7UUFDL0IsSUFBSSxDQUFDbEIsS0FBSyxDQUFDO0lBQ2Y7SUFDQUYsaUJBQWlCRyxTQUFTLENBQUNrQixZQUFZLEdBQUcsU0FBVUMsTUFBTTtRQUN0RCxJQUFJLENBQUNwQixLQUFLLENBQUMsZ0JBQWdCb0I7SUFDL0I7SUFDQXRCLGlCQUFpQkcsU0FBUyxDQUFDb0IsT0FBTyxHQUFHO1FBQ2pDLElBQUksQ0FBQ3JCLEtBQUssQ0FBQztJQUNmO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBRixrQkFBZSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9saWIvTXVsdGlwbGV4SGFuZGxlci5qcz84OWM5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBDYWxscyBhIHNwZWNpZmljIGhhbmRsZXIgZnVuY3Rpb24gZm9yIGFsbCBldmVudHMgdGhhdCBhcmUgZW5jb3VudGVyZWQuXG4gKlxuICogQHBhcmFtIGZ1bmMg4oCUIFRoZSBmdW5jdGlvbiB0byBtdWx0aXBsZXggYWxsIGV2ZW50cyB0by5cbiAqL1xudmFyIE11bHRpcGxleEhhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTXVsdGlwbGV4SGFuZGxlcihmdW5jKSB7XG4gICAgICAgIHRoaXMuX2Z1bmMgPSBmdW5jO1xuICAgIH1cbiAgICAvKiBGb3JtYXQ6IGV2ZW50bmFtZTogbnVtYmVyIG9mIGFyZ3VtZW50cyAqL1xuICAgIE11bHRpcGxleEhhbmRsZXIucHJvdG90eXBlLm9uYXR0cmlidXRlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2Z1bmMoXCJvbmF0dHJpYnV0ZVwiLCBuYW1lLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBNdWx0aXBsZXhIYW5kbGVyLnByb3RvdHlwZS5vbmNkYXRhc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2Z1bmMoXCJvbmNkYXRhc3RhcnRcIik7XG4gICAgfTtcbiAgICBNdWx0aXBsZXhIYW5kbGVyLnByb3RvdHlwZS5vbmNkYXRhZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9mdW5jKFwib25jZGF0YWVuZFwiKTtcbiAgICB9O1xuICAgIE11bHRpcGxleEhhbmRsZXIucHJvdG90eXBlLm9udGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIHRoaXMuX2Z1bmMoXCJvbnRleHRcIiwgdGV4dCk7XG4gICAgfTtcbiAgICBNdWx0aXBsZXhIYW5kbGVyLnByb3RvdHlwZS5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9mdW5jKFwib25wcm9jZXNzaW5naW5zdHJ1Y3Rpb25cIiwgbmFtZSwgdmFsdWUpO1xuICAgIH07XG4gICAgTXVsdGlwbGV4SGFuZGxlci5wcm90b3R5cGUub25jb21tZW50ID0gZnVuY3Rpb24gKGNvbW1lbnQpIHtcbiAgICAgICAgdGhpcy5fZnVuYyhcIm9uY29tbWVudFwiLCBjb21tZW50KTtcbiAgICB9O1xuICAgIE11bHRpcGxleEhhbmRsZXIucHJvdG90eXBlLm9uY29tbWVudGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZnVuYyhcIm9uY29tbWVudGVuZFwiKTtcbiAgICB9O1xuICAgIE11bHRpcGxleEhhbmRsZXIucHJvdG90eXBlLm9uY2xvc2V0YWcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB0aGlzLl9mdW5jKFwib25jbG9zZXRhZ1wiLCBuYW1lKTtcbiAgICB9O1xuICAgIE11bHRpcGxleEhhbmRsZXIucHJvdG90eXBlLm9ub3BlbnRhZyA9IGZ1bmN0aW9uIChuYW1lLCBhdHRyaWJzKSB7XG4gICAgICAgIHRoaXMuX2Z1bmMoXCJvbm9wZW50YWdcIiwgbmFtZSwgYXR0cmlicyk7XG4gICAgfTtcbiAgICBNdWx0aXBsZXhIYW5kbGVyLnByb3RvdHlwZS5vbm9wZW50YWduYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fZnVuYyhcIm9ub3BlbnRhZ25hbWVcIiwgbmFtZSk7XG4gICAgfTtcbiAgICBNdWx0aXBsZXhIYW5kbGVyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRoaXMuX2Z1bmMoXCJvbmVycm9yXCIsIGVycm9yKTtcbiAgICB9O1xuICAgIE11bHRpcGxleEhhbmRsZXIucHJvdG90eXBlLm9uZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9mdW5jKFwib25lbmRcIik7XG4gICAgfTtcbiAgICBNdWx0aXBsZXhIYW5kbGVyLnByb3RvdHlwZS5vbnBhcnNlcmluaXQgPSBmdW5jdGlvbiAocGFyc2VyKSB7XG4gICAgICAgIHRoaXMuX2Z1bmMoXCJvbnBhcnNlcmluaXRcIiwgcGFyc2VyKTtcbiAgICB9O1xuICAgIE11bHRpcGxleEhhbmRsZXIucHJvdG90eXBlLm9ucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2Z1bmMoXCJvbnJlc2V0XCIpO1xuICAgIH07XG4gICAgcmV0dXJuIE11bHRpcGxleEhhbmRsZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTXVsdGlwbGV4SGFuZGxlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk11bHRpcGxleEhhbmRsZXIiLCJmdW5jIiwiX2Z1bmMiLCJwcm90b3R5cGUiLCJvbmF0dHJpYnV0ZSIsIm5hbWUiLCJvbmNkYXRhc3RhcnQiLCJvbmNkYXRhZW5kIiwib250ZXh0IiwidGV4dCIsIm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uIiwib25jb21tZW50IiwiY29tbWVudCIsIm9uY29tbWVudGVuZCIsIm9uY2xvc2V0YWciLCJvbm9wZW50YWciLCJhdHRyaWJzIiwib25vcGVudGFnbmFtZSIsIm9uZXJyb3IiLCJlcnJvciIsIm9uZW5kIiwib25wYXJzZXJpbml0IiwicGFyc2VyIiwib25yZXNldCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/MultiplexHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/Parser.js":
/*!************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Parser.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar Tokenizer_1 = __importDefault(__webpack_require__(/*! ./Tokenizer */ \"(ssr)/./node_modules/htmlparser2/lib/Tokenizer.js\"));\nvar events_1 = __webpack_require__(/*! events */ \"events\");\nvar formTags = new Set([\n    \"input\",\n    \"option\",\n    \"optgroup\",\n    \"select\",\n    \"button\",\n    \"datalist\",\n    \"textarea\"\n]);\nvar pTag = new Set([\n    \"p\"\n]);\nvar openImpliesClose = {\n    tr: new Set([\n        \"tr\",\n        \"th\",\n        \"td\"\n    ]),\n    th: new Set([\n        \"th\"\n    ]),\n    td: new Set([\n        \"thead\",\n        \"th\",\n        \"td\"\n    ]),\n    body: new Set([\n        \"head\",\n        \"link\",\n        \"script\"\n    ]),\n    li: new Set([\n        \"li\"\n    ]),\n    p: pTag,\n    h1: pTag,\n    h2: pTag,\n    h3: pTag,\n    h4: pTag,\n    h5: pTag,\n    h6: pTag,\n    select: formTags,\n    input: formTags,\n    output: formTags,\n    button: formTags,\n    datalist: formTags,\n    textarea: formTags,\n    option: new Set([\n        \"option\"\n    ]),\n    optgroup: new Set([\n        \"optgroup\",\n        \"option\"\n    ]),\n    dd: new Set([\n        \"dt\",\n        \"dd\"\n    ]),\n    dt: new Set([\n        \"dt\",\n        \"dd\"\n    ]),\n    address: pTag,\n    article: pTag,\n    aside: pTag,\n    blockquote: pTag,\n    details: pTag,\n    div: pTag,\n    dl: pTag,\n    fieldset: pTag,\n    figcaption: pTag,\n    figure: pTag,\n    footer: pTag,\n    form: pTag,\n    header: pTag,\n    hr: pTag,\n    main: pTag,\n    nav: pTag,\n    ol: pTag,\n    pre: pTag,\n    section: pTag,\n    table: pTag,\n    ul: pTag,\n    rt: new Set([\n        \"rt\",\n        \"rp\"\n    ]),\n    rp: new Set([\n        \"rt\",\n        \"rp\"\n    ]),\n    tbody: new Set([\n        \"thead\",\n        \"tbody\"\n    ]),\n    tfoot: new Set([\n        \"thead\",\n        \"tbody\"\n    ])\n};\nvar voidElements = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n]);\nvar foreignContextElements = new Set([\n    \"math\",\n    \"svg\"\n]);\nvar htmlIntegrationElements = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignObject\",\n    \"desc\",\n    \"title\"\n]);\nvar reNameEnd = /\\s|\\//;\nvar Parser = /** @class */ function(_super) {\n    __extends(Parser, _super);\n    function Parser(cbs, options) {\n        var _this = _super.call(this) || this;\n        _this._tagname = \"\";\n        _this._attribname = \"\";\n        _this._attribvalue = \"\";\n        _this._attribs = null;\n        _this._stack = [];\n        _this._foreignContext = [];\n        _this.startIndex = 0;\n        _this.endIndex = null;\n        // Aliases for backwards compatibility\n        _this.parseChunk = Parser.prototype.write;\n        _this.done = Parser.prototype.end;\n        _this._options = options || {};\n        _this._cbs = cbs || {};\n        _this._tagname = \"\";\n        _this._attribname = \"\";\n        _this._attribvalue = \"\";\n        _this._attribs = null;\n        _this._stack = [];\n        _this._foreignContext = [];\n        _this.startIndex = 0;\n        _this.endIndex = null;\n        _this._lowerCaseTagNames = \"lowerCaseTags\" in _this._options ? !!_this._options.lowerCaseTags : !_this._options.xmlMode;\n        _this._lowerCaseAttributeNames = \"lowerCaseAttributeNames\" in _this._options ? !!_this._options.lowerCaseAttributeNames : !_this._options.xmlMode;\n        _this._tokenizer = new (_this._options.Tokenizer || Tokenizer_1.default)(_this._options, _this);\n        if (_this._cbs.onparserinit) _this._cbs.onparserinit(_this);\n        return _this;\n    }\n    Parser.prototype._updatePosition = function(initialOffset) {\n        if (this.endIndex === null) {\n            if (this._tokenizer._sectionStart <= initialOffset) {\n                this.startIndex = 0;\n            } else {\n                this.startIndex = this._tokenizer._sectionStart - initialOffset;\n            }\n        } else this.startIndex = this.endIndex + 1;\n        this.endIndex = this._tokenizer.getAbsoluteIndex();\n    };\n    //Tokenizer event handlers\n    Parser.prototype.ontext = function(data) {\n        this._updatePosition(1);\n        // @ts-ignore\n        this.endIndex--;\n        if (this._cbs.ontext) this._cbs.ontext(data);\n    };\n    Parser.prototype.onopentagname = function(name) {\n        if (this._lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        this._tagname = name;\n        if (!this._options.xmlMode && Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {\n            for(var el = void 0; // @ts-ignore\n            openImpliesClose[name].has(el = this._stack[this._stack.length - 1]); this.onclosetag(el));\n        }\n        if (this._options.xmlMode || !voidElements.has(name)) {\n            this._stack.push(name);\n            if (foreignContextElements.has(name)) {\n                this._foreignContext.push(true);\n            } else if (htmlIntegrationElements.has(name)) {\n                this._foreignContext.push(false);\n            }\n        }\n        if (this._cbs.onopentagname) this._cbs.onopentagname(name);\n        if (this._cbs.onopentag) this._attribs = {};\n    };\n    Parser.prototype.onopentagend = function() {\n        this._updatePosition(1);\n        if (this._attribs) {\n            if (this._cbs.onopentag) {\n                this._cbs.onopentag(this._tagname, this._attribs);\n            }\n            this._attribs = null;\n        }\n        if (!this._options.xmlMode && this._cbs.onclosetag && voidElements.has(this._tagname)) {\n            this._cbs.onclosetag(this._tagname);\n        }\n        this._tagname = \"\";\n    };\n    Parser.prototype.onclosetag = function(name) {\n        this._updatePosition(1);\n        if (this._lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {\n            this._foreignContext.pop();\n        }\n        if (this._stack.length && (this._options.xmlMode || !voidElements.has(name))) {\n            var pos = this._stack.lastIndexOf(name);\n            if (pos !== -1) {\n                if (this._cbs.onclosetag) {\n                    pos = this._stack.length - pos;\n                    // @ts-ignore\n                    while(pos--)this._cbs.onclosetag(this._stack.pop());\n                } else this._stack.length = pos;\n            } else if (name === \"p\" && !this._options.xmlMode) {\n                this.onopentagname(name);\n                this._closeCurrentTag();\n            }\n        } else if (!this._options.xmlMode && (name === \"br\" || name === \"p\")) {\n            this.onopentagname(name);\n            this._closeCurrentTag();\n        }\n    };\n    Parser.prototype.onselfclosingtag = function() {\n        if (this._options.xmlMode || this._options.recognizeSelfClosing || this._foreignContext[this._foreignContext.length - 1]) {\n            this._closeCurrentTag();\n        } else {\n            this.onopentagend();\n        }\n    };\n    Parser.prototype._closeCurrentTag = function() {\n        var name = this._tagname;\n        this.onopentagend();\n        //self-closing tags will be on the top of the stack\n        //(cheaper check than in onclosetag)\n        if (this._stack[this._stack.length - 1] === name) {\n            if (this._cbs.onclosetag) {\n                this._cbs.onclosetag(name);\n            }\n            this._stack.pop();\n        }\n    };\n    Parser.prototype.onattribname = function(name) {\n        if (this._lowerCaseAttributeNames) {\n            name = name.toLowerCase();\n        }\n        this._attribname = name;\n    };\n    Parser.prototype.onattribdata = function(value) {\n        this._attribvalue += value;\n    };\n    Parser.prototype.onattribend = function() {\n        if (this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);\n        if (this._attribs && !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)) {\n            this._attribs[this._attribname] = this._attribvalue;\n        }\n        this._attribname = \"\";\n        this._attribvalue = \"\";\n    };\n    Parser.prototype._getInstructionName = function(value) {\n        var idx = value.search(reNameEnd);\n        var name = idx < 0 ? value : value.substr(0, idx);\n        if (this._lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        return name;\n    };\n    Parser.prototype.ondeclaration = function(value) {\n        if (this._cbs.onprocessinginstruction) {\n            var name_1 = this._getInstructionName(value);\n            this._cbs.onprocessinginstruction(\"!\" + name_1, \"!\" + value);\n        }\n    };\n    Parser.prototype.onprocessinginstruction = function(value) {\n        if (this._cbs.onprocessinginstruction) {\n            var name_2 = this._getInstructionName(value);\n            this._cbs.onprocessinginstruction(\"?\" + name_2, \"?\" + value);\n        }\n    };\n    Parser.prototype.oncomment = function(value) {\n        this._updatePosition(4);\n        if (this._cbs.oncomment) this._cbs.oncomment(value);\n        if (this._cbs.oncommentend) this._cbs.oncommentend();\n    };\n    Parser.prototype.oncdata = function(value) {\n        this._updatePosition(1);\n        if (this._options.xmlMode || this._options.recognizeCDATA) {\n            if (this._cbs.oncdatastart) this._cbs.oncdatastart();\n            if (this._cbs.ontext) this._cbs.ontext(value);\n            if (this._cbs.oncdataend) this._cbs.oncdataend();\n        } else {\n            this.oncomment(\"[CDATA[\" + value + \"]]\");\n        }\n    };\n    Parser.prototype.onerror = function(err) {\n        if (this._cbs.onerror) this._cbs.onerror(err);\n    };\n    Parser.prototype.onend = function() {\n        if (this._cbs.onclosetag) {\n            for(var i = this._stack.length; i > 0; this._cbs.onclosetag(this._stack[--i]));\n        }\n        if (this._cbs.onend) this._cbs.onend();\n    };\n    //Resets the parser to a blank state, ready to parse a new HTML document\n    Parser.prototype.reset = function() {\n        if (this._cbs.onreset) this._cbs.onreset();\n        this._tokenizer.reset();\n        this._tagname = \"\";\n        this._attribname = \"\";\n        this._attribs = null;\n        this._stack = [];\n        if (this._cbs.onparserinit) this._cbs.onparserinit(this);\n    };\n    //Parses a complete HTML document and pushes it to the handler\n    Parser.prototype.parseComplete = function(data) {\n        this.reset();\n        this.end(data);\n    };\n    Parser.prototype.write = function(chunk) {\n        this._tokenizer.write(chunk);\n    };\n    Parser.prototype.end = function(chunk) {\n        this._tokenizer.end(chunk);\n    };\n    Parser.prototype.pause = function() {\n        this._tokenizer.pause();\n    };\n    Parser.prototype.resume = function() {\n        this._tokenizer.resume();\n    };\n    return Parser;\n}(events_1.EventEmitter);\nexports.Parser = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/Parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/Tokenizer.js":
/*!***************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Tokenizer.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar decode_codepoint_1 = __importDefault(__webpack_require__(/*! entities/lib/decode_codepoint */ \"(ssr)/./node_modules/entities/lib/decode_codepoint.js\"));\nvar entities_json_1 = __importDefault(__webpack_require__(/*! entities/lib/maps/entities.json */ \"(ssr)/./node_modules/entities/lib/maps/entities.json\"));\nvar legacy_json_1 = __importDefault(__webpack_require__(/*! entities/lib/maps/legacy.json */ \"(ssr)/./node_modules/entities/lib/maps/legacy.json\"));\nvar xml_json_1 = __importDefault(__webpack_require__(/*! entities/lib/maps/xml.json */ \"(ssr)/./node_modules/entities/lib/maps/xml.json\"));\nfunction whitespace(c) {\n    return c === \" \" || c === \"\\n\" || c === \"\t\" || c === \"\\f\" || c === \"\\r\";\n}\nfunction ifElseState(upper, SUCCESS, FAILURE) {\n    var lower = upper.toLowerCase();\n    if (upper === lower) {\n        return function(t, c) {\n            if (c === lower) {\n                t._state = SUCCESS;\n            } else {\n                t._state = FAILURE;\n                t._index--;\n            }\n        };\n    } else {\n        return function(t, c) {\n            if (c === lower || c === upper) {\n                t._state = SUCCESS;\n            } else {\n                t._state = FAILURE;\n                t._index--;\n            }\n        };\n    }\n}\nfunction consumeSpecialNameChar(upper, NEXT_STATE) {\n    var lower = upper.toLowerCase();\n    return function(t, c) {\n        if (c === lower || c === upper) {\n            t._state = NEXT_STATE;\n        } else {\n            t._state = 3 /* InTagName */ ;\n            t._index--; //consume the token again\n        }\n    };\n}\nvar stateBeforeCdata1 = ifElseState(\"C\", 23 /* BeforeCdata2 */ , 16 /* InDeclaration */ );\nvar stateBeforeCdata2 = ifElseState(\"D\", 24 /* BeforeCdata3 */ , 16 /* InDeclaration */ );\nvar stateBeforeCdata3 = ifElseState(\"A\", 25 /* BeforeCdata4 */ , 16 /* InDeclaration */ );\nvar stateBeforeCdata4 = ifElseState(\"T\", 26 /* BeforeCdata5 */ , 16 /* InDeclaration */ );\nvar stateBeforeCdata5 = ifElseState(\"A\", 27 /* BeforeCdata6 */ , 16 /* InDeclaration */ );\nvar stateBeforeScript1 = consumeSpecialNameChar(\"R\", 34 /* BeforeScript2 */ );\nvar stateBeforeScript2 = consumeSpecialNameChar(\"I\", 35 /* BeforeScript3 */ );\nvar stateBeforeScript3 = consumeSpecialNameChar(\"P\", 36 /* BeforeScript4 */ );\nvar stateBeforeScript4 = consumeSpecialNameChar(\"T\", 37 /* BeforeScript5 */ );\nvar stateAfterScript1 = ifElseState(\"R\", 39 /* AfterScript2 */ , 1 /* Text */ );\nvar stateAfterScript2 = ifElseState(\"I\", 40 /* AfterScript3 */ , 1 /* Text */ );\nvar stateAfterScript3 = ifElseState(\"P\", 41 /* AfterScript4 */ , 1 /* Text */ );\nvar stateAfterScript4 = ifElseState(\"T\", 42 /* AfterScript5 */ , 1 /* Text */ );\nvar stateBeforeStyle1 = consumeSpecialNameChar(\"Y\", 44 /* BeforeStyle2 */ );\nvar stateBeforeStyle2 = consumeSpecialNameChar(\"L\", 45 /* BeforeStyle3 */ );\nvar stateBeforeStyle3 = consumeSpecialNameChar(\"E\", 46 /* BeforeStyle4 */ );\nvar stateAfterStyle1 = ifElseState(\"Y\", 48 /* AfterStyle2 */ , 1 /* Text */ );\nvar stateAfterStyle2 = ifElseState(\"L\", 49 /* AfterStyle3 */ , 1 /* Text */ );\nvar stateAfterStyle3 = ifElseState(\"E\", 50 /* AfterStyle4 */ , 1 /* Text */ );\nvar stateBeforeEntity = ifElseState(\"#\", 52 /* BeforeNumericEntity */ , 53 /* InNamedEntity */ );\nvar stateBeforeNumericEntity = ifElseState(\"X\", 55 /* InHexEntity */ , 54 /* InNumericEntity */ );\nvar Tokenizer = /** @class */ function() {\n    function Tokenizer(options, cbs) {\n        /** The current state the tokenizer is in. */ this._state = 1 /* Text */ ;\n        /** The read buffer. */ this._buffer = \"\";\n        /** The beginning of the section that is currently being read. */ this._sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */ this._index = 0;\n        /**\n         * Data that has already been processed will be removed from the buffer occasionally.\n         * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.\n         */ this._bufferOffset = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */ this._baseState = 1 /* Text */ ;\n        /** For special parsing behavior inside of script and style tags. */ this._special = 1 /* None */ ;\n        /** Indicates whether the tokenizer has been paused. */ this._running = true;\n        /** Indicates whether the tokenizer has finished running / `.end` has been called. */ this._ended = false;\n        this._cbs = cbs;\n        this._xmlMode = !!(options && options.xmlMode);\n        this._decodeEntities = !!(options && options.decodeEntities);\n    }\n    Tokenizer.prototype.reset = function() {\n        this._state = 1 /* Text */ ;\n        this._buffer = \"\";\n        this._sectionStart = 0;\n        this._index = 0;\n        this._bufferOffset = 0;\n        this._baseState = 1 /* Text */ ;\n        this._special = 1 /* None */ ;\n        this._running = true;\n        this._ended = false;\n    };\n    Tokenizer.prototype._stateText = function(c) {\n        if (c === \"<\") {\n            if (this._index > this._sectionStart) {\n                this._cbs.ontext(this._getSection());\n            }\n            this._state = 2 /* BeforeTagName */ ;\n            this._sectionStart = this._index;\n        } else if (this._decodeEntities && this._special === 1 /* None */  && c === \"&\") {\n            if (this._index > this._sectionStart) {\n                this._cbs.ontext(this._getSection());\n            }\n            this._baseState = 1 /* Text */ ;\n            this._state = 51 /* BeforeEntity */ ;\n            this._sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype._stateBeforeTagName = function(c) {\n        if (c === \"/\") {\n            this._state = 5 /* BeforeClosingTagName */ ;\n        } else if (c === \"<\") {\n            this._cbs.ontext(this._getSection());\n            this._sectionStart = this._index;\n        } else if (c === \">\" || this._special !== 1 /* None */  || whitespace(c)) {\n            this._state = 1 /* Text */ ;\n        } else if (c === \"!\") {\n            this._state = 15 /* BeforeDeclaration */ ;\n            this._sectionStart = this._index + 1;\n        } else if (c === \"?\") {\n            this._state = 17 /* InProcessingInstruction */ ;\n            this._sectionStart = this._index + 1;\n        } else {\n            this._state = !this._xmlMode && (c === \"s\" || c === \"S\") ? 31 /* BeforeSpecial */  : 3 /* InTagName */ ;\n            this._sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype._stateInTagName = function(c) {\n        if (c === \"/\" || c === \">\" || whitespace(c)) {\n            this._emitToken(\"onopentagname\");\n            this._state = 8 /* BeforeAttributeName */ ;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype._stateBeforeClosingTagName = function(c) {\n        if (whitespace(c)) {\n        // ignore\n        } else if (c === \">\") {\n            this._state = 1 /* Text */ ;\n        } else if (this._special !== 1 /* None */ ) {\n            if (c === \"s\" || c === \"S\") {\n                this._state = 32 /* BeforeSpecialEnd */ ;\n            } else {\n                this._state = 1 /* Text */ ;\n                this._index--;\n            }\n        } else {\n            this._state = 6 /* InClosingTagName */ ;\n            this._sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype._stateInClosingTagName = function(c) {\n        if (c === \">\" || whitespace(c)) {\n            this._emitToken(\"onclosetag\");\n            this._state = 7 /* AfterClosingTagName */ ;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype._stateAfterClosingTagName = function(c) {\n        //skip everything until \">\"\n        if (c === \">\") {\n            this._state = 1 /* Text */ ;\n            this._sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype._stateBeforeAttributeName = function(c) {\n        if (c === \">\") {\n            this._cbs.onopentagend();\n            this._state = 1 /* Text */ ;\n            this._sectionStart = this._index + 1;\n        } else if (c === \"/\") {\n            this._state = 4 /* InSelfClosingTag */ ;\n        } else if (!whitespace(c)) {\n            this._state = 9 /* InAttributeName */ ;\n            this._sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype._stateInSelfClosingTag = function(c) {\n        if (c === \">\") {\n            this._cbs.onselfclosingtag();\n            this._state = 1 /* Text */ ;\n            this._sectionStart = this._index + 1;\n        } else if (!whitespace(c)) {\n            this._state = 8 /* BeforeAttributeName */ ;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype._stateInAttributeName = function(c) {\n        if (c === \"=\" || c === \"/\" || c === \">\" || whitespace(c)) {\n            this._cbs.onattribname(this._getSection());\n            this._sectionStart = -1;\n            this._state = 10 /* AfterAttributeName */ ;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype._stateAfterAttributeName = function(c) {\n        if (c === \"=\") {\n            this._state = 11 /* BeforeAttributeValue */ ;\n        } else if (c === \"/\" || c === \">\") {\n            this._cbs.onattribend();\n            this._state = 8 /* BeforeAttributeName */ ;\n            this._index--;\n        } else if (!whitespace(c)) {\n            this._cbs.onattribend();\n            this._state = 9 /* InAttributeName */ ;\n            this._sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype._stateBeforeAttributeValue = function(c) {\n        if (c === '\"') {\n            this._state = 12 /* InAttributeValueDq */ ;\n            this._sectionStart = this._index + 1;\n        } else if (c === \"'\") {\n            this._state = 13 /* InAttributeValueSq */ ;\n            this._sectionStart = this._index + 1;\n        } else if (!whitespace(c)) {\n            this._state = 14 /* InAttributeValueNq */ ;\n            this._sectionStart = this._index;\n            this._index--; //reconsume token\n        }\n    };\n    Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c) {\n        if (c === '\"') {\n            this._emitToken(\"onattribdata\");\n            this._cbs.onattribend();\n            this._state = 8 /* BeforeAttributeName */ ;\n        } else if (this._decodeEntities && c === \"&\") {\n            this._emitToken(\"onattribdata\");\n            this._baseState = this._state;\n            this._state = 51 /* BeforeEntity */ ;\n            this._sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c) {\n        if (c === \"'\") {\n            this._emitToken(\"onattribdata\");\n            this._cbs.onattribend();\n            this._state = 8 /* BeforeAttributeName */ ;\n        } else if (this._decodeEntities && c === \"&\") {\n            this._emitToken(\"onattribdata\");\n            this._baseState = this._state;\n            this._state = 51 /* BeforeEntity */ ;\n            this._sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c) {\n        if (whitespace(c) || c === \">\") {\n            this._emitToken(\"onattribdata\");\n            this._cbs.onattribend();\n            this._state = 8 /* BeforeAttributeName */ ;\n            this._index--;\n        } else if (this._decodeEntities && c === \"&\") {\n            this._emitToken(\"onattribdata\");\n            this._baseState = this._state;\n            this._state = 51 /* BeforeEntity */ ;\n            this._sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype._stateBeforeDeclaration = function(c) {\n        this._state = c === \"[\" ? 22 /* BeforeCdata1 */  : c === \"-\" ? 18 /* BeforeComment */  : 16 /* InDeclaration */ ;\n    };\n    Tokenizer.prototype._stateInDeclaration = function(c) {\n        if (c === \">\") {\n            this._cbs.ondeclaration(this._getSection());\n            this._state = 1 /* Text */ ;\n            this._sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype._stateInProcessingInstruction = function(c) {\n        if (c === \">\") {\n            this._cbs.onprocessinginstruction(this._getSection());\n            this._state = 1 /* Text */ ;\n            this._sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype._stateBeforeComment = function(c) {\n        if (c === \"-\") {\n            this._state = 19 /* InComment */ ;\n            this._sectionStart = this._index + 1;\n        } else {\n            this._state = 16 /* InDeclaration */ ;\n        }\n    };\n    Tokenizer.prototype._stateInComment = function(c) {\n        if (c === \"-\") this._state = 20 /* AfterComment1 */ ;\n    };\n    Tokenizer.prototype._stateAfterComment1 = function(c) {\n        if (c === \"-\") {\n            this._state = 21 /* AfterComment2 */ ;\n        } else {\n            this._state = 19 /* InComment */ ;\n        }\n    };\n    Tokenizer.prototype._stateAfterComment2 = function(c) {\n        if (c === \">\") {\n            //remove 2 trailing chars\n            this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));\n            this._state = 1 /* Text */ ;\n            this._sectionStart = this._index + 1;\n        } else if (c !== \"-\") {\n            this._state = 19 /* InComment */ ;\n        }\n    // else: stay in AFTER_COMMENT_2 (`--->`)\n    };\n    Tokenizer.prototype._stateBeforeCdata6 = function(c) {\n        if (c === \"[\") {\n            this._state = 28 /* InCdata */ ;\n            this._sectionStart = this._index + 1;\n        } else {\n            this._state = 16 /* InDeclaration */ ;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype._stateInCdata = function(c) {\n        if (c === \"]\") this._state = 29 /* AfterCdata1 */ ;\n    };\n    Tokenizer.prototype._stateAfterCdata1 = function(c) {\n        if (c === \"]\") this._state = 30 /* AfterCdata2 */ ;\n        else this._state = 28 /* InCdata */ ;\n    };\n    Tokenizer.prototype._stateAfterCdata2 = function(c) {\n        if (c === \">\") {\n            //remove 2 trailing chars\n            this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));\n            this._state = 1 /* Text */ ;\n            this._sectionStart = this._index + 1;\n        } else if (c !== \"]\") {\n            this._state = 28 /* InCdata */ ;\n        }\n    //else: stay in AFTER_CDATA_2 (`]]]>`)\n    };\n    Tokenizer.prototype._stateBeforeSpecial = function(c) {\n        if (c === \"c\" || c === \"C\") {\n            this._state = 33 /* BeforeScript1 */ ;\n        } else if (c === \"t\" || c === \"T\") {\n            this._state = 43 /* BeforeStyle1 */ ;\n        } else {\n            this._state = 3 /* InTagName */ ;\n            this._index--; //consume the token again\n        }\n    };\n    Tokenizer.prototype._stateBeforeSpecialEnd = function(c) {\n        if (this._special === 2 /* Script */  && (c === \"c\" || c === \"C\")) {\n            this._state = 38 /* AfterScript1 */ ;\n        } else if (this._special === 3 /* Style */  && (c === \"t\" || c === \"T\")) {\n            this._state = 47 /* AfterStyle1 */ ;\n        } else this._state = 1 /* Text */ ;\n    };\n    Tokenizer.prototype._stateBeforeScript5 = function(c) {\n        if (c === \"/\" || c === \">\" || whitespace(c)) {\n            this._special = 2 /* Script */ ;\n        }\n        this._state = 3 /* InTagName */ ;\n        this._index--; //consume the token again\n    };\n    Tokenizer.prototype._stateAfterScript5 = function(c) {\n        if (c === \">\" || whitespace(c)) {\n            this._special = 1 /* None */ ;\n            this._state = 6 /* InClosingTagName */ ;\n            this._sectionStart = this._index - 6;\n            this._index--; //reconsume the token\n        } else this._state = 1 /* Text */ ;\n    };\n    Tokenizer.prototype._stateBeforeStyle4 = function(c) {\n        if (c === \"/\" || c === \">\" || whitespace(c)) {\n            this._special = 3 /* Style */ ;\n        }\n        this._state = 3 /* InTagName */ ;\n        this._index--; //consume the token again\n    };\n    Tokenizer.prototype._stateAfterStyle4 = function(c) {\n        if (c === \">\" || whitespace(c)) {\n            this._special = 1 /* None */ ;\n            this._state = 6 /* InClosingTagName */ ;\n            this._sectionStart = this._index - 5;\n            this._index--; //reconsume the token\n        } else this._state = 1 /* Text */ ;\n    };\n    //for entities terminated with a semicolon\n    Tokenizer.prototype._parseNamedEntityStrict = function() {\n        //offset = 1\n        if (this._sectionStart + 1 < this._index) {\n            var entity = this._buffer.substring(this._sectionStart + 1, this._index), map = this._xmlMode ? xml_json_1.default : entities_json_1.default;\n            if (Object.prototype.hasOwnProperty.call(map, entity)) {\n                // @ts-ignore\n                this._emitPartial(map[entity]);\n                this._sectionStart = this._index + 1;\n            }\n        }\n    };\n    //parses legacy entities (without trailing semicolon)\n    Tokenizer.prototype._parseLegacyEntity = function() {\n        var start = this._sectionStart + 1;\n        var limit = this._index - start;\n        if (limit > 6) limit = 6; // The max length of legacy entities is 6\n        while(limit >= 2){\n            // The min length of legacy entities is 2\n            var entity = this._buffer.substr(start, limit);\n            if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {\n                // @ts-ignore\n                this._emitPartial(legacy_json_1.default[entity]);\n                this._sectionStart += limit + 1;\n                return;\n            } else {\n                limit--;\n            }\n        }\n    };\n    Tokenizer.prototype._stateInNamedEntity = function(c) {\n        if (c === \";\") {\n            this._parseNamedEntityStrict();\n            if (this._sectionStart + 1 < this._index && !this._xmlMode) {\n                this._parseLegacyEntity();\n            }\n            this._state = this._baseState;\n        } else if ((c < \"a\" || c > \"z\") && (c < \"A\" || c > \"Z\") && (c < \"0\" || c > \"9\")) {\n            if (this._xmlMode || this._sectionStart + 1 === this._index) {\n            // ignore\n            } else if (this._baseState !== 1 /* Text */ ) {\n                if (c !== \"=\") {\n                    this._parseNamedEntityStrict();\n                }\n            } else {\n                this._parseLegacyEntity();\n            }\n            this._state = this._baseState;\n            this._index--;\n        }\n    };\n    Tokenizer.prototype._decodeNumericEntity = function(offset, base) {\n        var sectionStart = this._sectionStart + offset;\n        if (sectionStart !== this._index) {\n            //parse entity\n            var entity = this._buffer.substring(sectionStart, this._index);\n            var parsed = parseInt(entity, base);\n            this._emitPartial(decode_codepoint_1.default(parsed));\n            this._sectionStart = this._index;\n        } else {\n            this._sectionStart--;\n        }\n        this._state = this._baseState;\n    };\n    Tokenizer.prototype._stateInNumericEntity = function(c) {\n        if (c === \";\") {\n            this._decodeNumericEntity(2, 10);\n            this._sectionStart++;\n        } else if (c < \"0\" || c > \"9\") {\n            if (!this._xmlMode) {\n                this._decodeNumericEntity(2, 10);\n            } else {\n                this._state = this._baseState;\n            }\n            this._index--;\n        }\n    };\n    Tokenizer.prototype._stateInHexEntity = function(c) {\n        if (c === \";\") {\n            this._decodeNumericEntity(3, 16);\n            this._sectionStart++;\n        } else if ((c < \"a\" || c > \"f\") && (c < \"A\" || c > \"F\") && (c < \"0\" || c > \"9\")) {\n            if (!this._xmlMode) {\n                this._decodeNumericEntity(3, 16);\n            } else {\n                this._state = this._baseState;\n            }\n            this._index--;\n        }\n    };\n    Tokenizer.prototype._cleanup = function() {\n        if (this._sectionStart < 0) {\n            this._buffer = \"\";\n            this._bufferOffset += this._index;\n            this._index = 0;\n        } else if (this._running) {\n            if (this._state === 1 /* Text */ ) {\n                if (this._sectionStart !== this._index) {\n                    this._cbs.ontext(this._buffer.substr(this._sectionStart));\n                }\n                this._buffer = \"\";\n                this._bufferOffset += this._index;\n                this._index = 0;\n            } else if (this._sectionStart === this._index) {\n                //the section just started\n                this._buffer = \"\";\n                this._bufferOffset += this._index;\n                this._index = 0;\n            } else {\n                //remove everything unnecessary\n                this._buffer = this._buffer.substr(this._sectionStart);\n                this._index -= this._sectionStart;\n                this._bufferOffset += this._sectionStart;\n            }\n            this._sectionStart = 0;\n        }\n    };\n    //TODO make events conditional\n    Tokenizer.prototype.write = function(chunk) {\n        if (this._ended) this._cbs.onerror(Error(\".write() after done!\"));\n        this._buffer += chunk;\n        this._parse();\n    };\n    // Iterates through the buffer, calling the function corresponding to the current state.\n    // States that are more likely to be hit are higher up, as a performance improvement.\n    Tokenizer.prototype._parse = function() {\n        while(this._index < this._buffer.length && this._running){\n            var c = this._buffer.charAt(this._index);\n            if (this._state === 1 /* Text */ ) {\n                this._stateText(c);\n            } else if (this._state === 12 /* InAttributeValueDq */ ) {\n                this._stateInAttributeValueDoubleQuotes(c);\n            } else if (this._state === 9 /* InAttributeName */ ) {\n                this._stateInAttributeName(c);\n            } else if (this._state === 19 /* InComment */ ) {\n                this._stateInComment(c);\n            } else if (this._state === 8 /* BeforeAttributeName */ ) {\n                this._stateBeforeAttributeName(c);\n            } else if (this._state === 3 /* InTagName */ ) {\n                this._stateInTagName(c);\n            } else if (this._state === 6 /* InClosingTagName */ ) {\n                this._stateInClosingTagName(c);\n            } else if (this._state === 2 /* BeforeTagName */ ) {\n                this._stateBeforeTagName(c);\n            } else if (this._state === 10 /* AfterAttributeName */ ) {\n                this._stateAfterAttributeName(c);\n            } else if (this._state === 13 /* InAttributeValueSq */ ) {\n                this._stateInAttributeValueSingleQuotes(c);\n            } else if (this._state === 11 /* BeforeAttributeValue */ ) {\n                this._stateBeforeAttributeValue(c);\n            } else if (this._state === 5 /* BeforeClosingTagName */ ) {\n                this._stateBeforeClosingTagName(c);\n            } else if (this._state === 7 /* AfterClosingTagName */ ) {\n                this._stateAfterClosingTagName(c);\n            } else if (this._state === 31 /* BeforeSpecial */ ) {\n                this._stateBeforeSpecial(c);\n            } else if (this._state === 20 /* AfterComment1 */ ) {\n                this._stateAfterComment1(c);\n            } else if (this._state === 14 /* InAttributeValueNq */ ) {\n                this._stateInAttributeValueNoQuotes(c);\n            } else if (this._state === 4 /* InSelfClosingTag */ ) {\n                this._stateInSelfClosingTag(c);\n            } else if (this._state === 16 /* InDeclaration */ ) {\n                this._stateInDeclaration(c);\n            } else if (this._state === 15 /* BeforeDeclaration */ ) {\n                this._stateBeforeDeclaration(c);\n            } else if (this._state === 21 /* AfterComment2 */ ) {\n                this._stateAfterComment2(c);\n            } else if (this._state === 18 /* BeforeComment */ ) {\n                this._stateBeforeComment(c);\n            } else if (this._state === 32 /* BeforeSpecialEnd */ ) {\n                this._stateBeforeSpecialEnd(c);\n            } else if (this._state === 38 /* AfterScript1 */ ) {\n                stateAfterScript1(this, c);\n            } else if (this._state === 39 /* AfterScript2 */ ) {\n                stateAfterScript2(this, c);\n            } else if (this._state === 40 /* AfterScript3 */ ) {\n                stateAfterScript3(this, c);\n            } else if (this._state === 33 /* BeforeScript1 */ ) {\n                stateBeforeScript1(this, c);\n            } else if (this._state === 34 /* BeforeScript2 */ ) {\n                stateBeforeScript2(this, c);\n            } else if (this._state === 35 /* BeforeScript3 */ ) {\n                stateBeforeScript3(this, c);\n            } else if (this._state === 36 /* BeforeScript4 */ ) {\n                stateBeforeScript4(this, c);\n            } else if (this._state === 37 /* BeforeScript5 */ ) {\n                this._stateBeforeScript5(c);\n            } else if (this._state === 41 /* AfterScript4 */ ) {\n                stateAfterScript4(this, c);\n            } else if (this._state === 42 /* AfterScript5 */ ) {\n                this._stateAfterScript5(c);\n            } else if (this._state === 43 /* BeforeStyle1 */ ) {\n                stateBeforeStyle1(this, c);\n            } else if (this._state === 28 /* InCdata */ ) {\n                this._stateInCdata(c);\n            } else if (this._state === 44 /* BeforeStyle2 */ ) {\n                stateBeforeStyle2(this, c);\n            } else if (this._state === 45 /* BeforeStyle3 */ ) {\n                stateBeforeStyle3(this, c);\n            } else if (this._state === 46 /* BeforeStyle4 */ ) {\n                this._stateBeforeStyle4(c);\n            } else if (this._state === 47 /* AfterStyle1 */ ) {\n                stateAfterStyle1(this, c);\n            } else if (this._state === 48 /* AfterStyle2 */ ) {\n                stateAfterStyle2(this, c);\n            } else if (this._state === 49 /* AfterStyle3 */ ) {\n                stateAfterStyle3(this, c);\n            } else if (this._state === 50 /* AfterStyle4 */ ) {\n                this._stateAfterStyle4(c);\n            } else if (this._state === 17 /* InProcessingInstruction */ ) {\n                this._stateInProcessingInstruction(c);\n            } else if (this._state === 53 /* InNamedEntity */ ) {\n                this._stateInNamedEntity(c);\n            } else if (this._state === 22 /* BeforeCdata1 */ ) {\n                stateBeforeCdata1(this, c);\n            } else if (this._state === 51 /* BeforeEntity */ ) {\n                stateBeforeEntity(this, c);\n            } else if (this._state === 23 /* BeforeCdata2 */ ) {\n                stateBeforeCdata2(this, c);\n            } else if (this._state === 24 /* BeforeCdata3 */ ) {\n                stateBeforeCdata3(this, c);\n            } else if (this._state === 29 /* AfterCdata1 */ ) {\n                this._stateAfterCdata1(c);\n            } else if (this._state === 30 /* AfterCdata2 */ ) {\n                this._stateAfterCdata2(c);\n            } else if (this._state === 25 /* BeforeCdata4 */ ) {\n                stateBeforeCdata4(this, c);\n            } else if (this._state === 26 /* BeforeCdata5 */ ) {\n                stateBeforeCdata5(this, c);\n            } else if (this._state === 27 /* BeforeCdata6 */ ) {\n                this._stateBeforeCdata6(c);\n            } else if (this._state === 55 /* InHexEntity */ ) {\n                this._stateInHexEntity(c);\n            } else if (this._state === 54 /* InNumericEntity */ ) {\n                this._stateInNumericEntity(c);\n            } else if (this._state === 52 /* BeforeNumericEntity */ ) {\n                stateBeforeNumericEntity(this, c);\n            } else {\n                this._cbs.onerror(Error(\"unknown _state\"), this._state);\n            }\n            this._index++;\n        }\n        this._cleanup();\n    };\n    Tokenizer.prototype.pause = function() {\n        this._running = false;\n    };\n    Tokenizer.prototype.resume = function() {\n        this._running = true;\n        if (this._index < this._buffer.length) {\n            this._parse();\n        }\n        if (this._ended) {\n            this._finish();\n        }\n    };\n    Tokenizer.prototype.end = function(chunk) {\n        if (this._ended) this._cbs.onerror(Error(\".end() after done!\"));\n        if (chunk) this.write(chunk);\n        this._ended = true;\n        if (this._running) this._finish();\n    };\n    Tokenizer.prototype._finish = function() {\n        //if there is remaining data, emit it in a reasonable way\n        if (this._sectionStart < this._index) {\n            this._handleTrailingData();\n        }\n        this._cbs.onend();\n    };\n    Tokenizer.prototype._handleTrailingData = function() {\n        var data = this._buffer.substr(this._sectionStart);\n        if (this._state === 28 /* InCdata */  || this._state === 29 /* AfterCdata1 */  || this._state === 30 /* AfterCdata2 */ ) {\n            this._cbs.oncdata(data);\n        } else if (this._state === 19 /* InComment */  || this._state === 20 /* AfterComment1 */  || this._state === 21 /* AfterComment2 */ ) {\n            this._cbs.oncomment(data);\n        } else if (this._state === 53 /* InNamedEntity */  && !this._xmlMode) {\n            this._parseLegacyEntity();\n            if (this._sectionStart < this._index) {\n                this._state = this._baseState;\n                this._handleTrailingData();\n            }\n        } else if (this._state === 54 /* InNumericEntity */  && !this._xmlMode) {\n            this._decodeNumericEntity(2, 10);\n            if (this._sectionStart < this._index) {\n                this._state = this._baseState;\n                this._handleTrailingData();\n            }\n        } else if (this._state === 55 /* InHexEntity */  && !this._xmlMode) {\n            this._decodeNumericEntity(3, 16);\n            if (this._sectionStart < this._index) {\n                this._state = this._baseState;\n                this._handleTrailingData();\n            }\n        } else if (this._state !== 3 /* InTagName */  && this._state !== 8 /* BeforeAttributeName */  && this._state !== 11 /* BeforeAttributeValue */  && this._state !== 10 /* AfterAttributeName */  && this._state !== 9 /* InAttributeName */  && this._state !== 13 /* InAttributeValueSq */  && this._state !== 12 /* InAttributeValueDq */  && this._state !== 14 /* InAttributeValueNq */  && this._state !== 6 /* InClosingTagName */ ) {\n            this._cbs.ontext(data);\n        }\n    //else, ignore remaining data\n    //TODO add a way to remove current tag\n    };\n    Tokenizer.prototype.getAbsoluteIndex = function() {\n        return this._bufferOffset + this._index;\n    };\n    Tokenizer.prototype._getSection = function() {\n        return this._buffer.substring(this._sectionStart, this._index);\n    };\n    Tokenizer.prototype._emitToken = function(name) {\n        this._cbs[name](this._getSection());\n        this._sectionStart = -1;\n    };\n    Tokenizer.prototype._emitPartial = function(value) {\n        if (this._baseState !== 1 /* Text */ ) {\n            this._cbs.onattribdata(value); //TODO implement the new event\n        } else {\n            this._cbs.ontext(value);\n        }\n    };\n    return Tokenizer;\n}();\nexports[\"default\"] = Tokenizer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/Tokenizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/WritableStream.js":
/*!********************************************************!*\
  !*** ./node_modules/htmlparser2/lib/WritableStream.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar Parser_1 = __webpack_require__(/*! ./Parser */ \"(ssr)/./node_modules/htmlparser2/lib/Parser.js\");\nvar stream_1 = __webpack_require__(/*! stream */ \"stream\");\nvar string_decoder_1 = __webpack_require__(/*! string_decoder */ \"string_decoder\");\n// Following the example in https://nodejs.org/api/stream.html#stream_decoding_buffers_in_a_writable_stream\nfunction isBuffer(_chunk, encoding) {\n    return encoding === \"buffer\";\n}\n/**\n * WritableStream makes the `Parser` interface available as a NodeJS stream.\n *\n * @see Parser\n */ var WritableStream = /** @class */ function(_super) {\n    __extends(WritableStream, _super);\n    function WritableStream(cbs, options) {\n        var _this = _super.call(this, {\n            decodeStrings: false\n        }) || this;\n        _this._decoder = new string_decoder_1.StringDecoder();\n        _this._parser = new Parser_1.Parser(cbs, options);\n        return _this;\n    }\n    WritableStream.prototype._write = function(chunk, encoding, cb) {\n        if (isBuffer(chunk, encoding)) chunk = this._decoder.write(chunk);\n        this._parser.write(chunk);\n        cb();\n    };\n    WritableStream.prototype._final = function(cb) {\n        this._parser.end(this._decoder.end());\n        cb();\n    };\n    return WritableStream;\n}(stream_1.Writable);\nexports.WritableStream = WritableStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1dyaXRhYmxlU3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsWUFBWSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFNBQVMsSUFBSztJQUN4QyxJQUFJQyxnQkFBZ0IsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDO1FBQzlCRixnQkFBZ0JHLE9BQU9DLGNBQWMsSUFDaEM7WUFBRUMsV0FBVyxFQUFFO1FBQUMsY0FBYUMsU0FBUyxTQUFVTCxDQUFDLEVBQUVDLENBQUM7WUFBSUQsRUFBRUksU0FBUyxHQUFHSDtRQUFHLEtBQzFFLFNBQVVELENBQUMsRUFBRUMsQ0FBQztZQUFJLElBQUssSUFBSUssS0FBS0wsRUFBRyxJQUFJQSxFQUFFTSxjQUFjLENBQUNELElBQUlOLENBQUMsQ0FBQ00sRUFBRSxHQUFHTCxDQUFDLENBQUNLLEVBQUU7UUFBRTtRQUM3RSxPQUFPUCxjQUFjQyxHQUFHQztJQUM1QjtJQUNBLE9BQU8sU0FBVUQsQ0FBQyxFQUFFQyxDQUFDO1FBQ2pCRixjQUFjQyxHQUFHQztRQUNqQixTQUFTTztZQUFPLElBQUksQ0FBQ0MsV0FBVyxHQUFHVDtRQUFHO1FBQ3RDQSxFQUFFVSxTQUFTLEdBQUdULE1BQU0sT0FBT0MsT0FBT1MsTUFBTSxDQUFDVixLQUFNTyxDQUFBQSxHQUFHRSxTQUFTLEdBQUdULEVBQUVTLFNBQVMsRUFBRSxJQUFJRixJQUFHO0lBQ3RGO0FBQ0o7QUFDQU4sOENBQTZDO0lBQUVZLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsSUFBSUMsV0FBV0MsbUJBQU9BLENBQUMsZ0VBQVU7QUFDakMsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUMsc0JBQVE7QUFDL0IsSUFBSUUsbUJBQW1CRixtQkFBT0EsQ0FBQyxzQ0FBZ0I7QUFDL0MsMkdBQTJHO0FBQzNHLFNBQVNHLFNBQVNDLE1BQU0sRUFBRUMsUUFBUTtJQUM5QixPQUFPQSxhQUFhO0FBQ3hCO0FBQ0E7Ozs7Q0FJQyxHQUNELElBQUlDLGlCQUFpQixXQUFXLEdBQUksU0FBVUMsTUFBTTtJQUNoRHpCLFVBQVV3QixnQkFBZ0JDO0lBQzFCLFNBQVNELGVBQWVFLEdBQUcsRUFBRUMsT0FBTztRQUNoQyxJQUFJQyxRQUFRSCxPQUFPSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQUVDLGVBQWU7UUFBTSxNQUFNLElBQUk7UUFDL0RGLE1BQU1HLFFBQVEsR0FBRyxJQUFJWCxpQkFBaUJZLGFBQWE7UUFDbkRKLE1BQU1LLE9BQU8sR0FBRyxJQUFJaEIsU0FBU2lCLE1BQU0sQ0FBQ1IsS0FBS0M7UUFDekMsT0FBT0M7SUFDWDtJQUNBSixlQUFlWixTQUFTLENBQUN1QixNQUFNLEdBQUcsU0FBVUMsS0FBSyxFQUFFYixRQUFRLEVBQUVjLEVBQUU7UUFDM0QsSUFBSWhCLFNBQVNlLE9BQU9iLFdBQ2hCYSxRQUFRLElBQUksQ0FBQ0wsUUFBUSxDQUFDTyxLQUFLLENBQUNGO1FBQ2hDLElBQUksQ0FBQ0gsT0FBTyxDQUFDSyxLQUFLLENBQUNGO1FBQ25CQztJQUNKO0lBQ0FiLGVBQWVaLFNBQVMsQ0FBQzJCLE1BQU0sR0FBRyxTQUFVRixFQUFFO1FBQzFDLElBQUksQ0FBQ0osT0FBTyxDQUFDTyxHQUFHLENBQUMsSUFBSSxDQUFDVCxRQUFRLENBQUNTLEdBQUc7UUFDbENIO0lBQ0o7SUFDQSxPQUFPYjtBQUNYLEVBQUVMLFNBQVNzQixRQUFRO0FBQ25CMUIsc0JBQXNCLEdBQUdTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL2xpYi9Xcml0YWJsZVN0cmVhbS5qcz8xYzZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9QYXJzZXJcIik7XG52YXIgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xudmFyIHN0cmluZ19kZWNvZGVyXzEgPSByZXF1aXJlKFwic3RyaW5nX2RlY29kZXJcIik7XG4vLyBGb2xsb3dpbmcgdGhlIGV4YW1wbGUgaW4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbCNzdHJlYW1fZGVjb2RpbmdfYnVmZmVyc19pbl9hX3dyaXRhYmxlX3N0cmVhbVxuZnVuY3Rpb24gaXNCdWZmZXIoX2NodW5rLCBlbmNvZGluZykge1xuICAgIHJldHVybiBlbmNvZGluZyA9PT0gXCJidWZmZXJcIjtcbn1cbi8qKlxuICogV3JpdGFibGVTdHJlYW0gbWFrZXMgdGhlIGBQYXJzZXJgIGludGVyZmFjZSBhdmFpbGFibGUgYXMgYSBOb2RlSlMgc3RyZWFtLlxuICpcbiAqIEBzZWUgUGFyc2VyXG4gKi9cbnZhciBXcml0YWJsZVN0cmVhbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoV3JpdGFibGVTdHJlYW0sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV3JpdGFibGVTdHJlYW0oY2JzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHsgZGVjb2RlU3RyaW5nczogZmFsc2UgfSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2RlY29kZXIgPSBuZXcgc3RyaW5nX2RlY29kZXJfMS5TdHJpbmdEZWNvZGVyKCk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIgPSBuZXcgUGFyc2VyXzEuUGFyc2VyKGNicywgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV3JpdGFibGVTdHJlYW0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gICAgICAgIGlmIChpc0J1ZmZlcihjaHVuaywgZW5jb2RpbmcpKVxuICAgICAgICAgICAgY2h1bmsgPSB0aGlzLl9kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgdGhpcy5fcGFyc2VyLndyaXRlKGNodW5rKTtcbiAgICAgICAgY2IoKTtcbiAgICB9O1xuICAgIFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VyLmVuZCh0aGlzLl9kZWNvZGVyLmVuZCgpKTtcbiAgICAgICAgY2IoKTtcbiAgICB9O1xuICAgIHJldHVybiBXcml0YWJsZVN0cmVhbTtcbn0oc3RyZWFtXzEuV3JpdGFibGUpKTtcbmV4cG9ydHMuV3JpdGFibGVTdHJlYW0gPSBXcml0YWJsZVN0cmVhbTtcbiJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUGFyc2VyXzEiLCJyZXF1aXJlIiwic3RyZWFtXzEiLCJzdHJpbmdfZGVjb2Rlcl8xIiwiaXNCdWZmZXIiLCJfY2h1bmsiLCJlbmNvZGluZyIsIldyaXRhYmxlU3RyZWFtIiwiX3N1cGVyIiwiY2JzIiwib3B0aW9ucyIsIl90aGlzIiwiY2FsbCIsImRlY29kZVN0cmluZ3MiLCJfZGVjb2RlciIsIlN0cmluZ0RlY29kZXIiLCJfcGFyc2VyIiwiUGFyc2VyIiwiX3dyaXRlIiwiY2h1bmsiLCJjYiIsIndyaXRlIiwiX2ZpbmFsIiwiZW5kIiwiV3JpdGFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/WritableStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/htmlparser2/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction __export(m) {\n    for(var p in m)if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar Parser_1 = __webpack_require__(/*! ./Parser */ \"(ssr)/./node_modules/htmlparser2/lib/Parser.js\");\nexports.Parser = Parser_1.Parser;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(ssr)/./node_modules/domhandler/lib/index.js\");\nexports.DomHandler = domhandler_1.DomHandler;\nexports.DefaultHandler = domhandler_1.DomHandler;\n// Helper methods\n/**\n * Parses data, returns the resulting DOM.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */ function parseDOM(data, options) {\n    var handler = new domhandler_1.DomHandler(void 0, options);\n    new Parser_1.Parser(handler, options).end(data);\n    return handler.dom;\n}\nexports.parseDOM = parseDOM;\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param cb A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.\n */ function createDomStream(cb, options, elementCb) {\n    var handler = new domhandler_1.DomHandler(cb, options, elementCb);\n    return new Parser_1.Parser(handler, options);\n}\nexports.createDomStream = createDomStream;\nvar Tokenizer_1 = __webpack_require__(/*! ./Tokenizer */ \"(ssr)/./node_modules/htmlparser2/lib/Tokenizer.js\");\nexports.Tokenizer = Tokenizer_1.default;\nvar ElementType = __importStar(__webpack_require__(/*! domelementtype */ \"(ssr)/./node_modules/domelementtype/lib/index.js\"));\nexports.ElementType = ElementType;\n/**\n * List of all events that the parser emits.\n *\n * Format: eventname: number of arguments.\n */ exports.EVENTS = {\n    attribute: 2,\n    cdatastart: 0,\n    cdataend: 0,\n    text: 1,\n    processinginstruction: 2,\n    comment: 1,\n    commentend: 0,\n    closetag: 1,\n    opentag: 2,\n    opentagname: 1,\n    error: 1,\n    end: 0\n};\n/*\n    All of the following exports exist for backwards-compatibility.\n    They should probably be removed eventually.\n*/ __export(__webpack_require__(/*! ./FeedHandler */ \"(ssr)/./node_modules/htmlparser2/lib/FeedHandler.js\"));\n__export(__webpack_require__(/*! ./WritableStream */ \"(ssr)/./node_modules/htmlparser2/lib/WritableStream.js\"));\n__export(__webpack_require__(/*! ./CollectingHandler */ \"(ssr)/./node_modules/htmlparser2/lib/CollectingHandler.js\"));\nvar DomUtils = __importStar(__webpack_require__(/*! domutils */ \"(ssr)/./node_modules/domutils/lib/index.js\"));\nexports.DomUtils = DomUtils;\nvar FeedHandler_1 = __webpack_require__(/*! ./FeedHandler */ \"(ssr)/./node_modules/htmlparser2/lib/FeedHandler.js\");\nexports.RssHandler = FeedHandler_1.FeedHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsU0FBU0EsU0FBU0MsQ0FBQztJQUNmLElBQUssSUFBSUMsS0FBS0QsRUFBRyxJQUFJLENBQUNFLFFBQVFDLGNBQWMsQ0FBQ0YsSUFBSUMsT0FBTyxDQUFDRCxFQUFFLEdBQUdELENBQUMsQ0FBQ0MsRUFBRTtBQUN0RTtBQUNBLElBQUlHLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBVUMsR0FBRztJQUMzRCxJQUFJQSxPQUFPQSxJQUFJQyxVQUFVLEVBQUUsT0FBT0Q7SUFDbEMsSUFBSUUsU0FBUyxDQUFDO0lBQ2QsSUFBSUYsT0FBTyxNQUFNO1FBQUEsSUFBSyxJQUFJRyxLQUFLSCxJQUFLLElBQUlJLE9BQU9OLGNBQWMsQ0FBQ08sSUFBSSxDQUFDTCxLQUFLRyxJQUFJRCxNQUFNLENBQUNDLEVBQUUsR0FBR0gsR0FBRyxDQUFDRyxFQUFFO0lBQUE7SUFDOUZELE1BQU0sQ0FBQyxVQUFVLEdBQUdGO0lBQ3BCLE9BQU9FO0FBQ1g7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsSUFBSUMsV0FBV0MsbUJBQU9BLENBQUMsZ0VBQVU7QUFDakNaLGNBQWMsR0FBR1csU0FBU0UsTUFBTTtBQUNoQyxJQUFJQyxlQUFlRixtQkFBT0EsQ0FBQyxnRUFBWTtBQUN2Q1osa0JBQWtCLEdBQUdjLGFBQWFDLFVBQVU7QUFDNUNmLHNCQUFzQixHQUFHYyxhQUFhQyxVQUFVO0FBQ2hELGlCQUFpQjtBQUNqQjs7Ozs7Q0FLQyxHQUNELFNBQVNFLFNBQVNDLElBQUksRUFBRUMsT0FBTztJQUMzQixJQUFJQyxVQUFVLElBQUlOLGFBQWFDLFVBQVUsQ0FBQyxLQUFLLEdBQUdJO0lBQ2xELElBQUlSLFNBQVNFLE1BQU0sQ0FBQ08sU0FBU0QsU0FBU0UsR0FBRyxDQUFDSDtJQUMxQyxPQUFPRSxRQUFRRSxHQUFHO0FBQ3RCO0FBQ0F0QixnQkFBZ0IsR0FBR2lCO0FBQ25COzs7Ozs7Q0FNQyxHQUNELFNBQVNNLGdCQUFnQkMsRUFBRSxFQUFFTCxPQUFPLEVBQUVNLFNBQVM7SUFDM0MsSUFBSUwsVUFBVSxJQUFJTixhQUFhQyxVQUFVLENBQUNTLElBQUlMLFNBQVNNO0lBQ3ZELE9BQU8sSUFBSWQsU0FBU0UsTUFBTSxDQUFDTyxTQUFTRDtBQUN4QztBQUNBbkIsdUJBQXVCLEdBQUd1QjtBQUMxQixJQUFJRyxjQUFjZCxtQkFBT0EsQ0FBQyxzRUFBYTtBQUN2Q1osaUJBQWlCLEdBQUcwQixZQUFZRSxPQUFPO0FBQ3ZDLElBQUlDLGNBQWMzQixhQUFhVSxtQkFBT0EsQ0FBQyx3RUFBZ0I7QUFDdkRaLG1CQUFtQixHQUFHNkI7QUFDdEI7Ozs7Q0FJQyxHQUNEN0IsY0FBYyxHQUFHO0lBQ2IrQixXQUFXO0lBQ1hDLFlBQVk7SUFDWkMsVUFBVTtJQUNWQyxNQUFNO0lBQ05DLHVCQUF1QjtJQUN2QkMsU0FBUztJQUNUQyxZQUFZO0lBQ1pDLFVBQVU7SUFDVkMsU0FBUztJQUNUQyxhQUFhO0lBQ2JDLE9BQU87SUFDUHBCLEtBQUs7QUFDVDtBQUNBOzs7QUFHQSxHQUNBeEIsU0FBU2UsbUJBQU9BLENBQUMsMEVBQWU7QUFDaENmLFNBQVNlLG1CQUFPQSxDQUFDLGdGQUFrQjtBQUNuQ2YsU0FBU2UsbUJBQU9BLENBQUMsc0ZBQXFCO0FBQ3RDLElBQUk4QixXQUFXeEMsYUFBYVUsbUJBQU9BLENBQUMsNERBQVU7QUFDOUNaLGdCQUFnQixHQUFHMEM7QUFDbkIsSUFBSUMsZ0JBQWdCL0IsbUJBQU9BLENBQUMsMEVBQWU7QUFDM0NaLGtCQUFrQixHQUFHMkMsY0FBY0UsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9saWIvaW5kZXguanM/MDAzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xuICAgIHJlc3VsdFtcImRlZmF1bHRcIl0gPSBtb2Q7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9QYXJzZXJcIik7XG5leHBvcnRzLlBhcnNlciA9IFBhcnNlcl8xLlBhcnNlcjtcbnZhciBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbmV4cG9ydHMuRG9tSGFuZGxlciA9IGRvbWhhbmRsZXJfMS5Eb21IYW5kbGVyO1xuZXhwb3J0cy5EZWZhdWx0SGFuZGxlciA9IGRvbWhhbmRsZXJfMS5Eb21IYW5kbGVyO1xuLy8gSGVscGVyIG1ldGhvZHNcbi8qKlxuICogUGFyc2VzIGRhdGEsIHJldHVybnMgdGhlIHJlc3VsdGluZyBET00uXG4gKlxuICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdGhhdCBzaG91bGQgYmUgcGFyc2VkLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIHBhcnNlciBhbmQgRE9NIGJ1aWxkZXIuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRE9NKGRhdGEsIG9wdGlvbnMpIHtcbiAgICB2YXIgaGFuZGxlciA9IG5ldyBkb21oYW5kbGVyXzEuRG9tSGFuZGxlcih2b2lkIDAsIG9wdGlvbnMpO1xuICAgIG5ldyBQYXJzZXJfMS5QYXJzZXIoaGFuZGxlciwgb3B0aW9ucykuZW5kKGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVyLmRvbTtcbn1cbmV4cG9ydHMucGFyc2VET00gPSBwYXJzZURPTTtcbi8qKlxuICogQ3JlYXRlcyBhIHBhcnNlciBpbnN0YW5jZSwgd2l0aCBhbiBhdHRhY2hlZCBET00gaGFuZGxlci5cbiAqXG4gKiBAcGFyYW0gY2IgQSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uY2UgcGFyc2luZyBoYXMgYmVlbiBjb21wbGV0ZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIGZvciB0aGUgcGFyc2VyIGFuZCBET00gYnVpbGRlci5cbiAqIEBwYXJhbSBlbGVtZW50Q2IgQW4gb3B0aW9uYWwgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCBldmVyeSB0aW1lIGEgdGFnIGhhcyBiZWVuIGNvbXBsZXRlZCBpbnNpZGUgb2YgdGhlIERPTS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRG9tU3RyZWFtKGNiLCBvcHRpb25zLCBlbGVtZW50Q2IpIHtcbiAgICB2YXIgaGFuZGxlciA9IG5ldyBkb21oYW5kbGVyXzEuRG9tSGFuZGxlcihjYiwgb3B0aW9ucywgZWxlbWVudENiKTtcbiAgICByZXR1cm4gbmV3IFBhcnNlcl8xLlBhcnNlcihoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY3JlYXRlRG9tU3RyZWFtID0gY3JlYXRlRG9tU3RyZWFtO1xudmFyIFRva2VuaXplcl8xID0gcmVxdWlyZShcIi4vVG9rZW5pemVyXCIpO1xuZXhwb3J0cy5Ub2tlbml6ZXIgPSBUb2tlbml6ZXJfMS5kZWZhdWx0O1xudmFyIEVsZW1lbnRUeXBlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJkb21lbGVtZW50dHlwZVwiKSk7XG5leHBvcnRzLkVsZW1lbnRUeXBlID0gRWxlbWVudFR5cGU7XG4vKipcbiAqIExpc3Qgb2YgYWxsIGV2ZW50cyB0aGF0IHRoZSBwYXJzZXIgZW1pdHMuXG4gKlxuICogRm9ybWF0OiBldmVudG5hbWU6IG51bWJlciBvZiBhcmd1bWVudHMuXG4gKi9cbmV4cG9ydHMuRVZFTlRTID0ge1xuICAgIGF0dHJpYnV0ZTogMixcbiAgICBjZGF0YXN0YXJ0OiAwLFxuICAgIGNkYXRhZW5kOiAwLFxuICAgIHRleHQ6IDEsXG4gICAgcHJvY2Vzc2luZ2luc3RydWN0aW9uOiAyLFxuICAgIGNvbW1lbnQ6IDEsXG4gICAgY29tbWVudGVuZDogMCxcbiAgICBjbG9zZXRhZzogMSxcbiAgICBvcGVudGFnOiAyLFxuICAgIG9wZW50YWduYW1lOiAxLFxuICAgIGVycm9yOiAxLFxuICAgIGVuZDogMFxufTtcbi8qXG4gICAgQWxsIG9mIHRoZSBmb2xsb3dpbmcgZXhwb3J0cyBleGlzdCBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkuXG4gICAgVGhleSBzaG91bGQgcHJvYmFibHkgYmUgcmVtb3ZlZCBldmVudHVhbGx5LlxuKi9cbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0ZlZWRIYW5kbGVyXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1dyaXRhYmxlU3RyZWFtXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0NvbGxlY3RpbmdIYW5kbGVyXCIpKTtcbnZhciBEb21VdGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiZG9tdXRpbHNcIikpO1xuZXhwb3J0cy5Eb21VdGlscyA9IERvbVV0aWxzO1xudmFyIEZlZWRIYW5kbGVyXzEgPSByZXF1aXJlKFwiLi9GZWVkSGFuZGxlclwiKTtcbmV4cG9ydHMuUnNzSGFuZGxlciA9IEZlZWRIYW5kbGVyXzEuRmVlZEhhbmRsZXI7XG4iXSwibmFtZXMiOlsiX19leHBvcnQiLCJtIiwicCIsImV4cG9ydHMiLCJoYXNPd25Qcm9wZXJ0eSIsIl9faW1wb3J0U3RhciIsIm1vZCIsIl9fZXNNb2R1bGUiLCJyZXN1bHQiLCJrIiwiT2JqZWN0IiwiY2FsbCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJQYXJzZXJfMSIsInJlcXVpcmUiLCJQYXJzZXIiLCJkb21oYW5kbGVyXzEiLCJEb21IYW5kbGVyIiwiRGVmYXVsdEhhbmRsZXIiLCJwYXJzZURPTSIsImRhdGEiLCJvcHRpb25zIiwiaGFuZGxlciIsImVuZCIsImRvbSIsImNyZWF0ZURvbVN0cmVhbSIsImNiIiwiZWxlbWVudENiIiwiVG9rZW5pemVyXzEiLCJUb2tlbml6ZXIiLCJkZWZhdWx0IiwiRWxlbWVudFR5cGUiLCJFVkVOVFMiLCJhdHRyaWJ1dGUiLCJjZGF0YXN0YXJ0IiwiY2RhdGFlbmQiLCJ0ZXh0IiwicHJvY2Vzc2luZ2luc3RydWN0aW9uIiwiY29tbWVudCIsImNvbW1lbnRlbmQiLCJjbG9zZXRhZyIsIm9wZW50YWciLCJvcGVudGFnbmFtZSIsImVycm9yIiwiRG9tVXRpbHMiLCJGZWVkSGFuZGxlcl8xIiwiUnNzSGFuZGxlciIsIkZlZWRIYW5kbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/index.js\n");

/***/ })

};
;