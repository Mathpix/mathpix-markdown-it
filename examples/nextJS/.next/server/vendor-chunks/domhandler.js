"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/domhandler";
exports.ids = ["vendor-chunks/domhandler"];
exports.modules = {

/***/ "(ssr)/./node_modules/domhandler/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/domhandler/lib/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DomHandler = void 0;\nvar node_1 = __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/domhandler/lib/node.js\");\n__exportStar(__webpack_require__(/*! ./node */ \"(ssr)/./node_modules/domhandler/lib/node.js\"), exports);\nvar reWhitespace = /\\s+/g;\n// Default options\nvar defaultOpts = {\n    normalizeWhitespace: false,\n    withStartIndices: false,\n    withEndIndices: false\n};\nvar DomHandler = /** @class */ function() {\n    /**\n     * @param callback Called once parsing has completed.\n     * @param options Settings for the handler.\n     * @param elementCB Callback whenever a tag is closed.\n     */ function DomHandler(callback, options, elementCB) {\n        /** The constructed DOM */ this.dom = [];\n        /** Indicated whether parsing has been completed. */ this._done = false;\n        /** Stack of open tags. */ this._tagStack = [];\n        /** A data node that is still being written to. */ this._lastNode = null;\n        /** Reference to the parser instance. Used for location information. */ this._parser = null;\n        // Make it possible to skip arguments, for backwards-compatibility\n        if (typeof options === \"function\") {\n            elementCB = options;\n            options = defaultOpts;\n        }\n        if (typeof callback === \"object\") {\n            options = callback;\n            callback = undefined;\n        }\n        this._callback = callback !== null && callback !== void 0 ? callback : null;\n        this._options = options !== null && options !== void 0 ? options : defaultOpts;\n        this._elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\n    }\n    DomHandler.prototype.onparserinit = function(parser) {\n        this._parser = parser;\n    };\n    // Resets the handler back to starting state\n    DomHandler.prototype.onreset = function() {\n        var _a;\n        this.dom = [];\n        this._done = false;\n        this._tagStack = [];\n        this._lastNode = null;\n        this._parser = (_a = this._parser) !== null && _a !== void 0 ? _a : null;\n    };\n    // Signals the handler that parsing is done\n    DomHandler.prototype.onend = function() {\n        if (this._done) return;\n        this._done = true;\n        this._parser = null;\n        this.handleCallback(null);\n    };\n    DomHandler.prototype.onerror = function(error) {\n        this.handleCallback(error);\n    };\n    DomHandler.prototype.onclosetag = function() {\n        this._lastNode = null;\n        var elem = this._tagStack.pop();\n        if (!elem || !this._parser) {\n            return;\n        }\n        if (this._options.withEndIndices) {\n            elem.endIndex = this._parser.endIndex;\n        }\n        if (this._elementCB) this._elementCB(elem);\n    };\n    DomHandler.prototype.onopentag = function(name, attribs) {\n        var element = new node_1.Element(name, attribs);\n        this.addNode(element);\n        this._tagStack.push(element);\n    };\n    DomHandler.prototype.ontext = function(data) {\n        var normalize = this._options.normalizeWhitespace;\n        var _lastNode = this._lastNode;\n        if (_lastNode && _lastNode.type === \"text\" /* Text */ ) {\n            if (normalize) {\n                _lastNode.data = (_lastNode.data + data).replace(reWhitespace, \" \");\n            } else {\n                _lastNode.data += data;\n            }\n        } else {\n            if (normalize) {\n                data = data.replace(reWhitespace, \" \");\n            }\n            var node = new node_1.Text(data);\n            this.addNode(node);\n            this._lastNode = node;\n        }\n    };\n    DomHandler.prototype.oncomment = function(data) {\n        if (this._lastNode && this._lastNode.type === \"comment\" /* Comment */ ) {\n            this._lastNode.data += data;\n            return;\n        }\n        var node = new node_1.Comment(data);\n        this.addNode(node);\n        this._lastNode = node;\n    };\n    DomHandler.prototype.oncommentend = function() {\n        this._lastNode = null;\n    };\n    DomHandler.prototype.oncdatastart = function() {\n        var text = new node_1.Text(\"\");\n        var node = new node_1.NodeWithChildren(\"cdata\" /* CDATA */ , [\n            text\n        ]);\n        this.addNode(node);\n        text.parent = node;\n        this._lastNode = text;\n    };\n    DomHandler.prototype.oncdataend = function() {\n        this._lastNode = null;\n    };\n    DomHandler.prototype.onprocessinginstruction = function(name, data) {\n        var node = new node_1.ProcessingInstruction(name, data);\n        this.addNode(node);\n    };\n    DomHandler.prototype.handleCallback = function(error) {\n        if (typeof this._callback === \"function\") {\n            this._callback(error, this.dom);\n        } else if (error) {\n            throw error;\n        }\n    };\n    DomHandler.prototype.addNode = function(node) {\n        var parent = this._tagStack[this._tagStack.length - 1];\n        var siblings = parent ? parent.children : this.dom;\n        var previousSibling = siblings[siblings.length - 1];\n        if (this._parser) {\n            if (this._options.withStartIndices) {\n                node.startIndex = this._parser.startIndex;\n            }\n            if (this._options.withEndIndices) {\n                node.endIndex = this._parser.endIndex;\n            }\n        }\n        siblings.push(node);\n        if (previousSibling) {\n            node.prev = previousSibling;\n            previousSibling.next = node;\n        }\n        if (parent) {\n            node.parent = parent;\n        }\n        this._lastNode = null;\n    };\n    DomHandler.prototype.addDataNode = function(node) {\n        this.addNode(node);\n        this._lastNode = node;\n    };\n    return DomHandler;\n}();\nexports.DomHandler = DomHandler;\nexports[\"default\"] = DomHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/domhandler/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/domhandler/lib/node.js":
/*!*********************************************!*\
  !*** ./node_modules/domhandler/lib/node.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.cloneNode = exports.Element = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;\nvar nodeTypes = new Map([\n    [\n        \"tag\" /* Tag */ ,\n        1\n    ],\n    [\n        \"script\" /* Script */ ,\n        1\n    ],\n    [\n        \"style\" /* Style */ ,\n        1\n    ],\n    [\n        \"directive\" /* Directive */ ,\n        1\n    ],\n    [\n        \"text\" /* Text */ ,\n        3\n    ],\n    [\n        \"cdata\" /* CDATA */ ,\n        4\n    ],\n    [\n        \"comment\" /* Comment */ ,\n        8\n    ]\n]);\n/**\n * This object will be used as the prototype for Nodes when creating a\n * DOM-Level-1-compliant structure.\n */ var Node = /** @class */ function() {\n    /**\n     *\n     * @param type The type of the node.\n     */ function Node(type) {\n        this.type = type;\n        /** Parent of the node */ this.parent = null;\n        /** Previous sibling */ this.prev = null;\n        /** Next sibling */ this.next = null;\n        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */ this.startIndex = null;\n        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */ this.endIndex = null;\n    }\n    Object.defineProperty(Node.prototype, \"nodeType\", {\n        // Read-only aliases\n        get: function() {\n            var _a;\n            return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, \"parentNode\", {\n        // Read-write aliases for properties\n        get: function() {\n            return this.parent;\n        },\n        set: function(parent) {\n            this.parent = parent;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, \"previousSibling\", {\n        get: function() {\n            return this.prev;\n        },\n        set: function(prev) {\n            this.prev = prev;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, \"nextSibling\", {\n        get: function() {\n            return this.next;\n        },\n        set: function(next) {\n            this.next = next;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Clone this node, and optionally its children.\n     *\n     * @param recursive Clone child nodes as well.\n     * @returns A clone of the node.\n     */ Node.prototype.cloneNode = function(recursive) {\n        if (recursive === void 0) {\n            recursive = false;\n        }\n        return cloneNode(this, recursive);\n    };\n    return Node;\n}();\nexports.Node = Node;\nvar DataNode = /** @class */ function(_super) {\n    __extends(DataNode, _super);\n    /**\n     * @param type The type of the node\n     * @param data The content of the data node\n     */ function DataNode(type, data) {\n        var _this = _super.call(this, type) || this;\n        _this.data = data;\n        return _this;\n    }\n    Object.defineProperty(DataNode.prototype, \"nodeValue\", {\n        get: function() {\n            return this.data;\n        },\n        set: function(data) {\n            this.data = data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return DataNode;\n}(Node);\nexports.DataNode = DataNode;\nvar Text = /** @class */ function(_super) {\n    __extends(Text, _super);\n    function Text(data) {\n        return _super.call(this, \"text\" /* Text */ , data) || this;\n    }\n    return Text;\n}(DataNode);\nexports.Text = Text;\nvar Comment = /** @class */ function(_super) {\n    __extends(Comment, _super);\n    function Comment(data) {\n        return _super.call(this, \"comment\" /* Comment */ , data) || this;\n    }\n    return Comment;\n}(DataNode);\nexports.Comment = Comment;\nvar ProcessingInstruction = /** @class */ function(_super) {\n    __extends(ProcessingInstruction, _super);\n    function ProcessingInstruction(name, data) {\n        var _this = _super.call(this, \"directive\" /* Directive */ , data) || this;\n        _this.name = name;\n        return _this;\n    }\n    return ProcessingInstruction;\n}(DataNode);\nexports.ProcessingInstruction = ProcessingInstruction;\nvar NodeWithChildren = /** @class */ function(_super) {\n    __extends(NodeWithChildren, _super);\n    /**\n     *\n     * @param type Type of the node.\n     * @param children Children of the node. Only certain node types can have children.\n     */ function NodeWithChildren(type, children) {\n        var _this = _super.call(this, type) || this;\n        _this.children = children;\n        return _this;\n    }\n    Object.defineProperty(NodeWithChildren.prototype, \"firstChild\", {\n        // Aliases\n        get: function() {\n            var _a;\n            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NodeWithChildren.prototype, \"lastChild\", {\n        get: function() {\n            return this.children.length > 0 ? this.children[this.children.length - 1] : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NodeWithChildren.prototype, \"childNodes\", {\n        get: function() {\n            return this.children;\n        },\n        set: function(children) {\n            this.children = children;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return NodeWithChildren;\n}(Node);\nexports.NodeWithChildren = NodeWithChildren;\nvar Element = /** @class */ function(_super) {\n    __extends(Element, _super);\n    /**\n     * @param name Name of the tag, eg. `div`, `span`.\n     * @param attribs Object mapping attribute names to attribute values.\n     * @param children Children of the node.\n     */ function Element(name, attribs, children) {\n        if (children === void 0) {\n            children = [];\n        }\n        var _this = _super.call(this, name === \"script\" ? \"script\" /* Script */  : name === \"style\" ? \"style\" /* Style */  : \"tag\" /* Tag */ , children) || this;\n        _this.name = name;\n        _this.attribs = attribs;\n        _this.attribs = attribs;\n        return _this;\n    }\n    Object.defineProperty(Element.prototype, \"tagName\", {\n        // DOM Level 1 aliases\n        get: function() {\n            return this.name;\n        },\n        set: function(name) {\n            this.name = name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Element.prototype, \"attributes\", {\n        get: function() {\n            var _this = this;\n            return Object.keys(this.attribs).map(function(name) {\n                return {\n                    name: name,\n                    value: _this.attribs[name]\n                };\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Element;\n}(NodeWithChildren);\nexports.Element = Element;\n/**\n * Clone a node, and optionally its children.\n *\n * @param recursive Clone child nodes as well.\n * @returns A clone of the node.\n */ function cloneNode(node, recursive) {\n    if (recursive === void 0) {\n        recursive = false;\n    }\n    switch(node.type){\n        case \"text\" /* Text */ :\n            return new Text(node.data);\n        case \"directive\" /* Directive */ :\n            {\n                var instr = node;\n                return new ProcessingInstruction(instr.name, instr.data);\n            }\n        case \"comment\" /* Comment */ :\n            return new Comment(node.data);\n        case \"tag\" /* Tag */ :\n        case \"script\" /* Script */ :\n        case \"style\" /* Style */ :\n            {\n                var elem = node;\n                var children = recursive ? cloneChildren(elem.children) : [];\n                var clone_1 = new Element(elem.name, __assign({}, elem.attribs), children);\n                children.forEach(function(child) {\n                    return child.parent = clone_1;\n                });\n                return clone_1;\n            }\n        case \"cdata\" /* CDATA */ :\n            {\n                var cdata = node;\n                var children = recursive ? cloneChildren(cdata.children) : [];\n                var clone_2 = new NodeWithChildren(\"cdata\" /* CDATA */ , children);\n                children.forEach(function(child) {\n                    return child.parent = clone_2;\n                });\n                return clone_2;\n            }\n        case \"doctype\" /* Doctype */ :\n            {\n                // This type isn't used yet.\n                throw new Error(\"Not implemented yet: ElementType.Doctype case\");\n            }\n    }\n}\nexports.cloneNode = cloneNode;\nfunction cloneChildren(childs) {\n    var children = childs.map(function(child) {\n        return cloneNode(child, true);\n    });\n    for(var i = 1; i < children.length; i++){\n        children[i].prev = children[i - 1];\n        children[i - 1].next = children[i];\n    }\n    return children;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/domhandler/lib/node.js\n");

/***/ })

};
;