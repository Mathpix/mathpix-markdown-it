/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mathpix";
exports.ids = ["vendor-chunks/@mathpix"];
exports.modules = {

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/CSSStyleDeclaration.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/CSSStyleDeclaration.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar parserlib = __webpack_require__(/*! ./cssparser */ \"(ssr)/./node_modules/@mathpix/domino/lib/cssparser.js\");\nmodule.exports = CSSStyleDeclaration;\nfunction CSSStyleDeclaration(elt) {\n    this._element = elt;\n}\n// Utility function for parsing style declarations\n// Pass in a string like \"margin-left: 5px; border-style: solid\"\n// and this function returns an object like\n// {\"margin-left\":\"5px\", \"border-style\":\"solid\"}\nfunction parseStyles(s) {\n    var parser = new parserlib.css.Parser();\n    var result = {\n        property: Object.create(null),\n        priority: Object.create(null)\n    };\n    parser.addListener(\"property\", function(e) {\n        if (e.invalid) return; // Skip errors\n        result.property[e.property.text] = e.value.text;\n        if (e.important) result.priority[e.property.text] = \"important\";\n    });\n    s = (\"\" + s).replace(/^;/, \"\");\n    parser.parseStyleAttribute(s);\n    return result;\n}\nvar NO_CHANGE = {}; // Private marker object\nCSSStyleDeclaration.prototype = Object.create(Object.prototype, {\n    // Return the parsed form of the element's style attribute.\n    // If the element's style attribute has never been parsed\n    // or if it has changed since the last parse, then reparse it\n    // Note that the styles don't get parsed until they're actually needed\n    _parsed: {\n        get: function() {\n            if (!this._parsedStyles || this.cssText !== this._lastParsedText) {\n                var text = this.cssText;\n                this._parsedStyles = parseStyles(text);\n                this._lastParsedText = text;\n                delete this._names;\n            }\n            return this._parsedStyles;\n        }\n    },\n    // Call this method any time the parsed representation of the\n    // style changes.  It converts the style properties to a string and\n    // sets cssText and the element's style attribute\n    _serialize: {\n        value: function() {\n            var styles = this._parsed;\n            var s = \"\";\n            for(var name in styles.property){\n                if (s) s += \" \";\n                s += name + \": \" + styles.property[name];\n                if (styles.priority[name]) {\n                    s += \" !\" + styles.priority[name];\n                }\n                s += \";\";\n            }\n            this.cssText = s; // also sets the style attribute\n            this._lastParsedText = s; // so we don't reparse\n            delete this._names;\n        }\n    },\n    cssText: {\n        get: function() {\n            // XXX: this is a CSSStyleDeclaration for an element.\n            // A different impl might be necessary for a set of styles\n            // associated returned by getComputedStyle(), e.g.\n            return this._element.getAttribute(\"style\");\n        },\n        set: function(value) {\n            // XXX: I should parse and serialize the value to\n            // normalize it and remove errors. FF and chrome do that.\n            this._element.setAttribute(\"style\", value);\n        }\n    },\n    length: {\n        get: function() {\n            if (!this._names) this._names = Object.getOwnPropertyNames(this._parsed.property);\n            return this._names.length;\n        }\n    },\n    item: {\n        value: function(n) {\n            if (!this._names) this._names = Object.getOwnPropertyNames(this._parsed.property);\n            return this._names[n];\n        }\n    },\n    getPropertyValue: {\n        value: function(property) {\n            property = property.toLowerCase();\n            return this._parsed.property[property] || \"\";\n        }\n    },\n    getPropertyPriority: {\n        value: function(property) {\n            property = property.toLowerCase();\n            return this._parsed.priority[property] || \"\";\n        }\n    },\n    setProperty: {\n        value: function(property, value, priority) {\n            property = property.toLowerCase();\n            if (value === null || value === undefined) {\n                value = \"\";\n            }\n            if (priority === null || priority === undefined) {\n                priority = \"\";\n            }\n            // String coercion\n            if (value !== NO_CHANGE) {\n                value = \"\" + value;\n            }\n            if (value === \"\") {\n                this.removeProperty(property);\n                return;\n            }\n            if (priority !== \"\" && priority !== NO_CHANGE && !/^important$/i.test(priority)) {\n                return;\n            }\n            var styles = this._parsed;\n            if (value === NO_CHANGE) {\n                if (!styles.property[property]) {\n                    return; // Not a valid property name.\n                }\n                if (priority !== \"\") {\n                    styles.priority[property] = \"important\";\n                } else {\n                    delete styles.priority[property];\n                }\n            } else {\n                // We don't just accept the property value.  Instead\n                // we parse it to ensure that it is something valid.\n                // If it contains a semicolon it is invalid\n                if (value.indexOf(\";\") !== -1) return;\n                var newprops = parseStyles(property + \":\" + value);\n                if (Object.getOwnPropertyNames(newprops.property).length === 0) {\n                    return; // no valid property found\n                }\n                if (Object.getOwnPropertyNames(newprops.priority).length !== 0) {\n                    return; // if the value included '!important' it wasn't valid.\n                }\n                // XXX handle shorthand properties\n                for(var p in newprops.property){\n                    styles.property[p] = newprops.property[p];\n                    if (priority === NO_CHANGE) {\n                        continue;\n                    } else if (priority !== \"\") {\n                        styles.priority[p] = \"important\";\n                    } else if (styles.priority[p]) {\n                        delete styles.priority[p];\n                    }\n                }\n            }\n            // Serialize and update cssText and element.style!\n            this._serialize();\n        }\n    },\n    setPropertyValue: {\n        value: function(property, value) {\n            return this.setProperty(property, value, NO_CHANGE);\n        }\n    },\n    setPropertyPriority: {\n        value: function(property, priority) {\n            return this.setProperty(property, NO_CHANGE, priority);\n        }\n    },\n    removeProperty: {\n        value: function(property) {\n            property = property.toLowerCase();\n            var styles = this._parsed;\n            if (property in styles.property) {\n                delete styles.property[property];\n                delete styles.priority[property];\n                // Serialize and update cssText and element.style!\n                this._serialize();\n            }\n        }\n    }\n});\nvar cssProperties = {\n    alignContent: \"align-content\",\n    alignItems: \"align-items\",\n    alignmentBaseline: \"alignment-baseline\",\n    alignSelf: \"align-self\",\n    animation: \"animation\",\n    animationDelay: \"animation-delay\",\n    animationDirection: \"animation-direction\",\n    animationDuration: \"animation-duration\",\n    animationFillMode: \"animation-fill-mode\",\n    animationIterationCount: \"animation-iteration-count\",\n    animationName: \"animation-name\",\n    animationPlayState: \"animation-play-state\",\n    animationTimingFunction: \"animation-timing-function\",\n    backfaceVisibility: \"backface-visibility\",\n    background: \"background\",\n    backgroundAttachment: \"background-attachment\",\n    backgroundClip: \"background-clip\",\n    backgroundColor: \"background-color\",\n    backgroundImage: \"background-image\",\n    backgroundOrigin: \"background-origin\",\n    backgroundPosition: \"background-position\",\n    backgroundPositionX: \"background-position-x\",\n    backgroundPositionY: \"background-position-y\",\n    backgroundRepeat: \"background-repeat\",\n    backgroundSize: \"background-size\",\n    baselineShift: \"baseline-shift\",\n    border: \"border\",\n    borderBottom: \"border-bottom\",\n    borderBottomColor: \"border-bottom-color\",\n    borderBottomLeftRadius: \"border-bottom-left-radius\",\n    borderBottomRightRadius: \"border-bottom-right-radius\",\n    borderBottomStyle: \"border-bottom-style\",\n    borderBottomWidth: \"border-bottom-width\",\n    borderCollapse: \"border-collapse\",\n    borderColor: \"border-color\",\n    borderImage: \"border-image\",\n    borderImageOutset: \"border-image-outset\",\n    borderImageRepeat: \"border-image-repeat\",\n    borderImageSlice: \"border-image-slice\",\n    borderImageSource: \"border-image-source\",\n    borderImageWidth: \"border-image-width\",\n    borderLeft: \"border-left\",\n    borderLeftColor: \"border-left-color\",\n    borderLeftStyle: \"border-left-style\",\n    borderLeftWidth: \"border-left-width\",\n    borderRadius: \"border-radius\",\n    borderRight: \"border-right\",\n    borderRightColor: \"border-right-color\",\n    borderRightStyle: \"border-right-style\",\n    borderRightWidth: \"border-right-width\",\n    borderSpacing: \"border-spacing\",\n    borderStyle: \"border-style\",\n    borderTop: \"border-top\",\n    borderTopColor: \"border-top-color\",\n    borderTopLeftRadius: \"border-top-left-radius\",\n    borderTopRightRadius: \"border-top-right-radius\",\n    borderTopStyle: \"border-top-style\",\n    borderTopWidth: \"border-top-width\",\n    borderWidth: \"border-width\",\n    bottom: \"bottom\",\n    boxShadow: \"box-shadow\",\n    boxSizing: \"box-sizing\",\n    breakAfter: \"break-after\",\n    breakBefore: \"break-before\",\n    breakInside: \"break-inside\",\n    captionSide: \"caption-side\",\n    clear: \"clear\",\n    clip: \"clip\",\n    clipPath: \"clip-path\",\n    clipRule: \"clip-rule\",\n    color: \"color\",\n    colorInterpolationFilters: \"color-interpolation-filters\",\n    columnCount: \"column-count\",\n    columnFill: \"column-fill\",\n    columnGap: \"column-gap\",\n    columnRule: \"column-rule\",\n    columnRuleColor: \"column-rule-color\",\n    columnRuleStyle: \"column-rule-style\",\n    columnRuleWidth: \"column-rule-width\",\n    columns: \"columns\",\n    columnSpan: \"column-span\",\n    columnWidth: \"column-width\",\n    content: \"content\",\n    counterIncrement: \"counter-increment\",\n    counterReset: \"counter-reset\",\n    cssFloat: \"float\",\n    cursor: \"cursor\",\n    direction: \"direction\",\n    display: \"display\",\n    dominantBaseline: \"dominant-baseline\",\n    emptyCells: \"empty-cells\",\n    enableBackground: \"enable-background\",\n    fill: \"fill\",\n    fillOpacity: \"fill-opacity\",\n    fillRule: \"fill-rule\",\n    filter: \"filter\",\n    flex: \"flex\",\n    flexBasis: \"flex-basis\",\n    flexDirection: \"flex-direction\",\n    flexFlow: \"flex-flow\",\n    flexGrow: \"flex-grow\",\n    flexShrink: \"flex-shrink\",\n    flexWrap: \"flex-wrap\",\n    floodColor: \"flood-color\",\n    floodOpacity: \"flood-opacity\",\n    font: \"font\",\n    fontFamily: \"font-family\",\n    fontFeatureSettings: \"font-feature-settings\",\n    fontSize: \"font-size\",\n    fontSizeAdjust: \"font-size-adjust\",\n    fontStretch: \"font-stretch\",\n    fontStyle: \"font-style\",\n    fontVariant: \"font-variant\",\n    fontWeight: \"font-weight\",\n    glyphOrientationHorizontal: \"glyph-orientation-horizontal\",\n    glyphOrientationVertical: \"glyph-orientation-vertical\",\n    grid: \"grid\",\n    gridArea: \"grid-area\",\n    gridAutoColumns: \"grid-auto-columns\",\n    gridAutoFlow: \"grid-auto-flow\",\n    gridAutoRows: \"grid-auto-rows\",\n    gridColumn: \"grid-column\",\n    gridColumnEnd: \"grid-column-end\",\n    gridColumnGap: \"grid-column-gap\",\n    gridColumnStart: \"grid-column-start\",\n    gridGap: \"grid-gap\",\n    gridRow: \"grid-row\",\n    gridRowEnd: \"grid-row-end\",\n    gridRowGap: \"grid-row-gap\",\n    gridRowStart: \"grid-row-start\",\n    gridTemplate: \"grid-template\",\n    gridTemplateAreas: \"grid-template-areas\",\n    gridTemplateColumns: \"grid-template-columns\",\n    gridTemplateRows: \"grid-template-rows\",\n    height: \"height\",\n    imeMode: \"ime-mode\",\n    justifyContent: \"justify-content\",\n    kerning: \"kerning\",\n    layoutGrid: \"layout-grid\",\n    layoutGridChar: \"layout-grid-char\",\n    layoutGridLine: \"layout-grid-line\",\n    layoutGridMode: \"layout-grid-mode\",\n    layoutGridType: \"layout-grid-type\",\n    left: \"left\",\n    letterSpacing: \"letter-spacing\",\n    lightingColor: \"lighting-color\",\n    lineBreak: \"line-break\",\n    lineHeight: \"line-height\",\n    listStyle: \"list-style\",\n    listStyleImage: \"list-style-image\",\n    listStylePosition: \"list-style-position\",\n    listStyleType: \"list-style-type\",\n    margin: \"margin\",\n    marginBottom: \"margin-bottom\",\n    marginLeft: \"margin-left\",\n    marginRight: \"margin-right\",\n    marginTop: \"margin-top\",\n    marker: \"marker\",\n    markerEnd: \"marker-end\",\n    markerMid: \"marker-mid\",\n    markerStart: \"marker-start\",\n    mask: \"mask\",\n    maxHeight: \"max-height\",\n    maxWidth: \"max-width\",\n    minHeight: \"min-height\",\n    minWidth: \"min-width\",\n    msContentZoomChaining: \"-ms-content-zoom-chaining\",\n    msContentZooming: \"-ms-content-zooming\",\n    msContentZoomLimit: \"-ms-content-zoom-limit\",\n    msContentZoomLimitMax: \"-ms-content-zoom-limit-max\",\n    msContentZoomLimitMin: \"-ms-content-zoom-limit-min\",\n    msContentZoomSnap: \"-ms-content-zoom-snap\",\n    msContentZoomSnapPoints: \"-ms-content-zoom-snap-points\",\n    msContentZoomSnapType: \"-ms-content-zoom-snap-type\",\n    msFlowFrom: \"-ms-flow-from\",\n    msFlowInto: \"-ms-flow-into\",\n    msFontFeatureSettings: \"-ms-font-feature-settings\",\n    msGridColumn: \"-ms-grid-column\",\n    msGridColumnAlign: \"-ms-grid-column-align\",\n    msGridColumns: \"-ms-grid-columns\",\n    msGridColumnSpan: \"-ms-grid-column-span\",\n    msGridRow: \"-ms-grid-row\",\n    msGridRowAlign: \"-ms-grid-row-align\",\n    msGridRows: \"-ms-grid-rows\",\n    msGridRowSpan: \"-ms-grid-row-span\",\n    msHighContrastAdjust: \"-ms-high-contrast-adjust\",\n    msHyphenateLimitChars: \"-ms-hyphenate-limit-chars\",\n    msHyphenateLimitLines: \"-ms-hyphenate-limit-lines\",\n    msHyphenateLimitZone: \"-ms-hyphenate-limit-zone\",\n    msHyphens: \"-ms-hyphens\",\n    msImeAlign: \"-ms-ime-align\",\n    msOverflowStyle: \"-ms-overflow-style\",\n    msScrollChaining: \"-ms-scroll-chaining\",\n    msScrollLimit: \"-ms-scroll-limit\",\n    msScrollLimitXMax: \"-ms-scroll-limit-x-max\",\n    msScrollLimitXMin: \"-ms-scroll-limit-x-min\",\n    msScrollLimitYMax: \"-ms-scroll-limit-y-max\",\n    msScrollLimitYMin: \"-ms-scroll-limit-y-min\",\n    msScrollRails: \"-ms-scroll-rails\",\n    msScrollSnapPointsX: \"-ms-scroll-snap-points-x\",\n    msScrollSnapPointsY: \"-ms-scroll-snap-points-y\",\n    msScrollSnapType: \"-ms-scroll-snap-type\",\n    msScrollSnapX: \"-ms-scroll-snap-x\",\n    msScrollSnapY: \"-ms-scroll-snap-y\",\n    msScrollTranslation: \"-ms-scroll-translation\",\n    msTextCombineHorizontal: \"-ms-text-combine-horizontal\",\n    msTextSizeAdjust: \"-ms-text-size-adjust\",\n    msTouchAction: \"-ms-touch-action\",\n    msTouchSelect: \"-ms-touch-select\",\n    msUserSelect: \"-ms-user-select\",\n    msWrapFlow: \"-ms-wrap-flow\",\n    msWrapMargin: \"-ms-wrap-margin\",\n    msWrapThrough: \"-ms-wrap-through\",\n    opacity: \"opacity\",\n    order: \"order\",\n    orphans: \"orphans\",\n    outline: \"outline\",\n    outlineColor: \"outline-color\",\n    outlineOffset: \"outline-offset\",\n    outlineStyle: \"outline-style\",\n    outlineWidth: \"outline-width\",\n    overflow: \"overflow\",\n    overflowX: \"overflow-x\",\n    overflowY: \"overflow-y\",\n    padding: \"padding\",\n    paddingBottom: \"padding-bottom\",\n    paddingLeft: \"padding-left\",\n    paddingRight: \"padding-right\",\n    paddingTop: \"padding-top\",\n    page: \"page\",\n    pageBreakAfter: \"page-break-after\",\n    pageBreakBefore: \"page-break-before\",\n    pageBreakInside: \"page-break-inside\",\n    perspective: \"perspective\",\n    perspectiveOrigin: \"perspective-origin\",\n    pointerEvents: \"pointer-events\",\n    position: \"position\",\n    quotes: \"quotes\",\n    right: \"right\",\n    rotate: \"rotate\",\n    rubyAlign: \"ruby-align\",\n    rubyOverhang: \"ruby-overhang\",\n    rubyPosition: \"ruby-position\",\n    scale: \"scale\",\n    size: \"size\",\n    stopColor: \"stop-color\",\n    stopOpacity: \"stop-opacity\",\n    stroke: \"stroke\",\n    strokeDasharray: \"stroke-dasharray\",\n    strokeDashoffset: \"stroke-dashoffset\",\n    strokeLinecap: \"stroke-linecap\",\n    strokeLinejoin: \"stroke-linejoin\",\n    strokeMiterlimit: \"stroke-miterlimit\",\n    strokeOpacity: \"stroke-opacity\",\n    strokeWidth: \"stroke-width\",\n    tableLayout: \"table-layout\",\n    textAlign: \"text-align\",\n    textAlignLast: \"text-align-last\",\n    textAnchor: \"text-anchor\",\n    textDecoration: \"text-decoration\",\n    textIndent: \"text-indent\",\n    textJustify: \"text-justify\",\n    textKashida: \"text-kashida\",\n    textKashidaSpace: \"text-kashida-space\",\n    textOverflow: \"text-overflow\",\n    textShadow: \"text-shadow\",\n    textTransform: \"text-transform\",\n    textUnderlinePosition: \"text-underline-position\",\n    top: \"top\",\n    touchAction: \"touch-action\",\n    transform: \"transform\",\n    transformOrigin: \"transform-origin\",\n    transformStyle: \"transform-style\",\n    transition: \"transition\",\n    transitionDelay: \"transition-delay\",\n    transitionDuration: \"transition-duration\",\n    transitionProperty: \"transition-property\",\n    transitionTimingFunction: \"transition-timing-function\",\n    translate: \"translate\",\n    unicodeBidi: \"unicode-bidi\",\n    verticalAlign: \"vertical-align\",\n    visibility: \"visibility\",\n    webkitAlignContent: \"-webkit-align-content\",\n    webkitAlignItems: \"-webkit-align-items\",\n    webkitAlignSelf: \"-webkit-align-self\",\n    webkitAnimation: \"-webkit-animation\",\n    webkitAnimationDelay: \"-webkit-animation-delay\",\n    webkitAnimationDirection: \"-webkit-animation-direction\",\n    webkitAnimationDuration: \"-webkit-animation-duration\",\n    webkitAnimationFillMode: \"-webkit-animation-fill-mode\",\n    webkitAnimationIterationCount: \"-webkit-animation-iteration-count\",\n    webkitAnimationName: \"-webkit-animation-name\",\n    webkitAnimationPlayState: \"-webkit-animation-play-state\",\n    webkitAnimationTimingFunction: \"-webkit-animation-timing-funciton\",\n    webkitAppearance: \"-webkit-appearance\",\n    webkitBackfaceVisibility: \"-webkit-backface-visibility\",\n    webkitBackgroundClip: \"-webkit-background-clip\",\n    webkitBackgroundOrigin: \"-webkit-background-origin\",\n    webkitBackgroundSize: \"-webkit-background-size\",\n    webkitBorderBottomLeftRadius: \"-webkit-border-bottom-left-radius\",\n    webkitBorderBottomRightRadius: \"-webkit-border-bottom-right-radius\",\n    webkitBorderImage: \"-webkit-border-image\",\n    webkitBorderRadius: \"-webkit-border-radius\",\n    webkitBorderTopLeftRadius: \"-webkit-border-top-left-radius\",\n    webkitBorderTopRightRadius: \"-webkit-border-top-right-radius\",\n    webkitBoxAlign: \"-webkit-box-align\",\n    webkitBoxDirection: \"-webkit-box-direction\",\n    webkitBoxFlex: \"-webkit-box-flex\",\n    webkitBoxOrdinalGroup: \"-webkit-box-ordinal-group\",\n    webkitBoxOrient: \"-webkit-box-orient\",\n    webkitBoxPack: \"-webkit-box-pack\",\n    webkitBoxSizing: \"-webkit-box-sizing\",\n    webkitColumnBreakAfter: \"-webkit-column-break-after\",\n    webkitColumnBreakBefore: \"-webkit-column-break-before\",\n    webkitColumnBreakInside: \"-webkit-column-break-inside\",\n    webkitColumnCount: \"-webkit-column-count\",\n    webkitColumnGap: \"-webkit-column-gap\",\n    webkitColumnRule: \"-webkit-column-rule\",\n    webkitColumnRuleColor: \"-webkit-column-rule-color\",\n    webkitColumnRuleStyle: \"-webkit-column-rule-style\",\n    webkitColumnRuleWidth: \"-webkit-column-rule-width\",\n    webkitColumns: \"-webkit-columns\",\n    webkitColumnSpan: \"-webkit-column-span\",\n    webkitColumnWidth: \"-webkit-column-width\",\n    webkitFilter: \"-webkit-filter\",\n    webkitFlex: \"-webkit-flex\",\n    webkitFlexBasis: \"-webkit-flex-basis\",\n    webkitFlexDirection: \"-webkit-flex-direction\",\n    webkitFlexFlow: \"-webkit-flex-flow\",\n    webkitFlexGrow: \"-webkit-flex-grow\",\n    webkitFlexShrink: \"-webkit-flex-shrink\",\n    webkitFlexWrap: \"-webkit-flex-wrap\",\n    webkitJustifyContent: \"-webkit-justify-content\",\n    webkitOrder: \"-webkit-order\",\n    webkitPerspective: \"-webkit-perspective-origin\",\n    webkitPerspectiveOrigin: \"-webkit-perspective-origin\",\n    webkitTapHighlightColor: \"-webkit-tap-highlight-color\",\n    webkitTextFillColor: \"-webkit-text-fill-color\",\n    webkitTextSizeAdjust: \"-webkit-text-size-adjust\",\n    webkitTextStroke: \"-webkit-text-stroke\",\n    webkitTextStrokeColor: \"-webkit-text-stroke-color\",\n    webkitTextStrokeWidth: \"-webkit-text-stroke-width\",\n    webkitTransform: \"-webkit-transform\",\n    webkitTransformOrigin: \"-webkit-transform-origin\",\n    webkitTransformStyle: \"-webkit-transform-style\",\n    webkitTransition: \"-webkit-transition\",\n    webkitTransitionDelay: \"-webkit-transition-delay\",\n    webkitTransitionDuration: \"-webkit-transition-duration\",\n    webkitTransitionProperty: \"-webkit-transition-property\",\n    webkitTransitionTimingFunction: \"-webkit-transition-timing-function\",\n    webkitUserModify: \"-webkit-user-modify\",\n    webkitUserSelect: \"-webkit-user-select\",\n    webkitWritingMode: \"-webkit-writing-mode\",\n    whiteSpace: \"white-space\",\n    widows: \"widows\",\n    width: \"width\",\n    wordBreak: \"word-break\",\n    wordSpacing: \"word-spacing\",\n    wordWrap: \"word-wrap\",\n    writingMode: \"writing-mode\",\n    zIndex: \"z-index\",\n    zoom: \"zoom\",\n    resize: \"resize\",\n    userSelect: \"user-select\"\n};\nfor(var prop in cssProperties)defineStyleProperty(prop);\nfunction defineStyleProperty(jsname) {\n    var cssname = cssProperties[jsname];\n    Object.defineProperty(CSSStyleDeclaration.prototype, jsname, {\n        get: function() {\n            return this.getPropertyValue(cssname);\n        },\n        set: function(value) {\n            this.setProperty(cssname, value);\n        }\n    });\n    if (!CSSStyleDeclaration.prototype.hasOwnProperty(cssname)) {\n        Object.defineProperty(CSSStyleDeclaration.prototype, cssname, {\n            get: function() {\n                return this.getPropertyValue(cssname);\n            },\n            set: function(value) {\n                this.setProperty(cssname, value);\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/CSSStyleDeclaration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/CharacterData.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/CharacterData.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* jshint bitwise: false */ \nmodule.exports = CharacterData;\nvar Leaf = __webpack_require__(/*! ./Leaf */ \"(ssr)/./node_modules/@mathpix/domino/lib/Leaf.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar ChildNode = __webpack_require__(/*! ./ChildNode */ \"(ssr)/./node_modules/@mathpix/domino/lib/ChildNode.js\");\nvar NonDocumentTypeChildNode = __webpack_require__(/*! ./NonDocumentTypeChildNode */ \"(ssr)/./node_modules/@mathpix/domino/lib/NonDocumentTypeChildNode.js\");\nfunction CharacterData() {\n    Leaf.call(this);\n}\nCharacterData.prototype = Object.create(Leaf.prototype, {\n    // DOMString substringData(unsigned long offset,\n    //               unsigned long count);\n    // The substringData(offset, count) method must run these steps:\n    //\n    //     If offset is greater than the context object's\n    //     length, throw an INDEX_SIZE_ERR exception and\n    //     terminate these steps.\n    //\n    //     If offset+count is greater than the context\n    //     object's length, return a DOMString whose value is\n    //     the UTF-16 code units from the offsetth UTF-16 code\n    //     unit to the end of data.\n    //\n    //     Return a DOMString whose value is the UTF-16 code\n    //     units from the offsetth UTF-16 code unit to the\n    //     offset+countth UTF-16 code unit in data.\n    substringData: {\n        value: function substringData(offset, count) {\n            if (arguments.length < 2) {\n                throw new TypeError(\"Not enough arguments\");\n            }\n            // Convert arguments to WebIDL \"unsigned long\"\n            offset = offset >>> 0;\n            count = count >>> 0;\n            if (offset > this.data.length || offset < 0 || count < 0) {\n                utils.IndexSizeError();\n            }\n            return this.data.substring(offset, offset + count);\n        }\n    },\n    // void appendData(DOMString data);\n    // The appendData(data) method must append data to the context\n    // object's data.\n    appendData: {\n        value: function appendData(data) {\n            if (arguments.length < 1) {\n                throw new TypeError(\"Not enough arguments\");\n            }\n            this.data += String(data);\n        }\n    },\n    // void insertData(unsigned long offset, DOMString data);\n    // The insertData(offset, data) method must run these steps:\n    //\n    //     If offset is greater than the context object's\n    //     length, throw an INDEX_SIZE_ERR exception and\n    //     terminate these steps.\n    //\n    //     Insert data into the context object's data after\n    //     offset UTF-16 code units.\n    //\n    insertData: {\n        value: function insertData(offset, data) {\n            return this.replaceData(offset, 0, data);\n        }\n    },\n    // void deleteData(unsigned long offset, unsigned long count);\n    // The deleteData(offset, count) method must run these steps:\n    //\n    //     If offset is greater than the context object's\n    //     length, throw an INDEX_SIZE_ERR exception and\n    //     terminate these steps.\n    //\n    //     If offset+count is greater than the context\n    //     object's length var count be length-offset.\n    //\n    //     Starting from offset UTF-16 code units remove count\n    //     UTF-16 code units from the context object's data.\n    deleteData: {\n        value: function deleteData(offset, count) {\n            return this.replaceData(offset, count, \"\");\n        }\n    },\n    // void replaceData(unsigned long offset, unsigned long count,\n    //          DOMString data);\n    //\n    // The replaceData(offset, count, data) method must act as\n    // if the deleteData() method is invoked with offset and\n    // count as arguments followed by the insertData() method\n    // with offset and data as arguments and re-throw any\n    // exceptions these methods might have thrown.\n    replaceData: {\n        value: function replaceData(offset, count, data) {\n            var curtext = this.data, len = curtext.length;\n            // Convert arguments to correct WebIDL type\n            offset = offset >>> 0;\n            count = count >>> 0;\n            data = String(data);\n            if (offset > len || offset < 0) utils.IndexSizeError();\n            if (offset + count > len) count = len - offset;\n            var prefix = curtext.substring(0, offset), suffix = curtext.substring(offset + count);\n            this.data = prefix + data + suffix;\n        }\n    },\n    // Utility method that Node.isEqualNode() calls to test Text and\n    // Comment nodes for equality.  It is okay to put it here, since\n    // Node will have already verified that nodeType is equal\n    isEqual: {\n        value: function isEqual(n) {\n            return this._data === n._data;\n        }\n    },\n    length: {\n        get: function() {\n            return this.data.length;\n        }\n    }\n});\nObject.defineProperties(CharacterData.prototype, ChildNode);\nObject.defineProperties(CharacterData.prototype, NonDocumentTypeChildNode);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/CharacterData.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/ChildNode.js":
/*!*******************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/ChildNode.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar LinkedList = __webpack_require__(/*! ./LinkedList */ \"(ssr)/./node_modules/@mathpix/domino/lib/LinkedList.js\");\nvar createDocumentFragmentFromArguments = function(document, args) {\n    var docFrag = document.createDocumentFragment();\n    for(var i = 0; i < args.length; i++){\n        var argItem = args[i];\n        var isNode = argItem instanceof Node;\n        docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n    }\n    return docFrag;\n};\n// The ChildNode interface contains methods that are particular to `Node`\n// objects that can have a parent.  It is implemented by `Element`,\n// `DocumentType`, and `CharacterData` objects.\nvar ChildNode = {\n    // Inserts a set of Node or String objects in the children list of this\n    // ChildNode's parent, just after this ChildNode.  String objects are\n    // inserted as the equivalent Text nodes.\n    after: {\n        value: function after() {\n            var argArr = Array.prototype.slice.call(arguments);\n            var parentNode = this.parentNode, nextSibling = this.nextSibling;\n            if (parentNode === null) {\n                return;\n            }\n            // Find \"viable next sibling\"; that is, next one not in argArr\n            while(nextSibling && argArr.some(function(v) {\n                return v === nextSibling;\n            }))nextSibling = nextSibling.nextSibling;\n            // ok, parent and sibling are saved away since this node could itself\n            // appear in argArr and we're about to move argArr to a document fragment.\n            var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);\n            parentNode.insertBefore(docFrag, nextSibling);\n        }\n    },\n    // Inserts a set of Node or String objects in the children list of this\n    // ChildNode's parent, just before this ChildNode.  String objects are\n    // inserted as the equivalent Text nodes.\n    before: {\n        value: function before() {\n            var argArr = Array.prototype.slice.call(arguments);\n            var parentNode = this.parentNode, prevSibling = this.previousSibling;\n            if (parentNode === null) {\n                return;\n            }\n            // Find \"viable prev sibling\"; that is, prev one not in argArr\n            while(prevSibling && argArr.some(function(v) {\n                return v === prevSibling;\n            }))prevSibling = prevSibling.previousSibling;\n            // ok, parent and sibling are saved away since this node could itself\n            // appear in argArr and we're about to move argArr to a document fragment.\n            var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);\n            var nextSibling = prevSibling ? prevSibling.nextSibling : parentNode.firstChild;\n            parentNode.insertBefore(docFrag, nextSibling);\n        }\n    },\n    // Remove this node from its parent\n    remove: {\n        value: function remove() {\n            if (this.parentNode === null) return;\n            // Send mutation events if necessary\n            if (this.doc) {\n                this.doc._preremoveNodeIterators(this);\n                if (this.rooted) {\n                    this.doc.mutateRemove(this);\n                }\n            }\n            // Remove this node from its parents array of children\n            // and update the structure id for all ancestors\n            this._remove();\n            // Forget this node's parent\n            this.parentNode = null;\n        }\n    },\n    // Remove this node w/o uprooting or sending mutation events\n    // (But do update the structure id for all ancestors)\n    _remove: {\n        value: function _remove() {\n            var parent = this.parentNode;\n            if (parent === null) return;\n            if (parent._childNodes) {\n                parent._childNodes.splice(this.index, 1);\n            } else if (parent._firstChild === this) {\n                if (this._nextSibling === this) {\n                    parent._firstChild = null;\n                } else {\n                    parent._firstChild = this._nextSibling;\n                }\n            }\n            LinkedList.remove(this);\n            parent.modify();\n        }\n    },\n    // Replace this node with the nodes or strings provided as arguments.\n    replaceWith: {\n        value: function replaceWith() {\n            var argArr = Array.prototype.slice.call(arguments);\n            var parentNode = this.parentNode, nextSibling = this.nextSibling;\n            if (parentNode === null) {\n                return;\n            }\n            // Find \"viable next sibling\"; that is, next one not in argArr\n            while(nextSibling && argArr.some(function(v) {\n                return v === nextSibling;\n            }))nextSibling = nextSibling.nextSibling;\n            // ok, parent and sibling are saved away since this node could itself\n            // appear in argArr and we're about to move argArr to a document fragment.\n            var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);\n            if (this.parentNode === parentNode) {\n                parentNode.replaceChild(docFrag, this);\n            } else {\n                // `this` was inserted into docFrag\n                parentNode.insertBefore(docFrag, nextSibling);\n            }\n        }\n    }\n};\nmodule.exports = ChildNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/ChildNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/Comment.js":
/*!*****************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/Comment.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Comment;\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar CharacterData = __webpack_require__(/*! ./CharacterData */ \"(ssr)/./node_modules/@mathpix/domino/lib/CharacterData.js\");\nfunction Comment(doc, data) {\n    CharacterData.call(this);\n    this.nodeType = Node.COMMENT_NODE;\n    this.ownerDocument = doc;\n    this._data = data;\n}\nvar nodeValue = {\n    get: function() {\n        return this._data;\n    },\n    set: function(v) {\n        if (v === null || v === undefined) {\n            v = \"\";\n        } else {\n            v = String(v);\n        }\n        this._data = v;\n        if (this.rooted) this.ownerDocument.mutateValue(this);\n    }\n};\nComment.prototype = Object.create(CharacterData.prototype, {\n    nodeName: {\n        value: \"#comment\"\n    },\n    nodeValue: nodeValue,\n    textContent: nodeValue,\n    data: {\n        get: nodeValue.get,\n        set: function(v) {\n            nodeValue.set.call(this, v === null ? \"\" : String(v));\n        }\n    },\n    // Utility methods\n    clone: {\n        value: function clone() {\n            return new Comment(this.ownerDocument, this._data);\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Db21tZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUMsZ0JBQWdCRCxtQkFBT0EsQ0FBQztBQUU1QixTQUFTRixRQUFRSSxHQUFHLEVBQUVDLElBQUk7SUFDeEJGLGNBQWNHLElBQUksQ0FBQyxJQUFJO0lBQ3ZCLElBQUksQ0FBQ0MsUUFBUSxHQUFHTixLQUFLTyxZQUFZO0lBQ2pDLElBQUksQ0FBQ0MsYUFBYSxHQUFHTDtJQUNyQixJQUFJLENBQUNNLEtBQUssR0FBR0w7QUFDZjtBQUVBLElBQUlNLFlBQVk7SUFDZEMsS0FBSztRQUFhLE9BQU8sSUFBSSxDQUFDRixLQUFLO0lBQUU7SUFDckNHLEtBQUssU0FBU0MsQ0FBQztRQUNiLElBQUlBLE1BQU0sUUFBUUEsTUFBTUMsV0FBVztZQUFFRCxJQUFJO1FBQUksT0FBTztZQUFFQSxJQUFJRSxPQUFPRjtRQUFJO1FBQ3JFLElBQUksQ0FBQ0osS0FBSyxHQUFHSTtRQUNiLElBQUksSUFBSSxDQUFDRyxNQUFNLEVBQ2IsSUFBSSxDQUFDUixhQUFhLENBQUNTLFdBQVcsQ0FBQyxJQUFJO0lBQ3ZDO0FBQ0Y7QUFFQWxCLFFBQVFtQixTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ2xCLGNBQWNnQixTQUFTLEVBQUU7SUFDekRHLFVBQVU7UUFBRUMsT0FBTztJQUFXO0lBQzlCWixXQUFXQTtJQUNYYSxhQUFhYjtJQUNiTixNQUFNO1FBQ0pPLEtBQUtELFVBQVVDLEdBQUc7UUFDbEJDLEtBQUssU0FBU0MsQ0FBQztZQUNiSCxVQUFVRSxHQUFHLENBQUNQLElBQUksQ0FBQyxJQUFJLEVBQUVRLE1BQUksT0FBTyxLQUFLRSxPQUFPRjtRQUNsRDtJQUNGO0lBRUEsa0JBQWtCO0lBQ2xCVyxPQUFPO1FBQUVGLE9BQU8sU0FBU0U7WUFDdkIsT0FBTyxJQUFJekIsUUFBUSxJQUFJLENBQUNTLGFBQWEsRUFBRSxJQUFJLENBQUNDLEtBQUs7UUFDbkQ7SUFBQztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BtYXRocGl4L2RvbWluby9saWIvQ29tbWVudC5qcz81MDJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBDb21tZW50O1xuXG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpO1xudmFyIENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3RlckRhdGEnKTtcblxuZnVuY3Rpb24gQ29tbWVudChkb2MsIGRhdGEpIHtcbiAgQ2hhcmFjdGVyRGF0YS5jYWxsKHRoaXMpO1xuICB0aGlzLm5vZGVUeXBlID0gTm9kZS5DT01NRU5UX05PREU7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IGRvYztcbiAgdGhpcy5fZGF0YSA9IGRhdGE7XG59XG5cbnZhciBub2RlVmFsdWUgPSB7XG4gIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9kYXRhOyB9LFxuICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQpIHsgdiA9ICcnOyB9IGVsc2UgeyB2ID0gU3RyaW5nKHYpOyB9XG4gICAgdGhpcy5fZGF0YSA9IHY7XG4gICAgaWYgKHRoaXMucm9vdGVkKVxuICAgICAgdGhpcy5vd25lckRvY3VtZW50Lm11dGF0ZVZhbHVlKHRoaXMpO1xuICB9XG59O1xuXG5Db21tZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUsIHtcbiAgbm9kZU5hbWU6IHsgdmFsdWU6ICcjY29tbWVudCcgfSxcbiAgbm9kZVZhbHVlOiBub2RlVmFsdWUsXG4gIHRleHRDb250ZW50OiBub2RlVmFsdWUsXG4gIGRhdGE6IHtcbiAgICBnZXQ6IG5vZGVWYWx1ZS5nZXQsXG4gICAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgICBub2RlVmFsdWUuc2V0LmNhbGwodGhpcywgdj09PW51bGwgPyAnJyA6IFN0cmluZyh2KSk7XG4gICAgfSxcbiAgfSxcblxuICAvLyBVdGlsaXR5IG1ldGhvZHNcbiAgY2xvbmU6IHsgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgQ29tbWVudCh0aGlzLm93bmVyRG9jdW1lbnQsIHRoaXMuX2RhdGEpO1xuICB9fSxcbn0pO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJDb21tZW50IiwiTm9kZSIsInJlcXVpcmUiLCJDaGFyYWN0ZXJEYXRhIiwiZG9jIiwiZGF0YSIsImNhbGwiLCJub2RlVHlwZSIsIkNPTU1FTlRfTk9ERSIsIm93bmVyRG9jdW1lbnQiLCJfZGF0YSIsIm5vZGVWYWx1ZSIsImdldCIsInNldCIsInYiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJyb290ZWQiLCJtdXRhdGVWYWx1ZSIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIm5vZGVOYW1lIiwidmFsdWUiLCJ0ZXh0Q29udGVudCIsImNsb25lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/Comment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/ContainerNode.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/ContainerNode.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = ContainerNode;\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar NodeList = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeList.js\");\n// This class defines common functionality for node subtypes that\n// can have children\nfunction ContainerNode() {\n    Node.call(this);\n    this._firstChild = this._childNodes = null;\n}\n// Primary representation is a circular linked list of siblings\nContainerNode.prototype = Object.create(Node.prototype, {\n    hasChildNodes: {\n        value: function() {\n            if (this._childNodes) {\n                return this._childNodes.length > 0;\n            }\n            return this._firstChild !== null;\n        }\n    },\n    childNodes: {\n        get: function() {\n            this._ensureChildNodes();\n            return this._childNodes;\n        }\n    },\n    firstChild: {\n        get: function() {\n            if (this._childNodes) {\n                return this._childNodes.length === 0 ? null : this._childNodes[0];\n            }\n            return this._firstChild;\n        }\n    },\n    lastChild: {\n        get: function() {\n            var kids = this._childNodes, first;\n            if (kids) {\n                return kids.length === 0 ? null : kids[kids.length - 1];\n            }\n            first = this._firstChild;\n            if (first === null) {\n                return null;\n            }\n            return first._previousSibling; // circular linked list\n        }\n    },\n    _ensureChildNodes: {\n        value: function() {\n            if (this._childNodes) {\n                return;\n            }\n            var first = this._firstChild, kid = first, childNodes = this._childNodes = new NodeList();\n            if (first) do {\n                childNodes.push(kid);\n                kid = kid._nextSibling;\n            }while (kid !== first); // circular linked list\n            this._firstChild = null; // free memory\n        }\n    },\n    // Remove all of this node's children.  This is a minor\n    // optimization that only calls modify() once.\n    removeChildren: {\n        value: function removeChildren() {\n            var root = this.rooted ? this.ownerDocument : null, next = this.firstChild, kid;\n            while(next !== null){\n                kid = next;\n                next = kid.nextSibling;\n                if (root) root.mutateRemove(kid);\n                kid.parentNode = null;\n            }\n            if (this._childNodes) {\n                this._childNodes.length = 0;\n            } else {\n                this._firstChild = null;\n            }\n            this.modify(); // Update last modified type once only\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Db250YWluZXJOb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUM7QUFFdkIsaUVBQWlFO0FBQ2pFLG9CQUFvQjtBQUVwQixTQUFTRjtJQUNQQyxLQUFLRyxJQUFJLENBQUMsSUFBSTtJQUNkLElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUksQ0FBQ0MsV0FBVyxHQUFHO0FBQ3hDO0FBRUEsK0RBQStEO0FBQy9ETixjQUFjTyxTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ1IsS0FBS00sU0FBUyxFQUFFO0lBRXRERyxlQUFlO1FBQUVDLE9BQU87WUFDdEIsSUFBSSxJQUFJLENBQUNMLFdBQVcsRUFBRTtnQkFDcEIsT0FBTyxJQUFJLENBQUNBLFdBQVcsQ0FBQ00sTUFBTSxHQUFHO1lBQ25DO1lBQ0EsT0FBTyxJQUFJLENBQUNQLFdBQVcsS0FBSztRQUM5QjtJQUFDO0lBRURRLFlBQVk7UUFBRUMsS0FBSztZQUNqQixJQUFJLENBQUNDLGlCQUFpQjtZQUN0QixPQUFPLElBQUksQ0FBQ1QsV0FBVztRQUN6QjtJQUFDO0lBRURVLFlBQVk7UUFBRUYsS0FBSztZQUNqQixJQUFJLElBQUksQ0FBQ1IsV0FBVyxFQUFFO2dCQUNwQixPQUFPLElBQUksQ0FBQ0EsV0FBVyxDQUFDTSxNQUFNLEtBQUssSUFBSSxPQUFPLElBQUksQ0FBQ04sV0FBVyxDQUFDLEVBQUU7WUFDbkU7WUFDQSxPQUFPLElBQUksQ0FBQ0QsV0FBVztRQUN6QjtJQUFDO0lBRURZLFdBQVc7UUFBRUgsS0FBSztZQUNoQixJQUFJSSxPQUFPLElBQUksQ0FBQ1osV0FBVyxFQUFFYTtZQUM3QixJQUFJRCxNQUFNO2dCQUNSLE9BQU9BLEtBQUtOLE1BQU0sS0FBSyxJQUFJLE9BQU1NLElBQUksQ0FBQ0EsS0FBS04sTUFBTSxHQUFDLEVBQUU7WUFDdEQ7WUFDQU8sUUFBUSxJQUFJLENBQUNkLFdBQVc7WUFDeEIsSUFBSWMsVUFBVSxNQUFNO2dCQUFFLE9BQU87WUFBTTtZQUNuQyxPQUFPQSxNQUFNQyxnQkFBZ0IsRUFBRSx1QkFBdUI7UUFDeEQ7SUFBQztJQUVETCxtQkFBbUI7UUFBRUosT0FBTztZQUMxQixJQUFJLElBQUksQ0FBQ0wsV0FBVyxFQUFFO2dCQUFFO1lBQVE7WUFDaEMsSUFBSWEsUUFBUSxJQUFJLENBQUNkLFdBQVcsRUFDeEJnQixNQUFNRixPQUNOTixhQUFhLElBQUksQ0FBQ1AsV0FBVyxHQUFHLElBQUlIO1lBQ3hDLElBQUlnQixPQUFPLEdBQUc7Z0JBQ1pOLFdBQVdTLElBQUksQ0FBQ0Q7Z0JBQ2hCQSxNQUFNQSxJQUFJRSxZQUFZO1lBQ3hCLFFBQVNGLFFBQVFGLE9BQU8sQ0FBQyx1QkFBdUI7WUFDaEQsSUFBSSxDQUFDZCxXQUFXLEdBQUcsTUFBTSxjQUFjO1FBQ3pDO0lBQUM7SUFFRCx1REFBdUQ7SUFDdkQsOENBQThDO0lBQzlDbUIsZ0JBQWdCO1FBQUViLE9BQU8sU0FBU2E7WUFDaEMsSUFBSUMsT0FBTyxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJLENBQUNDLGFBQWEsR0FBRyxNQUMxQ0MsT0FBTyxJQUFJLENBQUNaLFVBQVUsRUFDdEJLO1lBQ0osTUFBT08sU0FBUyxLQUFNO2dCQUNwQlAsTUFBTU87Z0JBQ05BLE9BQU9QLElBQUlRLFdBQVc7Z0JBRXRCLElBQUlKLE1BQU1BLEtBQUtLLFlBQVksQ0FBQ1Q7Z0JBQzVCQSxJQUFJVSxVQUFVLEdBQUc7WUFDbkI7WUFDQSxJQUFJLElBQUksQ0FBQ3pCLFdBQVcsRUFBRTtnQkFDcEIsSUFBSSxDQUFDQSxXQUFXLENBQUNNLE1BQU0sR0FBRztZQUM1QixPQUFPO2dCQUNMLElBQUksQ0FBQ1AsV0FBVyxHQUFHO1lBQ3JCO1lBQ0EsSUFBSSxDQUFDMkIsTUFBTSxJQUFJLHNDQUFzQztRQUN2RDtJQUFDO0FBRUgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Db250YWluZXJOb2RlLmpzPzE1NTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IENvbnRhaW5lck5vZGU7XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XG52YXIgTm9kZUxpc3QgPSByZXF1aXJlKCcuL05vZGVMaXN0Jyk7XG5cbi8vIFRoaXMgY2xhc3MgZGVmaW5lcyBjb21tb24gZnVuY3Rpb25hbGl0eSBmb3Igbm9kZSBzdWJ0eXBlcyB0aGF0XG4vLyBjYW4gaGF2ZSBjaGlsZHJlblxuXG5mdW5jdGlvbiBDb250YWluZXJOb2RlKCkge1xuICBOb2RlLmNhbGwodGhpcyk7XG4gIHRoaXMuX2ZpcnN0Q2hpbGQgPSB0aGlzLl9jaGlsZE5vZGVzID0gbnVsbDtcbn1cblxuLy8gUHJpbWFyeSByZXByZXNlbnRhdGlvbiBpcyBhIGNpcmN1bGFyIGxpbmtlZCBsaXN0IG9mIHNpYmxpbmdzXG5Db250YWluZXJOb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTm9kZS5wcm90b3R5cGUsIHtcblxuICBoYXNDaGlsZE5vZGVzOiB7IHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2hpbGROb2Rlcykge1xuICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkTm9kZXMubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2ZpcnN0Q2hpbGQgIT09IG51bGw7XG4gIH19LFxuXG4gIGNoaWxkTm9kZXM6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9lbnN1cmVDaGlsZE5vZGVzKCk7XG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkTm9kZXM7XG4gIH19LFxuXG4gIGZpcnN0Q2hpbGQ6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2hpbGROb2Rlcykge1xuICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkTm9kZXMubGVuZ3RoID09PSAwID8gbnVsbCA6IHRoaXMuX2NoaWxkTm9kZXNbMF07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9maXJzdENoaWxkO1xuICB9fSxcblxuICBsYXN0Q2hpbGQ6IHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2lkcyA9IHRoaXMuX2NoaWxkTm9kZXMsIGZpcnN0O1xuICAgIGlmIChraWRzKSB7XG4gICAgICByZXR1cm4ga2lkcy5sZW5ndGggPT09IDAgPyBudWxsOiBraWRzW2tpZHMubGVuZ3RoLTFdO1xuICAgIH1cbiAgICBmaXJzdCA9IHRoaXMuX2ZpcnN0Q2hpbGQ7XG4gICAgaWYgKGZpcnN0ID09PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG4gICAgcmV0dXJuIGZpcnN0Ll9wcmV2aW91c1NpYmxpbmc7IC8vIGNpcmN1bGFyIGxpbmtlZCBsaXN0XG4gIH19LFxuXG4gIF9lbnN1cmVDaGlsZE5vZGVzOiB7IHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2hpbGROb2RlcykgeyByZXR1cm47IH1cbiAgICB2YXIgZmlyc3QgPSB0aGlzLl9maXJzdENoaWxkLFxuICAgICAgICBraWQgPSBmaXJzdCxcbiAgICAgICAgY2hpbGROb2RlcyA9IHRoaXMuX2NoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcbiAgICBpZiAoZmlyc3QpIGRvIHtcbiAgICAgIGNoaWxkTm9kZXMucHVzaChraWQpO1xuICAgICAga2lkID0ga2lkLl9uZXh0U2libGluZztcbiAgICB9IHdoaWxlIChraWQgIT09IGZpcnN0KTsgLy8gY2lyY3VsYXIgbGlua2VkIGxpc3RcbiAgICB0aGlzLl9maXJzdENoaWxkID0gbnVsbDsgLy8gZnJlZSBtZW1vcnlcbiAgfX0sXG5cbiAgLy8gUmVtb3ZlIGFsbCBvZiB0aGlzIG5vZGUncyBjaGlsZHJlbi4gIFRoaXMgaXMgYSBtaW5vclxuICAvLyBvcHRpbWl6YXRpb24gdGhhdCBvbmx5IGNhbGxzIG1vZGlmeSgpIG9uY2UuXG4gIHJlbW92ZUNoaWxkcmVuOiB7IHZhbHVlOiBmdW5jdGlvbiByZW1vdmVDaGlsZHJlbigpIHtcbiAgICB2YXIgcm9vdCA9IHRoaXMucm9vdGVkID8gdGhpcy5vd25lckRvY3VtZW50IDogbnVsbCxcbiAgICAgICAgbmV4dCA9IHRoaXMuZmlyc3RDaGlsZCxcbiAgICAgICAga2lkO1xuICAgIHdoaWxlIChuZXh0ICE9PSBudWxsKSB7XG4gICAgICBraWQgPSBuZXh0O1xuICAgICAgbmV4dCA9IGtpZC5uZXh0U2libGluZztcblxuICAgICAgaWYgKHJvb3QpIHJvb3QubXV0YXRlUmVtb3ZlKGtpZCk7XG4gICAgICBraWQucGFyZW50Tm9kZSA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLl9jaGlsZE5vZGVzKSB7XG4gICAgICB0aGlzLl9jaGlsZE5vZGVzLmxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZpcnN0Q2hpbGQgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLm1vZGlmeSgpOyAvLyBVcGRhdGUgbGFzdCBtb2RpZmllZCB0eXBlIG9uY2Ugb25seVxuICB9fSxcblxufSk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkNvbnRhaW5lck5vZGUiLCJOb2RlIiwicmVxdWlyZSIsIk5vZGVMaXN0IiwiY2FsbCIsIl9maXJzdENoaWxkIiwiX2NoaWxkTm9kZXMiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJoYXNDaGlsZE5vZGVzIiwidmFsdWUiLCJsZW5ndGgiLCJjaGlsZE5vZGVzIiwiZ2V0IiwiX2Vuc3VyZUNoaWxkTm9kZXMiLCJmaXJzdENoaWxkIiwibGFzdENoaWxkIiwia2lkcyIsImZpcnN0IiwiX3ByZXZpb3VzU2libGluZyIsImtpZCIsInB1c2giLCJfbmV4dFNpYmxpbmciLCJyZW1vdmVDaGlsZHJlbiIsInJvb3QiLCJyb290ZWQiLCJvd25lckRvY3VtZW50IiwibmV4dCIsIm5leHRTaWJsaW5nIiwibXV0YXRlUmVtb3ZlIiwicGFyZW50Tm9kZSIsIm1vZGlmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/ContainerNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/CustomEvent.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/CustomEvent.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = CustomEvent;\nvar Event = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/@mathpix/domino/lib/Event.js\");\nfunction CustomEvent(type, dictionary) {\n    // Just use the superclass constructor to initialize\n    Event.call(this, type, dictionary);\n}\nCustomEvent.prototype = Object.create(Event.prototype, {\n    constructor: {\n        value: CustomEvent\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9DdXN0b21FdmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLFNBQVNGLFlBQVlHLElBQUksRUFBRUMsVUFBVTtJQUNuQyxvREFBb0Q7SUFDcERILE1BQU1JLElBQUksQ0FBQyxJQUFJLEVBQUVGLE1BQU1DO0FBQ3pCO0FBQ0FKLFlBQVlNLFNBQVMsR0FBR0MsT0FBT0MsTUFBTSxDQUFDUCxNQUFNSyxTQUFTLEVBQUU7SUFDckRHLGFBQWE7UUFBRUMsT0FBT1Y7SUFBWTtBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbWF0aHBpeC9kb21pbm8vbGliL0N1c3RvbUV2ZW50LmpzPzQ0NWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEN1c3RvbUV2ZW50O1xuXG52YXIgRXZlbnQgPSByZXF1aXJlKCcuL0V2ZW50Jyk7XG5cbmZ1bmN0aW9uIEN1c3RvbUV2ZW50KHR5cGUsIGRpY3Rpb25hcnkpIHtcbiAgLy8gSnVzdCB1c2UgdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IgdG8gaW5pdGlhbGl6ZVxuICBFdmVudC5jYWxsKHRoaXMsIHR5cGUsIGRpY3Rpb25hcnkpO1xufVxuQ3VzdG9tRXZlbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFdmVudC5wcm90b3R5cGUsIHtcbiAgY29uc3RydWN0b3I6IHsgdmFsdWU6IEN1c3RvbUV2ZW50IH1cbn0pO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJDdXN0b21FdmVudCIsIkV2ZW50IiwicmVxdWlyZSIsInR5cGUiLCJkaWN0aW9uYXJ5IiwiY2FsbCIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/CustomEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/DOMException.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/DOMException.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = DOMException;\nvar INDEX_SIZE_ERR = 1;\nvar HIERARCHY_REQUEST_ERR = 3;\nvar WRONG_DOCUMENT_ERR = 4;\nvar INVALID_CHARACTER_ERR = 5;\nvar NO_MODIFICATION_ALLOWED_ERR = 7;\nvar NOT_FOUND_ERR = 8;\nvar NOT_SUPPORTED_ERR = 9;\nvar INVALID_STATE_ERR = 11;\nvar SYNTAX_ERR = 12;\nvar INVALID_MODIFICATION_ERR = 13;\nvar NAMESPACE_ERR = 14;\nvar INVALID_ACCESS_ERR = 15;\nvar TYPE_MISMATCH_ERR = 17;\nvar SECURITY_ERR = 18;\nvar NETWORK_ERR = 19;\nvar ABORT_ERR = 20;\nvar URL_MISMATCH_ERR = 21;\nvar QUOTA_EXCEEDED_ERR = 22;\nvar TIMEOUT_ERR = 23;\nvar INVALID_NODE_TYPE_ERR = 24;\nvar DATA_CLONE_ERR = 25;\n// Code to name\nvar names = [\n    null,\n    \"INDEX_SIZE_ERR\",\n    null,\n    \"HIERARCHY_REQUEST_ERR\",\n    \"WRONG_DOCUMENT_ERR\",\n    \"INVALID_CHARACTER_ERR\",\n    null,\n    \"NO_MODIFICATION_ALLOWED_ERR\",\n    \"NOT_FOUND_ERR\",\n    \"NOT_SUPPORTED_ERR\",\n    \"INUSE_ATTRIBUTE_ERR\",\n    \"INVALID_STATE_ERR\",\n    \"SYNTAX_ERR\",\n    \"INVALID_MODIFICATION_ERR\",\n    \"NAMESPACE_ERR\",\n    \"INVALID_ACCESS_ERR\",\n    null,\n    \"TYPE_MISMATCH_ERR\",\n    \"SECURITY_ERR\",\n    \"NETWORK_ERR\",\n    \"ABORT_ERR\",\n    \"URL_MISMATCH_ERR\",\n    \"QUOTA_EXCEEDED_ERR\",\n    \"TIMEOUT_ERR\",\n    \"INVALID_NODE_TYPE_ERR\",\n    \"DATA_CLONE_ERR\"\n];\n// Code to message\n// These strings are from the 13 May 2011 Editor's Draft of DOM Core.\n// http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html\n// Copyright © 2011 W3C® (MIT, ERCIM, Keio), All Rights Reserved.\n// Used under the terms of the W3C Document License:\n// http://www.w3.org/Consortium/Legal/2002/copyright-documents-20021231\nvar messages = [\n    null,\n    \"INDEX_SIZE_ERR (1): the index is not in the allowed range\",\n    null,\n    \"HIERARCHY_REQUEST_ERR (3): the operation would yield an incorrect nodes model\",\n    \"WRONG_DOCUMENT_ERR (4): the object is in the wrong Document, a call to importNode is required\",\n    \"INVALID_CHARACTER_ERR (5): the string contains invalid characters\",\n    null,\n    \"NO_MODIFICATION_ALLOWED_ERR (7): the object can not be modified\",\n    \"NOT_FOUND_ERR (8): the object can not be found here\",\n    \"NOT_SUPPORTED_ERR (9): this operation is not supported\",\n    \"INUSE_ATTRIBUTE_ERR (10): setAttributeNode called on owned Attribute\",\n    \"INVALID_STATE_ERR (11): the object is in an invalid state\",\n    \"SYNTAX_ERR (12): the string did not match the expected pattern\",\n    \"INVALID_MODIFICATION_ERR (13): the object can not be modified in this way\",\n    \"NAMESPACE_ERR (14): the operation is not allowed by Namespaces in XML\",\n    \"INVALID_ACCESS_ERR (15): the object does not support the operation or argument\",\n    null,\n    \"TYPE_MISMATCH_ERR (17): the type of the object does not match the expected type\",\n    \"SECURITY_ERR (18): the operation is insecure\",\n    \"NETWORK_ERR (19): a network error occurred\",\n    \"ABORT_ERR (20): the user aborted an operation\",\n    \"URL_MISMATCH_ERR (21): the given URL does not match another URL\",\n    \"QUOTA_EXCEEDED_ERR (22): the quota has been exceeded\",\n    \"TIMEOUT_ERR (23): a timeout occurred\",\n    \"INVALID_NODE_TYPE_ERR (24): the supplied node is invalid or has an invalid ancestor for this operation\",\n    \"DATA_CLONE_ERR (25): the object can not be cloned.\"\n];\n// Name to code\nvar constants = {\n    INDEX_SIZE_ERR: INDEX_SIZE_ERR,\n    DOMSTRING_SIZE_ERR: 2,\n    HIERARCHY_REQUEST_ERR: HIERARCHY_REQUEST_ERR,\n    WRONG_DOCUMENT_ERR: WRONG_DOCUMENT_ERR,\n    INVALID_CHARACTER_ERR: INVALID_CHARACTER_ERR,\n    NO_DATA_ALLOWED_ERR: 6,\n    NO_MODIFICATION_ALLOWED_ERR: NO_MODIFICATION_ALLOWED_ERR,\n    NOT_FOUND_ERR: NOT_FOUND_ERR,\n    NOT_SUPPORTED_ERR: NOT_SUPPORTED_ERR,\n    INUSE_ATTRIBUTE_ERR: 10,\n    INVALID_STATE_ERR: INVALID_STATE_ERR,\n    SYNTAX_ERR: SYNTAX_ERR,\n    INVALID_MODIFICATION_ERR: INVALID_MODIFICATION_ERR,\n    NAMESPACE_ERR: NAMESPACE_ERR,\n    INVALID_ACCESS_ERR: INVALID_ACCESS_ERR,\n    VALIDATION_ERR: 16,\n    TYPE_MISMATCH_ERR: TYPE_MISMATCH_ERR,\n    SECURITY_ERR: SECURITY_ERR,\n    NETWORK_ERR: NETWORK_ERR,\n    ABORT_ERR: ABORT_ERR,\n    URL_MISMATCH_ERR: URL_MISMATCH_ERR,\n    QUOTA_EXCEEDED_ERR: QUOTA_EXCEEDED_ERR,\n    TIMEOUT_ERR: TIMEOUT_ERR,\n    INVALID_NODE_TYPE_ERR: INVALID_NODE_TYPE_ERR,\n    DATA_CLONE_ERR: DATA_CLONE_ERR\n};\nfunction DOMException(code) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.code = code;\n    this.message = messages[code];\n    this.name = names[code];\n}\nDOMException.prototype.__proto__ = Error.prototype;\n// Initialize the constants on DOMException and DOMException.prototype\nfor(var c in constants){\n    var v = {\n        value: constants[c]\n    };\n    Object.defineProperty(DOMException, c, v);\n    Object.defineProperty(DOMException.prototype, c, v);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/DOMException.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/DOMImplementation.js":
/*!***************************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/DOMImplementation.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = DOMImplementation;\nvar Document = __webpack_require__(/*! ./Document */ \"(ssr)/./node_modules/@mathpix/domino/lib/Document.js\");\nvar DocumentType = __webpack_require__(/*! ./DocumentType */ \"(ssr)/./node_modules/@mathpix/domino/lib/DocumentType.js\");\nvar HTMLParser = __webpack_require__(/*! ./HTMLParser */ \"(ssr)/./node_modules/@mathpix/domino/lib/HTMLParser.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar xml = __webpack_require__(/*! ./xmlnames */ \"(ssr)/./node_modules/@mathpix/domino/lib/xmlnames.js\");\n// Each document must have its own instance of the domimplementation object\nfunction DOMImplementation(contextObject) {\n    this.contextObject = contextObject;\n}\n// Feature/version pairs that DOMImplementation.hasFeature() returns\n// true for.  It returns false for anything else.\nvar supportedFeatures = {\n    \"xml\": {\n        \"\": true,\n        \"1.0\": true,\n        \"2.0\": true\n    },\n    \"core\": {\n        \"\": true,\n        \"2.0\": true\n    },\n    \"html\": {\n        \"\": true,\n        \"1.0\": true,\n        \"2.0\": true\n    },\n    \"xhtml\": {\n        \"\": true,\n        \"1.0\": true,\n        \"2.0\": true\n    }\n};\nDOMImplementation.prototype = {\n    hasFeature: function hasFeature(feature, version) {\n        var f = supportedFeatures[(feature || \"\").toLowerCase()];\n        return f && f[version || \"\"] || false;\n    },\n    createDocumentType: function createDocumentType(qualifiedName, publicId, systemId) {\n        if (!xml.isValidQName(qualifiedName)) utils.InvalidCharacterError();\n        return new DocumentType(this.contextObject, qualifiedName, publicId, systemId);\n    },\n    createDocument: function createDocument(namespace, qualifiedName, doctype) {\n        //\n        // Note that the current DOMCore spec makes it impossible to\n        // create an HTML document with this function, even if the\n        // namespace and doctype are propertly set.  See this thread:\n        // http://lists.w3.org/Archives/Public/www-dom/2011AprJun/0132.html\n        //\n        var d = new Document(false, null);\n        var e;\n        if (qualifiedName) e = d.createElementNS(namespace, qualifiedName);\n        else e = null;\n        if (doctype) {\n            d.appendChild(doctype);\n        }\n        if (e) d.appendChild(e);\n        if (namespace === utils.NAMESPACE.HTML) {\n            d._contentType = \"application/xhtml+xml\";\n        } else if (namespace === utils.NAMESPACE.SVG) {\n            d._contentType = \"image/svg+xml\";\n        } else {\n            d._contentType = \"application/xml\";\n        }\n        return d;\n    },\n    createHTMLDocument: function createHTMLDocument(titleText) {\n        var d = new Document(true, null);\n        d.appendChild(new DocumentType(d, \"html\"));\n        var html = d.createElement(\"html\");\n        d.appendChild(html);\n        var head = d.createElement(\"head\");\n        html.appendChild(head);\n        if (titleText !== undefined) {\n            var title = d.createElement(\"title\");\n            head.appendChild(title);\n            title.appendChild(d.createTextNode(titleText));\n        }\n        html.appendChild(d.createElement(\"body\"));\n        d.modclock = 1; // Start tracking modifications\n        return d;\n    },\n    mozSetOutputMutationHandler: function(doc, handler) {\n        doc.mutationHandler = handler;\n    },\n    mozGetInputMutationHandler: function(doc) {\n        utils.nyi();\n    },\n    mozHTMLParser: HTMLParser\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9ET01JbXBsZW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFdBQVdDLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDO0FBQzNCLElBQUlFLGFBQWFGLG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlHLFFBQVFILG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlJLE1BQU1KLG1CQUFPQSxDQUFDO0FBRWxCLDJFQUEyRTtBQUMzRSxTQUFTRixrQkFBa0JPLGFBQWE7SUFDdEMsSUFBSSxDQUFDQSxhQUFhLEdBQUdBO0FBQ3ZCO0FBR0Esb0VBQW9FO0FBQ3BFLGlEQUFpRDtBQUNqRCxJQUFJQyxvQkFBb0I7SUFDdEIsT0FBTztRQUFFLElBQUk7UUFBTSxPQUFPO1FBQU0sT0FBTztJQUFLO0lBQzVDLFFBQVE7UUFBRSxJQUFJO1FBQU0sT0FBTztJQUFLO0lBQ2hDLFFBQVE7UUFBRSxJQUFJO1FBQU0sT0FBTztRQUFNLE9BQU87SUFBSTtJQUM1QyxTQUFTO1FBQUUsSUFBSTtRQUFNLE9BQU87UUFBTSxPQUFPO0lBQUk7QUFDL0M7QUFFQVIsa0JBQWtCUyxTQUFTLEdBQUc7SUFDNUJDLFlBQVksU0FBU0EsV0FBV0MsT0FBTyxFQUFFQyxPQUFPO1FBQzlDLElBQUlDLElBQUlMLGlCQUFpQixDQUFDLENBQUNHLFdBQVcsRUFBQyxFQUFHRyxXQUFXLEdBQUc7UUFDeEQsT0FBTyxLQUFNRCxDQUFDLENBQUNELFdBQVcsR0FBRyxJQUFLO0lBQ3BDO0lBRUFHLG9CQUFvQixTQUFTQSxtQkFBbUJDLGFBQWEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRO1FBQy9FLElBQUksQ0FBQ1osSUFBSWEsWUFBWSxDQUFDSCxnQkFBZ0JYLE1BQU1lLHFCQUFxQjtRQUVqRSxPQUFPLElBQUlqQixhQUFhLElBQUksQ0FBQ0ksYUFBYSxFQUFFUyxlQUFlQyxVQUFVQztJQUN2RTtJQUVBRyxnQkFBZ0IsU0FBU0EsZUFBZUMsU0FBUyxFQUFFTixhQUFhLEVBQUVPLE9BQU87UUFDdkUsRUFBRTtRQUNGLDREQUE0RDtRQUM1RCwwREFBMEQ7UUFDMUQsNkRBQTZEO1FBQzdELG1FQUFtRTtRQUNuRSxFQUFFO1FBQ0YsSUFBSUMsSUFBSSxJQUFJdkIsU0FBUyxPQUFPO1FBQzVCLElBQUl3QjtRQUVKLElBQUlULGVBQ0ZTLElBQUlELEVBQUVFLGVBQWUsQ0FBQ0osV0FBV047YUFFakNTLElBQUk7UUFFTixJQUFJRixTQUFTO1lBQ1hDLEVBQUVHLFdBQVcsQ0FBQ0o7UUFDaEI7UUFFQSxJQUFJRSxHQUFHRCxFQUFFRyxXQUFXLENBQUNGO1FBQ3JCLElBQUlILGNBQWNqQixNQUFNdUIsU0FBUyxDQUFDQyxJQUFJLEVBQUU7WUFDdENMLEVBQUVNLFlBQVksR0FBRztRQUNuQixPQUFPLElBQUlSLGNBQWNqQixNQUFNdUIsU0FBUyxDQUFDRyxHQUFHLEVBQUU7WUFDNUNQLEVBQUVNLFlBQVksR0FBRztRQUNuQixPQUFPO1lBQ0xOLEVBQUVNLFlBQVksR0FBRztRQUNuQjtRQUVBLE9BQU9OO0lBQ1Q7SUFFQVEsb0JBQW9CLFNBQVNBLG1CQUFtQkMsU0FBUztRQUN2RCxJQUFJVCxJQUFJLElBQUl2QixTQUFTLE1BQU07UUFDM0J1QixFQUFFRyxXQUFXLENBQUMsSUFBSXhCLGFBQWFxQixHQUFHO1FBQ2xDLElBQUlVLE9BQU9WLEVBQUVXLGFBQWEsQ0FBQztRQUMzQlgsRUFBRUcsV0FBVyxDQUFDTztRQUNkLElBQUlFLE9BQU9aLEVBQUVXLGFBQWEsQ0FBQztRQUMzQkQsS0FBS1AsV0FBVyxDQUFDUztRQUNqQixJQUFJSCxjQUFjSSxXQUFXO1lBQzNCLElBQUlDLFFBQVFkLEVBQUVXLGFBQWEsQ0FBQztZQUM1QkMsS0FBS1QsV0FBVyxDQUFDVztZQUNqQkEsTUFBTVgsV0FBVyxDQUFDSCxFQUFFZSxjQUFjLENBQUNOO1FBQ3JDO1FBQ0FDLEtBQUtQLFdBQVcsQ0FBQ0gsRUFBRVcsYUFBYSxDQUFDO1FBQ2pDWCxFQUFFZ0IsUUFBUSxHQUFHLEdBQUcsK0JBQStCO1FBQy9DLE9BQU9oQjtJQUNUO0lBRUFpQiw2QkFBNkIsU0FBU0MsR0FBRyxFQUFFQyxPQUFPO1FBQ2hERCxJQUFJRSxlQUFlLEdBQUdEO0lBQ3hCO0lBRUFFLDRCQUE0QixTQUFTSCxHQUFHO1FBQ3RDckMsTUFBTXlDLEdBQUc7SUFDWDtJQUVBQyxlQUFlM0M7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9ET01JbXBsZW1lbnRhdGlvbi5qcz9mOTI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBET01JbXBsZW1lbnRhdGlvbjtcblxudmFyIERvY3VtZW50ID0gcmVxdWlyZSgnLi9Eb2N1bWVudCcpO1xudmFyIERvY3VtZW50VHlwZSA9IHJlcXVpcmUoJy4vRG9jdW1lbnRUeXBlJyk7XG52YXIgSFRNTFBhcnNlciA9IHJlcXVpcmUoJy4vSFRNTFBhcnNlcicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIHhtbCA9IHJlcXVpcmUoJy4veG1sbmFtZXMnKTtcblxuLy8gRWFjaCBkb2N1bWVudCBtdXN0IGhhdmUgaXRzIG93biBpbnN0YW5jZSBvZiB0aGUgZG9taW1wbGVtZW50YXRpb24gb2JqZWN0XG5mdW5jdGlvbiBET01JbXBsZW1lbnRhdGlvbihjb250ZXh0T2JqZWN0KSB7XG4gIHRoaXMuY29udGV4dE9iamVjdCA9IGNvbnRleHRPYmplY3Q7XG59XG5cblxuLy8gRmVhdHVyZS92ZXJzaW9uIHBhaXJzIHRoYXQgRE9NSW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgpIHJldHVybnNcbi8vIHRydWUgZm9yLiAgSXQgcmV0dXJucyBmYWxzZSBmb3IgYW55dGhpbmcgZWxzZS5cbnZhciBzdXBwb3J0ZWRGZWF0dXJlcyA9IHtcbiAgJ3htbCc6IHsgJyc6IHRydWUsICcxLjAnOiB0cnVlLCAnMi4wJzogdHJ1ZSB9LCAgIC8vIERPTSBDb3JlXG4gICdjb3JlJzogeyAnJzogdHJ1ZSwgJzIuMCc6IHRydWUgfSwgICAgICAgICAgICAgICAvLyBET00gQ29yZVxuICAnaHRtbCc6IHsgJyc6IHRydWUsICcxLjAnOiB0cnVlLCAnMi4wJzogdHJ1ZX0gLCAgLy8gSFRNTFxuICAneGh0bWwnOiB7ICcnOiB0cnVlLCAnMS4wJzogdHJ1ZSwgJzIuMCc6IHRydWV9ICwgLy8gSFRNTFxufTtcblxuRE9NSW1wbGVtZW50YXRpb24ucHJvdG90eXBlID0ge1xuICBoYXNGZWF0dXJlOiBmdW5jdGlvbiBoYXNGZWF0dXJlKGZlYXR1cmUsIHZlcnNpb24pIHtcbiAgICB2YXIgZiA9IHN1cHBvcnRlZEZlYXR1cmVzWyhmZWF0dXJlIHx8ICcnKS50b0xvd2VyQ2FzZSgpXTtcbiAgICByZXR1cm4gKGYgJiYgZlt2ZXJzaW9uIHx8ICcnXSkgfHwgZmFsc2U7XG4gIH0sXG5cbiAgY3JlYXRlRG9jdW1lbnRUeXBlOiBmdW5jdGlvbiBjcmVhdGVEb2N1bWVudFR5cGUocXVhbGlmaWVkTmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKSB7XG4gICAgaWYgKCF4bWwuaXNWYWxpZFFOYW1lKHF1YWxpZmllZE5hbWUpKSB1dGlscy5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoKTtcblxuICAgIHJldHVybiBuZXcgRG9jdW1lbnRUeXBlKHRoaXMuY29udGV4dE9iamVjdCwgcXVhbGlmaWVkTmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKTtcbiAgfSxcblxuICBjcmVhdGVEb2N1bWVudDogZnVuY3Rpb24gY3JlYXRlRG9jdW1lbnQobmFtZXNwYWNlLCBxdWFsaWZpZWROYW1lLCBkb2N0eXBlKSB7XG4gICAgLy9cbiAgICAvLyBOb3RlIHRoYXQgdGhlIGN1cnJlbnQgRE9NQ29yZSBzcGVjIG1ha2VzIGl0IGltcG9zc2libGUgdG9cbiAgICAvLyBjcmVhdGUgYW4gSFRNTCBkb2N1bWVudCB3aXRoIHRoaXMgZnVuY3Rpb24sIGV2ZW4gaWYgdGhlXG4gICAgLy8gbmFtZXNwYWNlIGFuZCBkb2N0eXBlIGFyZSBwcm9wZXJ0bHkgc2V0LiAgU2VlIHRoaXMgdGhyZWFkOlxuICAgIC8vIGh0dHA6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1kb20vMjAxMUFwckp1bi8wMTMyLmh0bWxcbiAgICAvL1xuICAgIHZhciBkID0gbmV3IERvY3VtZW50KGZhbHNlLCBudWxsKTtcbiAgICB2YXIgZTtcblxuICAgIGlmIChxdWFsaWZpZWROYW1lKVxuICAgICAgZSA9IGQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgcXVhbGlmaWVkTmFtZSk7XG4gICAgZWxzZVxuICAgICAgZSA9IG51bGw7XG5cbiAgICBpZiAoZG9jdHlwZSkge1xuICAgICAgZC5hcHBlbmRDaGlsZChkb2N0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoZSkgZC5hcHBlbmRDaGlsZChlKTtcbiAgICBpZiAobmFtZXNwYWNlID09PSB1dGlscy5OQU1FU1BBQ0UuSFRNTCkge1xuICAgICAgZC5fY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24veGh0bWwreG1sJztcbiAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZSA9PT0gdXRpbHMuTkFNRVNQQUNFLlNWRykge1xuICAgICAgZC5fY29udGVudFR5cGUgPSAnaW1hZ2Uvc3ZnK3htbCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQuX2NvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL3htbCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQ7XG4gIH0sXG5cbiAgY3JlYXRlSFRNTERvY3VtZW50OiBmdW5jdGlvbiBjcmVhdGVIVE1MRG9jdW1lbnQodGl0bGVUZXh0KSB7XG4gICAgdmFyIGQgPSBuZXcgRG9jdW1lbnQodHJ1ZSwgbnVsbCk7XG4gICAgZC5hcHBlbmRDaGlsZChuZXcgRG9jdW1lbnRUeXBlKGQsICdodG1sJykpO1xuICAgIHZhciBodG1sID0gZC5jcmVhdGVFbGVtZW50KCdodG1sJyk7XG4gICAgZC5hcHBlbmRDaGlsZChodG1sKTtcbiAgICB2YXIgaGVhZCA9IGQuY3JlYXRlRWxlbWVudCgnaGVhZCcpO1xuICAgIGh0bWwuYXBwZW5kQ2hpbGQoaGVhZCk7XG4gICAgaWYgKHRpdGxlVGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgdGl0bGUgPSBkLmNyZWF0ZUVsZW1lbnQoJ3RpdGxlJyk7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgIHRpdGxlLmFwcGVuZENoaWxkKGQuY3JlYXRlVGV4dE5vZGUodGl0bGVUZXh0KSk7XG4gICAgfVxuICAgIGh0bWwuYXBwZW5kQ2hpbGQoZC5jcmVhdGVFbGVtZW50KCdib2R5JykpO1xuICAgIGQubW9kY2xvY2sgPSAxOyAvLyBTdGFydCB0cmFja2luZyBtb2RpZmljYXRpb25zXG4gICAgcmV0dXJuIGQ7XG4gIH0sXG5cbiAgbW96U2V0T3V0cHV0TXV0YXRpb25IYW5kbGVyOiBmdW5jdGlvbihkb2MsIGhhbmRsZXIpIHtcbiAgICBkb2MubXV0YXRpb25IYW5kbGVyID0gaGFuZGxlcjtcbiAgfSxcblxuICBtb3pHZXRJbnB1dE11dGF0aW9uSGFuZGxlcjogZnVuY3Rpb24oZG9jKSB7XG4gICAgdXRpbHMubnlpKCk7XG4gIH0sXG5cbiAgbW96SFRNTFBhcnNlcjogSFRNTFBhcnNlcixcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkRPTUltcGxlbWVudGF0aW9uIiwiRG9jdW1lbnQiLCJyZXF1aXJlIiwiRG9jdW1lbnRUeXBlIiwiSFRNTFBhcnNlciIsInV0aWxzIiwieG1sIiwiY29udGV4dE9iamVjdCIsInN1cHBvcnRlZEZlYXR1cmVzIiwicHJvdG90eXBlIiwiaGFzRmVhdHVyZSIsImZlYXR1cmUiLCJ2ZXJzaW9uIiwiZiIsInRvTG93ZXJDYXNlIiwiY3JlYXRlRG9jdW1lbnRUeXBlIiwicXVhbGlmaWVkTmFtZSIsInB1YmxpY0lkIiwic3lzdGVtSWQiLCJpc1ZhbGlkUU5hbWUiLCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3IiLCJjcmVhdGVEb2N1bWVudCIsIm5hbWVzcGFjZSIsImRvY3R5cGUiLCJkIiwiZSIsImNyZWF0ZUVsZW1lbnROUyIsImFwcGVuZENoaWxkIiwiTkFNRVNQQUNFIiwiSFRNTCIsIl9jb250ZW50VHlwZSIsIlNWRyIsImNyZWF0ZUhUTUxEb2N1bWVudCIsInRpdGxlVGV4dCIsImh0bWwiLCJjcmVhdGVFbGVtZW50IiwiaGVhZCIsInVuZGVmaW5lZCIsInRpdGxlIiwiY3JlYXRlVGV4dE5vZGUiLCJtb2RjbG9jayIsIm1velNldE91dHB1dE11dGF0aW9uSGFuZGxlciIsImRvYyIsImhhbmRsZXIiLCJtdXRhdGlvbkhhbmRsZXIiLCJtb3pHZXRJbnB1dE11dGF0aW9uSGFuZGxlciIsIm55aSIsIm1vekhUTUxQYXJzZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/DOMImplementation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/DOMTokenList.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/DOMTokenList.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// DOMTokenList implementation based on https://github.com/Raynos/DOM-shim\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nmodule.exports = DOMTokenList;\nfunction DOMTokenList(getter, setter) {\n    this._getString = getter;\n    this._setString = setter;\n    this._length = 0;\n    this._lastStringValue = \"\";\n    this._update();\n}\nObject.defineProperties(DOMTokenList.prototype, {\n    length: {\n        get: function() {\n            return this._length;\n        }\n    },\n    item: {\n        value: function(index) {\n            var list = getList(this);\n            if (index < 0 || index >= list.length) {\n                return null;\n            }\n            return list[index];\n        }\n    },\n    contains: {\n        value: function(token) {\n            token = String(token); // no error checking for contains()\n            var list = getList(this);\n            return list.indexOf(token) > -1;\n        }\n    },\n    add: {\n        value: function() {\n            var list = getList(this);\n            for(var i = 0, len = arguments.length; i < len; i++){\n                var token = handleErrors(arguments[i]);\n                if (list.indexOf(token) < 0) {\n                    list.push(token);\n                }\n            }\n            // Note: as per spec, if handleErrors() throws any errors, we never\n            // make it here and none of the changes take effect.\n            // Also per spec: we run the \"update steps\" even if no change was\n            // made (ie, if the token already existed)\n            this._update(list);\n        }\n    },\n    remove: {\n        value: function() {\n            var list = getList(this);\n            for(var i = 0, len = arguments.length; i < len; i++){\n                var token = handleErrors(arguments[i]);\n                var index = list.indexOf(token);\n                if (index > -1) {\n                    list.splice(index, 1);\n                }\n            }\n            // Note: as per spec, if handleErrors() throws any errors, we never\n            // make it here and none of the changes take effect.\n            // Also per spec: we run the \"update steps\" even if no change was\n            // made (ie, if the token wasn't previously present)\n            this._update(list);\n        }\n    },\n    toggle: {\n        value: function toggle(token, force) {\n            token = handleErrors(token);\n            if (this.contains(token)) {\n                if (force === undefined || force === false) {\n                    this.remove(token);\n                    return false;\n                }\n                return true;\n            } else {\n                if (force === undefined || force === true) {\n                    this.add(token);\n                    return true;\n                }\n                return false;\n            }\n        }\n    },\n    replace: {\n        value: function replace(token, newToken) {\n            // weird corner case of spec: if `token` contains whitespace, but\n            // `newToken` is the empty string, we must throw SyntaxError not\n            // InvalidCharacterError (sigh)\n            if (String(newToken) === \"\") {\n                utils.SyntaxError();\n            }\n            token = handleErrors(token);\n            newToken = handleErrors(newToken);\n            var list = getList(this);\n            var idx = list.indexOf(token);\n            if (idx < 0) {\n                // Note that, per spec, we do not run the update steps on this path.\n                return false;\n            }\n            var idx2 = list.indexOf(newToken);\n            if (idx2 < 0) {\n                list[idx] = newToken;\n            } else {\n                // \"replace the first instance of either `token` or `newToken` with\n                // `newToken` and remove all other instances\"\n                if (idx < idx2) {\n                    list[idx] = newToken;\n                    list.splice(idx2, 1);\n                } else {\n                    // idx2 is already `newToken`\n                    list.splice(idx, 1);\n                }\n            }\n            this._update(list);\n            return true;\n        }\n    },\n    toString: {\n        value: function() {\n            return this._getString();\n        }\n    },\n    value: {\n        get: function() {\n            return this._getString();\n        },\n        set: function(v) {\n            this._setString(v);\n            this._update();\n        }\n    },\n    // Called when the setter is called from outside this interface.\n    _update: {\n        value: function(list) {\n            if (list) {\n                fixIndex(this, list);\n                this._setString(list.join(\" \").trim());\n            } else {\n                fixIndex(this, getList(this));\n            }\n            this._lastStringValue = this._getString();\n        }\n    }\n});\nfunction fixIndex(clist, list) {\n    var oldLength = clist._length;\n    var i;\n    clist._length = list.length;\n    for(i = 0; i < list.length; i++){\n        clist[i] = list[i];\n    }\n    // Clear/free old entries.\n    for(; i < oldLength; i++){\n        clist[i] = undefined;\n    }\n}\nfunction handleErrors(token) {\n    token = String(token);\n    if (token === \"\") {\n        utils.SyntaxError();\n    }\n    if (/[ \\t\\r\\n\\f]/.test(token)) {\n        utils.InvalidCharacterError();\n    }\n    return token;\n}\nfunction toArray(clist) {\n    var length = clist._length;\n    var arr = Array(length);\n    for(var i = 0; i < length; i++){\n        arr[i] = clist[i];\n    }\n    return arr;\n}\nfunction getList(clist) {\n    var strProp = clist._getString();\n    if (strProp === clist._lastStringValue) {\n        return toArray(clist);\n    }\n    var str = strProp.replace(/(^[ \\t\\r\\n\\f]+)|([ \\t\\r\\n\\f]+$)/g, \"\");\n    if (str === \"\") {\n        return [];\n    } else {\n        var seen = Object.create(null);\n        return str.split(/[ \\t\\r\\n\\f]+/g).filter(function(n) {\n            var key = \"$\" + n;\n            if (seen[key]) {\n                return false;\n            }\n            seen[key] = true;\n            return true;\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/DOMTokenList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/Document.js":
/*!******************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/Document.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Document;\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar NodeList = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeList.js\");\nvar ContainerNode = __webpack_require__(/*! ./ContainerNode */ \"(ssr)/./node_modules/@mathpix/domino/lib/ContainerNode.js\");\nvar Element = __webpack_require__(/*! ./Element */ \"(ssr)/./node_modules/@mathpix/domino/lib/Element.js\");\nvar Text = __webpack_require__(/*! ./Text */ \"(ssr)/./node_modules/@mathpix/domino/lib/Text.js\");\nvar Comment = __webpack_require__(/*! ./Comment */ \"(ssr)/./node_modules/@mathpix/domino/lib/Comment.js\");\nvar Event = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/@mathpix/domino/lib/Event.js\");\nvar DocumentFragment = __webpack_require__(/*! ./DocumentFragment */ \"(ssr)/./node_modules/@mathpix/domino/lib/DocumentFragment.js\");\nvar ProcessingInstruction = __webpack_require__(/*! ./ProcessingInstruction */ \"(ssr)/./node_modules/@mathpix/domino/lib/ProcessingInstruction.js\");\nvar DOMImplementation = __webpack_require__(/*! ./DOMImplementation */ \"(ssr)/./node_modules/@mathpix/domino/lib/DOMImplementation.js\");\nvar TreeWalker = __webpack_require__(/*! ./TreeWalker */ \"(ssr)/./node_modules/@mathpix/domino/lib/TreeWalker.js\");\nvar NodeIterator = __webpack_require__(/*! ./NodeIterator */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeIterator.js\");\nvar NodeFilter = __webpack_require__(/*! ./NodeFilter */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeFilter.js\");\nvar URL = __webpack_require__(/*! ./URL */ \"(ssr)/./node_modules/@mathpix/domino/lib/URL.js\");\nvar select = __webpack_require__(/*! ./select */ \"(ssr)/./node_modules/@mathpix/domino/lib/select.js\");\nvar events = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@mathpix/domino/lib/events.js\");\nvar xml = __webpack_require__(/*! ./xmlnames */ \"(ssr)/./node_modules/@mathpix/domino/lib/xmlnames.js\");\nvar html = __webpack_require__(/*! ./htmlelts */ \"(ssr)/./node_modules/@mathpix/domino/lib/htmlelts.js\");\nvar svg = __webpack_require__(/*! ./svg */ \"(ssr)/./node_modules/@mathpix/domino/lib/svg.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar MUTATE = __webpack_require__(/*! ./MutationConstants */ \"(ssr)/./node_modules/@mathpix/domino/lib/MutationConstants.js\");\nvar NAMESPACE = utils.NAMESPACE;\nvar isApiWritable = (__webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@mathpix/domino/lib/config.js\").isApiWritable);\nfunction Document(isHTML, address) {\n    ContainerNode.call(this);\n    this.nodeType = Node.DOCUMENT_NODE;\n    this.isHTML = isHTML;\n    this._address = address || \"about:blank\";\n    this.readyState = \"loading\";\n    this.implementation = new DOMImplementation(this);\n    // DOMCore says that documents are always associated with themselves\n    this.ownerDocument = null; // ... but W3C tests expect null\n    this._contentType = isHTML ? \"text/html\" : \"application/xml\";\n    // These will be initialized by our custom versions of\n    // appendChild and insertBefore that override the inherited\n    // Node methods.\n    // XXX: override those methods!\n    this.doctype = null;\n    this.documentElement = null;\n    // \"Associated inert template document\"\n    this._templateDocCache = null;\n    // List of active NodeIterators, see NodeIterator#_preremove()\n    this._nodeIterators = null;\n    // Documents are always rooted, by definition\n    this._nid = 1;\n    this._nextnid = 2; // For numbering children of the document\n    this._nodes = [\n        null,\n        this\n    ]; // nid to node map\n    // This maintains the mapping from element ids to element nodes.\n    // We may need to update this mapping every time a node is rooted\n    // or uprooted, and any time an attribute is added, removed or changed\n    // on a rooted element.\n    this.byId = Object.create(null);\n    // This property holds a monotonically increasing value akin to\n    // a timestamp used to record the last modification time of nodes\n    // and their subtrees. See the lastModTime attribute and modify()\n    // method of the Node class. And see FilteredElementList for an example\n    // of the use of lastModTime\n    this.modclock = 0;\n}\n// Map from lowercase event category names (used as arguments to\n// createEvent()) to the property name in the impl object of the\n// event constructor.\nvar supportedEvents = {\n    event: \"Event\",\n    customevent: \"CustomEvent\",\n    uievent: \"UIEvent\",\n    mouseevent: \"MouseEvent\"\n};\n// Certain arguments to document.createEvent() must be treated specially\nvar replacementEvent = {\n    events: \"event\",\n    htmlevents: \"event\",\n    mouseevents: \"mouseevent\",\n    mutationevents: \"mutationevent\",\n    uievents: \"uievent\"\n};\nvar mirrorAttr = function(f, name, defaultValue) {\n    return {\n        get: function() {\n            var o = f.call(this);\n            if (o) {\n                return o[name];\n            }\n            return defaultValue;\n        },\n        set: function(value) {\n            var o = f.call(this);\n            if (o) {\n                o[name] = value;\n            }\n        }\n    };\n};\n/** @spec https://dom.spec.whatwg.org/#validate-and-extract */ function validateAndExtract(namespace, qualifiedName) {\n    var prefix, localName, pos;\n    if (namespace === \"\") {\n        namespace = null;\n    }\n    // See https://github.com/whatwg/dom/issues/671\n    // and https://github.com/whatwg/dom/issues/319\n    if (!xml.isValidQName(qualifiedName)) {\n        utils.InvalidCharacterError();\n    }\n    prefix = null;\n    localName = qualifiedName;\n    pos = qualifiedName.indexOf(\":\");\n    if (pos >= 0) {\n        prefix = qualifiedName.substring(0, pos);\n        localName = qualifiedName.substring(pos + 1);\n    }\n    if (prefix !== null && namespace === null) {\n        utils.NamespaceError();\n    }\n    if (prefix === \"xml\" && namespace !== NAMESPACE.XML) {\n        utils.NamespaceError();\n    }\n    if ((prefix === \"xmlns\" || qualifiedName === \"xmlns\") && namespace !== NAMESPACE.XMLNS) {\n        utils.NamespaceError();\n    }\n    if (namespace === NAMESPACE.XMLNS && !(prefix === \"xmlns\" || qualifiedName === \"xmlns\")) {\n        utils.NamespaceError();\n    }\n    return {\n        namespace: namespace,\n        prefix: prefix,\n        localName: localName\n    };\n}\nDocument.prototype = Object.create(ContainerNode.prototype, {\n    // This method allows dom.js to communicate with a renderer\n    // that displays the document in some way\n    // XXX: I should probably move this to the window object\n    _setMutationHandler: {\n        value: function(handler) {\n            this.mutationHandler = handler;\n        }\n    },\n    // This method allows dom.js to receive event notifications\n    // from the renderer.\n    // XXX: I should probably move this to the window object\n    _dispatchRendererEvent: {\n        value: function(targetNid, type, details) {\n            var target = this._nodes[targetNid];\n            if (!target) return;\n            target._dispatchEvent(new Event(type, details), true);\n        }\n    },\n    nodeName: {\n        value: \"#document\"\n    },\n    nodeValue: {\n        get: function() {\n            return null;\n        },\n        set: function() {}\n    },\n    // XXX: DOMCore may remove documentURI, so it is NYI for now\n    documentURI: {\n        get: function() {\n            return this._address;\n        },\n        set: utils.nyi\n    },\n    compatMode: {\n        get: function() {\n            // The _quirks property is set by the HTML parser\n            return this._quirks ? \"BackCompat\" : \"CSS1Compat\";\n        }\n    },\n    createTextNode: {\n        value: function(data) {\n            return new Text(this, String(data));\n        }\n    },\n    createComment: {\n        value: function(data) {\n            return new Comment(this, data);\n        }\n    },\n    createDocumentFragment: {\n        value: function() {\n            return new DocumentFragment(this);\n        }\n    },\n    createProcessingInstruction: {\n        value: function(target, data) {\n            if (!xml.isValidName(target) || data.indexOf(\"?>\") !== -1) utils.InvalidCharacterError();\n            return new ProcessingInstruction(this, target, data);\n        }\n    },\n    createAttribute: {\n        value: function(localName) {\n            localName = String(localName);\n            if (!xml.isValidName(localName)) utils.InvalidCharacterError();\n            if (this.isHTML) {\n                localName = utils.toASCIILowerCase(localName);\n            }\n            return new Element._Attr(null, localName, null, null, \"\");\n        }\n    },\n    createAttributeNS: {\n        value: function(namespace, qualifiedName) {\n            // Convert parameter types according to WebIDL\n            namespace = namespace === null || namespace === undefined || namespace === \"\" ? null : String(namespace);\n            qualifiedName = String(qualifiedName);\n            var ve = validateAndExtract(namespace, qualifiedName);\n            return new Element._Attr(null, ve.localName, ve.prefix, ve.namespace, \"\");\n        }\n    },\n    createElement: {\n        value: function(localName) {\n            localName = String(localName);\n            if (!xml.isValidName(localName)) utils.InvalidCharacterError();\n            // Per spec, namespace should be HTML namespace if \"context object is\n            // an HTML document or context object's content type is\n            // \"application/xhtml+xml\", and null otherwise.\n            if (this.isHTML) {\n                if (/[A-Z]/.test(localName)) localName = utils.toASCIILowerCase(localName);\n                return html.createElement(this, localName, null);\n            } else if (this.contentType === \"application/xhtml+xml\") {\n                return html.createElement(this, localName, null);\n            } else {\n                return new Element(this, localName, null, null);\n            }\n        },\n        writable: isApiWritable\n    },\n    createElementNS: {\n        value: function(namespace, qualifiedName) {\n            // Convert parameter types according to WebIDL\n            namespace = namespace === null || namespace === undefined || namespace === \"\" ? null : String(namespace);\n            qualifiedName = String(qualifiedName);\n            var ve = validateAndExtract(namespace, qualifiedName);\n            return this._createElementNS(ve.localName, ve.namespace, ve.prefix);\n        },\n        writable: isApiWritable\n    },\n    // This is used directly by HTML parser, which allows it to create\n    // elements with localNames containing ':' and non-default namespaces\n    _createElementNS: {\n        value: function(localName, namespace, prefix) {\n            if (namespace === NAMESPACE.HTML) {\n                return html.createElement(this, localName, prefix);\n            } else if (namespace === NAMESPACE.SVG) {\n                return svg.createElement(this, localName, prefix);\n            }\n            return new Element(this, localName, namespace, prefix);\n        }\n    },\n    createEvent: {\n        value: function createEvent(interfaceName) {\n            interfaceName = interfaceName.toLowerCase();\n            var name = replacementEvent[interfaceName] || interfaceName;\n            var constructor = events[supportedEvents[name]];\n            if (constructor) {\n                var e = new constructor();\n                e._initialized = false;\n                return e;\n            } else {\n                utils.NotSupportedError();\n            }\n        }\n    },\n    // See: http://www.w3.org/TR/dom/#dom-document-createtreewalker\n    createTreeWalker: {\n        value: function(root, whatToShow, filter) {\n            if (!root) {\n                throw new TypeError(\"root argument is required\");\n            }\n            if (!(root instanceof Node)) {\n                throw new TypeError(\"root not a node\");\n            }\n            whatToShow = whatToShow === undefined ? NodeFilter.SHOW_ALL : +whatToShow;\n            filter = filter === undefined ? null : filter;\n            return new TreeWalker(root, whatToShow, filter);\n        }\n    },\n    // See: http://www.w3.org/TR/dom/#dom-document-createnodeiterator\n    createNodeIterator: {\n        value: function(root, whatToShow, filter) {\n            if (!root) {\n                throw new TypeError(\"root argument is required\");\n            }\n            if (!(root instanceof Node)) {\n                throw new TypeError(\"root not a node\");\n            }\n            whatToShow = whatToShow === undefined ? NodeFilter.SHOW_ALL : +whatToShow;\n            filter = filter === undefined ? null : filter;\n            return new NodeIterator(root, whatToShow, filter);\n        }\n    },\n    _attachNodeIterator: {\n        value: function(ni) {\n            // XXX ideally this should be a weak reference from Document to NodeIterator\n            if (!this._nodeIterators) {\n                this._nodeIterators = [];\n            }\n            this._nodeIterators.push(ni);\n        }\n    },\n    _detachNodeIterator: {\n        value: function(ni) {\n            // ni should always be in list of node iterators\n            var idx = this._nodeIterators.indexOf(ni);\n            this._nodeIterators.splice(idx, 1);\n        }\n    },\n    _preremoveNodeIterators: {\n        value: function(toBeRemoved) {\n            if (this._nodeIterators) {\n                this._nodeIterators.forEach(function(ni) {\n                    ni._preremove(toBeRemoved);\n                });\n            }\n        }\n    },\n    // Maintain the documentElement and\n    // doctype properties of the document.  Each of the following\n    // methods chains to the Node implementation of the method\n    // to do the actual inserting, removal or replacement.\n    _updateDocTypeElement: {\n        value: function _updateDocTypeElement() {\n            this.doctype = this.documentElement = null;\n            for(var kid = this.firstChild; kid !== null; kid = kid.nextSibling){\n                if (kid.nodeType === Node.DOCUMENT_TYPE_NODE) this.doctype = kid;\n                else if (kid.nodeType === Node.ELEMENT_NODE) this.documentElement = kid;\n            }\n        }\n    },\n    insertBefore: {\n        value: function insertBefore(child, refChild) {\n            Node.prototype.insertBefore.call(this, child, refChild);\n            this._updateDocTypeElement();\n            return child;\n        }\n    },\n    replaceChild: {\n        value: function replaceChild(node, child) {\n            Node.prototype.replaceChild.call(this, node, child);\n            this._updateDocTypeElement();\n            return child;\n        }\n    },\n    removeChild: {\n        value: function removeChild(child) {\n            Node.prototype.removeChild.call(this, child);\n            this._updateDocTypeElement();\n            return child;\n        }\n    },\n    getElementById: {\n        value: function(id) {\n            var n = this.byId[id];\n            if (!n) return null;\n            if (n instanceof MultiId) {\n                return n.getFirst();\n            }\n            return n;\n        }\n    },\n    _hasMultipleElementsWithId: {\n        value: function(id) {\n            // Used internally by querySelectorAll optimization\n            return this.byId[id] instanceof MultiId;\n        }\n    },\n    // Just copy this method from the Element prototype\n    getElementsByName: {\n        value: Element.prototype.getElementsByName\n    },\n    getElementsByTagName: {\n        value: Element.prototype.getElementsByTagName\n    },\n    getElementsByTagNameNS: {\n        value: Element.prototype.getElementsByTagNameNS\n    },\n    getElementsByClassName: {\n        value: Element.prototype.getElementsByClassName\n    },\n    adoptNode: {\n        value: function adoptNode(node) {\n            if (node.nodeType === Node.DOCUMENT_NODE) utils.NotSupportedError();\n            if (node.nodeType === Node.ATTRIBUTE_NODE) {\n                return node;\n            }\n            if (node.parentNode) node.parentNode.removeChild(node);\n            if (node.ownerDocument !== this) recursivelySetOwner(node, this);\n            return node;\n        }\n    },\n    importNode: {\n        value: function importNode(node, deep) {\n            return this.adoptNode(node.cloneNode(deep));\n        },\n        writable: isApiWritable\n    },\n    // The following attributes and methods are from the HTML spec\n    origin: {\n        get: function origin() {\n            return null;\n        }\n    },\n    characterSet: {\n        get: function characterSet() {\n            return \"UTF-8\";\n        }\n    },\n    contentType: {\n        get: function contentType() {\n            return this._contentType;\n        }\n    },\n    URL: {\n        get: function URL() {\n            return this._address;\n        }\n    },\n    domain: {\n        get: utils.nyi,\n        set: utils.nyi\n    },\n    referrer: {\n        get: utils.nyi\n    },\n    cookie: {\n        get: utils.nyi,\n        set: utils.nyi\n    },\n    lastModified: {\n        get: utils.nyi\n    },\n    location: {\n        get: function() {\n            return this.defaultView ? this.defaultView.location : null; // gh #75\n        },\n        set: utils.nyi\n    },\n    _titleElement: {\n        get: function() {\n            // The title element of a document is the first title element in the\n            // document in tree order, if there is one, or null otherwise.\n            return this.getElementsByTagName(\"title\").item(0) || null;\n        }\n    },\n    title: {\n        get: function() {\n            var elt = this._titleElement;\n            // The child text content of the title element, or '' if null.\n            var value = elt ? elt.textContent : \"\";\n            // Strip and collapse whitespace in value\n            return value.replace(/[ \\t\\n\\r\\f]+/g, \" \").replace(/(^ )|( $)/g, \"\");\n        },\n        set: function(value) {\n            var elt = this._titleElement;\n            var head = this.head;\n            if (!elt && !head) {\n                return; /* according to spec */ \n            }\n            if (!elt) {\n                elt = this.createElement(\"title\");\n                head.appendChild(elt);\n            }\n            elt.textContent = value;\n        }\n    },\n    dir: mirrorAttr(function() {\n        var htmlElement = this.documentElement;\n        if (htmlElement && htmlElement.tagName === \"HTML\") {\n            return htmlElement;\n        }\n    }, \"dir\", \"\"),\n    fgColor: mirrorAttr(function() {\n        return this.body;\n    }, \"text\", \"\"),\n    linkColor: mirrorAttr(function() {\n        return this.body;\n    }, \"link\", \"\"),\n    vlinkColor: mirrorAttr(function() {\n        return this.body;\n    }, \"vLink\", \"\"),\n    alinkColor: mirrorAttr(function() {\n        return this.body;\n    }, \"aLink\", \"\"),\n    bgColor: mirrorAttr(function() {\n        return this.body;\n    }, \"bgColor\", \"\"),\n    // Historical aliases of Document#characterSet\n    charset: {\n        get: function() {\n            return this.characterSet;\n        }\n    },\n    inputEncoding: {\n        get: function() {\n            return this.characterSet;\n        }\n    },\n    scrollingElement: {\n        get: function() {\n            return this._quirks ? this.body : this.documentElement;\n        }\n    },\n    // Return the first <body> child of the document element.\n    // XXX For now, setting this attribute is not implemented.\n    body: {\n        get: function() {\n            return namedHTMLChild(this.documentElement, \"body\");\n        },\n        set: utils.nyi\n    },\n    // Return the first <head> child of the document element.\n    head: {\n        get: function() {\n            return namedHTMLChild(this.documentElement, \"head\");\n        }\n    },\n    images: {\n        get: utils.nyi\n    },\n    embeds: {\n        get: utils.nyi\n    },\n    plugins: {\n        get: utils.nyi\n    },\n    links: {\n        get: utils.nyi\n    },\n    forms: {\n        get: utils.nyi\n    },\n    scripts: {\n        get: utils.nyi\n    },\n    applets: {\n        get: function() {\n            return [];\n        }\n    },\n    activeElement: {\n        get: function() {\n            return null;\n        }\n    },\n    innerHTML: {\n        get: function() {\n            return this.serialize();\n        },\n        set: utils.nyi\n    },\n    outerHTML: {\n        get: function() {\n            return this.serialize();\n        },\n        set: utils.nyi\n    },\n    write: {\n        value: function(args) {\n            if (!this.isHTML) utils.InvalidStateError();\n            // XXX: still have to implement the ignore part\n            if (!this._parser /* && this._ignore_destructive_writes > 0 */ ) return;\n            if (!this._parser) {\n            // XXX call document.open, etc.\n            }\n            var s = arguments.join(\"\");\n            // If the Document object's reload override flag is set, then\n            // append the string consisting of the concatenation of all the\n            // arguments to the method to the Document's reload override\n            // buffer.\n            // XXX: don't know what this is about.  Still have to do it\n            // If there is no pending parsing-blocking script, have the\n            // tokenizer process the characters that were inserted, one at a\n            // time, processing resulting tokens as they are emitted, and\n            // stopping when the tokenizer reaches the insertion point or when\n            // the processing of the tokenizer is aborted by the tree\n            // construction stage (this can happen if a script end tag token is\n            // emitted by the tokenizer).\n            // XXX: still have to do the above. Sounds as if we don't\n            // always call parse() here.  If we're blocked, then we just\n            // insert the text into the stream but don't parse it reentrantly...\n            // Invoke the parser reentrantly\n            this._parser.parse(s);\n        }\n    },\n    writeln: {\n        value: function writeln(args) {\n            this.write(Array.prototype.join.call(arguments, \"\") + \"\\n\");\n        }\n    },\n    open: {\n        value: function() {\n            this.documentElement = null;\n        }\n    },\n    close: {\n        value: function() {\n            this.readyState = \"interactive\";\n            this._dispatchEvent(new Event(\"readystatechange\"), true);\n            this._dispatchEvent(new Event(\"DOMContentLoaded\"), true);\n            this.readyState = \"complete\";\n            this._dispatchEvent(new Event(\"readystatechange\"), true);\n            if (this.defaultView) {\n                this.defaultView._dispatchEvent(new Event(\"load\"), true);\n            }\n        }\n    },\n    // Utility methods\n    clone: {\n        value: function clone() {\n            var d = new Document(this.isHTML, this._address);\n            d._quirks = this._quirks;\n            d._contentType = this._contentType;\n            return d;\n        }\n    },\n    // We need to adopt the nodes if we do a deep clone\n    cloneNode: {\n        value: function cloneNode(deep) {\n            var clone = Node.prototype.cloneNode.call(this, false);\n            if (deep) {\n                for(var kid = this.firstChild; kid !== null; kid = kid.nextSibling){\n                    clone._appendChild(clone.importNode(kid, true));\n                }\n            }\n            clone._updateDocTypeElement();\n            return clone;\n        }\n    },\n    isEqual: {\n        value: function isEqual(n) {\n            // Any two documents are shallowly equal.\n            // Node.isEqualNode will also test the children\n            return true;\n        }\n    },\n    // Implementation-specific function.  Called when a text, comment,\n    // or pi value changes.\n    mutateValue: {\n        value: function(node) {\n            if (this.mutationHandler) {\n                this.mutationHandler({\n                    type: MUTATE.VALUE,\n                    target: node,\n                    data: node.data\n                });\n            }\n        }\n    },\n    // Invoked when an attribute's value changes. Attr holds the new\n    // value.  oldval is the old value.  Attribute mutations can also\n    // involve changes to the prefix (and therefore the qualified name)\n    mutateAttr: {\n        value: function(attr, oldval) {\n            // Manage id->element mapping for getElementsById()\n            // XXX: this special case id handling should not go here,\n            // but in the attribute declaration for the id attribute\n            /*\n    if (attr.localName === 'id' && attr.namespaceURI === null) {\n      if (oldval) delId(oldval, attr.ownerElement);\n      addId(attr.value, attr.ownerElement);\n    }\n    */ if (this.mutationHandler) {\n                this.mutationHandler({\n                    type: MUTATE.ATTR,\n                    target: attr.ownerElement,\n                    attr: attr\n                });\n            }\n        }\n    },\n    // Used by removeAttribute and removeAttributeNS for attributes.\n    mutateRemoveAttr: {\n        value: function(attr) {\n            /*\n* This is now handled in Attributes.js\n    // Manage id to element mapping\n    if (attr.localName === 'id' && attr.namespaceURI === null) {\n      this.delId(attr.value, attr.ownerElement);\n    }\n*/ if (this.mutationHandler) {\n                this.mutationHandler({\n                    type: MUTATE.REMOVE_ATTR,\n                    target: attr.ownerElement,\n                    attr: attr\n                });\n            }\n        }\n    },\n    // Called by Node.removeChild, etc. to remove a rooted element from\n    // the tree. Only needs to generate a single mutation event when a\n    // node is removed, but must recursively mark all descendants as not\n    // rooted.\n    mutateRemove: {\n        value: function(node) {\n            // Send a single mutation event\n            if (this.mutationHandler) {\n                this.mutationHandler({\n                    type: MUTATE.REMOVE,\n                    target: node.parentNode,\n                    node: node\n                });\n            }\n            // Mark this and all descendants as not rooted\n            recursivelyUproot(node);\n        }\n    },\n    // Called when a new element becomes rooted.  It must recursively\n    // generate mutation events for each of the children, and mark them all\n    // as rooted.\n    mutateInsert: {\n        value: function(node) {\n            // Mark node and its descendants as rooted\n            recursivelyRoot(node);\n            // Send a single mutation event\n            if (this.mutationHandler) {\n                this.mutationHandler({\n                    type: MUTATE.INSERT,\n                    target: node.parentNode,\n                    node: node\n                });\n            }\n        }\n    },\n    // Called when a rooted element is moved within the document\n    mutateMove: {\n        value: function(node) {\n            if (this.mutationHandler) {\n                this.mutationHandler({\n                    type: MUTATE.MOVE,\n                    target: node\n                });\n            }\n        }\n    },\n    // Add a mapping from  id to n for n.ownerDocument\n    addId: {\n        value: function addId(id, n) {\n            var val = this.byId[id];\n            if (!val) {\n                this.byId[id] = n;\n            } else {\n                // TODO: Add a way to opt-out console warnings\n                //console.warn('Duplicate element id ' + id);\n                if (!(val instanceof MultiId)) {\n                    val = new MultiId(val);\n                    this.byId[id] = val;\n                }\n                val.add(n);\n            }\n        }\n    },\n    // Delete the mapping from id to n for n.ownerDocument\n    delId: {\n        value: function delId(id, n) {\n            var val = this.byId[id];\n            utils.assert(val);\n            if (val instanceof MultiId) {\n                val.del(n);\n                if (val.length === 1) {\n                    this.byId[id] = val.downgrade();\n                }\n            } else {\n                this.byId[id] = undefined;\n            }\n        }\n    },\n    _resolve: {\n        value: function(href) {\n            //XXX: Cache the URL\n            return new URL(this._documentBaseURL).resolve(href);\n        }\n    },\n    _documentBaseURL: {\n        get: function() {\n            // XXX: This is not implemented correctly yet\n            var url = this._address;\n            if (url === \"about:blank\") url = \"/\";\n            var base = this.querySelector(\"base[href]\");\n            if (base) {\n                return new URL(url).resolve(base.getAttribute(\"href\"));\n            }\n            return url;\n        // The document base URL of a Document object is the\n        // absolute URL obtained by running these substeps:\n        //     Let fallback base url be the document's address.\n        //     If fallback base url is about:blank, and the\n        //     Document's browsing context has a creator browsing\n        //     context, then let fallback base url be the document\n        //     base URL of the creator Document instead.\n        //     If the Document is an iframe srcdoc document, then\n        //     let fallback base url be the document base URL of\n        //     the Document's browsing context's browsing context\n        //     container's Document instead.\n        //     If there is no base element that has an href\n        //     attribute, then the document base URL is fallback\n        //     base url; abort these steps. Otherwise, let url be\n        //     the value of the href attribute of the first such\n        //     element.\n        //     Resolve url relative to fallback base url (thus,\n        //     the base href attribute isn't affected by xml:base\n        //     attributes).\n        //     The document base URL is the result of the previous\n        //     step if it was successful; otherwise it is fallback\n        //     base url.\n        }\n    },\n    _templateDoc: {\n        get: function() {\n            if (!this._templateDocCache) {\n                // \"associated inert template document\"\n                var newDoc = new Document(this.isHTML, this._address);\n                this._templateDocCache = newDoc._templateDocCache = newDoc;\n            }\n            return this._templateDocCache;\n        }\n    },\n    querySelector: {\n        value: function(selector) {\n            return select(selector, this)[0];\n        }\n    },\n    querySelectorAll: {\n        value: function(selector) {\n            var nodes = select(selector, this);\n            return nodes.item ? nodes : new NodeList(nodes);\n        }\n    }\n});\nvar eventHandlerTypes = [\n    \"abort\",\n    \"canplay\",\n    \"canplaythrough\",\n    \"change\",\n    \"click\",\n    \"contextmenu\",\n    \"cuechange\",\n    \"dblclick\",\n    \"drag\",\n    \"dragend\",\n    \"dragenter\",\n    \"dragleave\",\n    \"dragover\",\n    \"dragstart\",\n    \"drop\",\n    \"durationchange\",\n    \"emptied\",\n    \"ended\",\n    \"input\",\n    \"invalid\",\n    \"keydown\",\n    \"keypress\",\n    \"keyup\",\n    \"loadeddata\",\n    \"loadedmetadata\",\n    \"loadstart\",\n    \"mousedown\",\n    \"mousemove\",\n    \"mouseout\",\n    \"mouseover\",\n    \"mouseup\",\n    \"mousewheel\",\n    \"pause\",\n    \"play\",\n    \"playing\",\n    \"progress\",\n    \"ratechange\",\n    \"readystatechange\",\n    \"reset\",\n    \"seeked\",\n    \"seeking\",\n    \"select\",\n    \"show\",\n    \"stalled\",\n    \"submit\",\n    \"suspend\",\n    \"timeupdate\",\n    \"volumechange\",\n    \"waiting\",\n    \"blur\",\n    \"error\",\n    \"focus\",\n    \"load\",\n    \"scroll\"\n];\n// Add event handler idl attribute getters and setters to Document\neventHandlerTypes.forEach(function(type) {\n    // Define the event handler registration IDL attribute for this type\n    Object.defineProperty(Document.prototype, \"on\" + type, {\n        get: function() {\n            return this._getEventHandler(type);\n        },\n        set: function(v) {\n            this._setEventHandler(type, v);\n        }\n    });\n});\nfunction namedHTMLChild(parent, name) {\n    if (parent && parent.isHTML) {\n        for(var kid = parent.firstChild; kid !== null; kid = kid.nextSibling){\n            if (kid.nodeType === Node.ELEMENT_NODE && kid.localName === name && kid.namespaceURI === NAMESPACE.HTML) {\n                return kid;\n            }\n        }\n    }\n    return null;\n}\nfunction root(n) {\n    n._nid = n.ownerDocument._nextnid++;\n    n.ownerDocument._nodes[n._nid] = n;\n    // Manage id to element mapping\n    if (n.nodeType === Node.ELEMENT_NODE) {\n        var id = n.getAttribute(\"id\");\n        if (id) n.ownerDocument.addId(id, n);\n        // Script elements need to know when they're inserted\n        // into the document\n        if (n._roothook) n._roothook();\n    }\n}\nfunction uproot(n) {\n    // Manage id to element mapping\n    if (n.nodeType === Node.ELEMENT_NODE) {\n        var id = n.getAttribute(\"id\");\n        if (id) n.ownerDocument.delId(id, n);\n    }\n    n.ownerDocument._nodes[n._nid] = undefined;\n    n._nid = undefined;\n}\nfunction recursivelyRoot(node) {\n    root(node);\n    // XXX:\n    // accessing childNodes on a leaf node creates a new array the\n    // first time, so be careful to write this loop so that it\n    // doesn't do that. node is polymorphic, so maybe this is hard to\n    // optimize?  Try switching on nodeType?\n    /*\n  if (node.hasChildNodes()) {\n    var kids = node.childNodes;\n    for(var i = 0, n = kids.length;  i < n; i++)\n      recursivelyRoot(kids[i]);\n  }\n*/ if (node.nodeType === Node.ELEMENT_NODE) {\n        for(var kid = node.firstChild; kid !== null; kid = kid.nextSibling)recursivelyRoot(kid);\n    }\n}\nfunction recursivelyUproot(node) {\n    uproot(node);\n    for(var kid = node.firstChild; kid !== null; kid = kid.nextSibling)recursivelyUproot(kid);\n}\nfunction recursivelySetOwner(node, owner) {\n    node.ownerDocument = owner;\n    node._lastModTime = undefined; // mod times are document-based\n    if (Object.prototype.hasOwnProperty.call(node, \"_tagName\")) {\n        node._tagName = undefined; // Element subclasses might need to change case\n    }\n    for(var kid = node.firstChild; kid !== null; kid = kid.nextSibling)recursivelySetOwner(kid, owner);\n}\n// A class for storing multiple nodes with the same ID\nfunction MultiId(node) {\n    this.nodes = Object.create(null);\n    this.nodes[node._nid] = node;\n    this.length = 1;\n    this.firstNode = undefined;\n}\n// Add a node to the list, with O(1) time\nMultiId.prototype.add = function(node) {\n    if (!this.nodes[node._nid]) {\n        this.nodes[node._nid] = node;\n        this.length++;\n        this.firstNode = undefined;\n    }\n};\n// Remove a node from the list, with O(1) time\nMultiId.prototype.del = function(node) {\n    if (this.nodes[node._nid]) {\n        delete this.nodes[node._nid];\n        this.length--;\n        this.firstNode = undefined;\n    }\n};\n// Get the first node from the list, in the document order\n// Takes O(N) time in the size of the list, with a cache that is invalidated\n// when the list is modified.\nMultiId.prototype.getFirst = function() {\n    /* jshint bitwise: false */ if (!this.firstNode) {\n        var nid;\n        for(nid in this.nodes){\n            if (this.firstNode === undefined || this.firstNode.compareDocumentPosition(this.nodes[nid]) & Node.DOCUMENT_POSITION_PRECEDING) {\n                this.firstNode = this.nodes[nid];\n            }\n        }\n    }\n    return this.firstNode;\n};\n// If there is only one node left, return it. Otherwise return \"this\".\nMultiId.prototype.downgrade = function() {\n    if (this.length === 1) {\n        var nid;\n        for(nid in this.nodes){\n            return this.nodes[nid];\n        }\n    }\n    return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/Document.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/DocumentFragment.js":
/*!**************************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/DocumentFragment.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = DocumentFragment;\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar NodeList = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeList.js\");\nvar ContainerNode = __webpack_require__(/*! ./ContainerNode */ \"(ssr)/./node_modules/@mathpix/domino/lib/ContainerNode.js\");\nvar Element = __webpack_require__(/*! ./Element */ \"(ssr)/./node_modules/@mathpix/domino/lib/Element.js\");\nvar select = __webpack_require__(/*! ./select */ \"(ssr)/./node_modules/@mathpix/domino/lib/select.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nfunction DocumentFragment(doc) {\n    ContainerNode.call(this);\n    this.nodeType = Node.DOCUMENT_FRAGMENT_NODE;\n    this.ownerDocument = doc;\n}\nDocumentFragment.prototype = Object.create(ContainerNode.prototype, {\n    nodeName: {\n        value: \"#document-fragment\"\n    },\n    nodeValue: {\n        get: function() {\n            return null;\n        },\n        set: function() {}\n    },\n    // Copy the text content getter/setter from Element\n    textContent: Object.getOwnPropertyDescriptor(Element.prototype, \"textContent\"),\n    querySelector: {\n        value: function(selector) {\n            // implement in terms of querySelectorAll\n            var nodes = this.querySelectorAll(selector);\n            return nodes.length ? nodes[0] : null;\n        }\n    },\n    querySelectorAll: {\n        value: function(selector) {\n            // create a context\n            var context = Object.create(this);\n            // add some methods to the context for zest implementation, without\n            // adding them to the public DocumentFragment API\n            context.isHTML = true; // in HTML namespace (case-insensitive match)\n            context.getElementsByTagName = Element.prototype.getElementsByTagName;\n            context.nextElement = Object.getOwnPropertyDescriptor(Element.prototype, \"firstElementChild\").get;\n            // invoke zest\n            var nodes = select(selector, context);\n            return nodes.item ? nodes : new NodeList(nodes);\n        }\n    },\n    // Utility methods\n    clone: {\n        value: function clone() {\n            return new DocumentFragment(this.ownerDocument);\n        }\n    },\n    isEqual: {\n        value: function isEqual(n) {\n            // Any two document fragments are shallowly equal.\n            // Node.isEqualNode() will test their children for equality\n            return true;\n        }\n    },\n    // Non-standard, but useful (github issue #73)\n    innerHTML: {\n        get: function() {\n            return this.serialize();\n        },\n        set: utils.nyi\n    },\n    outerHTML: {\n        get: function() {\n            return this.serialize();\n        },\n        set: utils.nyi\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Eb2N1bWVudEZyYWdtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLE9BQU9DLE9BQU8sR0FBSUM7QUFFbEIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUUsZ0JBQWdCRixtQkFBT0EsQ0FBQztBQUM1QixJQUFJRyxVQUFVSCxtQkFBT0EsQ0FBQztBQUN0QixJQUFJSSxTQUFTSixtQkFBT0EsQ0FBQztBQUNyQixJQUFJSyxRQUFRTCxtQkFBT0EsQ0FBQztBQUVwQixTQUFTRixpQkFBaUJRLEdBQUc7SUFDM0JKLGNBQWNLLElBQUksQ0FBQyxJQUFJO0lBQ3ZCLElBQUksQ0FBQ0MsUUFBUSxHQUFHVCxLQUFLVSxzQkFBc0I7SUFDM0MsSUFBSSxDQUFDQyxhQUFhLEdBQUdKO0FBQ3ZCO0FBRUFSLGlCQUFpQmEsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNYLGNBQWNTLFNBQVMsRUFBRTtJQUNsRUcsVUFBVTtRQUFFQyxPQUFPO0lBQXFCO0lBQ3hDQyxXQUFXO1FBQ1RDLEtBQUs7WUFDSCxPQUFPO1FBQ1Q7UUFDQUMsS0FBSyxZQUFZO0lBQ25CO0lBQ0EsbURBQW1EO0lBQ25EQyxhQUFhUCxPQUFPUSx3QkFBd0IsQ0FBQ2pCLFFBQVFRLFNBQVMsRUFBRTtJQUVoRVUsZUFBZTtRQUFFTixPQUFPLFNBQVNPLFFBQVE7WUFDdkMseUNBQXlDO1lBQ3pDLElBQUlDLFFBQVEsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0Y7WUFDbEMsT0FBT0MsTUFBTUUsTUFBTSxHQUFHRixLQUFLLENBQUMsRUFBRSxHQUFHO1FBQ25DO0lBQUM7SUFDREMsa0JBQWtCO1FBQUVULE9BQU8sU0FBU08sUUFBUTtZQUMxQyxtQkFBbUI7WUFDbkIsSUFBSUksVUFBVWQsT0FBT0MsTUFBTSxDQUFDLElBQUk7WUFDaEMsbUVBQW1FO1lBQ25FLGlEQUFpRDtZQUNqRGEsUUFBUUMsTUFBTSxHQUFHLE1BQU0sNkNBQTZDO1lBQ3BFRCxRQUFRRSxvQkFBb0IsR0FBR3pCLFFBQVFRLFNBQVMsQ0FBQ2lCLG9CQUFvQjtZQUNyRUYsUUFBUUcsV0FBVyxHQUNqQmpCLE9BQU9RLHdCQUF3QixDQUFDakIsUUFBUVEsU0FBUyxFQUFFLHFCQUNuRE0sR0FBRztZQUNMLGNBQWM7WUFDZCxJQUFJTSxRQUFRbkIsT0FBT2tCLFVBQVVJO1lBQzdCLE9BQU9ILE1BQU1PLElBQUksR0FBR1AsUUFBUSxJQUFJdEIsU0FBU3NCO1FBQzNDO0lBQUM7SUFFRCxrQkFBa0I7SUFDbEJRLE9BQU87UUFBRWhCLE9BQU8sU0FBU2dCO1lBQ3JCLE9BQU8sSUFBSWpDLGlCQUFpQixJQUFJLENBQUNZLGFBQWE7UUFDbEQ7SUFBQztJQUNEc0IsU0FBUztRQUFFakIsT0FBTyxTQUFTaUIsUUFBUUMsQ0FBQztZQUNoQyxrREFBa0Q7WUFDbEQsMkRBQTJEO1lBQzNELE9BQU87UUFDWDtJQUFDO0lBRUQsOENBQThDO0lBQzlDQyxXQUFXO1FBQ1RqQixLQUFLO1lBQWEsT0FBTyxJQUFJLENBQUNrQixTQUFTO1FBQUk7UUFDM0NqQixLQUFLYixNQUFNK0IsR0FBRztJQUNoQjtJQUNBQyxXQUFXO1FBQ1RwQixLQUFLO1lBQWEsT0FBTyxJQUFJLENBQUNrQixTQUFTO1FBQUk7UUFDM0NqQixLQUFLYixNQUFNK0IsR0FBRztJQUNoQjtBQUVGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BtYXRocGl4L2RvbWluby9saWIvRG9jdW1lbnRGcmFnbWVudC5qcz9hZGM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSAgRG9jdW1lbnRGcmFnbWVudDtcblxudmFyIE5vZGUgPSByZXF1aXJlKCcuL05vZGUnKTtcbnZhciBOb2RlTGlzdCA9IHJlcXVpcmUoJy4vTm9kZUxpc3QnKTtcbnZhciBDb250YWluZXJOb2RlID0gcmVxdWlyZSgnLi9Db250YWluZXJOb2RlJyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4vRWxlbWVudCcpO1xudmFyIHNlbGVjdCA9IHJlcXVpcmUoJy4vc2VsZWN0Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIERvY3VtZW50RnJhZ21lbnQoZG9jKSB7XG4gIENvbnRhaW5lck5vZGUuY2FsbCh0aGlzKTtcbiAgdGhpcy5ub2RlVHlwZSA9IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERTtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gZG9jO1xufVxuXG5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ29udGFpbmVyTm9kZS5wcm90b3R5cGUsIHtcbiAgbm9kZU5hbWU6IHsgdmFsdWU6ICcjZG9jdW1lbnQtZnJhZ21lbnQnIH0sXG4gIG5vZGVWYWx1ZTogeyBcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyBcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbigpIHt9XG4gIH0sXG4gIC8vIENvcHkgdGhlIHRleHQgY29udGVudCBnZXR0ZXIvc2V0dGVyIGZyb20gRWxlbWVudFxuICB0ZXh0Q29udGVudDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFbGVtZW50LnByb3RvdHlwZSwgJ3RleHRDb250ZW50JyksXG5cbiAgcXVlcnlTZWxlY3RvcjogeyB2YWx1ZTogZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAvLyBpbXBsZW1lbnQgaW4gdGVybXMgb2YgcXVlcnlTZWxlY3RvckFsbFxuICAgIHZhciBub2RlcyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgcmV0dXJuIG5vZGVzLmxlbmd0aCA/IG5vZGVzWzBdIDogbnVsbDtcbiAgfX0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IHsgdmFsdWU6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgLy8gY3JlYXRlIGEgY29udGV4dFxuICAgIHZhciBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICAvLyBhZGQgc29tZSBtZXRob2RzIHRvIHRoZSBjb250ZXh0IGZvciB6ZXN0IGltcGxlbWVudGF0aW9uLCB3aXRob3V0XG4gICAgLy8gYWRkaW5nIHRoZW0gdG8gdGhlIHB1YmxpYyBEb2N1bWVudEZyYWdtZW50IEFQSVxuICAgIGNvbnRleHQuaXNIVE1MID0gdHJ1ZTsgLy8gaW4gSFRNTCBuYW1lc3BhY2UgKGNhc2UtaW5zZW5zaXRpdmUgbWF0Y2gpXG4gICAgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lO1xuICAgIGNvbnRleHQubmV4dEVsZW1lbnQgPVxuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFbGVtZW50LnByb3RvdHlwZSwgJ2ZpcnN0RWxlbWVudENoaWxkJykuXG4gICAgICBnZXQ7XG4gICAgLy8gaW52b2tlIHplc3RcbiAgICB2YXIgbm9kZXMgPSBzZWxlY3Qoc2VsZWN0b3IsIGNvbnRleHQpO1xuICAgIHJldHVybiBub2Rlcy5pdGVtID8gbm9kZXMgOiBuZXcgTm9kZUxpc3Qobm9kZXMpO1xuICB9fSxcblxuICAvLyBVdGlsaXR5IG1ldGhvZHNcbiAgY2xvbmU6IHsgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEZyYWdtZW50KHRoaXMub3duZXJEb2N1bWVudCk7XG4gIH19LFxuICBpc0VxdWFsOiB7IHZhbHVlOiBmdW5jdGlvbiBpc0VxdWFsKG4pIHtcbiAgICAgIC8vIEFueSB0d28gZG9jdW1lbnQgZnJhZ21lbnRzIGFyZSBzaGFsbG93bHkgZXF1YWwuXG4gICAgICAvLyBOb2RlLmlzRXF1YWxOb2RlKCkgd2lsbCB0ZXN0IHRoZWlyIGNoaWxkcmVuIGZvciBlcXVhbGl0eVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH19LFxuXG4gIC8vIE5vbi1zdGFuZGFyZCwgYnV0IHVzZWZ1bCAoZ2l0aHViIGlzc3VlICM3MylcbiAgaW5uZXJIVE1MOiB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuc2VyaWFsaXplKCk7IH0sXG4gICAgc2V0OiB1dGlscy5ueWlcbiAgfSxcbiAgb3V0ZXJIVE1MOiB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuc2VyaWFsaXplKCk7IH0sXG4gICAgc2V0OiB1dGlscy5ueWlcbiAgfSxcblxufSk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkRvY3VtZW50RnJhZ21lbnQiLCJOb2RlIiwicmVxdWlyZSIsIk5vZGVMaXN0IiwiQ29udGFpbmVyTm9kZSIsIkVsZW1lbnQiLCJzZWxlY3QiLCJ1dGlscyIsImRvYyIsImNhbGwiLCJub2RlVHlwZSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJvd25lckRvY3VtZW50IiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwibm9kZU5hbWUiLCJ2YWx1ZSIsIm5vZGVWYWx1ZSIsImdldCIsInNldCIsInRleHRDb250ZW50IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicXVlcnlTZWxlY3RvciIsInNlbGVjdG9yIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiY29udGV4dCIsImlzSFRNTCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibmV4dEVsZW1lbnQiLCJpdGVtIiwiY2xvbmUiLCJpc0VxdWFsIiwibiIsImlubmVySFRNTCIsInNlcmlhbGl6ZSIsIm55aSIsIm91dGVySFRNTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/DocumentFragment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/DocumentType.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/DocumentType.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = DocumentType;\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar Leaf = __webpack_require__(/*! ./Leaf */ \"(ssr)/./node_modules/@mathpix/domino/lib/Leaf.js\");\nvar ChildNode = __webpack_require__(/*! ./ChildNode */ \"(ssr)/./node_modules/@mathpix/domino/lib/ChildNode.js\");\nfunction DocumentType(ownerDocument, name, publicId, systemId) {\n    Leaf.call(this);\n    this.nodeType = Node.DOCUMENT_TYPE_NODE;\n    this.ownerDocument = ownerDocument || null;\n    this.name = name;\n    this.publicId = publicId || \"\";\n    this.systemId = systemId || \"\";\n}\nDocumentType.prototype = Object.create(Leaf.prototype, {\n    nodeName: {\n        get: function() {\n            return this.name;\n        }\n    },\n    nodeValue: {\n        get: function() {\n            return null;\n        },\n        set: function() {}\n    },\n    // Utility methods\n    clone: {\n        value: function clone() {\n            return new DocumentType(this.ownerDocument, this.name, this.publicId, this.systemId);\n        }\n    },\n    isEqual: {\n        value: function isEqual(n) {\n            return this.name === n.name && this.publicId === n.publicId && this.systemId === n.systemId;\n        }\n    }\n});\nObject.defineProperties(DocumentType.prototype, ChildNode);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Eb2N1bWVudFR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixJQUFJQyxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNuQixJQUFJRSxZQUFZRixtQkFBT0EsQ0FBQztBQUV4QixTQUFTRixhQUFhSyxhQUFhLEVBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFQyxRQUFRO0lBQzNETCxLQUFLTSxJQUFJLENBQUMsSUFBSTtJQUNkLElBQUksQ0FBQ0MsUUFBUSxHQUFHVCxLQUFLVSxrQkFBa0I7SUFDdkMsSUFBSSxDQUFDTixhQUFhLEdBQUdBLGlCQUFpQjtJQUN0QyxJQUFJLENBQUNDLElBQUksR0FBR0E7SUFDWixJQUFJLENBQUNDLFFBQVEsR0FBR0EsWUFBWTtJQUM1QixJQUFJLENBQUNDLFFBQVEsR0FBR0EsWUFBWTtBQUM5QjtBQUVBUixhQUFhWSxTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ1gsS0FBS1MsU0FBUyxFQUFFO0lBQ3JERyxVQUFVO1FBQUVDLEtBQUs7WUFBYSxPQUFPLElBQUksQ0FBQ1YsSUFBSTtRQUFFO0lBQUM7SUFDakRXLFdBQVc7UUFDVEQsS0FBSztZQUFhLE9BQU87UUFBTTtRQUMvQkUsS0FBSyxZQUFZO0lBQ25CO0lBRUEsa0JBQWtCO0lBQ2xCQyxPQUFPO1FBQUVDLE9BQU8sU0FBU0Q7WUFDdkIsT0FBTyxJQUFJbkIsYUFBYSxJQUFJLENBQUNLLGFBQWEsRUFBRSxJQUFJLENBQUNDLElBQUksRUFBRSxJQUFJLENBQUNDLFFBQVEsRUFBRSxJQUFJLENBQUNDLFFBQVE7UUFDckY7SUFBQztJQUVEYSxTQUFTO1FBQUVELE9BQU8sU0FBU0MsUUFBUUMsQ0FBQztZQUNsQyxPQUFPLElBQUksQ0FBQ2hCLElBQUksS0FBS2dCLEVBQUVoQixJQUFJLElBQ3pCLElBQUksQ0FBQ0MsUUFBUSxLQUFLZSxFQUFFZixRQUFRLElBQzVCLElBQUksQ0FBQ0MsUUFBUSxLQUFLYyxFQUFFZCxRQUFRO1FBQ2hDO0lBQUM7QUFDSDtBQUVBSyxPQUFPVSxnQkFBZ0IsQ0FBQ3ZCLGFBQWFZLFNBQVMsRUFBRVIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Eb2N1bWVudFR5cGUuanM/MmFmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gRG9jdW1lbnRUeXBlO1xuXG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpO1xudmFyIExlYWYgPSByZXF1aXJlKCcuL0xlYWYnKTtcbnZhciBDaGlsZE5vZGUgPSByZXF1aXJlKCcuL0NoaWxkTm9kZScpO1xuXG5mdW5jdGlvbiBEb2N1bWVudFR5cGUob3duZXJEb2N1bWVudCwgbmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKSB7XG4gIExlYWYuY2FsbCh0aGlzKTtcbiAgdGhpcy5ub2RlVHlwZSA9IE5vZGUuRE9DVU1FTlRfVFlQRV9OT0RFO1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBvd25lckRvY3VtZW50IHx8IG51bGw7XG4gIHRoaXMubmFtZSA9IG5hbWU7XG4gIHRoaXMucHVibGljSWQgPSBwdWJsaWNJZCB8fCBcIlwiO1xuICB0aGlzLnN5c3RlbUlkID0gc3lzdGVtSWQgfHwgXCJcIjtcbn1cblxuRG9jdW1lbnRUeXBlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTGVhZi5wcm90b3R5cGUsIHtcbiAgbm9kZU5hbWU6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMubmFtZTsgfX0sXG4gIG5vZGVWYWx1ZToge1xuICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBudWxsOyB9LFxuICAgIHNldDogZnVuY3Rpb24oKSB7fVxuICB9LFxuXG4gIC8vIFV0aWxpdHkgbWV0aG9kc1xuICBjbG9uZTogeyB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBEb2N1bWVudFR5cGUodGhpcy5vd25lckRvY3VtZW50LCB0aGlzLm5hbWUsIHRoaXMucHVibGljSWQsIHRoaXMuc3lzdGVtSWQpO1xuICB9fSxcblxuICBpc0VxdWFsOiB7IHZhbHVlOiBmdW5jdGlvbiBpc0VxdWFsKG4pIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lID09PSBuLm5hbWUgJiZcbiAgICAgIHRoaXMucHVibGljSWQgPT09IG4ucHVibGljSWQgJiZcbiAgICAgIHRoaXMuc3lzdGVtSWQgPT09IG4uc3lzdGVtSWQ7XG4gIH19XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRG9jdW1lbnRUeXBlLnByb3RvdHlwZSwgQ2hpbGROb2RlKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRG9jdW1lbnRUeXBlIiwiTm9kZSIsInJlcXVpcmUiLCJMZWFmIiwiQ2hpbGROb2RlIiwib3duZXJEb2N1bWVudCIsIm5hbWUiLCJwdWJsaWNJZCIsInN5c3RlbUlkIiwiY2FsbCIsIm5vZGVUeXBlIiwiRE9DVU1FTlRfVFlQRV9OT0RFIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwibm9kZU5hbWUiLCJnZXQiLCJub2RlVmFsdWUiLCJzZXQiLCJjbG9uZSIsInZhbHVlIiwiaXNFcXVhbCIsIm4iLCJkZWZpbmVQcm9wZXJ0aWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/DocumentType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/Element.js":
/*!*****************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/Element.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Element;\nvar xml = __webpack_require__(/*! ./xmlnames */ \"(ssr)/./node_modules/@mathpix/domino/lib/xmlnames.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar NAMESPACE = utils.NAMESPACE;\nvar attributes = __webpack_require__(/*! ./attributes */ \"(ssr)/./node_modules/@mathpix/domino/lib/attributes.js\");\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar NodeList = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeList.js\");\nvar NodeUtils = __webpack_require__(/*! ./NodeUtils */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeUtils.js\");\nvar FilteredElementList = __webpack_require__(/*! ./FilteredElementList */ \"(ssr)/./node_modules/@mathpix/domino/lib/FilteredElementList.js\");\nvar DOMException = __webpack_require__(/*! ./DOMException */ \"(ssr)/./node_modules/@mathpix/domino/lib/DOMException.js\");\nvar DOMTokenList = __webpack_require__(/*! ./DOMTokenList */ \"(ssr)/./node_modules/@mathpix/domino/lib/DOMTokenList.js\");\nvar select = __webpack_require__(/*! ./select */ \"(ssr)/./node_modules/@mathpix/domino/lib/select.js\");\nvar ContainerNode = __webpack_require__(/*! ./ContainerNode */ \"(ssr)/./node_modules/@mathpix/domino/lib/ContainerNode.js\");\nvar ChildNode = __webpack_require__(/*! ./ChildNode */ \"(ssr)/./node_modules/@mathpix/domino/lib/ChildNode.js\");\nvar NonDocumentTypeChildNode = __webpack_require__(/*! ./NonDocumentTypeChildNode */ \"(ssr)/./node_modules/@mathpix/domino/lib/NonDocumentTypeChildNode.js\");\nvar NamedNodeMap = __webpack_require__(/*! ./NamedNodeMap */ \"(ssr)/./node_modules/@mathpix/domino/lib/NamedNodeMap.js\");\nvar uppercaseCache = Object.create(null);\nfunction Element(doc, localName, namespaceURI, prefix) {\n    ContainerNode.call(this);\n    this.nodeType = Node.ELEMENT_NODE;\n    this.ownerDocument = doc;\n    this.localName = localName;\n    this.namespaceURI = namespaceURI;\n    this.prefix = prefix;\n    this._tagName = undefined;\n    // These properties maintain the set of attributes\n    this._attrsByQName = Object.create(null); // The qname->Attr map\n    this._attrsByLName = Object.create(null); // The ns|lname->Attr map\n    this._attrKeys = []; // attr index -> ns|lname\n}\nfunction recursiveGetText(node, a) {\n    if (node.nodeType === Node.TEXT_NODE) {\n        a.push(node._data);\n    } else {\n        for(var i = 0, n = node.childNodes.length; i < n; i++)recursiveGetText(node.childNodes[i], a);\n    }\n}\nElement.prototype = Object.create(ContainerNode.prototype, {\n    isHTML: {\n        get: function isHTML() {\n            return this.namespaceURI === NAMESPACE.HTML && this.ownerDocument.isHTML;\n        }\n    },\n    tagName: {\n        get: function tagName() {\n            if (this._tagName === undefined) {\n                var tn;\n                if (this.prefix === null) {\n                    tn = this.localName;\n                } else {\n                    tn = this.prefix + \":\" + this.localName;\n                }\n                if (this.isHTML) {\n                    var up = uppercaseCache[tn];\n                    if (!up) {\n                        // Converting to uppercase can be slow, so cache the conversion.\n                        uppercaseCache[tn] = up = utils.toASCIIUpperCase(tn);\n                    }\n                    tn = up;\n                }\n                this._tagName = tn;\n            }\n            return this._tagName;\n        }\n    },\n    nodeName: {\n        get: function() {\n            return this.tagName;\n        }\n    },\n    nodeValue: {\n        get: function() {\n            return null;\n        },\n        set: function() {}\n    },\n    textContent: {\n        get: function() {\n            var strings = [];\n            recursiveGetText(this, strings);\n            return strings.join(\"\");\n        },\n        set: function(newtext) {\n            this.removeChildren();\n            if (newtext !== null && newtext !== undefined && newtext !== \"\") {\n                this._appendChild(this.ownerDocument.createTextNode(newtext));\n            }\n        }\n    },\n    innerHTML: {\n        get: function() {\n            return this.serialize();\n        },\n        set: utils.nyi\n    },\n    outerHTML: {\n        get: function() {\n            // \"the attribute must return the result of running the HTML fragment\n            // serialization algorithm on a fictional node whose only child is\n            // the context object\"\n            //\n            // The serialization logic is intentionally implemented in a separate\n            // `NodeUtils` helper instead of the more obvious choice of a private\n            // `_serializeOne()` method on the `Node.prototype` in order to avoid\n            // the megamorphic `this._serializeOne` property access, which reduces\n            // performance unnecessarily. If you need specialized behavior for a\n            // certain subclass, you'll need to implement that in `NodeUtils`.\n            // See https://github.com/fgnass/domino/pull/142 for more information.\n            return NodeUtils.serializeOne(this, {\n                nodeType: 0\n            });\n        },\n        set: function(v) {\n            var document = this.ownerDocument;\n            var parent = this.parentNode;\n            if (parent === null) {\n                return;\n            }\n            if (parent.nodeType === Node.DOCUMENT_NODE) {\n                utils.NoModificationAllowedError();\n            }\n            if (parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n                parent = parent.ownerDocument.createElement(\"body\");\n            }\n            var parser = document.implementation.mozHTMLParser(document._address, parent);\n            parser.parse(v === null ? \"\" : String(v), true);\n            this.replaceWith(parser._asDocumentFragment());\n        }\n    },\n    _insertAdjacent: {\n        value: function _insertAdjacent(position, node) {\n            var first = false;\n            switch(position){\n                case \"beforebegin\":\n                    first = true;\n                /* falls through */ case \"afterend\":\n                    var parent = this.parentNode;\n                    if (parent === null) {\n                        return null;\n                    }\n                    return parent.insertBefore(node, first ? this : this.nextSibling);\n                case \"afterbegin\":\n                    first = true;\n                /* falls through */ case \"beforeend\":\n                    return this.insertBefore(node, first ? this.firstChild : null);\n                default:\n                    return utils.SyntaxError();\n            }\n        }\n    },\n    insertAdjacentElement: {\n        value: function insertAdjacentElement(position, element) {\n            if (element.nodeType !== Node.ELEMENT_NODE) {\n                throw new TypeError(\"not an element\");\n            }\n            position = utils.toASCIILowerCase(String(position));\n            return this._insertAdjacent(position, element);\n        }\n    },\n    insertAdjacentText: {\n        value: function insertAdjacentText(position, data) {\n            var textNode = this.ownerDocument.createTextNode(data);\n            position = utils.toASCIILowerCase(String(position));\n            this._insertAdjacent(position, textNode);\n        // \"This method returns nothing because it existed before we had a chance\n        // to design it.\"\n        }\n    },\n    insertAdjacentHTML: {\n        value: function insertAdjacentHTML(position, text) {\n            position = utils.toASCIILowerCase(String(position));\n            text = String(text);\n            var context;\n            switch(position){\n                case \"beforebegin\":\n                case \"afterend\":\n                    context = this.parentNode;\n                    if (context === null || context.nodeType === Node.DOCUMENT_NODE) {\n                        utils.NoModificationAllowedError();\n                    }\n                    break;\n                case \"afterbegin\":\n                case \"beforeend\":\n                    context = this;\n                    break;\n                default:\n                    utils.SyntaxError();\n            }\n            if (!(context instanceof Element) || context.ownerDocument.isHTML && context.localName === \"html\" && context.namespaceURI === NAMESPACE.HTML) {\n                context = context.ownerDocument.createElementNS(NAMESPACE.HTML, \"body\");\n            }\n            var parser = this.ownerDocument.implementation.mozHTMLParser(this.ownerDocument._address, context);\n            parser.parse(text, true);\n            this._insertAdjacent(position, parser._asDocumentFragment());\n        }\n    },\n    children: {\n        get: function() {\n            if (!this._children) {\n                this._children = new ChildrenCollection(this);\n            }\n            return this._children;\n        }\n    },\n    attributes: {\n        get: function() {\n            if (!this._attributes) {\n                this._attributes = new AttributesArray(this);\n            }\n            return this._attributes;\n        }\n    },\n    firstElementChild: {\n        get: function() {\n            for(var kid = this.firstChild; kid !== null; kid = kid.nextSibling){\n                if (kid.nodeType === Node.ELEMENT_NODE) return kid;\n            }\n            return null;\n        }\n    },\n    lastElementChild: {\n        get: function() {\n            for(var kid = this.lastChild; kid !== null; kid = kid.previousSibling){\n                if (kid.nodeType === Node.ELEMENT_NODE) return kid;\n            }\n            return null;\n        }\n    },\n    childElementCount: {\n        get: function() {\n            return this.children.length;\n        }\n    },\n    // Return the next element, in source order, after this one or\n    // null if there are no more.  If root element is specified,\n    // then don't traverse beyond its subtree.\n    //\n    // This is not a DOM method, but is convenient for\n    // lazy traversals of the tree.\n    nextElement: {\n        value: function(root) {\n            if (!root) root = this.ownerDocument.documentElement;\n            var next = this.firstElementChild;\n            if (!next) {\n                // don't use sibling if we're at root\n                if (this === root) return null;\n                next = this.nextElementSibling;\n            }\n            if (next) return next;\n            // If we can't go down or across, then we have to go up\n            // and across to the parent sibling or another ancestor's\n            // sibling.  Be careful, though: if we reach the root\n            // element, or if we reach the documentElement, then\n            // the traversal ends.\n            for(var parent = this.parentElement; parent && parent !== root; parent = parent.parentElement){\n                next = parent.nextElementSibling;\n                if (next) return next;\n            }\n            return null;\n        }\n    },\n    // XXX:\n    // Tests are currently failing for this function.\n    // Awaiting resolution of:\n    // http://lists.w3.org/Archives/Public/www-dom/2011JulSep/0016.html\n    getElementsByTagName: {\n        value: function getElementsByTagName(lname) {\n            var filter;\n            if (!lname) return new NodeList();\n            if (lname === \"*\") filter = function() {\n                return true;\n            };\n            else if (this.isHTML) filter = htmlLocalNameElementFilter(lname);\n            else filter = localNameElementFilter(lname);\n            return new FilteredElementList(this, filter);\n        }\n    },\n    getElementsByTagNameNS: {\n        value: function getElementsByTagNameNS(ns, lname) {\n            var filter;\n            if (ns === \"*\" && lname === \"*\") filter = function() {\n                return true;\n            };\n            else if (ns === \"*\") filter = localNameElementFilter(lname);\n            else if (lname === \"*\") filter = namespaceElementFilter(ns);\n            else filter = namespaceLocalNameElementFilter(ns, lname);\n            return new FilteredElementList(this, filter);\n        }\n    },\n    getElementsByClassName: {\n        value: function getElementsByClassName(names) {\n            names = String(names).trim();\n            if (names === \"\") {\n                var result = new NodeList(); // Empty node list\n                return result;\n            }\n            names = names.split(/[ \\t\\r\\n\\f]+/); // Split on ASCII whitespace\n            return new FilteredElementList(this, classNamesElementFilter(names));\n        }\n    },\n    getElementsByName: {\n        value: function getElementsByName(name) {\n            return new FilteredElementList(this, elementNameFilter(String(name)));\n        }\n    },\n    // Utility methods used by the public API methods above\n    clone: {\n        value: function clone() {\n            var e;\n            // XXX:\n            // Modify this to use the constructor directly or\n            // avoid error checking in some other way. In case we try\n            // to clone an invalid node that the parser inserted.\n            //\n            if (this.namespaceURI !== NAMESPACE.HTML || this.prefix || !this.ownerDocument.isHTML) {\n                e = this.ownerDocument.createElementNS(this.namespaceURI, this.prefix !== null ? this.prefix + \":\" + this.localName : this.localName);\n            } else {\n                e = this.ownerDocument.createElement(this.localName);\n            }\n            for(var i = 0, n = this._attrKeys.length; i < n; i++){\n                var lname = this._attrKeys[i];\n                var a = this._attrsByLName[lname];\n                var b = a.cloneNode();\n                b._setOwnerElement(e);\n                e._attrsByLName[lname] = b;\n                e._addQName(b);\n            }\n            e._attrKeys = this._attrKeys.concat();\n            return e;\n        }\n    },\n    isEqual: {\n        value: function isEqual(that) {\n            if (this.localName !== that.localName || this.namespaceURI !== that.namespaceURI || this.prefix !== that.prefix || this._numattrs !== that._numattrs) return false;\n            // Compare the sets of attributes, ignoring order\n            // and ignoring attribute prefixes.\n            for(var i = 0, n = this._numattrs; i < n; i++){\n                var a = this._attr(i);\n                if (!that.hasAttributeNS(a.namespaceURI, a.localName)) return false;\n                if (that.getAttributeNS(a.namespaceURI, a.localName) !== a.value) return false;\n            }\n            return true;\n        }\n    },\n    // This is the 'locate a namespace prefix' algorithm from the\n    // DOM specification.  It is used by Node.lookupPrefix()\n    // (Be sure to compare DOM3 and DOM4 versions of spec.)\n    _lookupNamespacePrefix: {\n        value: function _lookupNamespacePrefix(ns, originalElement) {\n            if (this.namespaceURI && this.namespaceURI === ns && this.prefix !== null && originalElement.lookupNamespaceURI(this.prefix) === ns) {\n                return this.prefix;\n            }\n            for(var i = 0, n = this._numattrs; i < n; i++){\n                var a = this._attr(i);\n                if (a.prefix === \"xmlns\" && a.value === ns && originalElement.lookupNamespaceURI(a.localName) === ns) {\n                    return a.localName;\n                }\n            }\n            var parent = this.parentElement;\n            return parent ? parent._lookupNamespacePrefix(ns, originalElement) : null;\n        }\n    },\n    // This is the 'locate a namespace' algorithm for Element nodes\n    // from the DOM Core spec.  It is used by Node#lookupNamespaceURI()\n    lookupNamespaceURI: {\n        value: function lookupNamespaceURI(prefix) {\n            if (prefix === \"\" || prefix === undefined) {\n                prefix = null;\n            }\n            if (this.namespaceURI !== null && this.prefix === prefix) return this.namespaceURI;\n            for(var i = 0, n = this._numattrs; i < n; i++){\n                var a = this._attr(i);\n                if (a.namespaceURI === NAMESPACE.XMLNS) {\n                    if (a.prefix === \"xmlns\" && a.localName === prefix || prefix === null && a.prefix === null && a.localName === \"xmlns\") {\n                        return a.value || null;\n                    }\n                }\n            }\n            var parent = this.parentElement;\n            return parent ? parent.lookupNamespaceURI(prefix) : null;\n        }\n    },\n    //\n    // Attribute handling methods and utilities\n    //\n    /*\n   * Attributes in the DOM are tricky:\n   *\n   * - there are the 8 basic get/set/has/removeAttribute{NS} methods\n   *\n   * - but many HTML attributes are also 'reflected' through IDL\n   *   attributes which means that they can be queried and set through\n   *   regular properties of the element.  There is just one attribute\n   *   value, but two ways to get and set it.\n   *\n   * - Different HTML element types have different sets of reflected\n     attributes.\n   *\n   * - attributes can also be queried and set through the .attributes\n   *   property of an element.  This property behaves like an array of\n   *   Attr objects.  The value property of each Attr is writeable, so\n   *   this is a third way to read and write attributes.\n   *\n   * - for efficiency, we really want to store attributes in some kind\n   *   of name->attr map.  But the attributes[] array is an array, not a\n   *   map, which is kind of unnatural.\n   *\n   * - When using namespaces and prefixes, and mixing the NS methods\n   *   with the non-NS methods, it is apparently actually possible for\n   *   an attributes[] array to have more than one attribute with the\n   *   same qualified name.  And certain methods must operate on only\n   *   the first attribute with such a name.  So for these methods, an\n   *   inefficient array-like data structure would be easier to\n   *   implement.\n   *\n   * - The attributes[] array is live, not a snapshot, so changes to the\n   *   attributes must be immediately visible through existing arrays.\n   *\n   * - When attributes are queried and set through IDL properties\n   *   (instead of the get/setAttributes() method or the attributes[]\n   *   array) they may be subject to type conversions, URL\n   *   normalization, etc., so some extra processing is required in that\n   *   case.\n   *\n   * - But access through IDL properties is probably the most common\n   *   case, so we'd like that to be as fast as possible.\n   *\n   * - We can't just store attribute values in their parsed idl form,\n   *   because setAttribute() has to return whatever string is passed to\n   *   getAttribute even if it is not a legal, parseable value. So\n   *   attribute values must be stored in unparsed string form.\n   *\n   * - We need to be able to send change notifications or mutation\n   *   events of some sort to the renderer whenever an attribute value\n   *   changes, regardless of the way in which it changes.\n   *\n   * - Some attributes, such as id and class affect other parts of the\n   *   DOM API, like getElementById and getElementsByClassName and so\n   *   for efficiency, we need to specially track changes to these\n   *   special attributes.\n   *\n   * - Some attributes like class have different names (className) when\n   *   reflected.\n   *\n   * - Attributes whose names begin with the string 'data-' are treated\n     specially.\n   *\n   * - Reflected attributes that have a boolean type in IDL have special\n   *   behavior: setting them to false (in IDL) is the same as removing\n   *   them with removeAttribute()\n   *\n   * - numeric attributes (like HTMLElement.tabIndex) can have default\n   *   values that must be returned by the idl getter even if the\n   *   content attribute does not exist. (The default tabIndex value\n   *   actually varies based on the type of the element, so that is a\n   *   tricky one).\n   *\n   * See\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/urls.html#reflect\n   * for rules on how attributes are reflected.\n   *\n   */ getAttribute: {\n        value: function getAttribute(qname) {\n            var attr = this.getAttributeNode(qname);\n            return attr ? attr.value : null;\n        }\n    },\n    getAttributeNS: {\n        value: function getAttributeNS(ns, lname) {\n            var attr = this.getAttributeNodeNS(ns, lname);\n            return attr ? attr.value : null;\n        }\n    },\n    getAttributeNode: {\n        value: function getAttributeNode(qname) {\n            qname = String(qname);\n            if (/[A-Z]/.test(qname) && this.isHTML) qname = utils.toASCIILowerCase(qname);\n            var attr = this._attrsByQName[qname];\n            if (!attr) return null;\n            if (Array.isArray(attr)) attr = attr[0]; // use the first\n            return attr;\n        }\n    },\n    getAttributeNodeNS: {\n        value: function getAttributeNodeNS(ns, lname) {\n            ns = ns === undefined || ns === null ? \"\" : String(ns);\n            lname = String(lname);\n            var attr = this._attrsByLName[ns + \"|\" + lname];\n            return attr ? attr : null;\n        }\n    },\n    hasAttribute: {\n        value: function hasAttribute(qname) {\n            qname = String(qname);\n            if (/[A-Z]/.test(qname) && this.isHTML) qname = utils.toASCIILowerCase(qname);\n            return this._attrsByQName[qname] !== undefined;\n        }\n    },\n    hasAttributeNS: {\n        value: function hasAttributeNS(ns, lname) {\n            ns = ns === undefined || ns === null ? \"\" : String(ns);\n            lname = String(lname);\n            var key = ns + \"|\" + lname;\n            return this._attrsByLName[key] !== undefined;\n        }\n    },\n    hasAttributes: {\n        value: function hasAttributes() {\n            return this._numattrs > 0;\n        }\n    },\n    toggleAttribute: {\n        value: function toggleAttribute(qname, force) {\n            qname = String(qname);\n            if (!xml.isValidName(qname)) utils.InvalidCharacterError();\n            if (/[A-Z]/.test(qname) && this.isHTML) qname = utils.toASCIILowerCase(qname);\n            var a = this._attrsByQName[qname];\n            if (a === undefined) {\n                if (force === undefined || force === true) {\n                    this._setAttribute(qname, \"\");\n                    return true;\n                }\n                return false;\n            } else {\n                if (force === undefined || force === false) {\n                    this.removeAttribute(qname);\n                    return false;\n                }\n                return true;\n            }\n        }\n    },\n    // Set the attribute without error checking. The parser uses this.\n    _setAttribute: {\n        value: function _setAttribute(qname, value) {\n            // XXX: the spec says that this next search should be done\n            // on the local name, but I think that is an error.\n            // email pending on www-dom about it.\n            var attr = this._attrsByQName[qname];\n            var isnew;\n            if (!attr) {\n                attr = this._newattr(qname);\n                isnew = true;\n            } else {\n                if (Array.isArray(attr)) attr = attr[0];\n            }\n            // Now set the attribute value on the new or existing Attr object.\n            // The Attr.value setter method handles mutation events, etc.\n            attr.value = value;\n            if (this._attributes) this._attributes[qname] = attr;\n            if (isnew && this._newattrhook) this._newattrhook(qname, value);\n        }\n    },\n    // Check for errors, and then set the attribute\n    setAttribute: {\n        value: function setAttribute(qname, value) {\n            qname = String(qname);\n            if (!xml.isValidName(qname)) utils.InvalidCharacterError();\n            if (/[A-Z]/.test(qname) && this.isHTML) qname = utils.toASCIILowerCase(qname);\n            this._setAttribute(qname, String(value));\n        }\n    },\n    // The version with no error checking used by the parser\n    _setAttributeNS: {\n        value: function _setAttributeNS(ns, qname, value) {\n            var pos = qname.indexOf(\":\"), prefix, lname;\n            if (pos < 0) {\n                prefix = null;\n                lname = qname;\n            } else {\n                prefix = qname.substring(0, pos);\n                lname = qname.substring(pos + 1);\n            }\n            if (ns === \"\" || ns === undefined) ns = null;\n            var key = (ns === null ? \"\" : ns) + \"|\" + lname;\n            var attr = this._attrsByLName[key];\n            var isnew;\n            if (!attr) {\n                attr = new Attr(this, lname, prefix, ns);\n                isnew = true;\n                this._attrsByLName[key] = attr;\n                if (this._attributes) {\n                    this._attributes[this._attrKeys.length] = attr;\n                }\n                this._attrKeys.push(key);\n                // We also have to make the attr searchable by qname.\n                // But we have to be careful because there may already\n                // be an attr with this qname.\n                this._addQName(attr);\n            } else if (false) {}\n            attr.value = value; // Automatically sends mutation event\n            if (isnew && this._newattrhook) this._newattrhook(qname, value);\n        }\n    },\n    // Do error checking then call _setAttributeNS\n    setAttributeNS: {\n        value: function setAttributeNS(ns, qname, value) {\n            // Convert parameter types according to WebIDL\n            ns = ns === null || ns === undefined || ns === \"\" ? null : String(ns);\n            qname = String(qname);\n            if (!xml.isValidQName(qname)) utils.InvalidCharacterError();\n            var pos = qname.indexOf(\":\");\n            var prefix = pos < 0 ? null : qname.substring(0, pos);\n            if (prefix !== null && ns === null || prefix === \"xml\" && ns !== NAMESPACE.XML || (qname === \"xmlns\" || prefix === \"xmlns\") && ns !== NAMESPACE.XMLNS || ns === NAMESPACE.XMLNS && !(qname === \"xmlns\" || prefix === \"xmlns\")) utils.NamespaceError();\n            this._setAttributeNS(ns, qname, String(value));\n        }\n    },\n    setAttributeNode: {\n        value: function setAttributeNode(attr) {\n            if (attr.ownerElement !== null && attr.ownerElement !== this) {\n                throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);\n            }\n            var result = null;\n            var oldAttrs = this._attrsByQName[attr.name];\n            if (oldAttrs) {\n                if (!Array.isArray(oldAttrs)) {\n                    oldAttrs = [\n                        oldAttrs\n                    ];\n                }\n                if (oldAttrs.some(function(a) {\n                    return a === attr;\n                })) {\n                    return attr;\n                } else if (attr.ownerElement !== null) {\n                    throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);\n                }\n                oldAttrs.forEach(function(a) {\n                    this.removeAttributeNode(a);\n                }, this);\n                result = oldAttrs[0];\n            }\n            this.setAttributeNodeNS(attr);\n            return result;\n        }\n    },\n    setAttributeNodeNS: {\n        value: function setAttributeNodeNS(attr) {\n            if (attr.ownerElement !== null) {\n                throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);\n            }\n            var ns = attr.namespaceURI;\n            var key = (ns === null ? \"\" : ns) + \"|\" + attr.localName;\n            var oldAttr = this._attrsByLName[key];\n            if (oldAttr) {\n                this.removeAttributeNode(oldAttr);\n            }\n            attr._setOwnerElement(this);\n            this._attrsByLName[key] = attr;\n            if (this._attributes) {\n                this._attributes[this._attrKeys.length] = attr;\n            }\n            this._attrKeys.push(key);\n            this._addQName(attr);\n            if (this._newattrhook) this._newattrhook(attr.name, attr.value);\n            return oldAttr || null;\n        }\n    },\n    removeAttribute: {\n        value: function removeAttribute(qname) {\n            qname = String(qname);\n            if (/[A-Z]/.test(qname) && this.isHTML) qname = utils.toASCIILowerCase(qname);\n            var attr = this._attrsByQName[qname];\n            if (!attr) return;\n            // If there is more than one match for this qname\n            // so don't delete the qname mapping, just remove the first\n            // element from it.\n            if (Array.isArray(attr)) {\n                if (attr.length > 2) {\n                    attr = attr.shift(); // remove it from the array\n                } else {\n                    this._attrsByQName[qname] = attr[1];\n                    attr = attr[0];\n                }\n            } else {\n                // only a single match, so remove the qname mapping\n                this._attrsByQName[qname] = undefined;\n            }\n            var ns = attr.namespaceURI;\n            // Now attr is the removed attribute.  Figure out its\n            // ns+lname key and remove it from the other mapping as well.\n            var key = (ns === null ? \"\" : ns) + \"|\" + attr.localName;\n            this._attrsByLName[key] = undefined;\n            var i = this._attrKeys.indexOf(key);\n            if (this._attributes) {\n                Array.prototype.splice.call(this._attributes, i, 1);\n                this._attributes[qname] = undefined;\n            }\n            this._attrKeys.splice(i, 1);\n            // Onchange handler for the attribute\n            var onchange = attr.onchange;\n            attr._setOwnerElement(null);\n            if (onchange) {\n                onchange.call(attr, this, attr.localName, attr.value, null);\n            }\n            // Mutation event\n            if (this.rooted) this.ownerDocument.mutateRemoveAttr(attr);\n        }\n    },\n    removeAttributeNS: {\n        value: function removeAttributeNS(ns, lname) {\n            ns = ns === undefined || ns === null ? \"\" : String(ns);\n            lname = String(lname);\n            var key = ns + \"|\" + lname;\n            var attr = this._attrsByLName[key];\n            if (!attr) return;\n            this._attrsByLName[key] = undefined;\n            var i = this._attrKeys.indexOf(key);\n            if (this._attributes) {\n                Array.prototype.splice.call(this._attributes, i, 1);\n            }\n            this._attrKeys.splice(i, 1);\n            // Now find the same Attr object in the qname mapping and remove it\n            // But be careful because there may be more than one match.\n            this._removeQName(attr);\n            // Onchange handler for the attribute\n            var onchange = attr.onchange;\n            attr._setOwnerElement(null);\n            if (onchange) {\n                onchange.call(attr, this, attr.localName, attr.value, null);\n            }\n            // Mutation event\n            if (this.rooted) this.ownerDocument.mutateRemoveAttr(attr);\n        }\n    },\n    removeAttributeNode: {\n        value: function removeAttributeNode(attr) {\n            var ns = attr.namespaceURI;\n            var key = (ns === null ? \"\" : ns) + \"|\" + attr.localName;\n            if (this._attrsByLName[key] !== attr) {\n                utils.NotFoundError();\n            }\n            this.removeAttributeNS(ns, attr.localName);\n            return attr;\n        }\n    },\n    getAttributeNames: {\n        value: function getAttributeNames() {\n            var elt = this;\n            return this._attrKeys.map(function(key) {\n                return elt._attrsByLName[key].name;\n            });\n        }\n    },\n    // This 'raw' version of getAttribute is used by the getter functions\n    // of reflected attributes. It skips some error checking and\n    // namespace steps\n    _getattr: {\n        value: function _getattr(qname) {\n            // Assume that qname is already lowercased, so don't do it here.\n            // Also don't check whether attr is an array: a qname with no\n            // prefix will never have two matching Attr objects (because\n            // setAttributeNS doesn't allow a non-null namespace with a\n            // null prefix.\n            var attr = this._attrsByQName[qname];\n            return attr ? attr.value : null;\n        }\n    },\n    // The raw version of setAttribute for reflected idl attributes.\n    _setattr: {\n        value: function _setattr(qname, value) {\n            var attr = this._attrsByQName[qname];\n            var isnew;\n            if (!attr) {\n                attr = this._newattr(qname);\n                isnew = true;\n            }\n            attr.value = String(value);\n            if (this._attributes) this._attributes[qname] = attr;\n            if (isnew && this._newattrhook) this._newattrhook(qname, value);\n        }\n    },\n    // Create a new Attr object, insert it, and return it.\n    // Used by setAttribute() and by set()\n    _newattr: {\n        value: function _newattr(qname) {\n            var attr = new Attr(this, qname, null, null);\n            var key = \"|\" + qname;\n            this._attrsByQName[qname] = attr;\n            this._attrsByLName[key] = attr;\n            if (this._attributes) {\n                this._attributes[this._attrKeys.length] = attr;\n            }\n            this._attrKeys.push(key);\n            return attr;\n        }\n    },\n    // Add a qname->Attr mapping to the _attrsByQName object, taking into\n    // account that there may be more than one attr object with the\n    // same qname\n    _addQName: {\n        value: function(attr) {\n            var qname = attr.name;\n            var existing = this._attrsByQName[qname];\n            if (!existing) {\n                this._attrsByQName[qname] = attr;\n            } else if (Array.isArray(existing)) {\n                existing.push(attr);\n            } else {\n                this._attrsByQName[qname] = [\n                    existing,\n                    attr\n                ];\n            }\n            if (this._attributes) this._attributes[qname] = attr;\n        }\n    },\n    // Remove a qname->Attr mapping to the _attrsByQName object, taking into\n    // account that there may be more than one attr object with the\n    // same qname\n    _removeQName: {\n        value: function(attr) {\n            var qname = attr.name;\n            var target = this._attrsByQName[qname];\n            if (Array.isArray(target)) {\n                var idx = target.indexOf(attr);\n                utils.assert(idx !== -1); // It must be here somewhere\n                if (target.length === 2) {\n                    this._attrsByQName[qname] = target[1 - idx];\n                    if (this._attributes) {\n                        this._attributes[qname] = this._attrsByQName[qname];\n                    }\n                } else {\n                    target.splice(idx, 1);\n                    if (this._attributes && this._attributes[qname] === attr) {\n                        this._attributes[qname] = target[0];\n                    }\n                }\n            } else {\n                utils.assert(target === attr); // If only one, it must match\n                this._attrsByQName[qname] = undefined;\n                if (this._attributes) {\n                    this._attributes[qname] = undefined;\n                }\n            }\n        }\n    },\n    // Return the number of attributes\n    _numattrs: {\n        get: function() {\n            return this._attrKeys.length;\n        }\n    },\n    // Return the nth Attr object\n    _attr: {\n        value: function(n) {\n            return this._attrsByLName[this._attrKeys[n]];\n        }\n    },\n    // Define getters and setters for an 'id' property that reflects\n    // the content attribute 'id'.\n    id: attributes.property({\n        name: \"id\"\n    }),\n    // Define getters and setters for a 'className' property that reflects\n    // the content attribute 'class'.\n    className: attributes.property({\n        name: \"class\"\n    }),\n    classList: {\n        get: function() {\n            var self = this;\n            if (this._classList) {\n                return this._classList;\n            }\n            var dtlist = new DOMTokenList(function() {\n                return self.className || \"\";\n            }, function(v) {\n                self.className = v;\n            });\n            this._classList = dtlist;\n            return dtlist;\n        },\n        set: function(v) {\n            this.className = v;\n        }\n    },\n    matches: {\n        value: function(selector) {\n            return select.matches(this, selector);\n        }\n    },\n    closest: {\n        value: function(selector) {\n            var el = this;\n            do {\n                if (el.matches && el.matches(selector)) {\n                    return el;\n                }\n                el = el.parentElement || el.parentNode;\n            }while (el !== null && el.nodeType === Node.ELEMENT_NODE);\n            return null;\n        }\n    },\n    querySelector: {\n        value: function(selector) {\n            return select(selector, this)[0];\n        }\n    },\n    querySelectorAll: {\n        value: function(selector) {\n            var nodes = select(selector, this);\n            return nodes.item ? nodes : new NodeList(nodes);\n        }\n    }\n});\nObject.defineProperties(Element.prototype, ChildNode);\nObject.defineProperties(Element.prototype, NonDocumentTypeChildNode);\n// Register special handling for the id attribute\nattributes.registerChangeHandler(Element, \"id\", function(element, lname, oldval, newval) {\n    if (element.rooted) {\n        if (oldval) {\n            element.ownerDocument.delId(oldval, element);\n        }\n        if (newval) {\n            element.ownerDocument.addId(newval, element);\n        }\n    }\n});\nattributes.registerChangeHandler(Element, \"class\", function(element, lname, oldval, newval) {\n    if (element._classList) {\n        element._classList._update();\n    }\n});\n// The Attr class represents a single attribute.  The values in\n// _attrsByQName and _attrsByLName are instances of this class.\nfunction Attr(elt, lname, prefix, namespace, value) {\n    // localName and namespace are constant for any attr object.\n    // But value may change.  And so can prefix, and so, therefore can name.\n    this.localName = lname;\n    this.prefix = prefix === null || prefix === \"\" ? null : \"\" + prefix;\n    this.namespaceURI = namespace === null || namespace === \"\" ? null : \"\" + namespace;\n    this.data = value;\n    // Set ownerElement last to ensure it is hooked up to onchange handler\n    this._setOwnerElement(elt);\n}\n// In DOM 3 Attr was supposed to extend Node; in DOM 4 that was abandoned.\nAttr.prototype = Object.create(Object.prototype, {\n    ownerElement: {\n        get: function() {\n            return this._ownerElement;\n        }\n    },\n    _setOwnerElement: {\n        value: function _setOwnerElement(elt) {\n            this._ownerElement = elt;\n            if (this.prefix === null && this.namespaceURI === null && elt) {\n                this.onchange = elt._attributeChangeHandlers[this.localName];\n            } else {\n                this.onchange = null;\n            }\n        }\n    },\n    name: {\n        get: function() {\n            return this.prefix ? this.prefix + \":\" + this.localName : this.localName;\n        }\n    },\n    specified: {\n        get: function() {\n            // Deprecated\n            return true;\n        }\n    },\n    value: {\n        get: function() {\n            return this.data;\n        },\n        set: function(value) {\n            var oldval = this.data;\n            value = value === undefined ? \"\" : value + \"\";\n            if (value === oldval) return;\n            this.data = value;\n            // Run the onchange hook for the attribute\n            // if there is one.\n            if (this.ownerElement) {\n                if (this.onchange) this.onchange(this.ownerElement, this.localName, oldval, value);\n                // Generate a mutation event if the element is rooted\n                if (this.ownerElement.rooted) this.ownerElement.ownerDocument.mutateAttr(this, oldval);\n            }\n        }\n    },\n    cloneNode: {\n        value: function cloneNode(deep) {\n            // Both this method and Document#createAttribute*() create unowned Attrs\n            return new Attr(null, this.localName, this.prefix, this.namespaceURI, this.data);\n        }\n    },\n    // Legacy aliases (see gh#70 and https://dom.spec.whatwg.org/#interface-attr)\n    nodeType: {\n        get: function() {\n            return Node.ATTRIBUTE_NODE;\n        }\n    },\n    nodeName: {\n        get: function() {\n            return this.name;\n        }\n    },\n    nodeValue: {\n        get: function() {\n            return this.value;\n        },\n        set: function(v) {\n            this.value = v;\n        }\n    },\n    textContent: {\n        get: function() {\n            return this.value;\n        },\n        set: function(v) {\n            if (v === null || v === undefined) {\n                v = \"\";\n            }\n            this.value = v;\n        }\n    }\n});\n// Sneakily export this class for use by Document.createAttribute()\nElement._Attr = Attr;\n// The attributes property of an Element will be an instance of this class.\n// This class is really just a dummy, though. It only defines a length\n// property and an item() method. The AttrArrayProxy that\n// defines the public API just uses the Element object itself.\nfunction AttributesArray(elt) {\n    NamedNodeMap.call(this, elt);\n    for(var name in elt._attrsByQName){\n        this[name] = elt._attrsByQName[name];\n    }\n    for(var i = 0; i < elt._attrKeys.length; i++){\n        this[i] = elt._attrsByLName[elt._attrKeys[i]];\n    }\n}\nAttributesArray.prototype = Object.create(NamedNodeMap.prototype, {\n    length: {\n        get: function() {\n            return this.element._attrKeys.length;\n        },\n        set: function() {}\n    },\n    item: {\n        value: function(n) {\n            /* jshint bitwise: false */ n = n >>> 0;\n            if (n >= this.length) {\n                return null;\n            }\n            return this.element._attrsByLName[this.element._attrKeys[n]];\n        /* jshint bitwise: true */ }\n    }\n});\n// We can't make direct array access work (without Proxies, node >=6)\n// but we can make `Array.from(node.attributes)` and for-of loops work.\nif (global.Symbol && global.Symbol.iterator) {\n    AttributesArray.prototype[global.Symbol.iterator] = function() {\n        var i = 0, n = this.length, self = this;\n        return {\n            next: function() {\n                if (i < n) return {\n                    value: self.item(i++)\n                };\n                return {\n                    done: true\n                };\n            }\n        };\n    };\n}\n// The children property of an Element will be an instance of this class.\n// It defines length, item() and namedItem() and will be wrapped by an\n// HTMLCollection when exposed through the DOM.\nfunction ChildrenCollection(e) {\n    this.element = e;\n    this.updateCache();\n}\nChildrenCollection.prototype = Object.create(Object.prototype, {\n    length: {\n        get: function() {\n            this.updateCache();\n            return this.childrenByNumber.length;\n        }\n    },\n    item: {\n        value: function item(n) {\n            this.updateCache();\n            return this.childrenByNumber[n] || null;\n        }\n    },\n    namedItem: {\n        value: function namedItem(name) {\n            this.updateCache();\n            return this.childrenByName[name] || null;\n        }\n    },\n    // This attribute returns the entire name->element map.\n    // It is not part of the HTMLCollection API, but we need it in\n    // src/HTMLCollectionProxy\n    namedItems: {\n        get: function() {\n            this.updateCache();\n            return this.childrenByName;\n        }\n    },\n    updateCache: {\n        value: function updateCache() {\n            var namedElts = /^(a|applet|area|embed|form|frame|frameset|iframe|img|object)$/;\n            if (this.lastModTime !== this.element.lastModTime) {\n                this.lastModTime = this.element.lastModTime;\n                var n = this.childrenByNumber && this.childrenByNumber.length || 0;\n                for(var i = 0; i < n; i++){\n                    this[i] = undefined;\n                }\n                this.childrenByNumber = [];\n                this.childrenByName = Object.create(null);\n                for(var c = this.element.firstChild; c !== null; c = c.nextSibling){\n                    if (c.nodeType === Node.ELEMENT_NODE) {\n                        this[this.childrenByNumber.length] = c;\n                        this.childrenByNumber.push(c);\n                        // XXX Are there any requirements about the namespace\n                        // of the id property?\n                        var id = c.getAttribute(\"id\");\n                        // If there is an id that is not already in use...\n                        if (id && !this.childrenByName[id]) this.childrenByName[id] = c;\n                        // For certain HTML elements we check the name attribute\n                        var name = c.getAttribute(\"name\");\n                        if (name && this.element.namespaceURI === NAMESPACE.HTML && namedElts.test(this.element.localName) && !this.childrenByName[name]) this.childrenByName[id] = c;\n                    }\n                }\n            }\n        }\n    }\n});\n// These functions return predicates for filtering elements.\n// They're used by the Document and Element classes for methods like\n// getElementsByTagName and getElementsByClassName\nfunction localNameElementFilter(lname) {\n    return function(e) {\n        return e.localName === lname;\n    };\n}\nfunction htmlLocalNameElementFilter(lname) {\n    var lclname = utils.toASCIILowerCase(lname);\n    if (lclname === lname) return localNameElementFilter(lname);\n    return function(e) {\n        return e.isHTML ? e.localName === lclname : e.localName === lname;\n    };\n}\nfunction namespaceElementFilter(ns) {\n    return function(e) {\n        return e.namespaceURI === ns;\n    };\n}\nfunction namespaceLocalNameElementFilter(ns, lname) {\n    return function(e) {\n        return e.namespaceURI === ns && e.localName === lname;\n    };\n}\nfunction classNamesElementFilter(names) {\n    return function(e) {\n        return names.every(function(n) {\n            return e.classList.contains(n);\n        });\n    };\n}\nfunction elementNameFilter(name) {\n    return function(e) {\n        // All the *HTML elements* in the document with the given name attribute\n        if (e.namespaceURI !== NAMESPACE.HTML) {\n            return false;\n        }\n        return e.getAttribute(\"name\") === name;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/Element.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/Event.js":
/*!***************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/Event.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = Event;\nEvent.CAPTURING_PHASE = 1;\nEvent.AT_TARGET = 2;\nEvent.BUBBLING_PHASE = 3;\nfunction Event(type, dictionary) {\n    // Initialize basic event properties\n    this.type = \"\";\n    this.target = null;\n    this.currentTarget = null;\n    this.eventPhase = Event.AT_TARGET;\n    this.bubbles = false;\n    this.cancelable = false;\n    this.isTrusted = false;\n    this.defaultPrevented = false;\n    this.timeStamp = Date.now();\n    // Initialize internal flags\n    // XXX: Would it be better to inherit these defaults from the prototype?\n    this._propagationStopped = false;\n    this._immediatePropagationStopped = false;\n    this._initialized = true;\n    this._dispatching = false;\n    // Now initialize based on the constructor arguments (if any)\n    if (type) this.type = type;\n    if (dictionary) {\n        for(var p in dictionary){\n            this[p] = dictionary[p];\n        }\n    }\n}\nEvent.prototype = Object.create(Object.prototype, {\n    constructor: {\n        value: Event\n    },\n    stopPropagation: {\n        value: function stopPropagation() {\n            this._propagationStopped = true;\n        }\n    },\n    stopImmediatePropagation: {\n        value: function stopImmediatePropagation() {\n            this._propagationStopped = true;\n            this._immediatePropagationStopped = true;\n        }\n    },\n    preventDefault: {\n        value: function preventDefault() {\n            if (this.cancelable) this.defaultPrevented = true;\n        }\n    },\n    initEvent: {\n        value: function initEvent(type, bubbles, cancelable) {\n            this._initialized = true;\n            if (this._dispatching) return;\n            this._propagationStopped = false;\n            this._immediatePropagationStopped = false;\n            this.defaultPrevented = false;\n            this.isTrusted = false;\n            this.target = null;\n            this.type = type;\n            this.bubbles = bubbles;\n            this.cancelable = cancelable;\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9FdmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCQSxNQUFNQyxlQUFlLEdBQUc7QUFDeEJELE1BQU1FLFNBQVMsR0FBRztBQUNsQkYsTUFBTUcsY0FBYyxHQUFHO0FBRXZCLFNBQVNILE1BQU1JLElBQUksRUFBRUMsVUFBVTtJQUM3QixvQ0FBb0M7SUFDcEMsSUFBSSxDQUFDRCxJQUFJLEdBQUc7SUFDWixJQUFJLENBQUNFLE1BQU0sR0FBRztJQUNkLElBQUksQ0FBQ0MsYUFBYSxHQUFHO0lBQ3JCLElBQUksQ0FBQ0MsVUFBVSxHQUFHUixNQUFNRSxTQUFTO0lBQ2pDLElBQUksQ0FBQ08sT0FBTyxHQUFHO0lBQ2YsSUFBSSxDQUFDQyxVQUFVLEdBQUc7SUFDbEIsSUFBSSxDQUFDQyxTQUFTLEdBQUc7SUFDakIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztJQUN4QixJQUFJLENBQUNDLFNBQVMsR0FBR0MsS0FBS0MsR0FBRztJQUV6Qiw0QkFBNEI7SUFDNUIsd0VBQXdFO0lBQ3hFLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUc7SUFDM0IsSUFBSSxDQUFDQyw0QkFBNEIsR0FBRztJQUNwQyxJQUFJLENBQUNDLFlBQVksR0FBRztJQUNwQixJQUFJLENBQUNDLFlBQVksR0FBRztJQUVwQiw2REFBNkQ7SUFDN0QsSUFBSWYsTUFBTSxJQUFJLENBQUNBLElBQUksR0FBR0E7SUFDdEIsSUFBSUMsWUFBWTtRQUNkLElBQUksSUFBSWUsS0FBS2YsV0FBWTtZQUN2QixJQUFJLENBQUNlLEVBQUUsR0FBR2YsVUFBVSxDQUFDZSxFQUFFO1FBQ3pCO0lBQ0Y7QUFDRjtBQUVBcEIsTUFBTXFCLFNBQVMsR0FBR0MsT0FBT0MsTUFBTSxDQUFDRCxPQUFPRCxTQUFTLEVBQUU7SUFDaERHLGFBQWE7UUFBRUMsT0FBT3pCO0lBQU07SUFDNUIwQixpQkFBaUI7UUFBRUQsT0FBTyxTQUFTQztZQUNqQyxJQUFJLENBQUNWLG1CQUFtQixHQUFHO1FBQzdCO0lBQUM7SUFFRFcsMEJBQTBCO1FBQUVGLE9BQU8sU0FBU0U7WUFDMUMsSUFBSSxDQUFDWCxtQkFBbUIsR0FBRztZQUMzQixJQUFJLENBQUNDLDRCQUE0QixHQUFHO1FBQ3RDO0lBQUM7SUFFRFcsZ0JBQWdCO1FBQUVILE9BQU8sU0FBU0c7WUFDaEMsSUFBSSxJQUFJLENBQUNsQixVQUFVLEVBQUUsSUFBSSxDQUFDRSxnQkFBZ0IsR0FBRztRQUMvQztJQUFDO0lBRURpQixXQUFXO1FBQUVKLE9BQU8sU0FBU0ksVUFBVXpCLElBQUksRUFBRUssT0FBTyxFQUFFQyxVQUFVO1lBQzlELElBQUksQ0FBQ1EsWUFBWSxHQUFHO1lBQ3BCLElBQUksSUFBSSxDQUFDQyxZQUFZLEVBQUU7WUFFdkIsSUFBSSxDQUFDSCxtQkFBbUIsR0FBRztZQUMzQixJQUFJLENBQUNDLDRCQUE0QixHQUFHO1lBQ3BDLElBQUksQ0FBQ0wsZ0JBQWdCLEdBQUc7WUFDeEIsSUFBSSxDQUFDRCxTQUFTLEdBQUc7WUFFakIsSUFBSSxDQUFDTCxNQUFNLEdBQUc7WUFDZCxJQUFJLENBQUNGLElBQUksR0FBR0E7WUFDWixJQUFJLENBQUNLLE9BQU8sR0FBR0E7WUFDZixJQUFJLENBQUNDLFVBQVUsR0FBR0E7UUFDcEI7SUFBQztBQUVIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BtYXRocGl4L2RvbWluby9saWIvRXZlbnQuanM/OTNmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gRXZlbnQ7XG5cbkV2ZW50LkNBUFRVUklOR19QSEFTRSA9IDE7XG5FdmVudC5BVF9UQVJHRVQgPSAyO1xuRXZlbnQuQlVCQkxJTkdfUEhBU0UgPSAzO1xuXG5mdW5jdGlvbiBFdmVudCh0eXBlLCBkaWN0aW9uYXJ5KSB7XG4gIC8vIEluaXRpYWxpemUgYmFzaWMgZXZlbnQgcHJvcGVydGllc1xuICB0aGlzLnR5cGUgPSAnJztcbiAgdGhpcy50YXJnZXQgPSBudWxsO1xuICB0aGlzLmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICB0aGlzLmV2ZW50UGhhc2UgPSBFdmVudC5BVF9UQVJHRVQ7XG4gIHRoaXMuYnViYmxlcyA9IGZhbHNlO1xuICB0aGlzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgdGhpcy5pc1RydXN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gIHRoaXMudGltZVN0YW1wID0gRGF0ZS5ub3coKTtcblxuICAvLyBJbml0aWFsaXplIGludGVybmFsIGZsYWdzXG4gIC8vIFhYWDogV291bGQgaXQgYmUgYmV0dGVyIHRvIGluaGVyaXQgdGhlc2UgZGVmYXVsdHMgZnJvbSB0aGUgcHJvdG90eXBlP1xuICB0aGlzLl9wcm9wYWdhdGlvblN0b3BwZWQgPSBmYWxzZTtcbiAgdGhpcy5faW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XG4gIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgdGhpcy5fZGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICAvLyBOb3cgaW5pdGlhbGl6ZSBiYXNlZCBvbiB0aGUgY29uc3RydWN0b3IgYXJndW1lbnRzIChpZiBhbnkpXG4gIGlmICh0eXBlKSB0aGlzLnR5cGUgPSB0eXBlO1xuICBpZiAoZGljdGlvbmFyeSkge1xuICAgIGZvcih2YXIgcCBpbiBkaWN0aW9uYXJ5KSB7XG4gICAgICB0aGlzW3BdID0gZGljdGlvbmFyeVtwXTtcbiAgICB9XG4gIH1cbn1cblxuRXZlbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShPYmplY3QucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBFdmVudCB9LFxuICBzdG9wUHJvcGFnYXRpb246IHsgdmFsdWU6IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbigpIHtcbiAgICB0aGlzLl9wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuICB9fSxcblxuICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IHsgdmFsdWU6IGZ1bmN0aW9uIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIHtcbiAgICB0aGlzLl9wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuICAgIHRoaXMuX2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XG4gIH19LFxuXG4gIHByZXZlbnREZWZhdWx0OiB7IHZhbHVlOiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICBpZiAodGhpcy5jYW5jZWxhYmxlKSB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICB9fSxcblxuICBpbml0RXZlbnQ6IHsgdmFsdWU6IGZ1bmN0aW9uIGluaXRFdmVudCh0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlKSB7XG4gICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGlmICh0aGlzLl9kaXNwYXRjaGluZykgcmV0dXJuO1xuXG4gICAgdGhpcy5fcHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XG4gICAgdGhpcy5faW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgdGhpcy5pc1RydXN0ZWQgPSBmYWxzZTtcblxuICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuYnViYmxlcyA9IGJ1YmJsZXM7XG4gICAgdGhpcy5jYW5jZWxhYmxlID0gY2FuY2VsYWJsZTtcbiAgfX0sXG5cbn0pO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJFdmVudCIsIkNBUFRVUklOR19QSEFTRSIsIkFUX1RBUkdFVCIsIkJVQkJMSU5HX1BIQVNFIiwidHlwZSIsImRpY3Rpb25hcnkiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiaXNUcnVzdGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJfcHJvcGFnYXRpb25TdG9wcGVkIiwiX2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsIl9pbml0aWFsaXplZCIsIl9kaXNwYXRjaGluZyIsInAiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJpbml0RXZlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/Event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/EventTarget.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/EventTarget.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Event = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/@mathpix/domino/lib/Event.js\");\nvar MouseEvent = __webpack_require__(/*! ./MouseEvent */ \"(ssr)/./node_modules/@mathpix/domino/lib/MouseEvent.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nmodule.exports = EventTarget;\nfunction EventTarget() {}\nEventTarget.prototype = {\n    // XXX\n    // See WebIDL §4.8 for details on object event handlers\n    // and how they should behave.  We actually have to accept\n    // any object to addEventListener... Can't type check it.\n    // on registration.\n    // XXX:\n    // Capturing event listeners are sort of rare.  I think I can optimize\n    // them so that dispatchEvent can skip the capturing phase (or much of\n    // it).  Each time a capturing listener is added, increment a flag on\n    // the target node and each of its ancestors.  Decrement when removed.\n    // And update the counter when nodes are added and removed from the\n    // tree as well.  Then, in dispatch event, the capturing phase can\n    // abort if it sees any node with a zero count.\n    addEventListener: function addEventListener(type, listener, capture) {\n        if (!listener) return;\n        if (capture === undefined) capture = false;\n        if (!this._listeners) this._listeners = Object.create(null);\n        if (!this._listeners[type]) this._listeners[type] = [];\n        var list = this._listeners[type];\n        // If this listener has already been registered, just return\n        for(var i = 0, n = list.length; i < n; i++){\n            var l = list[i];\n            if (l.listener === listener && l.capture === capture) return;\n        }\n        // Add an object to the list of listeners\n        var obj = {\n            listener: listener,\n            capture: capture\n        };\n        if (typeof listener === \"function\") obj.f = listener;\n        list.push(obj);\n    },\n    removeEventListener: function removeEventListener(type, listener, capture) {\n        if (capture === undefined) capture = false;\n        if (this._listeners) {\n            var list = this._listeners[type];\n            if (list) {\n                // Find the listener in the list and remove it\n                for(var i = 0, n = list.length; i < n; i++){\n                    var l = list[i];\n                    if (l.listener === listener && l.capture === capture) {\n                        if (list.length === 1) {\n                            this._listeners[type] = undefined;\n                        } else {\n                            list.splice(i, 1);\n                        }\n                        return;\n                    }\n                }\n            }\n        }\n    },\n    // This is the public API for dispatching untrusted public events.\n    // See _dispatchEvent for the implementation\n    dispatchEvent: function dispatchEvent(event) {\n        // Dispatch an untrusted event\n        return this._dispatchEvent(event, false);\n    },\n    //\n    // See DOMCore §4.4\n    // XXX: I'll probably need another version of this method for\n    // internal use, one that does not set isTrusted to false.\n    // XXX: see Document._dispatchEvent: perhaps that and this could\n    // call a common internal function with different settings of\n    // a trusted boolean argument\n    //\n    // XXX:\n    // The spec has changed in how to deal with handlers registered\n    // on idl or content attributes rather than with addEventListener.\n    // Used to say that they always ran first.  That's how webkit does it\n    // Spec now says that they run in a position determined by\n    // when they were first set.  FF does it that way.  See:\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#event-handlers\n    //\n    _dispatchEvent: function _dispatchEvent(event, trusted) {\n        if (typeof trusted !== \"boolean\") trusted = false;\n        function invoke(target, event) {\n            var type = event.type, phase = event.eventPhase;\n            event.currentTarget = target;\n            // If there was an individual handler defined, invoke it first\n            // XXX: see comment above: this shouldn't always be first.\n            if (phase !== Event.CAPTURING_PHASE && target._handlers && target._handlers[type]) {\n                var handler = target._handlers[type];\n                var rv;\n                if (typeof handler === \"function\") {\n                    rv = handler.call(event.currentTarget, event);\n                } else {\n                    var f = handler.handleEvent;\n                    if (typeof f !== \"function\") throw new TypeError(\"handleEvent property of \" + \"event handler object is\" + \"not a function.\");\n                    rv = f.call(handler, event);\n                }\n                switch(event.type){\n                    case \"mouseover\":\n                        if (rv === true) event.preventDefault();\n                        break;\n                    case \"beforeunload\":\n                    // XXX: eventually we need a special case here\n                    /* falls through */ default:\n                        if (rv === false) event.preventDefault();\n                        break;\n                }\n            }\n            // Now invoke list list of listeners for this target and type\n            var list = target._listeners && target._listeners[type];\n            if (!list) return;\n            list = list.slice();\n            for(var i = 0, n = list.length; i < n; i++){\n                if (event._immediatePropagationStopped) return;\n                var l = list[i];\n                if (phase === Event.CAPTURING_PHASE && !l.capture || phase === Event.BUBBLING_PHASE && l.capture) continue;\n                if (l.f) {\n                    l.f.call(event.currentTarget, event);\n                } else {\n                    var fn = l.listener.handleEvent;\n                    if (typeof fn !== \"function\") throw new TypeError(\"handleEvent property of event listener object is not a function.\");\n                    fn.call(l.listener, event);\n                }\n            }\n        }\n        if (!event._initialized || event._dispatching) utils.InvalidStateError();\n        event.isTrusted = trusted;\n        // Begin dispatching the event now\n        event._dispatching = true;\n        event.target = this;\n        // Build the list of targets for the capturing and bubbling phases\n        // XXX: we'll eventually have to add Window to this list.\n        var ancestors = [];\n        for(var n = this.parentNode; n; n = n.parentNode)ancestors.push(n);\n        // Capturing phase\n        event.eventPhase = Event.CAPTURING_PHASE;\n        for(var i = ancestors.length - 1; i >= 0; i--){\n            invoke(ancestors[i], event);\n            if (event._propagationStopped) break;\n        }\n        // At target phase\n        if (!event._propagationStopped) {\n            event.eventPhase = Event.AT_TARGET;\n            invoke(this, event);\n        }\n        // Bubbling phase\n        if (event.bubbles && !event._propagationStopped) {\n            event.eventPhase = Event.BUBBLING_PHASE;\n            for(var ii = 0, nn = ancestors.length; ii < nn; ii++){\n                invoke(ancestors[ii], event);\n                if (event._propagationStopped) break;\n            }\n        }\n        event._dispatching = false;\n        event.eventPhase = Event.AT_TARGET;\n        event.currentTarget = null;\n        // Deal with mouse events and figure out when\n        // a click has happened\n        if (trusted && !event.defaultPrevented && event instanceof MouseEvent) {\n            switch(event.type){\n                case \"mousedown\":\n                    this._armed = {\n                        x: event.clientX,\n                        y: event.clientY,\n                        t: event.timeStamp\n                    };\n                    break;\n                case \"mouseout\":\n                case \"mouseover\":\n                    this._armed = null;\n                    break;\n                case \"mouseup\":\n                    if (this._isClick(event)) this._doClick(event);\n                    this._armed = null;\n                    break;\n            }\n        }\n        return !event.defaultPrevented;\n    },\n    // Determine whether a click occurred\n    // XXX We don't support double clicks for now\n    _isClick: function(event) {\n        return this._armed !== null && event.type === \"mouseup\" && event.isTrusted && event.button === 0 && event.timeStamp - this._armed.t < 1000 && Math.abs(event.clientX - this._armed.x) < 10 && Math.abs(event.clientY - this._armed.Y) < 10;\n    },\n    // Clicks are handled like this:\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#interactive-content-0\n    //\n    // Note that this method is similar to the HTMLElement.click() method\n    // The event argument must be the trusted mouseup event\n    _doClick: function(event) {\n        if (this._click_in_progress) return;\n        this._click_in_progress = true;\n        // Find the nearest enclosing element that is activatable\n        // An element is activatable if it has a\n        // _post_click_activation_steps hook\n        var activated = this;\n        while(activated && !activated._post_click_activation_steps)activated = activated.parentNode;\n        if (activated && activated._pre_click_activation_steps) {\n            activated._pre_click_activation_steps();\n        }\n        var click = this.ownerDocument.createEvent(\"MouseEvent\");\n        click.initMouseEvent(\"click\", true, true, this.ownerDocument.defaultView, 1, event.screenX, event.screenY, event.clientX, event.clientY, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, event.button, null);\n        var result = this._dispatchEvent(click, true);\n        if (activated) {\n            if (result) {\n                // This is where hyperlinks get followed, for example.\n                if (activated._post_click_activation_steps) activated._post_click_activation_steps(click);\n            } else {\n                if (activated._cancelled_activation_steps) activated._cancelled_activation_steps();\n            }\n        }\n    },\n    //\n    // An event handler is like an event listener, but it registered\n    // by setting an IDL or content attribute like onload or onclick.\n    // There can only be one of these at a time for any event type.\n    // This is an internal method for the attribute accessors and\n    // content attribute handlers that need to register events handlers.\n    // The type argument is the same as in addEventListener().\n    // The handler argument is the same as listeners in addEventListener:\n    // it can be a function or an object. Pass null to remove any existing\n    // handler.  Handlers are always invoked before any listeners of\n    // the same type.  They are not invoked during the capturing phase\n    // of event dispatch.\n    //\n    _setEventHandler: function _setEventHandler(type, handler) {\n        if (!this._handlers) this._handlers = Object.create(null);\n        this._handlers[type] = handler;\n    },\n    _getEventHandler: function _getEventHandler(type) {\n        return this._handlers && this._handlers[type] || null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/EventTarget.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/FilteredElementList.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/FilteredElementList.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = FilteredElementList;\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\n//\n// This file defines node list implementation that lazily traverses\n// the document tree (or a subtree rooted at any element) and includes\n// only those elements for which a specified filter function returns true.\n// It is used to implement the\n// {Document,Element}.getElementsBy{TagName,ClassName}{,NS} methods.\n//\n// XXX this should inherit from NodeList\nfunction FilteredElementList(root, filter) {\n    this.root = root;\n    this.filter = filter;\n    this.lastModTime = root.lastModTime;\n    this.done = false;\n    this.cache = [];\n    this.traverse();\n}\nFilteredElementList.prototype = Object.create(Object.prototype, {\n    length: {\n        get: function() {\n            this.checkcache();\n            if (!this.done) this.traverse();\n            return this.cache.length;\n        }\n    },\n    item: {\n        value: function(n) {\n            this.checkcache();\n            if (!this.done && n >= this.cache.length) {\n                // This can lead to O(N^2) behavior if we stop when we get to n\n                // and the caller is iterating through the items in order; so\n                // be sure to do the full traverse here.\n                this.traverse();\n            }\n            return this.cache[n];\n        }\n    },\n    checkcache: {\n        value: function() {\n            if (this.lastModTime !== this.root.lastModTime) {\n                // subtree has changed, so invalidate cache\n                for(var i = this.cache.length - 1; i >= 0; i--){\n                    this[i] = undefined;\n                }\n                this.cache.length = 0;\n                this.done = false;\n                this.lastModTime = this.root.lastModTime;\n            }\n        }\n    },\n    // If n is specified, then traverse the tree until we've found the nth\n    // item (or until we've found all items).  If n is not specified,\n    // traverse until we've found all items.\n    traverse: {\n        value: function(n) {\n            // increment n so we can compare to length, and so it is never falsy\n            if (n !== undefined) n++;\n            var elt;\n            while((elt = this.next()) !== null){\n                this[this.cache.length] = elt; //XXX Use proxy instead\n                this.cache.push(elt);\n                if (n && this.cache.length === n) return;\n            }\n            // no next element, so we've found everything\n            this.done = true;\n        }\n    },\n    // Return the next element under root that matches filter\n    next: {\n        value: function() {\n            var start = this.cache.length === 0 ? this.root // Start at the root or at\n             : this.cache[this.cache.length - 1]; // the last element we found\n            var elt;\n            if (start.nodeType === Node.DOCUMENT_NODE) elt = start.documentElement;\n            else elt = start.nextElement(this.root);\n            while(elt){\n                if (this.filter(elt)) {\n                    return elt;\n                }\n                elt = elt.nextElement(this.root);\n            }\n            return null;\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9GaWx0ZXJlZEVsZW1lbnRMaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsRUFBRTtBQUNGLG1FQUFtRTtBQUNuRSxzRUFBc0U7QUFDdEUsMEVBQTBFO0FBQzFFLDhCQUE4QjtBQUM5QixvRUFBb0U7QUFDcEUsRUFBRTtBQUNGLHdDQUF3QztBQUV4QyxTQUFTRixvQkFBb0JHLElBQUksRUFBRUMsTUFBTTtJQUN2QyxJQUFJLENBQUNELElBQUksR0FBR0E7SUFDWixJQUFJLENBQUNDLE1BQU0sR0FBR0E7SUFDZCxJQUFJLENBQUNDLFdBQVcsR0FBR0YsS0FBS0UsV0FBVztJQUNuQyxJQUFJLENBQUNDLElBQUksR0FBRztJQUNaLElBQUksQ0FBQ0MsS0FBSyxHQUFHLEVBQUU7SUFDZixJQUFJLENBQUNDLFFBQVE7QUFDZjtBQUVBUixvQkFBb0JTLFNBQVMsR0FBR0MsT0FBT0MsTUFBTSxDQUFDRCxPQUFPRCxTQUFTLEVBQUU7SUFDOURHLFFBQVE7UUFBRUMsS0FBSztZQUNiLElBQUksQ0FBQ0MsVUFBVTtZQUNmLElBQUksQ0FBQyxJQUFJLENBQUNSLElBQUksRUFBRSxJQUFJLENBQUNFLFFBQVE7WUFDN0IsT0FBTyxJQUFJLENBQUNELEtBQUssQ0FBQ0ssTUFBTTtRQUMxQjtJQUFFO0lBRUZHLE1BQU07UUFBRUMsT0FBTyxTQUFTQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQ0gsVUFBVTtZQUNmLElBQUksQ0FBQyxJQUFJLENBQUNSLElBQUksSUFBSVcsS0FBSyxJQUFJLENBQUNWLEtBQUssQ0FBQ0ssTUFBTSxFQUFFO2dCQUN4QywrREFBK0Q7Z0JBQy9ELDZEQUE2RDtnQkFDN0Qsd0NBQXdDO2dCQUN4QyxJQUFJLENBQUNKLFFBQVE7WUFDZjtZQUNBLE9BQU8sSUFBSSxDQUFDRCxLQUFLLENBQUNVLEVBQUU7UUFDdEI7SUFBRTtJQUVGSCxZQUFZO1FBQUVFLE9BQU87WUFDbkIsSUFBSSxJQUFJLENBQUNYLFdBQVcsS0FBSyxJQUFJLENBQUNGLElBQUksQ0FBQ0UsV0FBVyxFQUFFO2dCQUM5QywyQ0FBMkM7Z0JBQzNDLElBQUssSUFBSWEsSUFBSSxJQUFJLENBQUNYLEtBQUssQ0FBQ0ssTUFBTSxHQUFDLEdBQUdNLEtBQUcsR0FBR0EsSUFBSztvQkFDM0MsSUFBSSxDQUFDQSxFQUFFLEdBQUdDO2dCQUNaO2dCQUNBLElBQUksQ0FBQ1osS0FBSyxDQUFDSyxNQUFNLEdBQUc7Z0JBQ3BCLElBQUksQ0FBQ04sSUFBSSxHQUFHO2dCQUNaLElBQUksQ0FBQ0QsV0FBVyxHQUFHLElBQUksQ0FBQ0YsSUFBSSxDQUFDRSxXQUFXO1lBQzFDO1FBQ0Y7SUFBRTtJQUVGLHNFQUFzRTtJQUN0RSxpRUFBaUU7SUFDakUsd0NBQXdDO0lBQ3hDRyxVQUFVO1FBQUVRLE9BQU8sU0FBU0MsQ0FBQztZQUMzQixvRUFBb0U7WUFDcEUsSUFBSUEsTUFBTUUsV0FBV0Y7WUFFckIsSUFBSUc7WUFDSixNQUFPLENBQUNBLE1BQU0sSUFBSSxDQUFDQyxJQUFJLEVBQUMsTUFBTyxLQUFNO2dCQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDZCxLQUFLLENBQUNLLE1BQU0sQ0FBQyxHQUFHUSxLQUFLLHVCQUF1QjtnQkFDdEQsSUFBSSxDQUFDYixLQUFLLENBQUNlLElBQUksQ0FBQ0Y7Z0JBQ2hCLElBQUlILEtBQUssSUFBSSxDQUFDVixLQUFLLENBQUNLLE1BQU0sS0FBS0ssR0FBRztZQUNwQztZQUVBLDZDQUE2QztZQUM3QyxJQUFJLENBQUNYLElBQUksR0FBRztRQUNkO0lBQUU7SUFFRix5REFBeUQ7SUFDekRlLE1BQU07UUFBRUwsT0FBTztZQUNiLElBQUlPLFFBQVEsSUFBSyxDQUFDaEIsS0FBSyxDQUFDSyxNQUFNLEtBQUssSUFBSyxJQUFJLENBQUNULElBQUksQ0FBQywwQkFBMEI7ZUFDeEUsSUFBSSxDQUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDQSxLQUFLLENBQUNLLE1BQU0sR0FBQyxFQUFFLEVBQUUsNEJBQTRCO1lBRWpFLElBQUlRO1lBQ0osSUFBSUcsTUFBTUMsUUFBUSxLQUFLdkIsS0FBS3dCLGFBQWEsRUFDdkNMLE1BQU1HLE1BQU1HLGVBQWU7aUJBRTNCTixNQUFNRyxNQUFNSSxXQUFXLENBQUMsSUFBSSxDQUFDeEIsSUFBSTtZQUVuQyxNQUFNaUIsSUFBSztnQkFDVCxJQUFJLElBQUksQ0FBQ2hCLE1BQU0sQ0FBQ2dCLE1BQU07b0JBQ3BCLE9BQU9BO2dCQUNUO2dCQUVBQSxNQUFNQSxJQUFJTyxXQUFXLENBQUMsSUFBSSxDQUFDeEIsSUFBSTtZQUNqQztZQUNBLE9BQU87UUFDVDtJQUFFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9GaWx0ZXJlZEVsZW1lbnRMaXN0LmpzP2ExNTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEZpbHRlcmVkRWxlbWVudExpc3Q7XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XG5cbi8vXG4vLyBUaGlzIGZpbGUgZGVmaW5lcyBub2RlIGxpc3QgaW1wbGVtZW50YXRpb24gdGhhdCBsYXppbHkgdHJhdmVyc2VzXG4vLyB0aGUgZG9jdW1lbnQgdHJlZSAob3IgYSBzdWJ0cmVlIHJvb3RlZCBhdCBhbnkgZWxlbWVudCkgYW5kIGluY2x1ZGVzXG4vLyBvbmx5IHRob3NlIGVsZW1lbnRzIGZvciB3aGljaCBhIHNwZWNpZmllZCBmaWx0ZXIgZnVuY3Rpb24gcmV0dXJucyB0cnVlLlxuLy8gSXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgdGhlXG4vLyB7RG9jdW1lbnQsRWxlbWVudH0uZ2V0RWxlbWVudHNCeXtUYWdOYW1lLENsYXNzTmFtZX17LE5TfSBtZXRob2RzLlxuLy9cbi8vIFhYWCB0aGlzIHNob3VsZCBpbmhlcml0IGZyb20gTm9kZUxpc3RcblxuZnVuY3Rpb24gRmlsdGVyZWRFbGVtZW50TGlzdChyb290LCBmaWx0ZXIpIHtcbiAgdGhpcy5yb290ID0gcm9vdDtcbiAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gIHRoaXMubGFzdE1vZFRpbWUgPSByb290Lmxhc3RNb2RUaW1lO1xuICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgdGhpcy5jYWNoZSA9IFtdO1xuICB0aGlzLnRyYXZlcnNlKCk7XG59XG5cbkZpbHRlcmVkRWxlbWVudExpc3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShPYmplY3QucHJvdG90eXBlLCB7XG4gIGxlbmd0aDogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2hlY2tjYWNoZSgpO1xuICAgIGlmICghdGhpcy5kb25lKSB0aGlzLnRyYXZlcnNlKCk7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUubGVuZ3RoO1xuICB9IH0sXG5cbiAgaXRlbTogeyB2YWx1ZTogZnVuY3Rpb24obikge1xuICAgIHRoaXMuY2hlY2tjYWNoZSgpO1xuICAgIGlmICghdGhpcy5kb25lICYmIG4gPj0gdGhpcy5jYWNoZS5sZW5ndGgpIHtcbiAgICAgIC8vIFRoaXMgY2FuIGxlYWQgdG8gTyhOXjIpIGJlaGF2aW9yIGlmIHdlIHN0b3Agd2hlbiB3ZSBnZXQgdG8gblxuICAgICAgLy8gYW5kIHRoZSBjYWxsZXIgaXMgaXRlcmF0aW5nIHRocm91Z2ggdGhlIGl0ZW1zIGluIG9yZGVyOyBzb1xuICAgICAgLy8gYmUgc3VyZSB0byBkbyB0aGUgZnVsbCB0cmF2ZXJzZSBoZXJlLlxuICAgICAgdGhpcy50cmF2ZXJzZSgvKm4qLyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNhY2hlW25dO1xuICB9IH0sXG5cbiAgY2hlY2tjYWNoZTogeyB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMubGFzdE1vZFRpbWUgIT09IHRoaXMucm9vdC5sYXN0TW9kVGltZSkge1xuICAgICAgLy8gc3VidHJlZSBoYXMgY2hhbmdlZCwgc28gaW52YWxpZGF0ZSBjYWNoZVxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMuY2FjaGUubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuICAgICAgICB0aGlzW2ldID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWNoZS5sZW5ndGggPSAwO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmxhc3RNb2RUaW1lID0gdGhpcy5yb290Lmxhc3RNb2RUaW1lO1xuICAgIH1cbiAgfSB9LFxuXG4gIC8vIElmIG4gaXMgc3BlY2lmaWVkLCB0aGVuIHRyYXZlcnNlIHRoZSB0cmVlIHVudGlsIHdlJ3ZlIGZvdW5kIHRoZSBudGhcbiAgLy8gaXRlbSAob3IgdW50aWwgd2UndmUgZm91bmQgYWxsIGl0ZW1zKS4gIElmIG4gaXMgbm90IHNwZWNpZmllZCxcbiAgLy8gdHJhdmVyc2UgdW50aWwgd2UndmUgZm91bmQgYWxsIGl0ZW1zLlxuICB0cmF2ZXJzZTogeyB2YWx1ZTogZnVuY3Rpb24obikge1xuICAgIC8vIGluY3JlbWVudCBuIHNvIHdlIGNhbiBjb21wYXJlIHRvIGxlbmd0aCwgYW5kIHNvIGl0IGlzIG5ldmVyIGZhbHN5XG4gICAgaWYgKG4gIT09IHVuZGVmaW5lZCkgbisrO1xuXG4gICAgdmFyIGVsdDtcbiAgICB3aGlsZSAoKGVsdCA9IHRoaXMubmV4dCgpKSAhPT0gbnVsbCkge1xuICAgICAgdGhpc1t0aGlzLmNhY2hlLmxlbmd0aF0gPSBlbHQ7IC8vWFhYIFVzZSBwcm94eSBpbnN0ZWFkXG4gICAgICB0aGlzLmNhY2hlLnB1c2goZWx0KTtcbiAgICAgIGlmIChuICYmIHRoaXMuY2FjaGUubGVuZ3RoID09PSBuKSByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gbm8gbmV4dCBlbGVtZW50LCBzbyB3ZSd2ZSBmb3VuZCBldmVyeXRoaW5nXG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgfSB9LFxuXG4gIC8vIFJldHVybiB0aGUgbmV4dCBlbGVtZW50IHVuZGVyIHJvb3QgdGhhdCBtYXRjaGVzIGZpbHRlclxuICBuZXh0OiB7IHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSAodGhpcy5jYWNoZS5sZW5ndGggPT09IDApID8gdGhpcy5yb290IC8vIFN0YXJ0IGF0IHRoZSByb290IG9yIGF0XG4gICAgICA6IHRoaXMuY2FjaGVbdGhpcy5jYWNoZS5sZW5ndGgtMV07IC8vIHRoZSBsYXN0IGVsZW1lbnQgd2UgZm91bmRcblxuICAgIHZhciBlbHQ7XG4gICAgaWYgKHN0YXJ0Lm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX05PREUpXG4gICAgICBlbHQgPSBzdGFydC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgZWxzZVxuICAgICAgZWx0ID0gc3RhcnQubmV4dEVsZW1lbnQodGhpcy5yb290KTtcblxuICAgIHdoaWxlKGVsdCkge1xuICAgICAgaWYgKHRoaXMuZmlsdGVyKGVsdCkpIHtcbiAgICAgICAgcmV0dXJuIGVsdDtcbiAgICAgIH1cblxuICAgICAgZWx0ID0gZWx0Lm5leHRFbGVtZW50KHRoaXMucm9vdCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9IH0sXG59KTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRmlsdGVyZWRFbGVtZW50TGlzdCIsIk5vZGUiLCJyZXF1aXJlIiwicm9vdCIsImZpbHRlciIsImxhc3RNb2RUaW1lIiwiZG9uZSIsImNhY2hlIiwidHJhdmVyc2UiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJsZW5ndGgiLCJnZXQiLCJjaGVja2NhY2hlIiwiaXRlbSIsInZhbHVlIiwibiIsImkiLCJ1bmRlZmluZWQiLCJlbHQiLCJuZXh0IiwicHVzaCIsInN0YXJ0Iiwibm9kZVR5cGUiLCJET0NVTUVOVF9OT0RFIiwiZG9jdW1lbnRFbGVtZW50IiwibmV4dEVsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/FilteredElementList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/HTMLParser.js":
/*!********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/HTMLParser.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = HTMLParser;\nvar Document = __webpack_require__(/*! ./Document */ \"(ssr)/./node_modules/@mathpix/domino/lib/Document.js\");\nvar DocumentType = __webpack_require__(/*! ./DocumentType */ \"(ssr)/./node_modules/@mathpix/domino/lib/DocumentType.js\");\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar NAMESPACE = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\").NAMESPACE);\nvar html = __webpack_require__(/*! ./htmlelts */ \"(ssr)/./node_modules/@mathpix/domino/lib/htmlelts.js\");\nvar impl = html.elements;\nvar pushAll = Function.prototype.apply.bind(Array.prototype.push);\n/*\n * This file contains an implementation of the HTML parsing algorithm.\n * The algorithm and the implementation are complex because HTML\n * explicitly defines how the parser should behave for all possible\n * valid and invalid inputs.\n *\n * Usage:\n *\n * The file defines a single HTMLParser() function, which dom.js exposes\n * publicly as document.implementation.mozHTMLParser(). This is a\n * factory function, not a constructor.\n *\n * When you call document.implementation.mozHTMLParser(), it returns\n * an object that has parse() and document() methods. To parse HTML text,\n * pass the text (in one or more chunks) to the parse() method.  When\n * you've passed all the text (on the last chunk, or afterward) pass\n * true as the second argument to parse() to tell the parser that there\n * is no more coming. Call document() to get the document object that\n * the parser is parsing into.  You can call this at any time, before\n * or after calling parse().\n *\n * The first argument to mozHTMLParser is the absolute URL of the document.\n *\n * The second argument is optional and is for internal use only.  Pass an\n * element as the fragmentContext to do innerHTML parsing for the\n * element.  To do innerHTML parsing on a document, pass null. Otherwise,\n * omit the 2nd argument. See HTMLElement.innerHTML for an example.  Note\n * that if you pass a context element, the end() method will return an\n * unwrapped document instead of a wrapped one.\n *\n * Implementation details:\n *\n * This is a long file of almost 7000 lines. It is structured as one\n * big function nested within another big function.  The outer\n * function defines a bunch of constant data, utility functions\n * that use that data, and a couple of classes used by the parser.\n * The outer function also defines and returns the\n * inner function. This inner function is the HTMLParser factory\n * function that implements the parser and holds all the parser state\n * as local variables.  The HTMLParser function is quite big because\n * it defines many nested functions that use those local variables.\n *\n * There are three tightly coupled parser stages: a scanner, a\n * tokenizer and a tree builder. In a (possibly misguided) attempt at\n * efficiency, the stages are not implemented as separate classes:\n * everything shares state and is (mostly) implemented in imperative\n * (rather than OO) style.\n *\n * The stages of the parser work like this: When the client code calls\n * the parser's parse() method, the specified string is passed to\n * scanChars(). The scanner loops through that string and passes characters\n * (sometimes one at a time, sometimes in chunks) to the tokenizer stage.\n * The tokenizer groups the characters into tokens: tags, endtags, runs\n * of text, comments, doctype declarations, and the end-of-file (EOF)\n * token.  These tokens are then passed to the tree building stage via\n * the insertToken() function.  The tree building stage builds up the\n * document tree.\n *\n * The tokenizer stage is a finite state machine.  Each state is\n * implemented as a function with a name that ends in \"_state\".  The\n * initial state is data_state(). The current tokenizer state is stored\n * in the variable 'tokenizer'.  Most state functions expect a single\n * integer argument which represents a single UTF-16 codepoint.  Some\n * states want more characters and set a lookahead property on\n * themselves.  The scanChars() function in the scanner checks for this\n * lookahead property.  If it doesn't exist, then scanChars() just passes\n * the next input character to the current tokenizer state function.\n * Otherwise, scanChars() looks ahead (a given # of characters, or for a\n * matching string, or for a matching regexp) and passes a string of\n * characters to the current tokenizer state function.\n *\n * As a shortcut, certain states of the tokenizer use regular expressions\n * to look ahead in the scanner's input buffer for runs of text, simple\n * tags and attributes.  For well-formed input, these shortcuts skip a\n * lot of state transitions and speed things up a bit.\n *\n * When a tokenizer state function has consumed a complete token, it\n * emits that token, by calling insertToken(), or by calling a utility\n * function that itself calls insertToken().  These tokens are passed to\n * the tree building stage, which is also a state machine.  Like the\n * tokenizer, the tree building states are implemented as functions, and\n * these functions have names that end with _mode (because the HTML spec\n * refers to them as insertion modes). The current insertion mode is held\n * by the 'parser' variable.  Each insertion mode function takes up to 4\n * arguments.  The first is a token type, represented by the constants\n * TAG, ENDTAG, TEXT, COMMENT, DOCTYPE and EOF.  The second argument is\n * the value of the token: the text or comment data, or tagname or\n * doctype.  For tags, the 3rd argument is an array of attributes.  For\n * DOCTYPES it is the optional public id.  For tags, the 4th argument is\n * true if the tag is self-closing. For doctypes, the 4th argument is the\n * optional system id.\n *\n * Search for \"***\" to find the major sub-divisions in the code.\n */ /***\n * Data prolog.  Lots of constants declared here, including some\n * very large objects.  They're used throughout the code that follows\n */ // Token types for the tree builder.\nvar EOF = -1;\nvar TEXT = 1;\nvar TAG = 2;\nvar ENDTAG = 3;\nvar COMMENT = 4;\nvar DOCTYPE = 5;\n// A re-usable empty array\nvar NOATTRS = [];\n// These DTD public ids put the browser in quirks mode\nvar quirkyPublicIds = /^HTML$|^-\\/\\/W3O\\/\\/DTD W3 HTML Strict 3\\.0\\/\\/EN\\/\\/$|^-\\/W3C\\/DTD HTML 4\\.0 Transitional\\/EN$|^\\+\\/\\/Silmaril\\/\\/dtd html Pro v0r11 19970101\\/\\/|^-\\/\\/AdvaSoft Ltd\\/\\/DTD HTML 3\\.0 asWedit \\+ extensions\\/\\/|^-\\/\\/AS\\/\\/DTD HTML 3\\.0 asWedit \\+ extensions\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.1E\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.2 Final\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML\\/\\/|^-\\/\\/Metrius\\/\\/DTD Metrius Presentational\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 HTML Strict\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 HTML\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 Tables\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 HTML Strict\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 HTML\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 Tables\\/\\/|^-\\/\\/Netscape Comm\\. Corp\\.\\/\\/DTD HTML\\/\\/|^-\\/\\/Netscape Comm\\. Corp\\.\\/\\/DTD Strict HTML\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML 2\\.0\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML Extended 1\\.0\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML Extended Relaxed 1\\.0\\/\\/|^-\\/\\/SoftQuad Software\\/\\/DTD HoTMetaL PRO 6\\.0::19990601::extensions to HTML 4\\.0\\/\\/|^-\\/\\/SoftQuad\\/\\/DTD HoTMetaL PRO 4\\.0::19971010::extensions to HTML 4\\.0\\/\\/|^-\\/\\/Spyglass\\/\\/DTD HTML 2\\.0 Extended\\/\\/|^-\\/\\/SQ\\/\\/DTD HTML 2\\.0 HoTMetaL \\+ extensions\\/\\/|^-\\/\\/Sun Microsystems Corp\\.\\/\\/DTD HotJava HTML\\/\\/|^-\\/\\/Sun Microsystems Corp\\.\\/\\/DTD HotJava Strict HTML\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3 1995-03-24\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2 Draft\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2 Final\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2S Draft\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.0 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.0 Transitional\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML Experimental 19960712\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML Experimental 970421\\/\\/|^-\\/\\/W3C\\/\\/DTD W3 HTML\\/\\/|^-\\/\\/W3O\\/\\/DTD W3 HTML 3\\.0\\/\\/|^-\\/\\/WebTechs\\/\\/DTD Mozilla HTML 2\\.0\\/\\/|^-\\/\\/WebTechs\\/\\/DTD Mozilla HTML\\/\\//i;\nvar quirkySystemId = \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\";\nvar conditionallyQuirkyPublicIds = /^-\\/\\/W3C\\/\\/DTD HTML 4\\.01 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.01 Transitional\\/\\//i;\n// These DTD public ids put the browser in limited quirks mode\nvar limitedQuirkyPublicIds = /^-\\/\\/W3C\\/\\/DTD XHTML 1\\.0 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD XHTML 1\\.0 Transitional\\/\\//i;\n// Element sets below. See the isA() function for a way to test\n// whether an element is a member of a set\nvar specialSet = Object.create(null);\nspecialSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"address\": true,\n    \"applet\": true,\n    \"area\": true,\n    \"article\": true,\n    \"aside\": true,\n    \"base\": true,\n    \"basefont\": true,\n    \"bgsound\": true,\n    \"blockquote\": true,\n    \"body\": true,\n    \"br\": true,\n    \"button\": true,\n    \"caption\": true,\n    \"center\": true,\n    \"col\": true,\n    \"colgroup\": true,\n    \"dd\": true,\n    \"details\": true,\n    \"dir\": true,\n    \"div\": true,\n    \"dl\": true,\n    \"dt\": true,\n    \"embed\": true,\n    \"fieldset\": true,\n    \"figcaption\": true,\n    \"figure\": true,\n    \"footer\": true,\n    \"form\": true,\n    \"frame\": true,\n    \"frameset\": true,\n    \"h1\": true,\n    \"h2\": true,\n    \"h3\": true,\n    \"h4\": true,\n    \"h5\": true,\n    \"h6\": true,\n    \"head\": true,\n    \"header\": true,\n    \"hgroup\": true,\n    \"hr\": true,\n    \"html\": true,\n    \"iframe\": true,\n    \"img\": true,\n    \"input\": true,\n    \"li\": true,\n    \"link\": true,\n    \"listing\": true,\n    \"main\": true,\n    \"marquee\": true,\n    \"menu\": true,\n    \"meta\": true,\n    \"nav\": true,\n    \"noembed\": true,\n    \"noframes\": true,\n    \"noscript\": true,\n    \"object\": true,\n    \"ol\": true,\n    \"p\": true,\n    \"param\": true,\n    \"plaintext\": true,\n    \"pre\": true,\n    \"script\": true,\n    \"section\": true,\n    \"select\": true,\n    \"source\": true,\n    \"style\": true,\n    \"summary\": true,\n    \"table\": true,\n    \"tbody\": true,\n    \"td\": true,\n    \"template\": true,\n    \"textarea\": true,\n    \"tfoot\": true,\n    \"th\": true,\n    \"thead\": true,\n    \"title\": true,\n    \"tr\": true,\n    \"track\": true,\n    // Note that \"xmp\" was removed from the \"special\" set in the latest\n    // spec, apparently by accident; see\n    // https://github.com/whatwg/html/pull/1919\n    \"ul\": true,\n    \"wbr\": true,\n    \"xmp\": true\n};\nspecialSet[NAMESPACE.SVG] = {\n    __proto__: null,\n    \"foreignObject\": true,\n    \"desc\": true,\n    \"title\": true\n};\nspecialSet[NAMESPACE.MATHML] = {\n    __proto__: null,\n    \"mi\": true,\n    \"mo\": true,\n    \"mn\": true,\n    \"ms\": true,\n    \"mtext\": true,\n    \"annotation-xml\": true\n};\n// The set of address, div, and p HTML tags\nvar addressdivpSet = Object.create(null);\naddressdivpSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"address\": true,\n    \"div\": true,\n    \"p\": true\n};\nvar dddtSet = Object.create(null);\ndddtSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"dd\": true,\n    \"dt\": true\n};\nvar tablesectionrowSet = Object.create(null);\ntablesectionrowSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"table\": true,\n    \"thead\": true,\n    \"tbody\": true,\n    \"tfoot\": true,\n    \"tr\": true\n};\nvar impliedEndTagsSet = Object.create(null);\nimpliedEndTagsSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"dd\": true,\n    \"dt\": true,\n    \"li\": true,\n    \"menuitem\": true,\n    \"optgroup\": true,\n    \"option\": true,\n    \"p\": true,\n    \"rb\": true,\n    \"rp\": true,\n    \"rt\": true,\n    \"rtc\": true\n};\nvar thoroughImpliedEndTagsSet = Object.create(null);\nthoroughImpliedEndTagsSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"caption\": true,\n    \"colgroup\": true,\n    \"dd\": true,\n    \"dt\": true,\n    \"li\": true,\n    \"optgroup\": true,\n    \"option\": true,\n    \"p\": true,\n    \"rb\": true,\n    \"rp\": true,\n    \"rt\": true,\n    \"rtc\": true,\n    \"tbody\": true,\n    \"td\": true,\n    \"tfoot\": true,\n    \"th\": true,\n    \"thead\": true,\n    \"tr\": true\n};\nvar tableContextSet = Object.create(null);\ntableContextSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"table\": true,\n    \"template\": true,\n    \"html\": true\n};\nvar tableBodyContextSet = Object.create(null);\ntableBodyContextSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"tbody\": true,\n    \"tfoot\": true,\n    \"thead\": true,\n    \"template\": true,\n    \"html\": true\n};\nvar tableRowContextSet = Object.create(null);\ntableRowContextSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"tr\": true,\n    \"template\": true,\n    \"html\": true\n};\n// See http://www.w3.org/TR/html5/forms.html#form-associated-element\nvar formassociatedSet = Object.create(null);\nformassociatedSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"button\": true,\n    \"fieldset\": true,\n    \"input\": true,\n    \"keygen\": true,\n    \"object\": true,\n    \"output\": true,\n    \"select\": true,\n    \"textarea\": true,\n    \"img\": true\n};\nvar inScopeSet = Object.create(null);\ninScopeSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"applet\": true,\n    \"caption\": true,\n    \"html\": true,\n    \"table\": true,\n    \"td\": true,\n    \"th\": true,\n    \"marquee\": true,\n    \"object\": true,\n    \"template\": true\n};\ninScopeSet[NAMESPACE.MATHML] = {\n    __proto__: null,\n    \"mi\": true,\n    \"mo\": true,\n    \"mn\": true,\n    \"ms\": true,\n    \"mtext\": true,\n    \"annotation-xml\": true\n};\ninScopeSet[NAMESPACE.SVG] = {\n    __proto__: null,\n    \"foreignObject\": true,\n    \"desc\": true,\n    \"title\": true\n};\nvar inListItemScopeSet = Object.create(inScopeSet);\ninListItemScopeSet[NAMESPACE.HTML] = Object.create(inScopeSet[NAMESPACE.HTML]);\ninListItemScopeSet[NAMESPACE.HTML].ol = true;\ninListItemScopeSet[NAMESPACE.HTML].ul = true;\nvar inButtonScopeSet = Object.create(inScopeSet);\ninButtonScopeSet[NAMESPACE.HTML] = Object.create(inScopeSet[NAMESPACE.HTML]);\ninButtonScopeSet[NAMESPACE.HTML].button = true;\nvar inTableScopeSet = Object.create(null);\ninTableScopeSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"html\": true,\n    \"table\": true,\n    \"template\": true\n};\n// The set of elements for select scope is the everything *except* these\nvar invertedSelectScopeSet = Object.create(null);\ninvertedSelectScopeSet[NAMESPACE.HTML] = {\n    __proto__: null,\n    \"optgroup\": true,\n    \"option\": true\n};\nvar mathmlTextIntegrationPointSet = Object.create(null);\nmathmlTextIntegrationPointSet[NAMESPACE.MATHML] = {\n    __proto__: null,\n    mi: true,\n    mo: true,\n    mn: true,\n    ms: true,\n    mtext: true\n};\nvar htmlIntegrationPointSet = Object.create(null);\nhtmlIntegrationPointSet[NAMESPACE.SVG] = {\n    __proto__: null,\n    foreignObject: true,\n    desc: true,\n    title: true\n};\nvar foreignAttributes = {\n    __proto__: null,\n    \"xlink:actuate\": NAMESPACE.XLINK,\n    \"xlink:arcrole\": NAMESPACE.XLINK,\n    \"xlink:href\": NAMESPACE.XLINK,\n    \"xlink:role\": NAMESPACE.XLINK,\n    \"xlink:show\": NAMESPACE.XLINK,\n    \"xlink:title\": NAMESPACE.XLINK,\n    \"xlink:type\": NAMESPACE.XLINK,\n    \"xml:base\": NAMESPACE.XML,\n    \"xml:lang\": NAMESPACE.XML,\n    \"xml:space\": NAMESPACE.XML,\n    \"xmlns\": NAMESPACE.XMLNS,\n    \"xmlns:xlink\": NAMESPACE.XMLNS\n};\n// Lowercase to mixed case mapping for SVG attributes and tagnames\nvar svgAttrAdjustments = {\n    __proto__: null,\n    attributename: \"attributeName\",\n    attributetype: \"attributeType\",\n    basefrequency: \"baseFrequency\",\n    baseprofile: \"baseProfile\",\n    calcmode: \"calcMode\",\n    clippathunits: \"clipPathUnits\",\n    diffuseconstant: \"diffuseConstant\",\n    edgemode: \"edgeMode\",\n    filterunits: \"filterUnits\",\n    glyphref: \"glyphRef\",\n    gradienttransform: \"gradientTransform\",\n    gradientunits: \"gradientUnits\",\n    kernelmatrix: \"kernelMatrix\",\n    kernelunitlength: \"kernelUnitLength\",\n    keypoints: \"keyPoints\",\n    keysplines: \"keySplines\",\n    keytimes: \"keyTimes\",\n    lengthadjust: \"lengthAdjust\",\n    limitingconeangle: \"limitingConeAngle\",\n    markerheight: \"markerHeight\",\n    markerunits: \"markerUnits\",\n    markerwidth: \"markerWidth\",\n    maskcontentunits: \"maskContentUnits\",\n    maskunits: \"maskUnits\",\n    numoctaves: \"numOctaves\",\n    pathlength: \"pathLength\",\n    patterncontentunits: \"patternContentUnits\",\n    patterntransform: \"patternTransform\",\n    patternunits: \"patternUnits\",\n    pointsatx: \"pointsAtX\",\n    pointsaty: \"pointsAtY\",\n    pointsatz: \"pointsAtZ\",\n    preservealpha: \"preserveAlpha\",\n    preserveaspectratio: \"preserveAspectRatio\",\n    primitiveunits: \"primitiveUnits\",\n    refx: \"refX\",\n    refy: \"refY\",\n    repeatcount: \"repeatCount\",\n    repeatdur: \"repeatDur\",\n    requiredextensions: \"requiredExtensions\",\n    requiredfeatures: \"requiredFeatures\",\n    specularconstant: \"specularConstant\",\n    specularexponent: \"specularExponent\",\n    spreadmethod: \"spreadMethod\",\n    startoffset: \"startOffset\",\n    stddeviation: \"stdDeviation\",\n    stitchtiles: \"stitchTiles\",\n    surfacescale: \"surfaceScale\",\n    systemlanguage: \"systemLanguage\",\n    tablevalues: \"tableValues\",\n    targetx: \"targetX\",\n    targety: \"targetY\",\n    textlength: \"textLength\",\n    viewbox: \"viewBox\",\n    viewtarget: \"viewTarget\",\n    xchannelselector: \"xChannelSelector\",\n    ychannelselector: \"yChannelSelector\",\n    zoomandpan: \"zoomAndPan\"\n};\nvar svgTagNameAdjustments = {\n    __proto__: null,\n    altglyph: \"altGlyph\",\n    altglyphdef: \"altGlyphDef\",\n    altglyphitem: \"altGlyphItem\",\n    animatecolor: \"animateColor\",\n    animatemotion: \"animateMotion\",\n    animatetransform: \"animateTransform\",\n    clippath: \"clipPath\",\n    feblend: \"feBlend\",\n    fecolormatrix: \"feColorMatrix\",\n    fecomponenttransfer: \"feComponentTransfer\",\n    fecomposite: \"feComposite\",\n    feconvolvematrix: \"feConvolveMatrix\",\n    fediffuselighting: \"feDiffuseLighting\",\n    fedisplacementmap: \"feDisplacementMap\",\n    fedistantlight: \"feDistantLight\",\n    feflood: \"feFlood\",\n    fefunca: \"feFuncA\",\n    fefuncb: \"feFuncB\",\n    fefuncg: \"feFuncG\",\n    fefuncr: \"feFuncR\",\n    fegaussianblur: \"feGaussianBlur\",\n    feimage: \"feImage\",\n    femerge: \"feMerge\",\n    femergenode: \"feMergeNode\",\n    femorphology: \"feMorphology\",\n    feoffset: \"feOffset\",\n    fepointlight: \"fePointLight\",\n    fespecularlighting: \"feSpecularLighting\",\n    fespotlight: \"feSpotLight\",\n    fetile: \"feTile\",\n    feturbulence: \"feTurbulence\",\n    foreignobject: \"foreignObject\",\n    glyphref: \"glyphRef\",\n    lineargradient: \"linearGradient\",\n    radialgradient: \"radialGradient\",\n    textpath: \"textPath\"\n};\n// Data for parsing numeric and named character references\n// These next 3 objects are direct translations of tables\n// in the HTML spec into JavaScript object format\nvar numericCharRefReplacements = {\n    __proto__: null,\n    0x00: 0xFFFD,\n    0x80: 0x20AC,\n    0x82: 0x201A,\n    0x83: 0x0192,\n    0x84: 0x201E,\n    0x85: 0x2026,\n    0x86: 0x2020,\n    0x87: 0x2021,\n    0x88: 0x02C6,\n    0x89: 0x2030,\n    0x8A: 0x0160,\n    0x8B: 0x2039,\n    0x8C: 0x0152,\n    0x8E: 0x017D,\n    0x91: 0x2018,\n    0x92: 0x2019,\n    0x93: 0x201C,\n    0x94: 0x201D,\n    0x95: 0x2022,\n    0x96: 0x2013,\n    0x97: 0x2014,\n    0x98: 0x02DC,\n    0x99: 0x2122,\n    0x9A: 0x0161,\n    0x9B: 0x203A,\n    0x9C: 0x0153,\n    0x9E: 0x017E,\n    0x9F: 0x0178\n};\n/*\n * This table is generated with test/tools/update-entities.js\n */ var namedCharRefs = {\n    __proto__: null,\n    \"AElig\": 0xc6,\n    \"AElig;\": 0xc6,\n    \"AMP\": 0x26,\n    \"AMP;\": 0x26,\n    \"Aacute\": 0xc1,\n    \"Aacute;\": 0xc1,\n    \"Abreve;\": 0x102,\n    \"Acirc\": 0xc2,\n    \"Acirc;\": 0xc2,\n    \"Acy;\": 0x410,\n    \"Afr;\": [\n        0xd835,\n        0xdd04\n    ],\n    \"Agrave\": 0xc0,\n    \"Agrave;\": 0xc0,\n    \"Alpha;\": 0x391,\n    \"Amacr;\": 0x100,\n    \"And;\": 0x2a53,\n    \"Aogon;\": 0x104,\n    \"Aopf;\": [\n        0xd835,\n        0xdd38\n    ],\n    \"ApplyFunction;\": 0x2061,\n    \"Aring\": 0xc5,\n    \"Aring;\": 0xc5,\n    \"Ascr;\": [\n        0xd835,\n        0xdc9c\n    ],\n    \"Assign;\": 0x2254,\n    \"Atilde\": 0xc3,\n    \"Atilde;\": 0xc3,\n    \"Auml\": 0xc4,\n    \"Auml;\": 0xc4,\n    \"Backslash;\": 0x2216,\n    \"Barv;\": 0x2ae7,\n    \"Barwed;\": 0x2306,\n    \"Bcy;\": 0x411,\n    \"Because;\": 0x2235,\n    \"Bernoullis;\": 0x212c,\n    \"Beta;\": 0x392,\n    \"Bfr;\": [\n        0xd835,\n        0xdd05\n    ],\n    \"Bopf;\": [\n        0xd835,\n        0xdd39\n    ],\n    \"Breve;\": 0x2d8,\n    \"Bscr;\": 0x212c,\n    \"Bumpeq;\": 0x224e,\n    \"CHcy;\": 0x427,\n    \"COPY\": 0xa9,\n    \"COPY;\": 0xa9,\n    \"Cacute;\": 0x106,\n    \"Cap;\": 0x22d2,\n    \"CapitalDifferentialD;\": 0x2145,\n    \"Cayleys;\": 0x212d,\n    \"Ccaron;\": 0x10c,\n    \"Ccedil\": 0xc7,\n    \"Ccedil;\": 0xc7,\n    \"Ccirc;\": 0x108,\n    \"Cconint;\": 0x2230,\n    \"Cdot;\": 0x10a,\n    \"Cedilla;\": 0xb8,\n    \"CenterDot;\": 0xb7,\n    \"Cfr;\": 0x212d,\n    \"Chi;\": 0x3a7,\n    \"CircleDot;\": 0x2299,\n    \"CircleMinus;\": 0x2296,\n    \"CirclePlus;\": 0x2295,\n    \"CircleTimes;\": 0x2297,\n    \"ClockwiseContourIntegral;\": 0x2232,\n    \"CloseCurlyDoubleQuote;\": 0x201d,\n    \"CloseCurlyQuote;\": 0x2019,\n    \"Colon;\": 0x2237,\n    \"Colone;\": 0x2a74,\n    \"Congruent;\": 0x2261,\n    \"Conint;\": 0x222f,\n    \"ContourIntegral;\": 0x222e,\n    \"Copf;\": 0x2102,\n    \"Coproduct;\": 0x2210,\n    \"CounterClockwiseContourIntegral;\": 0x2233,\n    \"Cross;\": 0x2a2f,\n    \"Cscr;\": [\n        0xd835,\n        0xdc9e\n    ],\n    \"Cup;\": 0x22d3,\n    \"CupCap;\": 0x224d,\n    \"DD;\": 0x2145,\n    \"DDotrahd;\": 0x2911,\n    \"DJcy;\": 0x402,\n    \"DScy;\": 0x405,\n    \"DZcy;\": 0x40f,\n    \"Dagger;\": 0x2021,\n    \"Darr;\": 0x21a1,\n    \"Dashv;\": 0x2ae4,\n    \"Dcaron;\": 0x10e,\n    \"Dcy;\": 0x414,\n    \"Del;\": 0x2207,\n    \"Delta;\": 0x394,\n    \"Dfr;\": [\n        0xd835,\n        0xdd07\n    ],\n    \"DiacriticalAcute;\": 0xb4,\n    \"DiacriticalDot;\": 0x2d9,\n    \"DiacriticalDoubleAcute;\": 0x2dd,\n    \"DiacriticalGrave;\": 0x60,\n    \"DiacriticalTilde;\": 0x2dc,\n    \"Diamond;\": 0x22c4,\n    \"DifferentialD;\": 0x2146,\n    \"Dopf;\": [\n        0xd835,\n        0xdd3b\n    ],\n    \"Dot;\": 0xa8,\n    \"DotDot;\": 0x20dc,\n    \"DotEqual;\": 0x2250,\n    \"DoubleContourIntegral;\": 0x222f,\n    \"DoubleDot;\": 0xa8,\n    \"DoubleDownArrow;\": 0x21d3,\n    \"DoubleLeftArrow;\": 0x21d0,\n    \"DoubleLeftRightArrow;\": 0x21d4,\n    \"DoubleLeftTee;\": 0x2ae4,\n    \"DoubleLongLeftArrow;\": 0x27f8,\n    \"DoubleLongLeftRightArrow;\": 0x27fa,\n    \"DoubleLongRightArrow;\": 0x27f9,\n    \"DoubleRightArrow;\": 0x21d2,\n    \"DoubleRightTee;\": 0x22a8,\n    \"DoubleUpArrow;\": 0x21d1,\n    \"DoubleUpDownArrow;\": 0x21d5,\n    \"DoubleVerticalBar;\": 0x2225,\n    \"DownArrow;\": 0x2193,\n    \"DownArrowBar;\": 0x2913,\n    \"DownArrowUpArrow;\": 0x21f5,\n    \"DownBreve;\": 0x311,\n    \"DownLeftRightVector;\": 0x2950,\n    \"DownLeftTeeVector;\": 0x295e,\n    \"DownLeftVector;\": 0x21bd,\n    \"DownLeftVectorBar;\": 0x2956,\n    \"DownRightTeeVector;\": 0x295f,\n    \"DownRightVector;\": 0x21c1,\n    \"DownRightVectorBar;\": 0x2957,\n    \"DownTee;\": 0x22a4,\n    \"DownTeeArrow;\": 0x21a7,\n    \"Downarrow;\": 0x21d3,\n    \"Dscr;\": [\n        0xd835,\n        0xdc9f\n    ],\n    \"Dstrok;\": 0x110,\n    \"ENG;\": 0x14a,\n    \"ETH\": 0xd0,\n    \"ETH;\": 0xd0,\n    \"Eacute\": 0xc9,\n    \"Eacute;\": 0xc9,\n    \"Ecaron;\": 0x11a,\n    \"Ecirc\": 0xca,\n    \"Ecirc;\": 0xca,\n    \"Ecy;\": 0x42d,\n    \"Edot;\": 0x116,\n    \"Efr;\": [\n        0xd835,\n        0xdd08\n    ],\n    \"Egrave\": 0xc8,\n    \"Egrave;\": 0xc8,\n    \"Element;\": 0x2208,\n    \"Emacr;\": 0x112,\n    \"EmptySmallSquare;\": 0x25fb,\n    \"EmptyVerySmallSquare;\": 0x25ab,\n    \"Eogon;\": 0x118,\n    \"Eopf;\": [\n        0xd835,\n        0xdd3c\n    ],\n    \"Epsilon;\": 0x395,\n    \"Equal;\": 0x2a75,\n    \"EqualTilde;\": 0x2242,\n    \"Equilibrium;\": 0x21cc,\n    \"Escr;\": 0x2130,\n    \"Esim;\": 0x2a73,\n    \"Eta;\": 0x397,\n    \"Euml\": 0xcb,\n    \"Euml;\": 0xcb,\n    \"Exists;\": 0x2203,\n    \"ExponentialE;\": 0x2147,\n    \"Fcy;\": 0x424,\n    \"Ffr;\": [\n        0xd835,\n        0xdd09\n    ],\n    \"FilledSmallSquare;\": 0x25fc,\n    \"FilledVerySmallSquare;\": 0x25aa,\n    \"Fopf;\": [\n        0xd835,\n        0xdd3d\n    ],\n    \"ForAll;\": 0x2200,\n    \"Fouriertrf;\": 0x2131,\n    \"Fscr;\": 0x2131,\n    \"GJcy;\": 0x403,\n    \"GT\": 0x3e,\n    \"GT;\": 0x3e,\n    \"Gamma;\": 0x393,\n    \"Gammad;\": 0x3dc,\n    \"Gbreve;\": 0x11e,\n    \"Gcedil;\": 0x122,\n    \"Gcirc;\": 0x11c,\n    \"Gcy;\": 0x413,\n    \"Gdot;\": 0x120,\n    \"Gfr;\": [\n        0xd835,\n        0xdd0a\n    ],\n    \"Gg;\": 0x22d9,\n    \"Gopf;\": [\n        0xd835,\n        0xdd3e\n    ],\n    \"GreaterEqual;\": 0x2265,\n    \"GreaterEqualLess;\": 0x22db,\n    \"GreaterFullEqual;\": 0x2267,\n    \"GreaterGreater;\": 0x2aa2,\n    \"GreaterLess;\": 0x2277,\n    \"GreaterSlantEqual;\": 0x2a7e,\n    \"GreaterTilde;\": 0x2273,\n    \"Gscr;\": [\n        0xd835,\n        0xdca2\n    ],\n    \"Gt;\": 0x226b,\n    \"HARDcy;\": 0x42a,\n    \"Hacek;\": 0x2c7,\n    \"Hat;\": 0x5e,\n    \"Hcirc;\": 0x124,\n    \"Hfr;\": 0x210c,\n    \"HilbertSpace;\": 0x210b,\n    \"Hopf;\": 0x210d,\n    \"HorizontalLine;\": 0x2500,\n    \"Hscr;\": 0x210b,\n    \"Hstrok;\": 0x126,\n    \"HumpDownHump;\": 0x224e,\n    \"HumpEqual;\": 0x224f,\n    \"IEcy;\": 0x415,\n    \"IJlig;\": 0x132,\n    \"IOcy;\": 0x401,\n    \"Iacute\": 0xcd,\n    \"Iacute;\": 0xcd,\n    \"Icirc\": 0xce,\n    \"Icirc;\": 0xce,\n    \"Icy;\": 0x418,\n    \"Idot;\": 0x130,\n    \"Ifr;\": 0x2111,\n    \"Igrave\": 0xcc,\n    \"Igrave;\": 0xcc,\n    \"Im;\": 0x2111,\n    \"Imacr;\": 0x12a,\n    \"ImaginaryI;\": 0x2148,\n    \"Implies;\": 0x21d2,\n    \"Int;\": 0x222c,\n    \"Integral;\": 0x222b,\n    \"Intersection;\": 0x22c2,\n    \"InvisibleComma;\": 0x2063,\n    \"InvisibleTimes;\": 0x2062,\n    \"Iogon;\": 0x12e,\n    \"Iopf;\": [\n        0xd835,\n        0xdd40\n    ],\n    \"Iota;\": 0x399,\n    \"Iscr;\": 0x2110,\n    \"Itilde;\": 0x128,\n    \"Iukcy;\": 0x406,\n    \"Iuml\": 0xcf,\n    \"Iuml;\": 0xcf,\n    \"Jcirc;\": 0x134,\n    \"Jcy;\": 0x419,\n    \"Jfr;\": [\n        0xd835,\n        0xdd0d\n    ],\n    \"Jopf;\": [\n        0xd835,\n        0xdd41\n    ],\n    \"Jscr;\": [\n        0xd835,\n        0xdca5\n    ],\n    \"Jsercy;\": 0x408,\n    \"Jukcy;\": 0x404,\n    \"KHcy;\": 0x425,\n    \"KJcy;\": 0x40c,\n    \"Kappa;\": 0x39a,\n    \"Kcedil;\": 0x136,\n    \"Kcy;\": 0x41a,\n    \"Kfr;\": [\n        0xd835,\n        0xdd0e\n    ],\n    \"Kopf;\": [\n        0xd835,\n        0xdd42\n    ],\n    \"Kscr;\": [\n        0xd835,\n        0xdca6\n    ],\n    \"LJcy;\": 0x409,\n    \"LT\": 0x3c,\n    \"LT;\": 0x3c,\n    \"Lacute;\": 0x139,\n    \"Lambda;\": 0x39b,\n    \"Lang;\": 0x27ea,\n    \"Laplacetrf;\": 0x2112,\n    \"Larr;\": 0x219e,\n    \"Lcaron;\": 0x13d,\n    \"Lcedil;\": 0x13b,\n    \"Lcy;\": 0x41b,\n    \"LeftAngleBracket;\": 0x27e8,\n    \"LeftArrow;\": 0x2190,\n    \"LeftArrowBar;\": 0x21e4,\n    \"LeftArrowRightArrow;\": 0x21c6,\n    \"LeftCeiling;\": 0x2308,\n    \"LeftDoubleBracket;\": 0x27e6,\n    \"LeftDownTeeVector;\": 0x2961,\n    \"LeftDownVector;\": 0x21c3,\n    \"LeftDownVectorBar;\": 0x2959,\n    \"LeftFloor;\": 0x230a,\n    \"LeftRightArrow;\": 0x2194,\n    \"LeftRightVector;\": 0x294e,\n    \"LeftTee;\": 0x22a3,\n    \"LeftTeeArrow;\": 0x21a4,\n    \"LeftTeeVector;\": 0x295a,\n    \"LeftTriangle;\": 0x22b2,\n    \"LeftTriangleBar;\": 0x29cf,\n    \"LeftTriangleEqual;\": 0x22b4,\n    \"LeftUpDownVector;\": 0x2951,\n    \"LeftUpTeeVector;\": 0x2960,\n    \"LeftUpVector;\": 0x21bf,\n    \"LeftUpVectorBar;\": 0x2958,\n    \"LeftVector;\": 0x21bc,\n    \"LeftVectorBar;\": 0x2952,\n    \"Leftarrow;\": 0x21d0,\n    \"Leftrightarrow;\": 0x21d4,\n    \"LessEqualGreater;\": 0x22da,\n    \"LessFullEqual;\": 0x2266,\n    \"LessGreater;\": 0x2276,\n    \"LessLess;\": 0x2aa1,\n    \"LessSlantEqual;\": 0x2a7d,\n    \"LessTilde;\": 0x2272,\n    \"Lfr;\": [\n        0xd835,\n        0xdd0f\n    ],\n    \"Ll;\": 0x22d8,\n    \"Lleftarrow;\": 0x21da,\n    \"Lmidot;\": 0x13f,\n    \"LongLeftArrow;\": 0x27f5,\n    \"LongLeftRightArrow;\": 0x27f7,\n    \"LongRightArrow;\": 0x27f6,\n    \"Longleftarrow;\": 0x27f8,\n    \"Longleftrightarrow;\": 0x27fa,\n    \"Longrightarrow;\": 0x27f9,\n    \"Lopf;\": [\n        0xd835,\n        0xdd43\n    ],\n    \"LowerLeftArrow;\": 0x2199,\n    \"LowerRightArrow;\": 0x2198,\n    \"Lscr;\": 0x2112,\n    \"Lsh;\": 0x21b0,\n    \"Lstrok;\": 0x141,\n    \"Lt;\": 0x226a,\n    \"Map;\": 0x2905,\n    \"Mcy;\": 0x41c,\n    \"MediumSpace;\": 0x205f,\n    \"Mellintrf;\": 0x2133,\n    \"Mfr;\": [\n        0xd835,\n        0xdd10\n    ],\n    \"MinusPlus;\": 0x2213,\n    \"Mopf;\": [\n        0xd835,\n        0xdd44\n    ],\n    \"Mscr;\": 0x2133,\n    \"Mu;\": 0x39c,\n    \"NJcy;\": 0x40a,\n    \"Nacute;\": 0x143,\n    \"Ncaron;\": 0x147,\n    \"Ncedil;\": 0x145,\n    \"Ncy;\": 0x41d,\n    \"NegativeMediumSpace;\": 0x200b,\n    \"NegativeThickSpace;\": 0x200b,\n    \"NegativeThinSpace;\": 0x200b,\n    \"NegativeVeryThinSpace;\": 0x200b,\n    \"NestedGreaterGreater;\": 0x226b,\n    \"NestedLessLess;\": 0x226a,\n    \"NewLine;\": 0xa,\n    \"Nfr;\": [\n        0xd835,\n        0xdd11\n    ],\n    \"NoBreak;\": 0x2060,\n    \"NonBreakingSpace;\": 0xa0,\n    \"Nopf;\": 0x2115,\n    \"Not;\": 0x2aec,\n    \"NotCongruent;\": 0x2262,\n    \"NotCupCap;\": 0x226d,\n    \"NotDoubleVerticalBar;\": 0x2226,\n    \"NotElement;\": 0x2209,\n    \"NotEqual;\": 0x2260,\n    \"NotEqualTilde;\": [\n        0x2242,\n        0x338\n    ],\n    \"NotExists;\": 0x2204,\n    \"NotGreater;\": 0x226f,\n    \"NotGreaterEqual;\": 0x2271,\n    \"NotGreaterFullEqual;\": [\n        0x2267,\n        0x338\n    ],\n    \"NotGreaterGreater;\": [\n        0x226b,\n        0x338\n    ],\n    \"NotGreaterLess;\": 0x2279,\n    \"NotGreaterSlantEqual;\": [\n        0x2a7e,\n        0x338\n    ],\n    \"NotGreaterTilde;\": 0x2275,\n    \"NotHumpDownHump;\": [\n        0x224e,\n        0x338\n    ],\n    \"NotHumpEqual;\": [\n        0x224f,\n        0x338\n    ],\n    \"NotLeftTriangle;\": 0x22ea,\n    \"NotLeftTriangleBar;\": [\n        0x29cf,\n        0x338\n    ],\n    \"NotLeftTriangleEqual;\": 0x22ec,\n    \"NotLess;\": 0x226e,\n    \"NotLessEqual;\": 0x2270,\n    \"NotLessGreater;\": 0x2278,\n    \"NotLessLess;\": [\n        0x226a,\n        0x338\n    ],\n    \"NotLessSlantEqual;\": [\n        0x2a7d,\n        0x338\n    ],\n    \"NotLessTilde;\": 0x2274,\n    \"NotNestedGreaterGreater;\": [\n        0x2aa2,\n        0x338\n    ],\n    \"NotNestedLessLess;\": [\n        0x2aa1,\n        0x338\n    ],\n    \"NotPrecedes;\": 0x2280,\n    \"NotPrecedesEqual;\": [\n        0x2aaf,\n        0x338\n    ],\n    \"NotPrecedesSlantEqual;\": 0x22e0,\n    \"NotReverseElement;\": 0x220c,\n    \"NotRightTriangle;\": 0x22eb,\n    \"NotRightTriangleBar;\": [\n        0x29d0,\n        0x338\n    ],\n    \"NotRightTriangleEqual;\": 0x22ed,\n    \"NotSquareSubset;\": [\n        0x228f,\n        0x338\n    ],\n    \"NotSquareSubsetEqual;\": 0x22e2,\n    \"NotSquareSuperset;\": [\n        0x2290,\n        0x338\n    ],\n    \"NotSquareSupersetEqual;\": 0x22e3,\n    \"NotSubset;\": [\n        0x2282,\n        0x20d2\n    ],\n    \"NotSubsetEqual;\": 0x2288,\n    \"NotSucceeds;\": 0x2281,\n    \"NotSucceedsEqual;\": [\n        0x2ab0,\n        0x338\n    ],\n    \"NotSucceedsSlantEqual;\": 0x22e1,\n    \"NotSucceedsTilde;\": [\n        0x227f,\n        0x338\n    ],\n    \"NotSuperset;\": [\n        0x2283,\n        0x20d2\n    ],\n    \"NotSupersetEqual;\": 0x2289,\n    \"NotTilde;\": 0x2241,\n    \"NotTildeEqual;\": 0x2244,\n    \"NotTildeFullEqual;\": 0x2247,\n    \"NotTildeTilde;\": 0x2249,\n    \"NotVerticalBar;\": 0x2224,\n    \"Nscr;\": [\n        0xd835,\n        0xdca9\n    ],\n    \"Ntilde\": 0xd1,\n    \"Ntilde;\": 0xd1,\n    \"Nu;\": 0x39d,\n    \"OElig;\": 0x152,\n    \"Oacute\": 0xd3,\n    \"Oacute;\": 0xd3,\n    \"Ocirc\": 0xd4,\n    \"Ocirc;\": 0xd4,\n    \"Ocy;\": 0x41e,\n    \"Odblac;\": 0x150,\n    \"Ofr;\": [\n        0xd835,\n        0xdd12\n    ],\n    \"Ograve\": 0xd2,\n    \"Ograve;\": 0xd2,\n    \"Omacr;\": 0x14c,\n    \"Omega;\": 0x3a9,\n    \"Omicron;\": 0x39f,\n    \"Oopf;\": [\n        0xd835,\n        0xdd46\n    ],\n    \"OpenCurlyDoubleQuote;\": 0x201c,\n    \"OpenCurlyQuote;\": 0x2018,\n    \"Or;\": 0x2a54,\n    \"Oscr;\": [\n        0xd835,\n        0xdcaa\n    ],\n    \"Oslash\": 0xd8,\n    \"Oslash;\": 0xd8,\n    \"Otilde\": 0xd5,\n    \"Otilde;\": 0xd5,\n    \"Otimes;\": 0x2a37,\n    \"Ouml\": 0xd6,\n    \"Ouml;\": 0xd6,\n    \"OverBar;\": 0x203e,\n    \"OverBrace;\": 0x23de,\n    \"OverBracket;\": 0x23b4,\n    \"OverParenthesis;\": 0x23dc,\n    \"PartialD;\": 0x2202,\n    \"Pcy;\": 0x41f,\n    \"Pfr;\": [\n        0xd835,\n        0xdd13\n    ],\n    \"Phi;\": 0x3a6,\n    \"Pi;\": 0x3a0,\n    \"PlusMinus;\": 0xb1,\n    \"Poincareplane;\": 0x210c,\n    \"Popf;\": 0x2119,\n    \"Pr;\": 0x2abb,\n    \"Precedes;\": 0x227a,\n    \"PrecedesEqual;\": 0x2aaf,\n    \"PrecedesSlantEqual;\": 0x227c,\n    \"PrecedesTilde;\": 0x227e,\n    \"Prime;\": 0x2033,\n    \"Product;\": 0x220f,\n    \"Proportion;\": 0x2237,\n    \"Proportional;\": 0x221d,\n    \"Pscr;\": [\n        0xd835,\n        0xdcab\n    ],\n    \"Psi;\": 0x3a8,\n    \"QUOT\": 0x22,\n    \"QUOT;\": 0x22,\n    \"Qfr;\": [\n        0xd835,\n        0xdd14\n    ],\n    \"Qopf;\": 0x211a,\n    \"Qscr;\": [\n        0xd835,\n        0xdcac\n    ],\n    \"RBarr;\": 0x2910,\n    \"REG\": 0xae,\n    \"REG;\": 0xae,\n    \"Racute;\": 0x154,\n    \"Rang;\": 0x27eb,\n    \"Rarr;\": 0x21a0,\n    \"Rarrtl;\": 0x2916,\n    \"Rcaron;\": 0x158,\n    \"Rcedil;\": 0x156,\n    \"Rcy;\": 0x420,\n    \"Re;\": 0x211c,\n    \"ReverseElement;\": 0x220b,\n    \"ReverseEquilibrium;\": 0x21cb,\n    \"ReverseUpEquilibrium;\": 0x296f,\n    \"Rfr;\": 0x211c,\n    \"Rho;\": 0x3a1,\n    \"RightAngleBracket;\": 0x27e9,\n    \"RightArrow;\": 0x2192,\n    \"RightArrowBar;\": 0x21e5,\n    \"RightArrowLeftArrow;\": 0x21c4,\n    \"RightCeiling;\": 0x2309,\n    \"RightDoubleBracket;\": 0x27e7,\n    \"RightDownTeeVector;\": 0x295d,\n    \"RightDownVector;\": 0x21c2,\n    \"RightDownVectorBar;\": 0x2955,\n    \"RightFloor;\": 0x230b,\n    \"RightTee;\": 0x22a2,\n    \"RightTeeArrow;\": 0x21a6,\n    \"RightTeeVector;\": 0x295b,\n    \"RightTriangle;\": 0x22b3,\n    \"RightTriangleBar;\": 0x29d0,\n    \"RightTriangleEqual;\": 0x22b5,\n    \"RightUpDownVector;\": 0x294f,\n    \"RightUpTeeVector;\": 0x295c,\n    \"RightUpVector;\": 0x21be,\n    \"RightUpVectorBar;\": 0x2954,\n    \"RightVector;\": 0x21c0,\n    \"RightVectorBar;\": 0x2953,\n    \"Rightarrow;\": 0x21d2,\n    \"Ropf;\": 0x211d,\n    \"RoundImplies;\": 0x2970,\n    \"Rrightarrow;\": 0x21db,\n    \"Rscr;\": 0x211b,\n    \"Rsh;\": 0x21b1,\n    \"RuleDelayed;\": 0x29f4,\n    \"SHCHcy;\": 0x429,\n    \"SHcy;\": 0x428,\n    \"SOFTcy;\": 0x42c,\n    \"Sacute;\": 0x15a,\n    \"Sc;\": 0x2abc,\n    \"Scaron;\": 0x160,\n    \"Scedil;\": 0x15e,\n    \"Scirc;\": 0x15c,\n    \"Scy;\": 0x421,\n    \"Sfr;\": [\n        0xd835,\n        0xdd16\n    ],\n    \"ShortDownArrow;\": 0x2193,\n    \"ShortLeftArrow;\": 0x2190,\n    \"ShortRightArrow;\": 0x2192,\n    \"ShortUpArrow;\": 0x2191,\n    \"Sigma;\": 0x3a3,\n    \"SmallCircle;\": 0x2218,\n    \"Sopf;\": [\n        0xd835,\n        0xdd4a\n    ],\n    \"Sqrt;\": 0x221a,\n    \"Square;\": 0x25a1,\n    \"SquareIntersection;\": 0x2293,\n    \"SquareSubset;\": 0x228f,\n    \"SquareSubsetEqual;\": 0x2291,\n    \"SquareSuperset;\": 0x2290,\n    \"SquareSupersetEqual;\": 0x2292,\n    \"SquareUnion;\": 0x2294,\n    \"Sscr;\": [\n        0xd835,\n        0xdcae\n    ],\n    \"Star;\": 0x22c6,\n    \"Sub;\": 0x22d0,\n    \"Subset;\": 0x22d0,\n    \"SubsetEqual;\": 0x2286,\n    \"Succeeds;\": 0x227b,\n    \"SucceedsEqual;\": 0x2ab0,\n    \"SucceedsSlantEqual;\": 0x227d,\n    \"SucceedsTilde;\": 0x227f,\n    \"SuchThat;\": 0x220b,\n    \"Sum;\": 0x2211,\n    \"Sup;\": 0x22d1,\n    \"Superset;\": 0x2283,\n    \"SupersetEqual;\": 0x2287,\n    \"Supset;\": 0x22d1,\n    \"THORN\": 0xde,\n    \"THORN;\": 0xde,\n    \"TRADE;\": 0x2122,\n    \"TSHcy;\": 0x40b,\n    \"TScy;\": 0x426,\n    \"Tab;\": 0x9,\n    \"Tau;\": 0x3a4,\n    \"Tcaron;\": 0x164,\n    \"Tcedil;\": 0x162,\n    \"Tcy;\": 0x422,\n    \"Tfr;\": [\n        0xd835,\n        0xdd17\n    ],\n    \"Therefore;\": 0x2234,\n    \"Theta;\": 0x398,\n    \"ThickSpace;\": [\n        0x205f,\n        0x200a\n    ],\n    \"ThinSpace;\": 0x2009,\n    \"Tilde;\": 0x223c,\n    \"TildeEqual;\": 0x2243,\n    \"TildeFullEqual;\": 0x2245,\n    \"TildeTilde;\": 0x2248,\n    \"Topf;\": [\n        0xd835,\n        0xdd4b\n    ],\n    \"TripleDot;\": 0x20db,\n    \"Tscr;\": [\n        0xd835,\n        0xdcaf\n    ],\n    \"Tstrok;\": 0x166,\n    \"Uacute\": 0xda,\n    \"Uacute;\": 0xda,\n    \"Uarr;\": 0x219f,\n    \"Uarrocir;\": 0x2949,\n    \"Ubrcy;\": 0x40e,\n    \"Ubreve;\": 0x16c,\n    \"Ucirc\": 0xdb,\n    \"Ucirc;\": 0xdb,\n    \"Ucy;\": 0x423,\n    \"Udblac;\": 0x170,\n    \"Ufr;\": [\n        0xd835,\n        0xdd18\n    ],\n    \"Ugrave\": 0xd9,\n    \"Ugrave;\": 0xd9,\n    \"Umacr;\": 0x16a,\n    \"UnderBar;\": 0x5f,\n    \"UnderBrace;\": 0x23df,\n    \"UnderBracket;\": 0x23b5,\n    \"UnderParenthesis;\": 0x23dd,\n    \"Union;\": 0x22c3,\n    \"UnionPlus;\": 0x228e,\n    \"Uogon;\": 0x172,\n    \"Uopf;\": [\n        0xd835,\n        0xdd4c\n    ],\n    \"UpArrow;\": 0x2191,\n    \"UpArrowBar;\": 0x2912,\n    \"UpArrowDownArrow;\": 0x21c5,\n    \"UpDownArrow;\": 0x2195,\n    \"UpEquilibrium;\": 0x296e,\n    \"UpTee;\": 0x22a5,\n    \"UpTeeArrow;\": 0x21a5,\n    \"Uparrow;\": 0x21d1,\n    \"Updownarrow;\": 0x21d5,\n    \"UpperLeftArrow;\": 0x2196,\n    \"UpperRightArrow;\": 0x2197,\n    \"Upsi;\": 0x3d2,\n    \"Upsilon;\": 0x3a5,\n    \"Uring;\": 0x16e,\n    \"Uscr;\": [\n        0xd835,\n        0xdcb0\n    ],\n    \"Utilde;\": 0x168,\n    \"Uuml\": 0xdc,\n    \"Uuml;\": 0xdc,\n    \"VDash;\": 0x22ab,\n    \"Vbar;\": 0x2aeb,\n    \"Vcy;\": 0x412,\n    \"Vdash;\": 0x22a9,\n    \"Vdashl;\": 0x2ae6,\n    \"Vee;\": 0x22c1,\n    \"Verbar;\": 0x2016,\n    \"Vert;\": 0x2016,\n    \"VerticalBar;\": 0x2223,\n    \"VerticalLine;\": 0x7c,\n    \"VerticalSeparator;\": 0x2758,\n    \"VerticalTilde;\": 0x2240,\n    \"VeryThinSpace;\": 0x200a,\n    \"Vfr;\": [\n        0xd835,\n        0xdd19\n    ],\n    \"Vopf;\": [\n        0xd835,\n        0xdd4d\n    ],\n    \"Vscr;\": [\n        0xd835,\n        0xdcb1\n    ],\n    \"Vvdash;\": 0x22aa,\n    \"Wcirc;\": 0x174,\n    \"Wedge;\": 0x22c0,\n    \"Wfr;\": [\n        0xd835,\n        0xdd1a\n    ],\n    \"Wopf;\": [\n        0xd835,\n        0xdd4e\n    ],\n    \"Wscr;\": [\n        0xd835,\n        0xdcb2\n    ],\n    \"Xfr;\": [\n        0xd835,\n        0xdd1b\n    ],\n    \"Xi;\": 0x39e,\n    \"Xopf;\": [\n        0xd835,\n        0xdd4f\n    ],\n    \"Xscr;\": [\n        0xd835,\n        0xdcb3\n    ],\n    \"YAcy;\": 0x42f,\n    \"YIcy;\": 0x407,\n    \"YUcy;\": 0x42e,\n    \"Yacute\": 0xdd,\n    \"Yacute;\": 0xdd,\n    \"Ycirc;\": 0x176,\n    \"Ycy;\": 0x42b,\n    \"Yfr;\": [\n        0xd835,\n        0xdd1c\n    ],\n    \"Yopf;\": [\n        0xd835,\n        0xdd50\n    ],\n    \"Yscr;\": [\n        0xd835,\n        0xdcb4\n    ],\n    \"Yuml;\": 0x178,\n    \"ZHcy;\": 0x416,\n    \"Zacute;\": 0x179,\n    \"Zcaron;\": 0x17d,\n    \"Zcy;\": 0x417,\n    \"Zdot;\": 0x17b,\n    \"ZeroWidthSpace;\": 0x200b,\n    \"Zeta;\": 0x396,\n    \"Zfr;\": 0x2128,\n    \"Zopf;\": 0x2124,\n    \"Zscr;\": [\n        0xd835,\n        0xdcb5\n    ],\n    \"aacute\": 0xe1,\n    \"aacute;\": 0xe1,\n    \"abreve;\": 0x103,\n    \"ac;\": 0x223e,\n    \"acE;\": [\n        0x223e,\n        0x333\n    ],\n    \"acd;\": 0x223f,\n    \"acirc\": 0xe2,\n    \"acirc;\": 0xe2,\n    \"acute\": 0xb4,\n    \"acute;\": 0xb4,\n    \"acy;\": 0x430,\n    \"aelig\": 0xe6,\n    \"aelig;\": 0xe6,\n    \"af;\": 0x2061,\n    \"afr;\": [\n        0xd835,\n        0xdd1e\n    ],\n    \"agrave\": 0xe0,\n    \"agrave;\": 0xe0,\n    \"alefsym;\": 0x2135,\n    \"aleph;\": 0x2135,\n    \"alpha;\": 0x3b1,\n    \"amacr;\": 0x101,\n    \"amalg;\": 0x2a3f,\n    \"amp\": 0x26,\n    \"amp;\": 0x26,\n    \"and;\": 0x2227,\n    \"andand;\": 0x2a55,\n    \"andd;\": 0x2a5c,\n    \"andslope;\": 0x2a58,\n    \"andv;\": 0x2a5a,\n    \"ang;\": 0x2220,\n    \"ange;\": 0x29a4,\n    \"angle;\": 0x2220,\n    \"angmsd;\": 0x2221,\n    \"angmsdaa;\": 0x29a8,\n    \"angmsdab;\": 0x29a9,\n    \"angmsdac;\": 0x29aa,\n    \"angmsdad;\": 0x29ab,\n    \"angmsdae;\": 0x29ac,\n    \"angmsdaf;\": 0x29ad,\n    \"angmsdag;\": 0x29ae,\n    \"angmsdah;\": 0x29af,\n    \"angrt;\": 0x221f,\n    \"angrtvb;\": 0x22be,\n    \"angrtvbd;\": 0x299d,\n    \"angsph;\": 0x2222,\n    \"angst;\": 0xc5,\n    \"angzarr;\": 0x237c,\n    \"aogon;\": 0x105,\n    \"aopf;\": [\n        0xd835,\n        0xdd52\n    ],\n    \"ap;\": 0x2248,\n    \"apE;\": 0x2a70,\n    \"apacir;\": 0x2a6f,\n    \"ape;\": 0x224a,\n    \"apid;\": 0x224b,\n    \"apos;\": 0x27,\n    \"approx;\": 0x2248,\n    \"approxeq;\": 0x224a,\n    \"aring\": 0xe5,\n    \"aring;\": 0xe5,\n    \"ascr;\": [\n        0xd835,\n        0xdcb6\n    ],\n    \"ast;\": 0x2a,\n    \"asymp;\": 0x2248,\n    \"asympeq;\": 0x224d,\n    \"atilde\": 0xe3,\n    \"atilde;\": 0xe3,\n    \"auml\": 0xe4,\n    \"auml;\": 0xe4,\n    \"awconint;\": 0x2233,\n    \"awint;\": 0x2a11,\n    \"bNot;\": 0x2aed,\n    \"backcong;\": 0x224c,\n    \"backepsilon;\": 0x3f6,\n    \"backprime;\": 0x2035,\n    \"backsim;\": 0x223d,\n    \"backsimeq;\": 0x22cd,\n    \"barvee;\": 0x22bd,\n    \"barwed;\": 0x2305,\n    \"barwedge;\": 0x2305,\n    \"bbrk;\": 0x23b5,\n    \"bbrktbrk;\": 0x23b6,\n    \"bcong;\": 0x224c,\n    \"bcy;\": 0x431,\n    \"bdquo;\": 0x201e,\n    \"becaus;\": 0x2235,\n    \"because;\": 0x2235,\n    \"bemptyv;\": 0x29b0,\n    \"bepsi;\": 0x3f6,\n    \"bernou;\": 0x212c,\n    \"beta;\": 0x3b2,\n    \"beth;\": 0x2136,\n    \"between;\": 0x226c,\n    \"bfr;\": [\n        0xd835,\n        0xdd1f\n    ],\n    \"bigcap;\": 0x22c2,\n    \"bigcirc;\": 0x25ef,\n    \"bigcup;\": 0x22c3,\n    \"bigodot;\": 0x2a00,\n    \"bigoplus;\": 0x2a01,\n    \"bigotimes;\": 0x2a02,\n    \"bigsqcup;\": 0x2a06,\n    \"bigstar;\": 0x2605,\n    \"bigtriangledown;\": 0x25bd,\n    \"bigtriangleup;\": 0x25b3,\n    \"biguplus;\": 0x2a04,\n    \"bigvee;\": 0x22c1,\n    \"bigwedge;\": 0x22c0,\n    \"bkarow;\": 0x290d,\n    \"blacklozenge;\": 0x29eb,\n    \"blacksquare;\": 0x25aa,\n    \"blacktriangle;\": 0x25b4,\n    \"blacktriangledown;\": 0x25be,\n    \"blacktriangleleft;\": 0x25c2,\n    \"blacktriangleright;\": 0x25b8,\n    \"blank;\": 0x2423,\n    \"blk12;\": 0x2592,\n    \"blk14;\": 0x2591,\n    \"blk34;\": 0x2593,\n    \"block;\": 0x2588,\n    \"bne;\": [\n        0x3d,\n        0x20e5\n    ],\n    \"bnequiv;\": [\n        0x2261,\n        0x20e5\n    ],\n    \"bnot;\": 0x2310,\n    \"bopf;\": [\n        0xd835,\n        0xdd53\n    ],\n    \"bot;\": 0x22a5,\n    \"bottom;\": 0x22a5,\n    \"bowtie;\": 0x22c8,\n    \"boxDL;\": 0x2557,\n    \"boxDR;\": 0x2554,\n    \"boxDl;\": 0x2556,\n    \"boxDr;\": 0x2553,\n    \"boxH;\": 0x2550,\n    \"boxHD;\": 0x2566,\n    \"boxHU;\": 0x2569,\n    \"boxHd;\": 0x2564,\n    \"boxHu;\": 0x2567,\n    \"boxUL;\": 0x255d,\n    \"boxUR;\": 0x255a,\n    \"boxUl;\": 0x255c,\n    \"boxUr;\": 0x2559,\n    \"boxV;\": 0x2551,\n    \"boxVH;\": 0x256c,\n    \"boxVL;\": 0x2563,\n    \"boxVR;\": 0x2560,\n    \"boxVh;\": 0x256b,\n    \"boxVl;\": 0x2562,\n    \"boxVr;\": 0x255f,\n    \"boxbox;\": 0x29c9,\n    \"boxdL;\": 0x2555,\n    \"boxdR;\": 0x2552,\n    \"boxdl;\": 0x2510,\n    \"boxdr;\": 0x250c,\n    \"boxh;\": 0x2500,\n    \"boxhD;\": 0x2565,\n    \"boxhU;\": 0x2568,\n    \"boxhd;\": 0x252c,\n    \"boxhu;\": 0x2534,\n    \"boxminus;\": 0x229f,\n    \"boxplus;\": 0x229e,\n    \"boxtimes;\": 0x22a0,\n    \"boxuL;\": 0x255b,\n    \"boxuR;\": 0x2558,\n    \"boxul;\": 0x2518,\n    \"boxur;\": 0x2514,\n    \"boxv;\": 0x2502,\n    \"boxvH;\": 0x256a,\n    \"boxvL;\": 0x2561,\n    \"boxvR;\": 0x255e,\n    \"boxvh;\": 0x253c,\n    \"boxvl;\": 0x2524,\n    \"boxvr;\": 0x251c,\n    \"bprime;\": 0x2035,\n    \"breve;\": 0x2d8,\n    \"brvbar\": 0xa6,\n    \"brvbar;\": 0xa6,\n    \"bscr;\": [\n        0xd835,\n        0xdcb7\n    ],\n    \"bsemi;\": 0x204f,\n    \"bsim;\": 0x223d,\n    \"bsime;\": 0x22cd,\n    \"bsol;\": 0x5c,\n    \"bsolb;\": 0x29c5,\n    \"bsolhsub;\": 0x27c8,\n    \"bull;\": 0x2022,\n    \"bullet;\": 0x2022,\n    \"bump;\": 0x224e,\n    \"bumpE;\": 0x2aae,\n    \"bumpe;\": 0x224f,\n    \"bumpeq;\": 0x224f,\n    \"cacute;\": 0x107,\n    \"cap;\": 0x2229,\n    \"capand;\": 0x2a44,\n    \"capbrcup;\": 0x2a49,\n    \"capcap;\": 0x2a4b,\n    \"capcup;\": 0x2a47,\n    \"capdot;\": 0x2a40,\n    \"caps;\": [\n        0x2229,\n        0xfe00\n    ],\n    \"caret;\": 0x2041,\n    \"caron;\": 0x2c7,\n    \"ccaps;\": 0x2a4d,\n    \"ccaron;\": 0x10d,\n    \"ccedil\": 0xe7,\n    \"ccedil;\": 0xe7,\n    \"ccirc;\": 0x109,\n    \"ccups;\": 0x2a4c,\n    \"ccupssm;\": 0x2a50,\n    \"cdot;\": 0x10b,\n    \"cedil\": 0xb8,\n    \"cedil;\": 0xb8,\n    \"cemptyv;\": 0x29b2,\n    \"cent\": 0xa2,\n    \"cent;\": 0xa2,\n    \"centerdot;\": 0xb7,\n    \"cfr;\": [\n        0xd835,\n        0xdd20\n    ],\n    \"chcy;\": 0x447,\n    \"check;\": 0x2713,\n    \"checkmark;\": 0x2713,\n    \"chi;\": 0x3c7,\n    \"cir;\": 0x25cb,\n    \"cirE;\": 0x29c3,\n    \"circ;\": 0x2c6,\n    \"circeq;\": 0x2257,\n    \"circlearrowleft;\": 0x21ba,\n    \"circlearrowright;\": 0x21bb,\n    \"circledR;\": 0xae,\n    \"circledS;\": 0x24c8,\n    \"circledast;\": 0x229b,\n    \"circledcirc;\": 0x229a,\n    \"circleddash;\": 0x229d,\n    \"cire;\": 0x2257,\n    \"cirfnint;\": 0x2a10,\n    \"cirmid;\": 0x2aef,\n    \"cirscir;\": 0x29c2,\n    \"clubs;\": 0x2663,\n    \"clubsuit;\": 0x2663,\n    \"colon;\": 0x3a,\n    \"colone;\": 0x2254,\n    \"coloneq;\": 0x2254,\n    \"comma;\": 0x2c,\n    \"commat;\": 0x40,\n    \"comp;\": 0x2201,\n    \"compfn;\": 0x2218,\n    \"complement;\": 0x2201,\n    \"complexes;\": 0x2102,\n    \"cong;\": 0x2245,\n    \"congdot;\": 0x2a6d,\n    \"conint;\": 0x222e,\n    \"copf;\": [\n        0xd835,\n        0xdd54\n    ],\n    \"coprod;\": 0x2210,\n    \"copy\": 0xa9,\n    \"copy;\": 0xa9,\n    \"copysr;\": 0x2117,\n    \"crarr;\": 0x21b5,\n    \"cross;\": 0x2717,\n    \"cscr;\": [\n        0xd835,\n        0xdcb8\n    ],\n    \"csub;\": 0x2acf,\n    \"csube;\": 0x2ad1,\n    \"csup;\": 0x2ad0,\n    \"csupe;\": 0x2ad2,\n    \"ctdot;\": 0x22ef,\n    \"cudarrl;\": 0x2938,\n    \"cudarrr;\": 0x2935,\n    \"cuepr;\": 0x22de,\n    \"cuesc;\": 0x22df,\n    \"cularr;\": 0x21b6,\n    \"cularrp;\": 0x293d,\n    \"cup;\": 0x222a,\n    \"cupbrcap;\": 0x2a48,\n    \"cupcap;\": 0x2a46,\n    \"cupcup;\": 0x2a4a,\n    \"cupdot;\": 0x228d,\n    \"cupor;\": 0x2a45,\n    \"cups;\": [\n        0x222a,\n        0xfe00\n    ],\n    \"curarr;\": 0x21b7,\n    \"curarrm;\": 0x293c,\n    \"curlyeqprec;\": 0x22de,\n    \"curlyeqsucc;\": 0x22df,\n    \"curlyvee;\": 0x22ce,\n    \"curlywedge;\": 0x22cf,\n    \"curren\": 0xa4,\n    \"curren;\": 0xa4,\n    \"curvearrowleft;\": 0x21b6,\n    \"curvearrowright;\": 0x21b7,\n    \"cuvee;\": 0x22ce,\n    \"cuwed;\": 0x22cf,\n    \"cwconint;\": 0x2232,\n    \"cwint;\": 0x2231,\n    \"cylcty;\": 0x232d,\n    \"dArr;\": 0x21d3,\n    \"dHar;\": 0x2965,\n    \"dagger;\": 0x2020,\n    \"daleth;\": 0x2138,\n    \"darr;\": 0x2193,\n    \"dash;\": 0x2010,\n    \"dashv;\": 0x22a3,\n    \"dbkarow;\": 0x290f,\n    \"dblac;\": 0x2dd,\n    \"dcaron;\": 0x10f,\n    \"dcy;\": 0x434,\n    \"dd;\": 0x2146,\n    \"ddagger;\": 0x2021,\n    \"ddarr;\": 0x21ca,\n    \"ddotseq;\": 0x2a77,\n    \"deg\": 0xb0,\n    \"deg;\": 0xb0,\n    \"delta;\": 0x3b4,\n    \"demptyv;\": 0x29b1,\n    \"dfisht;\": 0x297f,\n    \"dfr;\": [\n        0xd835,\n        0xdd21\n    ],\n    \"dharl;\": 0x21c3,\n    \"dharr;\": 0x21c2,\n    \"diam;\": 0x22c4,\n    \"diamond;\": 0x22c4,\n    \"diamondsuit;\": 0x2666,\n    \"diams;\": 0x2666,\n    \"die;\": 0xa8,\n    \"digamma;\": 0x3dd,\n    \"disin;\": 0x22f2,\n    \"div;\": 0xf7,\n    \"divide\": 0xf7,\n    \"divide;\": 0xf7,\n    \"divideontimes;\": 0x22c7,\n    \"divonx;\": 0x22c7,\n    \"djcy;\": 0x452,\n    \"dlcorn;\": 0x231e,\n    \"dlcrop;\": 0x230d,\n    \"dollar;\": 0x24,\n    \"dopf;\": [\n        0xd835,\n        0xdd55\n    ],\n    \"dot;\": 0x2d9,\n    \"doteq;\": 0x2250,\n    \"doteqdot;\": 0x2251,\n    \"dotminus;\": 0x2238,\n    \"dotplus;\": 0x2214,\n    \"dotsquare;\": 0x22a1,\n    \"doublebarwedge;\": 0x2306,\n    \"downarrow;\": 0x2193,\n    \"downdownarrows;\": 0x21ca,\n    \"downharpoonleft;\": 0x21c3,\n    \"downharpoonright;\": 0x21c2,\n    \"drbkarow;\": 0x2910,\n    \"drcorn;\": 0x231f,\n    \"drcrop;\": 0x230c,\n    \"dscr;\": [\n        0xd835,\n        0xdcb9\n    ],\n    \"dscy;\": 0x455,\n    \"dsol;\": 0x29f6,\n    \"dstrok;\": 0x111,\n    \"dtdot;\": 0x22f1,\n    \"dtri;\": 0x25bf,\n    \"dtrif;\": 0x25be,\n    \"duarr;\": 0x21f5,\n    \"duhar;\": 0x296f,\n    \"dwangle;\": 0x29a6,\n    \"dzcy;\": 0x45f,\n    \"dzigrarr;\": 0x27ff,\n    \"eDDot;\": 0x2a77,\n    \"eDot;\": 0x2251,\n    \"eacute\": 0xe9,\n    \"eacute;\": 0xe9,\n    \"easter;\": 0x2a6e,\n    \"ecaron;\": 0x11b,\n    \"ecir;\": 0x2256,\n    \"ecirc\": 0xea,\n    \"ecirc;\": 0xea,\n    \"ecolon;\": 0x2255,\n    \"ecy;\": 0x44d,\n    \"edot;\": 0x117,\n    \"ee;\": 0x2147,\n    \"efDot;\": 0x2252,\n    \"efr;\": [\n        0xd835,\n        0xdd22\n    ],\n    \"eg;\": 0x2a9a,\n    \"egrave\": 0xe8,\n    \"egrave;\": 0xe8,\n    \"egs;\": 0x2a96,\n    \"egsdot;\": 0x2a98,\n    \"el;\": 0x2a99,\n    \"elinters;\": 0x23e7,\n    \"ell;\": 0x2113,\n    \"els;\": 0x2a95,\n    \"elsdot;\": 0x2a97,\n    \"emacr;\": 0x113,\n    \"empty;\": 0x2205,\n    \"emptyset;\": 0x2205,\n    \"emptyv;\": 0x2205,\n    \"emsp13;\": 0x2004,\n    \"emsp14;\": 0x2005,\n    \"emsp;\": 0x2003,\n    \"eng;\": 0x14b,\n    \"ensp;\": 0x2002,\n    \"eogon;\": 0x119,\n    \"eopf;\": [\n        0xd835,\n        0xdd56\n    ],\n    \"epar;\": 0x22d5,\n    \"eparsl;\": 0x29e3,\n    \"eplus;\": 0x2a71,\n    \"epsi;\": 0x3b5,\n    \"epsilon;\": 0x3b5,\n    \"epsiv;\": 0x3f5,\n    \"eqcirc;\": 0x2256,\n    \"eqcolon;\": 0x2255,\n    \"eqsim;\": 0x2242,\n    \"eqslantgtr;\": 0x2a96,\n    \"eqslantless;\": 0x2a95,\n    \"equals;\": 0x3d,\n    \"equest;\": 0x225f,\n    \"equiv;\": 0x2261,\n    \"equivDD;\": 0x2a78,\n    \"eqvparsl;\": 0x29e5,\n    \"erDot;\": 0x2253,\n    \"erarr;\": 0x2971,\n    \"escr;\": 0x212f,\n    \"esdot;\": 0x2250,\n    \"esim;\": 0x2242,\n    \"eta;\": 0x3b7,\n    \"eth\": 0xf0,\n    \"eth;\": 0xf0,\n    \"euml\": 0xeb,\n    \"euml;\": 0xeb,\n    \"euro;\": 0x20ac,\n    \"excl;\": 0x21,\n    \"exist;\": 0x2203,\n    \"expectation;\": 0x2130,\n    \"exponentiale;\": 0x2147,\n    \"fallingdotseq;\": 0x2252,\n    \"fcy;\": 0x444,\n    \"female;\": 0x2640,\n    \"ffilig;\": 0xfb03,\n    \"fflig;\": 0xfb00,\n    \"ffllig;\": 0xfb04,\n    \"ffr;\": [\n        0xd835,\n        0xdd23\n    ],\n    \"filig;\": 0xfb01,\n    \"fjlig;\": [\n        0x66,\n        0x6a\n    ],\n    \"flat;\": 0x266d,\n    \"fllig;\": 0xfb02,\n    \"fltns;\": 0x25b1,\n    \"fnof;\": 0x192,\n    \"fopf;\": [\n        0xd835,\n        0xdd57\n    ],\n    \"forall;\": 0x2200,\n    \"fork;\": 0x22d4,\n    \"forkv;\": 0x2ad9,\n    \"fpartint;\": 0x2a0d,\n    \"frac12\": 0xbd,\n    \"frac12;\": 0xbd,\n    \"frac13;\": 0x2153,\n    \"frac14\": 0xbc,\n    \"frac14;\": 0xbc,\n    \"frac15;\": 0x2155,\n    \"frac16;\": 0x2159,\n    \"frac18;\": 0x215b,\n    \"frac23;\": 0x2154,\n    \"frac25;\": 0x2156,\n    \"frac34\": 0xbe,\n    \"frac34;\": 0xbe,\n    \"frac35;\": 0x2157,\n    \"frac38;\": 0x215c,\n    \"frac45;\": 0x2158,\n    \"frac56;\": 0x215a,\n    \"frac58;\": 0x215d,\n    \"frac78;\": 0x215e,\n    \"frasl;\": 0x2044,\n    \"frown;\": 0x2322,\n    \"fscr;\": [\n        0xd835,\n        0xdcbb\n    ],\n    \"gE;\": 0x2267,\n    \"gEl;\": 0x2a8c,\n    \"gacute;\": 0x1f5,\n    \"gamma;\": 0x3b3,\n    \"gammad;\": 0x3dd,\n    \"gap;\": 0x2a86,\n    \"gbreve;\": 0x11f,\n    \"gcirc;\": 0x11d,\n    \"gcy;\": 0x433,\n    \"gdot;\": 0x121,\n    \"ge;\": 0x2265,\n    \"gel;\": 0x22db,\n    \"geq;\": 0x2265,\n    \"geqq;\": 0x2267,\n    \"geqslant;\": 0x2a7e,\n    \"ges;\": 0x2a7e,\n    \"gescc;\": 0x2aa9,\n    \"gesdot;\": 0x2a80,\n    \"gesdoto;\": 0x2a82,\n    \"gesdotol;\": 0x2a84,\n    \"gesl;\": [\n        0x22db,\n        0xfe00\n    ],\n    \"gesles;\": 0x2a94,\n    \"gfr;\": [\n        0xd835,\n        0xdd24\n    ],\n    \"gg;\": 0x226b,\n    \"ggg;\": 0x22d9,\n    \"gimel;\": 0x2137,\n    \"gjcy;\": 0x453,\n    \"gl;\": 0x2277,\n    \"glE;\": 0x2a92,\n    \"gla;\": 0x2aa5,\n    \"glj;\": 0x2aa4,\n    \"gnE;\": 0x2269,\n    \"gnap;\": 0x2a8a,\n    \"gnapprox;\": 0x2a8a,\n    \"gne;\": 0x2a88,\n    \"gneq;\": 0x2a88,\n    \"gneqq;\": 0x2269,\n    \"gnsim;\": 0x22e7,\n    \"gopf;\": [\n        0xd835,\n        0xdd58\n    ],\n    \"grave;\": 0x60,\n    \"gscr;\": 0x210a,\n    \"gsim;\": 0x2273,\n    \"gsime;\": 0x2a8e,\n    \"gsiml;\": 0x2a90,\n    \"gt\": 0x3e,\n    \"gt;\": 0x3e,\n    \"gtcc;\": 0x2aa7,\n    \"gtcir;\": 0x2a7a,\n    \"gtdot;\": 0x22d7,\n    \"gtlPar;\": 0x2995,\n    \"gtquest;\": 0x2a7c,\n    \"gtrapprox;\": 0x2a86,\n    \"gtrarr;\": 0x2978,\n    \"gtrdot;\": 0x22d7,\n    \"gtreqless;\": 0x22db,\n    \"gtreqqless;\": 0x2a8c,\n    \"gtrless;\": 0x2277,\n    \"gtrsim;\": 0x2273,\n    \"gvertneqq;\": [\n        0x2269,\n        0xfe00\n    ],\n    \"gvnE;\": [\n        0x2269,\n        0xfe00\n    ],\n    \"hArr;\": 0x21d4,\n    \"hairsp;\": 0x200a,\n    \"half;\": 0xbd,\n    \"hamilt;\": 0x210b,\n    \"hardcy;\": 0x44a,\n    \"harr;\": 0x2194,\n    \"harrcir;\": 0x2948,\n    \"harrw;\": 0x21ad,\n    \"hbar;\": 0x210f,\n    \"hcirc;\": 0x125,\n    \"hearts;\": 0x2665,\n    \"heartsuit;\": 0x2665,\n    \"hellip;\": 0x2026,\n    \"hercon;\": 0x22b9,\n    \"hfr;\": [\n        0xd835,\n        0xdd25\n    ],\n    \"hksearow;\": 0x2925,\n    \"hkswarow;\": 0x2926,\n    \"hoarr;\": 0x21ff,\n    \"homtht;\": 0x223b,\n    \"hookleftarrow;\": 0x21a9,\n    \"hookrightarrow;\": 0x21aa,\n    \"hopf;\": [\n        0xd835,\n        0xdd59\n    ],\n    \"horbar;\": 0x2015,\n    \"hscr;\": [\n        0xd835,\n        0xdcbd\n    ],\n    \"hslash;\": 0x210f,\n    \"hstrok;\": 0x127,\n    \"hybull;\": 0x2043,\n    \"hyphen;\": 0x2010,\n    \"iacute\": 0xed,\n    \"iacute;\": 0xed,\n    \"ic;\": 0x2063,\n    \"icirc\": 0xee,\n    \"icirc;\": 0xee,\n    \"icy;\": 0x438,\n    \"iecy;\": 0x435,\n    \"iexcl\": 0xa1,\n    \"iexcl;\": 0xa1,\n    \"iff;\": 0x21d4,\n    \"ifr;\": [\n        0xd835,\n        0xdd26\n    ],\n    \"igrave\": 0xec,\n    \"igrave;\": 0xec,\n    \"ii;\": 0x2148,\n    \"iiiint;\": 0x2a0c,\n    \"iiint;\": 0x222d,\n    \"iinfin;\": 0x29dc,\n    \"iiota;\": 0x2129,\n    \"ijlig;\": 0x133,\n    \"imacr;\": 0x12b,\n    \"image;\": 0x2111,\n    \"imagline;\": 0x2110,\n    \"imagpart;\": 0x2111,\n    \"imath;\": 0x131,\n    \"imof;\": 0x22b7,\n    \"imped;\": 0x1b5,\n    \"in;\": 0x2208,\n    \"incare;\": 0x2105,\n    \"infin;\": 0x221e,\n    \"infintie;\": 0x29dd,\n    \"inodot;\": 0x131,\n    \"int;\": 0x222b,\n    \"intcal;\": 0x22ba,\n    \"integers;\": 0x2124,\n    \"intercal;\": 0x22ba,\n    \"intlarhk;\": 0x2a17,\n    \"intprod;\": 0x2a3c,\n    \"iocy;\": 0x451,\n    \"iogon;\": 0x12f,\n    \"iopf;\": [\n        0xd835,\n        0xdd5a\n    ],\n    \"iota;\": 0x3b9,\n    \"iprod;\": 0x2a3c,\n    \"iquest\": 0xbf,\n    \"iquest;\": 0xbf,\n    \"iscr;\": [\n        0xd835,\n        0xdcbe\n    ],\n    \"isin;\": 0x2208,\n    \"isinE;\": 0x22f9,\n    \"isindot;\": 0x22f5,\n    \"isins;\": 0x22f4,\n    \"isinsv;\": 0x22f3,\n    \"isinv;\": 0x2208,\n    \"it;\": 0x2062,\n    \"itilde;\": 0x129,\n    \"iukcy;\": 0x456,\n    \"iuml\": 0xef,\n    \"iuml;\": 0xef,\n    \"jcirc;\": 0x135,\n    \"jcy;\": 0x439,\n    \"jfr;\": [\n        0xd835,\n        0xdd27\n    ],\n    \"jmath;\": 0x237,\n    \"jopf;\": [\n        0xd835,\n        0xdd5b\n    ],\n    \"jscr;\": [\n        0xd835,\n        0xdcbf\n    ],\n    \"jsercy;\": 0x458,\n    \"jukcy;\": 0x454,\n    \"kappa;\": 0x3ba,\n    \"kappav;\": 0x3f0,\n    \"kcedil;\": 0x137,\n    \"kcy;\": 0x43a,\n    \"kfr;\": [\n        0xd835,\n        0xdd28\n    ],\n    \"kgreen;\": 0x138,\n    \"khcy;\": 0x445,\n    \"kjcy;\": 0x45c,\n    \"kopf;\": [\n        0xd835,\n        0xdd5c\n    ],\n    \"kscr;\": [\n        0xd835,\n        0xdcc0\n    ],\n    \"lAarr;\": 0x21da,\n    \"lArr;\": 0x21d0,\n    \"lAtail;\": 0x291b,\n    \"lBarr;\": 0x290e,\n    \"lE;\": 0x2266,\n    \"lEg;\": 0x2a8b,\n    \"lHar;\": 0x2962,\n    \"lacute;\": 0x13a,\n    \"laemptyv;\": 0x29b4,\n    \"lagran;\": 0x2112,\n    \"lambda;\": 0x3bb,\n    \"lang;\": 0x27e8,\n    \"langd;\": 0x2991,\n    \"langle;\": 0x27e8,\n    \"lap;\": 0x2a85,\n    \"laquo\": 0xab,\n    \"laquo;\": 0xab,\n    \"larr;\": 0x2190,\n    \"larrb;\": 0x21e4,\n    \"larrbfs;\": 0x291f,\n    \"larrfs;\": 0x291d,\n    \"larrhk;\": 0x21a9,\n    \"larrlp;\": 0x21ab,\n    \"larrpl;\": 0x2939,\n    \"larrsim;\": 0x2973,\n    \"larrtl;\": 0x21a2,\n    \"lat;\": 0x2aab,\n    \"latail;\": 0x2919,\n    \"late;\": 0x2aad,\n    \"lates;\": [\n        0x2aad,\n        0xfe00\n    ],\n    \"lbarr;\": 0x290c,\n    \"lbbrk;\": 0x2772,\n    \"lbrace;\": 0x7b,\n    \"lbrack;\": 0x5b,\n    \"lbrke;\": 0x298b,\n    \"lbrksld;\": 0x298f,\n    \"lbrkslu;\": 0x298d,\n    \"lcaron;\": 0x13e,\n    \"lcedil;\": 0x13c,\n    \"lceil;\": 0x2308,\n    \"lcub;\": 0x7b,\n    \"lcy;\": 0x43b,\n    \"ldca;\": 0x2936,\n    \"ldquo;\": 0x201c,\n    \"ldquor;\": 0x201e,\n    \"ldrdhar;\": 0x2967,\n    \"ldrushar;\": 0x294b,\n    \"ldsh;\": 0x21b2,\n    \"le;\": 0x2264,\n    \"leftarrow;\": 0x2190,\n    \"leftarrowtail;\": 0x21a2,\n    \"leftharpoondown;\": 0x21bd,\n    \"leftharpoonup;\": 0x21bc,\n    \"leftleftarrows;\": 0x21c7,\n    \"leftrightarrow;\": 0x2194,\n    \"leftrightarrows;\": 0x21c6,\n    \"leftrightharpoons;\": 0x21cb,\n    \"leftrightsquigarrow;\": 0x21ad,\n    \"leftthreetimes;\": 0x22cb,\n    \"leg;\": 0x22da,\n    \"leq;\": 0x2264,\n    \"leqq;\": 0x2266,\n    \"leqslant;\": 0x2a7d,\n    \"les;\": 0x2a7d,\n    \"lescc;\": 0x2aa8,\n    \"lesdot;\": 0x2a7f,\n    \"lesdoto;\": 0x2a81,\n    \"lesdotor;\": 0x2a83,\n    \"lesg;\": [\n        0x22da,\n        0xfe00\n    ],\n    \"lesges;\": 0x2a93,\n    \"lessapprox;\": 0x2a85,\n    \"lessdot;\": 0x22d6,\n    \"lesseqgtr;\": 0x22da,\n    \"lesseqqgtr;\": 0x2a8b,\n    \"lessgtr;\": 0x2276,\n    \"lesssim;\": 0x2272,\n    \"lfisht;\": 0x297c,\n    \"lfloor;\": 0x230a,\n    \"lfr;\": [\n        0xd835,\n        0xdd29\n    ],\n    \"lg;\": 0x2276,\n    \"lgE;\": 0x2a91,\n    \"lhard;\": 0x21bd,\n    \"lharu;\": 0x21bc,\n    \"lharul;\": 0x296a,\n    \"lhblk;\": 0x2584,\n    \"ljcy;\": 0x459,\n    \"ll;\": 0x226a,\n    \"llarr;\": 0x21c7,\n    \"llcorner;\": 0x231e,\n    \"llhard;\": 0x296b,\n    \"lltri;\": 0x25fa,\n    \"lmidot;\": 0x140,\n    \"lmoust;\": 0x23b0,\n    \"lmoustache;\": 0x23b0,\n    \"lnE;\": 0x2268,\n    \"lnap;\": 0x2a89,\n    \"lnapprox;\": 0x2a89,\n    \"lne;\": 0x2a87,\n    \"lneq;\": 0x2a87,\n    \"lneqq;\": 0x2268,\n    \"lnsim;\": 0x22e6,\n    \"loang;\": 0x27ec,\n    \"loarr;\": 0x21fd,\n    \"lobrk;\": 0x27e6,\n    \"longleftarrow;\": 0x27f5,\n    \"longleftrightarrow;\": 0x27f7,\n    \"longmapsto;\": 0x27fc,\n    \"longrightarrow;\": 0x27f6,\n    \"looparrowleft;\": 0x21ab,\n    \"looparrowright;\": 0x21ac,\n    \"lopar;\": 0x2985,\n    \"lopf;\": [\n        0xd835,\n        0xdd5d\n    ],\n    \"loplus;\": 0x2a2d,\n    \"lotimes;\": 0x2a34,\n    \"lowast;\": 0x2217,\n    \"lowbar;\": 0x5f,\n    \"loz;\": 0x25ca,\n    \"lozenge;\": 0x25ca,\n    \"lozf;\": 0x29eb,\n    \"lpar;\": 0x28,\n    \"lparlt;\": 0x2993,\n    \"lrarr;\": 0x21c6,\n    \"lrcorner;\": 0x231f,\n    \"lrhar;\": 0x21cb,\n    \"lrhard;\": 0x296d,\n    \"lrm;\": 0x200e,\n    \"lrtri;\": 0x22bf,\n    \"lsaquo;\": 0x2039,\n    \"lscr;\": [\n        0xd835,\n        0xdcc1\n    ],\n    \"lsh;\": 0x21b0,\n    \"lsim;\": 0x2272,\n    \"lsime;\": 0x2a8d,\n    \"lsimg;\": 0x2a8f,\n    \"lsqb;\": 0x5b,\n    \"lsquo;\": 0x2018,\n    \"lsquor;\": 0x201a,\n    \"lstrok;\": 0x142,\n    \"lt\": 0x3c,\n    \"lt;\": 0x3c,\n    \"ltcc;\": 0x2aa6,\n    \"ltcir;\": 0x2a79,\n    \"ltdot;\": 0x22d6,\n    \"lthree;\": 0x22cb,\n    \"ltimes;\": 0x22c9,\n    \"ltlarr;\": 0x2976,\n    \"ltquest;\": 0x2a7b,\n    \"ltrPar;\": 0x2996,\n    \"ltri;\": 0x25c3,\n    \"ltrie;\": 0x22b4,\n    \"ltrif;\": 0x25c2,\n    \"lurdshar;\": 0x294a,\n    \"luruhar;\": 0x2966,\n    \"lvertneqq;\": [\n        0x2268,\n        0xfe00\n    ],\n    \"lvnE;\": [\n        0x2268,\n        0xfe00\n    ],\n    \"mDDot;\": 0x223a,\n    \"macr\": 0xaf,\n    \"macr;\": 0xaf,\n    \"male;\": 0x2642,\n    \"malt;\": 0x2720,\n    \"maltese;\": 0x2720,\n    \"map;\": 0x21a6,\n    \"mapsto;\": 0x21a6,\n    \"mapstodown;\": 0x21a7,\n    \"mapstoleft;\": 0x21a4,\n    \"mapstoup;\": 0x21a5,\n    \"marker;\": 0x25ae,\n    \"mcomma;\": 0x2a29,\n    \"mcy;\": 0x43c,\n    \"mdash;\": 0x2014,\n    \"measuredangle;\": 0x2221,\n    \"mfr;\": [\n        0xd835,\n        0xdd2a\n    ],\n    \"mho;\": 0x2127,\n    \"micro\": 0xb5,\n    \"micro;\": 0xb5,\n    \"mid;\": 0x2223,\n    \"midast;\": 0x2a,\n    \"midcir;\": 0x2af0,\n    \"middot\": 0xb7,\n    \"middot;\": 0xb7,\n    \"minus;\": 0x2212,\n    \"minusb;\": 0x229f,\n    \"minusd;\": 0x2238,\n    \"minusdu;\": 0x2a2a,\n    \"mlcp;\": 0x2adb,\n    \"mldr;\": 0x2026,\n    \"mnplus;\": 0x2213,\n    \"models;\": 0x22a7,\n    \"mopf;\": [\n        0xd835,\n        0xdd5e\n    ],\n    \"mp;\": 0x2213,\n    \"mscr;\": [\n        0xd835,\n        0xdcc2\n    ],\n    \"mstpos;\": 0x223e,\n    \"mu;\": 0x3bc,\n    \"multimap;\": 0x22b8,\n    \"mumap;\": 0x22b8,\n    \"nGg;\": [\n        0x22d9,\n        0x338\n    ],\n    \"nGt;\": [\n        0x226b,\n        0x20d2\n    ],\n    \"nGtv;\": [\n        0x226b,\n        0x338\n    ],\n    \"nLeftarrow;\": 0x21cd,\n    \"nLeftrightarrow;\": 0x21ce,\n    \"nLl;\": [\n        0x22d8,\n        0x338\n    ],\n    \"nLt;\": [\n        0x226a,\n        0x20d2\n    ],\n    \"nLtv;\": [\n        0x226a,\n        0x338\n    ],\n    \"nRightarrow;\": 0x21cf,\n    \"nVDash;\": 0x22af,\n    \"nVdash;\": 0x22ae,\n    \"nabla;\": 0x2207,\n    \"nacute;\": 0x144,\n    \"nang;\": [\n        0x2220,\n        0x20d2\n    ],\n    \"nap;\": 0x2249,\n    \"napE;\": [\n        0x2a70,\n        0x338\n    ],\n    \"napid;\": [\n        0x224b,\n        0x338\n    ],\n    \"napos;\": 0x149,\n    \"napprox;\": 0x2249,\n    \"natur;\": 0x266e,\n    \"natural;\": 0x266e,\n    \"naturals;\": 0x2115,\n    \"nbsp\": 0xa0,\n    \"nbsp;\": 0xa0,\n    \"nbump;\": [\n        0x224e,\n        0x338\n    ],\n    \"nbumpe;\": [\n        0x224f,\n        0x338\n    ],\n    \"ncap;\": 0x2a43,\n    \"ncaron;\": 0x148,\n    \"ncedil;\": 0x146,\n    \"ncong;\": 0x2247,\n    \"ncongdot;\": [\n        0x2a6d,\n        0x338\n    ],\n    \"ncup;\": 0x2a42,\n    \"ncy;\": 0x43d,\n    \"ndash;\": 0x2013,\n    \"ne;\": 0x2260,\n    \"neArr;\": 0x21d7,\n    \"nearhk;\": 0x2924,\n    \"nearr;\": 0x2197,\n    \"nearrow;\": 0x2197,\n    \"nedot;\": [\n        0x2250,\n        0x338\n    ],\n    \"nequiv;\": 0x2262,\n    \"nesear;\": 0x2928,\n    \"nesim;\": [\n        0x2242,\n        0x338\n    ],\n    \"nexist;\": 0x2204,\n    \"nexists;\": 0x2204,\n    \"nfr;\": [\n        0xd835,\n        0xdd2b\n    ],\n    \"ngE;\": [\n        0x2267,\n        0x338\n    ],\n    \"nge;\": 0x2271,\n    \"ngeq;\": 0x2271,\n    \"ngeqq;\": [\n        0x2267,\n        0x338\n    ],\n    \"ngeqslant;\": [\n        0x2a7e,\n        0x338\n    ],\n    \"nges;\": [\n        0x2a7e,\n        0x338\n    ],\n    \"ngsim;\": 0x2275,\n    \"ngt;\": 0x226f,\n    \"ngtr;\": 0x226f,\n    \"nhArr;\": 0x21ce,\n    \"nharr;\": 0x21ae,\n    \"nhpar;\": 0x2af2,\n    \"ni;\": 0x220b,\n    \"nis;\": 0x22fc,\n    \"nisd;\": 0x22fa,\n    \"niv;\": 0x220b,\n    \"njcy;\": 0x45a,\n    \"nlArr;\": 0x21cd,\n    \"nlE;\": [\n        0x2266,\n        0x338\n    ],\n    \"nlarr;\": 0x219a,\n    \"nldr;\": 0x2025,\n    \"nle;\": 0x2270,\n    \"nleftarrow;\": 0x219a,\n    \"nleftrightarrow;\": 0x21ae,\n    \"nleq;\": 0x2270,\n    \"nleqq;\": [\n        0x2266,\n        0x338\n    ],\n    \"nleqslant;\": [\n        0x2a7d,\n        0x338\n    ],\n    \"nles;\": [\n        0x2a7d,\n        0x338\n    ],\n    \"nless;\": 0x226e,\n    \"nlsim;\": 0x2274,\n    \"nlt;\": 0x226e,\n    \"nltri;\": 0x22ea,\n    \"nltrie;\": 0x22ec,\n    \"nmid;\": 0x2224,\n    \"nopf;\": [\n        0xd835,\n        0xdd5f\n    ],\n    \"not\": 0xac,\n    \"not;\": 0xac,\n    \"notin;\": 0x2209,\n    \"notinE;\": [\n        0x22f9,\n        0x338\n    ],\n    \"notindot;\": [\n        0x22f5,\n        0x338\n    ],\n    \"notinva;\": 0x2209,\n    \"notinvb;\": 0x22f7,\n    \"notinvc;\": 0x22f6,\n    \"notni;\": 0x220c,\n    \"notniva;\": 0x220c,\n    \"notnivb;\": 0x22fe,\n    \"notnivc;\": 0x22fd,\n    \"npar;\": 0x2226,\n    \"nparallel;\": 0x2226,\n    \"nparsl;\": [\n        0x2afd,\n        0x20e5\n    ],\n    \"npart;\": [\n        0x2202,\n        0x338\n    ],\n    \"npolint;\": 0x2a14,\n    \"npr;\": 0x2280,\n    \"nprcue;\": 0x22e0,\n    \"npre;\": [\n        0x2aaf,\n        0x338\n    ],\n    \"nprec;\": 0x2280,\n    \"npreceq;\": [\n        0x2aaf,\n        0x338\n    ],\n    \"nrArr;\": 0x21cf,\n    \"nrarr;\": 0x219b,\n    \"nrarrc;\": [\n        0x2933,\n        0x338\n    ],\n    \"nrarrw;\": [\n        0x219d,\n        0x338\n    ],\n    \"nrightarrow;\": 0x219b,\n    \"nrtri;\": 0x22eb,\n    \"nrtrie;\": 0x22ed,\n    \"nsc;\": 0x2281,\n    \"nsccue;\": 0x22e1,\n    \"nsce;\": [\n        0x2ab0,\n        0x338\n    ],\n    \"nscr;\": [\n        0xd835,\n        0xdcc3\n    ],\n    \"nshortmid;\": 0x2224,\n    \"nshortparallel;\": 0x2226,\n    \"nsim;\": 0x2241,\n    \"nsime;\": 0x2244,\n    \"nsimeq;\": 0x2244,\n    \"nsmid;\": 0x2224,\n    \"nspar;\": 0x2226,\n    \"nsqsube;\": 0x22e2,\n    \"nsqsupe;\": 0x22e3,\n    \"nsub;\": 0x2284,\n    \"nsubE;\": [\n        0x2ac5,\n        0x338\n    ],\n    \"nsube;\": 0x2288,\n    \"nsubset;\": [\n        0x2282,\n        0x20d2\n    ],\n    \"nsubseteq;\": 0x2288,\n    \"nsubseteqq;\": [\n        0x2ac5,\n        0x338\n    ],\n    \"nsucc;\": 0x2281,\n    \"nsucceq;\": [\n        0x2ab0,\n        0x338\n    ],\n    \"nsup;\": 0x2285,\n    \"nsupE;\": [\n        0x2ac6,\n        0x338\n    ],\n    \"nsupe;\": 0x2289,\n    \"nsupset;\": [\n        0x2283,\n        0x20d2\n    ],\n    \"nsupseteq;\": 0x2289,\n    \"nsupseteqq;\": [\n        0x2ac6,\n        0x338\n    ],\n    \"ntgl;\": 0x2279,\n    \"ntilde\": 0xf1,\n    \"ntilde;\": 0xf1,\n    \"ntlg;\": 0x2278,\n    \"ntriangleleft;\": 0x22ea,\n    \"ntrianglelefteq;\": 0x22ec,\n    \"ntriangleright;\": 0x22eb,\n    \"ntrianglerighteq;\": 0x22ed,\n    \"nu;\": 0x3bd,\n    \"num;\": 0x23,\n    \"numero;\": 0x2116,\n    \"numsp;\": 0x2007,\n    \"nvDash;\": 0x22ad,\n    \"nvHarr;\": 0x2904,\n    \"nvap;\": [\n        0x224d,\n        0x20d2\n    ],\n    \"nvdash;\": 0x22ac,\n    \"nvge;\": [\n        0x2265,\n        0x20d2\n    ],\n    \"nvgt;\": [\n        0x3e,\n        0x20d2\n    ],\n    \"nvinfin;\": 0x29de,\n    \"nvlArr;\": 0x2902,\n    \"nvle;\": [\n        0x2264,\n        0x20d2\n    ],\n    \"nvlt;\": [\n        0x3c,\n        0x20d2\n    ],\n    \"nvltrie;\": [\n        0x22b4,\n        0x20d2\n    ],\n    \"nvrArr;\": 0x2903,\n    \"nvrtrie;\": [\n        0x22b5,\n        0x20d2\n    ],\n    \"nvsim;\": [\n        0x223c,\n        0x20d2\n    ],\n    \"nwArr;\": 0x21d6,\n    \"nwarhk;\": 0x2923,\n    \"nwarr;\": 0x2196,\n    \"nwarrow;\": 0x2196,\n    \"nwnear;\": 0x2927,\n    \"oS;\": 0x24c8,\n    \"oacute\": 0xf3,\n    \"oacute;\": 0xf3,\n    \"oast;\": 0x229b,\n    \"ocir;\": 0x229a,\n    \"ocirc\": 0xf4,\n    \"ocirc;\": 0xf4,\n    \"ocy;\": 0x43e,\n    \"odash;\": 0x229d,\n    \"odblac;\": 0x151,\n    \"odiv;\": 0x2a38,\n    \"odot;\": 0x2299,\n    \"odsold;\": 0x29bc,\n    \"oelig;\": 0x153,\n    \"ofcir;\": 0x29bf,\n    \"ofr;\": [\n        0xd835,\n        0xdd2c\n    ],\n    \"ogon;\": 0x2db,\n    \"ograve\": 0xf2,\n    \"ograve;\": 0xf2,\n    \"ogt;\": 0x29c1,\n    \"ohbar;\": 0x29b5,\n    \"ohm;\": 0x3a9,\n    \"oint;\": 0x222e,\n    \"olarr;\": 0x21ba,\n    \"olcir;\": 0x29be,\n    \"olcross;\": 0x29bb,\n    \"oline;\": 0x203e,\n    \"olt;\": 0x29c0,\n    \"omacr;\": 0x14d,\n    \"omega;\": 0x3c9,\n    \"omicron;\": 0x3bf,\n    \"omid;\": 0x29b6,\n    \"ominus;\": 0x2296,\n    \"oopf;\": [\n        0xd835,\n        0xdd60\n    ],\n    \"opar;\": 0x29b7,\n    \"operp;\": 0x29b9,\n    \"oplus;\": 0x2295,\n    \"or;\": 0x2228,\n    \"orarr;\": 0x21bb,\n    \"ord;\": 0x2a5d,\n    \"order;\": 0x2134,\n    \"orderof;\": 0x2134,\n    \"ordf\": 0xaa,\n    \"ordf;\": 0xaa,\n    \"ordm\": 0xba,\n    \"ordm;\": 0xba,\n    \"origof;\": 0x22b6,\n    \"oror;\": 0x2a56,\n    \"orslope;\": 0x2a57,\n    \"orv;\": 0x2a5b,\n    \"oscr;\": 0x2134,\n    \"oslash\": 0xf8,\n    \"oslash;\": 0xf8,\n    \"osol;\": 0x2298,\n    \"otilde\": 0xf5,\n    \"otilde;\": 0xf5,\n    \"otimes;\": 0x2297,\n    \"otimesas;\": 0x2a36,\n    \"ouml\": 0xf6,\n    \"ouml;\": 0xf6,\n    \"ovbar;\": 0x233d,\n    \"par;\": 0x2225,\n    \"para\": 0xb6,\n    \"para;\": 0xb6,\n    \"parallel;\": 0x2225,\n    \"parsim;\": 0x2af3,\n    \"parsl;\": 0x2afd,\n    \"part;\": 0x2202,\n    \"pcy;\": 0x43f,\n    \"percnt;\": 0x25,\n    \"period;\": 0x2e,\n    \"permil;\": 0x2030,\n    \"perp;\": 0x22a5,\n    \"pertenk;\": 0x2031,\n    \"pfr;\": [\n        0xd835,\n        0xdd2d\n    ],\n    \"phi;\": 0x3c6,\n    \"phiv;\": 0x3d5,\n    \"phmmat;\": 0x2133,\n    \"phone;\": 0x260e,\n    \"pi;\": 0x3c0,\n    \"pitchfork;\": 0x22d4,\n    \"piv;\": 0x3d6,\n    \"planck;\": 0x210f,\n    \"planckh;\": 0x210e,\n    \"plankv;\": 0x210f,\n    \"plus;\": 0x2b,\n    \"plusacir;\": 0x2a23,\n    \"plusb;\": 0x229e,\n    \"pluscir;\": 0x2a22,\n    \"plusdo;\": 0x2214,\n    \"plusdu;\": 0x2a25,\n    \"pluse;\": 0x2a72,\n    \"plusmn\": 0xb1,\n    \"plusmn;\": 0xb1,\n    \"plussim;\": 0x2a26,\n    \"plustwo;\": 0x2a27,\n    \"pm;\": 0xb1,\n    \"pointint;\": 0x2a15,\n    \"popf;\": [\n        0xd835,\n        0xdd61\n    ],\n    \"pound\": 0xa3,\n    \"pound;\": 0xa3,\n    \"pr;\": 0x227a,\n    \"prE;\": 0x2ab3,\n    \"prap;\": 0x2ab7,\n    \"prcue;\": 0x227c,\n    \"pre;\": 0x2aaf,\n    \"prec;\": 0x227a,\n    \"precapprox;\": 0x2ab7,\n    \"preccurlyeq;\": 0x227c,\n    \"preceq;\": 0x2aaf,\n    \"precnapprox;\": 0x2ab9,\n    \"precneqq;\": 0x2ab5,\n    \"precnsim;\": 0x22e8,\n    \"precsim;\": 0x227e,\n    \"prime;\": 0x2032,\n    \"primes;\": 0x2119,\n    \"prnE;\": 0x2ab5,\n    \"prnap;\": 0x2ab9,\n    \"prnsim;\": 0x22e8,\n    \"prod;\": 0x220f,\n    \"profalar;\": 0x232e,\n    \"profline;\": 0x2312,\n    \"profsurf;\": 0x2313,\n    \"prop;\": 0x221d,\n    \"propto;\": 0x221d,\n    \"prsim;\": 0x227e,\n    \"prurel;\": 0x22b0,\n    \"pscr;\": [\n        0xd835,\n        0xdcc5\n    ],\n    \"psi;\": 0x3c8,\n    \"puncsp;\": 0x2008,\n    \"qfr;\": [\n        0xd835,\n        0xdd2e\n    ],\n    \"qint;\": 0x2a0c,\n    \"qopf;\": [\n        0xd835,\n        0xdd62\n    ],\n    \"qprime;\": 0x2057,\n    \"qscr;\": [\n        0xd835,\n        0xdcc6\n    ],\n    \"quaternions;\": 0x210d,\n    \"quatint;\": 0x2a16,\n    \"quest;\": 0x3f,\n    \"questeq;\": 0x225f,\n    \"quot\": 0x22,\n    \"quot;\": 0x22,\n    \"rAarr;\": 0x21db,\n    \"rArr;\": 0x21d2,\n    \"rAtail;\": 0x291c,\n    \"rBarr;\": 0x290f,\n    \"rHar;\": 0x2964,\n    \"race;\": [\n        0x223d,\n        0x331\n    ],\n    \"racute;\": 0x155,\n    \"radic;\": 0x221a,\n    \"raemptyv;\": 0x29b3,\n    \"rang;\": 0x27e9,\n    \"rangd;\": 0x2992,\n    \"range;\": 0x29a5,\n    \"rangle;\": 0x27e9,\n    \"raquo\": 0xbb,\n    \"raquo;\": 0xbb,\n    \"rarr;\": 0x2192,\n    \"rarrap;\": 0x2975,\n    \"rarrb;\": 0x21e5,\n    \"rarrbfs;\": 0x2920,\n    \"rarrc;\": 0x2933,\n    \"rarrfs;\": 0x291e,\n    \"rarrhk;\": 0x21aa,\n    \"rarrlp;\": 0x21ac,\n    \"rarrpl;\": 0x2945,\n    \"rarrsim;\": 0x2974,\n    \"rarrtl;\": 0x21a3,\n    \"rarrw;\": 0x219d,\n    \"ratail;\": 0x291a,\n    \"ratio;\": 0x2236,\n    \"rationals;\": 0x211a,\n    \"rbarr;\": 0x290d,\n    \"rbbrk;\": 0x2773,\n    \"rbrace;\": 0x7d,\n    \"rbrack;\": 0x5d,\n    \"rbrke;\": 0x298c,\n    \"rbrksld;\": 0x298e,\n    \"rbrkslu;\": 0x2990,\n    \"rcaron;\": 0x159,\n    \"rcedil;\": 0x157,\n    \"rceil;\": 0x2309,\n    \"rcub;\": 0x7d,\n    \"rcy;\": 0x440,\n    \"rdca;\": 0x2937,\n    \"rdldhar;\": 0x2969,\n    \"rdquo;\": 0x201d,\n    \"rdquor;\": 0x201d,\n    \"rdsh;\": 0x21b3,\n    \"real;\": 0x211c,\n    \"realine;\": 0x211b,\n    \"realpart;\": 0x211c,\n    \"reals;\": 0x211d,\n    \"rect;\": 0x25ad,\n    \"reg\": 0xae,\n    \"reg;\": 0xae,\n    \"rfisht;\": 0x297d,\n    \"rfloor;\": 0x230b,\n    \"rfr;\": [\n        0xd835,\n        0xdd2f\n    ],\n    \"rhard;\": 0x21c1,\n    \"rharu;\": 0x21c0,\n    \"rharul;\": 0x296c,\n    \"rho;\": 0x3c1,\n    \"rhov;\": 0x3f1,\n    \"rightarrow;\": 0x2192,\n    \"rightarrowtail;\": 0x21a3,\n    \"rightharpoondown;\": 0x21c1,\n    \"rightharpoonup;\": 0x21c0,\n    \"rightleftarrows;\": 0x21c4,\n    \"rightleftharpoons;\": 0x21cc,\n    \"rightrightarrows;\": 0x21c9,\n    \"rightsquigarrow;\": 0x219d,\n    \"rightthreetimes;\": 0x22cc,\n    \"ring;\": 0x2da,\n    \"risingdotseq;\": 0x2253,\n    \"rlarr;\": 0x21c4,\n    \"rlhar;\": 0x21cc,\n    \"rlm;\": 0x200f,\n    \"rmoust;\": 0x23b1,\n    \"rmoustache;\": 0x23b1,\n    \"rnmid;\": 0x2aee,\n    \"roang;\": 0x27ed,\n    \"roarr;\": 0x21fe,\n    \"robrk;\": 0x27e7,\n    \"ropar;\": 0x2986,\n    \"ropf;\": [\n        0xd835,\n        0xdd63\n    ],\n    \"roplus;\": 0x2a2e,\n    \"rotimes;\": 0x2a35,\n    \"rpar;\": 0x29,\n    \"rpargt;\": 0x2994,\n    \"rppolint;\": 0x2a12,\n    \"rrarr;\": 0x21c9,\n    \"rsaquo;\": 0x203a,\n    \"rscr;\": [\n        0xd835,\n        0xdcc7\n    ],\n    \"rsh;\": 0x21b1,\n    \"rsqb;\": 0x5d,\n    \"rsquo;\": 0x2019,\n    \"rsquor;\": 0x2019,\n    \"rthree;\": 0x22cc,\n    \"rtimes;\": 0x22ca,\n    \"rtri;\": 0x25b9,\n    \"rtrie;\": 0x22b5,\n    \"rtrif;\": 0x25b8,\n    \"rtriltri;\": 0x29ce,\n    \"ruluhar;\": 0x2968,\n    \"rx;\": 0x211e,\n    \"sacute;\": 0x15b,\n    \"sbquo;\": 0x201a,\n    \"sc;\": 0x227b,\n    \"scE;\": 0x2ab4,\n    \"scap;\": 0x2ab8,\n    \"scaron;\": 0x161,\n    \"sccue;\": 0x227d,\n    \"sce;\": 0x2ab0,\n    \"scedil;\": 0x15f,\n    \"scirc;\": 0x15d,\n    \"scnE;\": 0x2ab6,\n    \"scnap;\": 0x2aba,\n    \"scnsim;\": 0x22e9,\n    \"scpolint;\": 0x2a13,\n    \"scsim;\": 0x227f,\n    \"scy;\": 0x441,\n    \"sdot;\": 0x22c5,\n    \"sdotb;\": 0x22a1,\n    \"sdote;\": 0x2a66,\n    \"seArr;\": 0x21d8,\n    \"searhk;\": 0x2925,\n    \"searr;\": 0x2198,\n    \"searrow;\": 0x2198,\n    \"sect\": 0xa7,\n    \"sect;\": 0xa7,\n    \"semi;\": 0x3b,\n    \"seswar;\": 0x2929,\n    \"setminus;\": 0x2216,\n    \"setmn;\": 0x2216,\n    \"sext;\": 0x2736,\n    \"sfr;\": [\n        0xd835,\n        0xdd30\n    ],\n    \"sfrown;\": 0x2322,\n    \"sharp;\": 0x266f,\n    \"shchcy;\": 0x449,\n    \"shcy;\": 0x448,\n    \"shortmid;\": 0x2223,\n    \"shortparallel;\": 0x2225,\n    \"shy\": 0xad,\n    \"shy;\": 0xad,\n    \"sigma;\": 0x3c3,\n    \"sigmaf;\": 0x3c2,\n    \"sigmav;\": 0x3c2,\n    \"sim;\": 0x223c,\n    \"simdot;\": 0x2a6a,\n    \"sime;\": 0x2243,\n    \"simeq;\": 0x2243,\n    \"simg;\": 0x2a9e,\n    \"simgE;\": 0x2aa0,\n    \"siml;\": 0x2a9d,\n    \"simlE;\": 0x2a9f,\n    \"simne;\": 0x2246,\n    \"simplus;\": 0x2a24,\n    \"simrarr;\": 0x2972,\n    \"slarr;\": 0x2190,\n    \"smallsetminus;\": 0x2216,\n    \"smashp;\": 0x2a33,\n    \"smeparsl;\": 0x29e4,\n    \"smid;\": 0x2223,\n    \"smile;\": 0x2323,\n    \"smt;\": 0x2aaa,\n    \"smte;\": 0x2aac,\n    \"smtes;\": [\n        0x2aac,\n        0xfe00\n    ],\n    \"softcy;\": 0x44c,\n    \"sol;\": 0x2f,\n    \"solb;\": 0x29c4,\n    \"solbar;\": 0x233f,\n    \"sopf;\": [\n        0xd835,\n        0xdd64\n    ],\n    \"spades;\": 0x2660,\n    \"spadesuit;\": 0x2660,\n    \"spar;\": 0x2225,\n    \"sqcap;\": 0x2293,\n    \"sqcaps;\": [\n        0x2293,\n        0xfe00\n    ],\n    \"sqcup;\": 0x2294,\n    \"sqcups;\": [\n        0x2294,\n        0xfe00\n    ],\n    \"sqsub;\": 0x228f,\n    \"sqsube;\": 0x2291,\n    \"sqsubset;\": 0x228f,\n    \"sqsubseteq;\": 0x2291,\n    \"sqsup;\": 0x2290,\n    \"sqsupe;\": 0x2292,\n    \"sqsupset;\": 0x2290,\n    \"sqsupseteq;\": 0x2292,\n    \"squ;\": 0x25a1,\n    \"square;\": 0x25a1,\n    \"squarf;\": 0x25aa,\n    \"squf;\": 0x25aa,\n    \"srarr;\": 0x2192,\n    \"sscr;\": [\n        0xd835,\n        0xdcc8\n    ],\n    \"ssetmn;\": 0x2216,\n    \"ssmile;\": 0x2323,\n    \"sstarf;\": 0x22c6,\n    \"star;\": 0x2606,\n    \"starf;\": 0x2605,\n    \"straightepsilon;\": 0x3f5,\n    \"straightphi;\": 0x3d5,\n    \"strns;\": 0xaf,\n    \"sub;\": 0x2282,\n    \"subE;\": 0x2ac5,\n    \"subdot;\": 0x2abd,\n    \"sube;\": 0x2286,\n    \"subedot;\": 0x2ac3,\n    \"submult;\": 0x2ac1,\n    \"subnE;\": 0x2acb,\n    \"subne;\": 0x228a,\n    \"subplus;\": 0x2abf,\n    \"subrarr;\": 0x2979,\n    \"subset;\": 0x2282,\n    \"subseteq;\": 0x2286,\n    \"subseteqq;\": 0x2ac5,\n    \"subsetneq;\": 0x228a,\n    \"subsetneqq;\": 0x2acb,\n    \"subsim;\": 0x2ac7,\n    \"subsub;\": 0x2ad5,\n    \"subsup;\": 0x2ad3,\n    \"succ;\": 0x227b,\n    \"succapprox;\": 0x2ab8,\n    \"succcurlyeq;\": 0x227d,\n    \"succeq;\": 0x2ab0,\n    \"succnapprox;\": 0x2aba,\n    \"succneqq;\": 0x2ab6,\n    \"succnsim;\": 0x22e9,\n    \"succsim;\": 0x227f,\n    \"sum;\": 0x2211,\n    \"sung;\": 0x266a,\n    \"sup1\": 0xb9,\n    \"sup1;\": 0xb9,\n    \"sup2\": 0xb2,\n    \"sup2;\": 0xb2,\n    \"sup3\": 0xb3,\n    \"sup3;\": 0xb3,\n    \"sup;\": 0x2283,\n    \"supE;\": 0x2ac6,\n    \"supdot;\": 0x2abe,\n    \"supdsub;\": 0x2ad8,\n    \"supe;\": 0x2287,\n    \"supedot;\": 0x2ac4,\n    \"suphsol;\": 0x27c9,\n    \"suphsub;\": 0x2ad7,\n    \"suplarr;\": 0x297b,\n    \"supmult;\": 0x2ac2,\n    \"supnE;\": 0x2acc,\n    \"supne;\": 0x228b,\n    \"supplus;\": 0x2ac0,\n    \"supset;\": 0x2283,\n    \"supseteq;\": 0x2287,\n    \"supseteqq;\": 0x2ac6,\n    \"supsetneq;\": 0x228b,\n    \"supsetneqq;\": 0x2acc,\n    \"supsim;\": 0x2ac8,\n    \"supsub;\": 0x2ad4,\n    \"supsup;\": 0x2ad6,\n    \"swArr;\": 0x21d9,\n    \"swarhk;\": 0x2926,\n    \"swarr;\": 0x2199,\n    \"swarrow;\": 0x2199,\n    \"swnwar;\": 0x292a,\n    \"szlig\": 0xdf,\n    \"szlig;\": 0xdf,\n    \"target;\": 0x2316,\n    \"tau;\": 0x3c4,\n    \"tbrk;\": 0x23b4,\n    \"tcaron;\": 0x165,\n    \"tcedil;\": 0x163,\n    \"tcy;\": 0x442,\n    \"tdot;\": 0x20db,\n    \"telrec;\": 0x2315,\n    \"tfr;\": [\n        0xd835,\n        0xdd31\n    ],\n    \"there4;\": 0x2234,\n    \"therefore;\": 0x2234,\n    \"theta;\": 0x3b8,\n    \"thetasym;\": 0x3d1,\n    \"thetav;\": 0x3d1,\n    \"thickapprox;\": 0x2248,\n    \"thicksim;\": 0x223c,\n    \"thinsp;\": 0x2009,\n    \"thkap;\": 0x2248,\n    \"thksim;\": 0x223c,\n    \"thorn\": 0xfe,\n    \"thorn;\": 0xfe,\n    \"tilde;\": 0x2dc,\n    \"times\": 0xd7,\n    \"times;\": 0xd7,\n    \"timesb;\": 0x22a0,\n    \"timesbar;\": 0x2a31,\n    \"timesd;\": 0x2a30,\n    \"tint;\": 0x222d,\n    \"toea;\": 0x2928,\n    \"top;\": 0x22a4,\n    \"topbot;\": 0x2336,\n    \"topcir;\": 0x2af1,\n    \"topf;\": [\n        0xd835,\n        0xdd65\n    ],\n    \"topfork;\": 0x2ada,\n    \"tosa;\": 0x2929,\n    \"tprime;\": 0x2034,\n    \"trade;\": 0x2122,\n    \"triangle;\": 0x25b5,\n    \"triangledown;\": 0x25bf,\n    \"triangleleft;\": 0x25c3,\n    \"trianglelefteq;\": 0x22b4,\n    \"triangleq;\": 0x225c,\n    \"triangleright;\": 0x25b9,\n    \"trianglerighteq;\": 0x22b5,\n    \"tridot;\": 0x25ec,\n    \"trie;\": 0x225c,\n    \"triminus;\": 0x2a3a,\n    \"triplus;\": 0x2a39,\n    \"trisb;\": 0x29cd,\n    \"tritime;\": 0x2a3b,\n    \"trpezium;\": 0x23e2,\n    \"tscr;\": [\n        0xd835,\n        0xdcc9\n    ],\n    \"tscy;\": 0x446,\n    \"tshcy;\": 0x45b,\n    \"tstrok;\": 0x167,\n    \"twixt;\": 0x226c,\n    \"twoheadleftarrow;\": 0x219e,\n    \"twoheadrightarrow;\": 0x21a0,\n    \"uArr;\": 0x21d1,\n    \"uHar;\": 0x2963,\n    \"uacute\": 0xfa,\n    \"uacute;\": 0xfa,\n    \"uarr;\": 0x2191,\n    \"ubrcy;\": 0x45e,\n    \"ubreve;\": 0x16d,\n    \"ucirc\": 0xfb,\n    \"ucirc;\": 0xfb,\n    \"ucy;\": 0x443,\n    \"udarr;\": 0x21c5,\n    \"udblac;\": 0x171,\n    \"udhar;\": 0x296e,\n    \"ufisht;\": 0x297e,\n    \"ufr;\": [\n        0xd835,\n        0xdd32\n    ],\n    \"ugrave\": 0xf9,\n    \"ugrave;\": 0xf9,\n    \"uharl;\": 0x21bf,\n    \"uharr;\": 0x21be,\n    \"uhblk;\": 0x2580,\n    \"ulcorn;\": 0x231c,\n    \"ulcorner;\": 0x231c,\n    \"ulcrop;\": 0x230f,\n    \"ultri;\": 0x25f8,\n    \"umacr;\": 0x16b,\n    \"uml\": 0xa8,\n    \"uml;\": 0xa8,\n    \"uogon;\": 0x173,\n    \"uopf;\": [\n        0xd835,\n        0xdd66\n    ],\n    \"uparrow;\": 0x2191,\n    \"updownarrow;\": 0x2195,\n    \"upharpoonleft;\": 0x21bf,\n    \"upharpoonright;\": 0x21be,\n    \"uplus;\": 0x228e,\n    \"upsi;\": 0x3c5,\n    \"upsih;\": 0x3d2,\n    \"upsilon;\": 0x3c5,\n    \"upuparrows;\": 0x21c8,\n    \"urcorn;\": 0x231d,\n    \"urcorner;\": 0x231d,\n    \"urcrop;\": 0x230e,\n    \"uring;\": 0x16f,\n    \"urtri;\": 0x25f9,\n    \"uscr;\": [\n        0xd835,\n        0xdcca\n    ],\n    \"utdot;\": 0x22f0,\n    \"utilde;\": 0x169,\n    \"utri;\": 0x25b5,\n    \"utrif;\": 0x25b4,\n    \"uuarr;\": 0x21c8,\n    \"uuml\": 0xfc,\n    \"uuml;\": 0xfc,\n    \"uwangle;\": 0x29a7,\n    \"vArr;\": 0x21d5,\n    \"vBar;\": 0x2ae8,\n    \"vBarv;\": 0x2ae9,\n    \"vDash;\": 0x22a8,\n    \"vangrt;\": 0x299c,\n    \"varepsilon;\": 0x3f5,\n    \"varkappa;\": 0x3f0,\n    \"varnothing;\": 0x2205,\n    \"varphi;\": 0x3d5,\n    \"varpi;\": 0x3d6,\n    \"varpropto;\": 0x221d,\n    \"varr;\": 0x2195,\n    \"varrho;\": 0x3f1,\n    \"varsigma;\": 0x3c2,\n    \"varsubsetneq;\": [\n        0x228a,\n        0xfe00\n    ],\n    \"varsubsetneqq;\": [\n        0x2acb,\n        0xfe00\n    ],\n    \"varsupsetneq;\": [\n        0x228b,\n        0xfe00\n    ],\n    \"varsupsetneqq;\": [\n        0x2acc,\n        0xfe00\n    ],\n    \"vartheta;\": 0x3d1,\n    \"vartriangleleft;\": 0x22b2,\n    \"vartriangleright;\": 0x22b3,\n    \"vcy;\": 0x432,\n    \"vdash;\": 0x22a2,\n    \"vee;\": 0x2228,\n    \"veebar;\": 0x22bb,\n    \"veeeq;\": 0x225a,\n    \"vellip;\": 0x22ee,\n    \"verbar;\": 0x7c,\n    \"vert;\": 0x7c,\n    \"vfr;\": [\n        0xd835,\n        0xdd33\n    ],\n    \"vltri;\": 0x22b2,\n    \"vnsub;\": [\n        0x2282,\n        0x20d2\n    ],\n    \"vnsup;\": [\n        0x2283,\n        0x20d2\n    ],\n    \"vopf;\": [\n        0xd835,\n        0xdd67\n    ],\n    \"vprop;\": 0x221d,\n    \"vrtri;\": 0x22b3,\n    \"vscr;\": [\n        0xd835,\n        0xdccb\n    ],\n    \"vsubnE;\": [\n        0x2acb,\n        0xfe00\n    ],\n    \"vsubne;\": [\n        0x228a,\n        0xfe00\n    ],\n    \"vsupnE;\": [\n        0x2acc,\n        0xfe00\n    ],\n    \"vsupne;\": [\n        0x228b,\n        0xfe00\n    ],\n    \"vzigzag;\": 0x299a,\n    \"wcirc;\": 0x175,\n    \"wedbar;\": 0x2a5f,\n    \"wedge;\": 0x2227,\n    \"wedgeq;\": 0x2259,\n    \"weierp;\": 0x2118,\n    \"wfr;\": [\n        0xd835,\n        0xdd34\n    ],\n    \"wopf;\": [\n        0xd835,\n        0xdd68\n    ],\n    \"wp;\": 0x2118,\n    \"wr;\": 0x2240,\n    \"wreath;\": 0x2240,\n    \"wscr;\": [\n        0xd835,\n        0xdccc\n    ],\n    \"xcap;\": 0x22c2,\n    \"xcirc;\": 0x25ef,\n    \"xcup;\": 0x22c3,\n    \"xdtri;\": 0x25bd,\n    \"xfr;\": [\n        0xd835,\n        0xdd35\n    ],\n    \"xhArr;\": 0x27fa,\n    \"xharr;\": 0x27f7,\n    \"xi;\": 0x3be,\n    \"xlArr;\": 0x27f8,\n    \"xlarr;\": 0x27f5,\n    \"xmap;\": 0x27fc,\n    \"xnis;\": 0x22fb,\n    \"xodot;\": 0x2a00,\n    \"xopf;\": [\n        0xd835,\n        0xdd69\n    ],\n    \"xoplus;\": 0x2a01,\n    \"xotime;\": 0x2a02,\n    \"xrArr;\": 0x27f9,\n    \"xrarr;\": 0x27f6,\n    \"xscr;\": [\n        0xd835,\n        0xdccd\n    ],\n    \"xsqcup;\": 0x2a06,\n    \"xuplus;\": 0x2a04,\n    \"xutri;\": 0x25b3,\n    \"xvee;\": 0x22c1,\n    \"xwedge;\": 0x22c0,\n    \"yacute\": 0xfd,\n    \"yacute;\": 0xfd,\n    \"yacy;\": 0x44f,\n    \"ycirc;\": 0x177,\n    \"ycy;\": 0x44b,\n    \"yen\": 0xa5,\n    \"yen;\": 0xa5,\n    \"yfr;\": [\n        0xd835,\n        0xdd36\n    ],\n    \"yicy;\": 0x457,\n    \"yopf;\": [\n        0xd835,\n        0xdd6a\n    ],\n    \"yscr;\": [\n        0xd835,\n        0xdcce\n    ],\n    \"yucy;\": 0x44e,\n    \"yuml\": 0xff,\n    \"yuml;\": 0xff,\n    \"zacute;\": 0x17a,\n    \"zcaron;\": 0x17e,\n    \"zcy;\": 0x437,\n    \"zdot;\": 0x17c,\n    \"zeetrf;\": 0x2128,\n    \"zeta;\": 0x3b6,\n    \"zfr;\": [\n        0xd835,\n        0xdd37\n    ],\n    \"zhcy;\": 0x436,\n    \"zigrarr;\": 0x21dd,\n    \"zopf;\": [\n        0xd835,\n        0xdd6b\n    ],\n    \"zscr;\": [\n        0xd835,\n        0xdccf\n    ],\n    \"zwj;\": 0x200d,\n    \"zwnj;\": 0x200c\n};\n/*\n * This regexp is generated with test/tools/update-entities.js\n * It will always match at least one character -- but note that there\n * are no entities whose names are a single character long.\n */ var NAMEDCHARREF = /(A(?:Elig;?|MP;?|acute;?|breve;|c(?:irc;?|y;)|fr;|grave;?|lpha;|macr;|nd;|o(?:gon;|pf;)|pplyFunction;|ring;?|s(?:cr;|sign;)|tilde;?|uml;?)|B(?:a(?:ckslash;|r(?:v;|wed;))|cy;|e(?:cause;|rnoullis;|ta;)|fr;|opf;|reve;|scr;|umpeq;)|C(?:Hcy;|OPY;?|a(?:cute;|p(?:;|italDifferentialD;)|yleys;)|c(?:aron;|edil;?|irc;|onint;)|dot;|e(?:dilla;|nterDot;)|fr;|hi;|ircle(?:Dot;|Minus;|Plus;|Times;)|lo(?:ckwiseContourIntegral;|seCurly(?:DoubleQuote;|Quote;))|o(?:lon(?:;|e;)|n(?:gruent;|int;|tourIntegral;)|p(?:f;|roduct;)|unterClockwiseContourIntegral;)|ross;|scr;|up(?:;|Cap;))|D(?:D(?:;|otrahd;)|Jcy;|Scy;|Zcy;|a(?:gger;|rr;|shv;)|c(?:aron;|y;)|el(?:;|ta;)|fr;|i(?:a(?:critical(?:Acute;|Do(?:t;|ubleAcute;)|Grave;|Tilde;)|mond;)|fferentialD;)|o(?:pf;|t(?:;|Dot;|Equal;)|uble(?:ContourIntegral;|Do(?:t;|wnArrow;)|L(?:eft(?:Arrow;|RightArrow;|Tee;)|ong(?:Left(?:Arrow;|RightArrow;)|RightArrow;))|Right(?:Arrow;|Tee;)|Up(?:Arrow;|DownArrow;)|VerticalBar;)|wn(?:Arrow(?:;|Bar;|UpArrow;)|Breve;|Left(?:RightVector;|TeeVector;|Vector(?:;|Bar;))|Right(?:TeeVector;|Vector(?:;|Bar;))|Tee(?:;|Arrow;)|arrow;))|s(?:cr;|trok;))|E(?:NG;|TH;?|acute;?|c(?:aron;|irc;?|y;)|dot;|fr;|grave;?|lement;|m(?:acr;|pty(?:SmallSquare;|VerySmallSquare;))|o(?:gon;|pf;)|psilon;|qu(?:al(?:;|Tilde;)|ilibrium;)|s(?:cr;|im;)|ta;|uml;?|x(?:ists;|ponentialE;))|F(?:cy;|fr;|illed(?:SmallSquare;|VerySmallSquare;)|o(?:pf;|rAll;|uriertrf;)|scr;)|G(?:Jcy;|T;?|amma(?:;|d;)|breve;|c(?:edil;|irc;|y;)|dot;|fr;|g;|opf;|reater(?:Equal(?:;|Less;)|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|scr;|t;)|H(?:ARDcy;|a(?:cek;|t;)|circ;|fr;|ilbertSpace;|o(?:pf;|rizontalLine;)|s(?:cr;|trok;)|ump(?:DownHump;|Equal;))|I(?:Ecy;|Jlig;|Ocy;|acute;?|c(?:irc;?|y;)|dot;|fr;|grave;?|m(?:;|a(?:cr;|ginaryI;)|plies;)|n(?:t(?:;|e(?:gral;|rsection;))|visible(?:Comma;|Times;))|o(?:gon;|pf;|ta;)|scr;|tilde;|u(?:kcy;|ml;?))|J(?:c(?:irc;|y;)|fr;|opf;|s(?:cr;|ercy;)|ukcy;)|K(?:Hcy;|Jcy;|appa;|c(?:edil;|y;)|fr;|opf;|scr;)|L(?:Jcy;|T;?|a(?:cute;|mbda;|ng;|placetrf;|rr;)|c(?:aron;|edil;|y;)|e(?:ft(?:A(?:ngleBracket;|rrow(?:;|Bar;|RightArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|Right(?:Arrow;|Vector;)|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;|rightarrow;)|ss(?:EqualGreater;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;))|fr;|l(?:;|eftarrow;)|midot;|o(?:ng(?:Left(?:Arrow;|RightArrow;)|RightArrow;|left(?:arrow;|rightarrow;)|rightarrow;)|pf;|wer(?:LeftArrow;|RightArrow;))|s(?:cr;|h;|trok;)|t;)|M(?:ap;|cy;|e(?:diumSpace;|llintrf;)|fr;|inusPlus;|opf;|scr;|u;)|N(?:Jcy;|acute;|c(?:aron;|edil;|y;)|e(?:gative(?:MediumSpace;|Thi(?:ckSpace;|nSpace;)|VeryThinSpace;)|sted(?:GreaterGreater;|LessLess;)|wLine;)|fr;|o(?:Break;|nBreakingSpace;|pf;|t(?:;|C(?:ongruent;|upCap;)|DoubleVerticalBar;|E(?:lement;|qual(?:;|Tilde;)|xists;)|Greater(?:;|Equal;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|Hump(?:DownHump;|Equal;)|Le(?:ftTriangle(?:;|Bar;|Equal;)|ss(?:;|Equal;|Greater;|Less;|SlantEqual;|Tilde;))|Nested(?:GreaterGreater;|LessLess;)|Precedes(?:;|Equal;|SlantEqual;)|R(?:everseElement;|ightTriangle(?:;|Bar;|Equal;))|S(?:quareSu(?:bset(?:;|Equal;)|perset(?:;|Equal;))|u(?:bset(?:;|Equal;)|cceeds(?:;|Equal;|SlantEqual;|Tilde;)|perset(?:;|Equal;)))|Tilde(?:;|Equal;|FullEqual;|Tilde;)|VerticalBar;))|scr;|tilde;?|u;)|O(?:Elig;|acute;?|c(?:irc;?|y;)|dblac;|fr;|grave;?|m(?:acr;|ega;|icron;)|opf;|penCurly(?:DoubleQuote;|Quote;)|r;|s(?:cr;|lash;?)|ti(?:lde;?|mes;)|uml;?|ver(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;))|P(?:artialD;|cy;|fr;|hi;|i;|lusMinus;|o(?:incareplane;|pf;)|r(?:;|ecedes(?:;|Equal;|SlantEqual;|Tilde;)|ime;|o(?:duct;|portion(?:;|al;)))|s(?:cr;|i;))|Q(?:UOT;?|fr;|opf;|scr;)|R(?:Barr;|EG;?|a(?:cute;|ng;|rr(?:;|tl;))|c(?:aron;|edil;|y;)|e(?:;|verse(?:E(?:lement;|quilibrium;)|UpEquilibrium;))|fr;|ho;|ight(?:A(?:ngleBracket;|rrow(?:;|Bar;|LeftArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;)|o(?:pf;|undImplies;)|rightarrow;|s(?:cr;|h;)|uleDelayed;)|S(?:H(?:CHcy;|cy;)|OFTcy;|acute;|c(?:;|aron;|edil;|irc;|y;)|fr;|hort(?:DownArrow;|LeftArrow;|RightArrow;|UpArrow;)|igma;|mallCircle;|opf;|q(?:rt;|uare(?:;|Intersection;|Su(?:bset(?:;|Equal;)|perset(?:;|Equal;))|Union;))|scr;|tar;|u(?:b(?:;|set(?:;|Equal;))|c(?:ceeds(?:;|Equal;|SlantEqual;|Tilde;)|hThat;)|m;|p(?:;|erset(?:;|Equal;)|set;)))|T(?:HORN;?|RADE;|S(?:Hcy;|cy;)|a(?:b;|u;)|c(?:aron;|edil;|y;)|fr;|h(?:e(?:refore;|ta;)|i(?:ckSpace;|nSpace;))|ilde(?:;|Equal;|FullEqual;|Tilde;)|opf;|ripleDot;|s(?:cr;|trok;))|U(?:a(?:cute;?|rr(?:;|ocir;))|br(?:cy;|eve;)|c(?:irc;?|y;)|dblac;|fr;|grave;?|macr;|n(?:der(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;)|ion(?:;|Plus;))|o(?:gon;|pf;)|p(?:Arrow(?:;|Bar;|DownArrow;)|DownArrow;|Equilibrium;|Tee(?:;|Arrow;)|arrow;|downarrow;|per(?:LeftArrow;|RightArrow;)|si(?:;|lon;))|ring;|scr;|tilde;|uml;?)|V(?:Dash;|bar;|cy;|dash(?:;|l;)|e(?:e;|r(?:bar;|t(?:;|ical(?:Bar;|Line;|Separator;|Tilde;))|yThinSpace;))|fr;|opf;|scr;|vdash;)|W(?:circ;|edge;|fr;|opf;|scr;)|X(?:fr;|i;|opf;|scr;)|Y(?:Acy;|Icy;|Ucy;|acute;?|c(?:irc;|y;)|fr;|opf;|scr;|uml;)|Z(?:Hcy;|acute;|c(?:aron;|y;)|dot;|e(?:roWidthSpace;|ta;)|fr;|opf;|scr;)|a(?:acute;?|breve;|c(?:;|E;|d;|irc;?|ute;?|y;)|elig;?|f(?:;|r;)|grave;?|l(?:e(?:fsym;|ph;)|pha;)|m(?:a(?:cr;|lg;)|p;?)|n(?:d(?:;|and;|d;|slope;|v;)|g(?:;|e;|le;|msd(?:;|a(?:a;|b;|c;|d;|e;|f;|g;|h;))|rt(?:;|vb(?:;|d;))|s(?:ph;|t;)|zarr;))|o(?:gon;|pf;)|p(?:;|E;|acir;|e;|id;|os;|prox(?:;|eq;))|ring;?|s(?:cr;|t;|ymp(?:;|eq;))|tilde;?|uml;?|w(?:conint;|int;))|b(?:Not;|a(?:ck(?:cong;|epsilon;|prime;|sim(?:;|eq;))|r(?:vee;|wed(?:;|ge;)))|brk(?:;|tbrk;)|c(?:ong;|y;)|dquo;|e(?:caus(?:;|e;)|mptyv;|psi;|rnou;|t(?:a;|h;|ween;))|fr;|ig(?:c(?:ap;|irc;|up;)|o(?:dot;|plus;|times;)|s(?:qcup;|tar;)|triangle(?:down;|up;)|uplus;|vee;|wedge;)|karow;|l(?:a(?:ck(?:lozenge;|square;|triangle(?:;|down;|left;|right;))|nk;)|k(?:1(?:2;|4;)|34;)|ock;)|n(?:e(?:;|quiv;)|ot;)|o(?:pf;|t(?:;|tom;)|wtie;|x(?:D(?:L;|R;|l;|r;)|H(?:;|D;|U;|d;|u;)|U(?:L;|R;|l;|r;)|V(?:;|H;|L;|R;|h;|l;|r;)|box;|d(?:L;|R;|l;|r;)|h(?:;|D;|U;|d;|u;)|minus;|plus;|times;|u(?:L;|R;|l;|r;)|v(?:;|H;|L;|R;|h;|l;|r;)))|prime;|r(?:eve;|vbar;?)|s(?:cr;|emi;|im(?:;|e;)|ol(?:;|b;|hsub;))|u(?:ll(?:;|et;)|mp(?:;|E;|e(?:;|q;))))|c(?:a(?:cute;|p(?:;|and;|brcup;|c(?:ap;|up;)|dot;|s;)|r(?:et;|on;))|c(?:a(?:ps;|ron;)|edil;?|irc;|ups(?:;|sm;))|dot;|e(?:dil;?|mptyv;|nt(?:;|erdot;|))|fr;|h(?:cy;|eck(?:;|mark;)|i;)|ir(?:;|E;|c(?:;|eq;|le(?:arrow(?:left;|right;)|d(?:R;|S;|ast;|circ;|dash;)))|e;|fnint;|mid;|scir;)|lubs(?:;|uit;)|o(?:lon(?:;|e(?:;|q;))|m(?:ma(?:;|t;)|p(?:;|fn;|le(?:ment;|xes;)))|n(?:g(?:;|dot;)|int;)|p(?:f;|rod;|y(?:;|sr;|)))|r(?:arr;|oss;)|s(?:cr;|u(?:b(?:;|e;)|p(?:;|e;)))|tdot;|u(?:darr(?:l;|r;)|e(?:pr;|sc;)|larr(?:;|p;)|p(?:;|brcap;|c(?:ap;|up;)|dot;|or;|s;)|r(?:arr(?:;|m;)|ly(?:eq(?:prec;|succ;)|vee;|wedge;)|ren;?|vearrow(?:left;|right;))|vee;|wed;)|w(?:conint;|int;)|ylcty;)|d(?:Arr;|Har;|a(?:gger;|leth;|rr;|sh(?:;|v;))|b(?:karow;|lac;)|c(?:aron;|y;)|d(?:;|a(?:gger;|rr;)|otseq;)|e(?:g;?|lta;|mptyv;)|f(?:isht;|r;)|har(?:l;|r;)|i(?:am(?:;|ond(?:;|suit;)|s;)|e;|gamma;|sin;|v(?:;|ide(?:;|ontimes;|)|onx;))|jcy;|lc(?:orn;|rop;)|o(?:llar;|pf;|t(?:;|eq(?:;|dot;)|minus;|plus;|square;)|ublebarwedge;|wn(?:arrow;|downarrows;|harpoon(?:left;|right;)))|r(?:bkarow;|c(?:orn;|rop;))|s(?:c(?:r;|y;)|ol;|trok;)|t(?:dot;|ri(?:;|f;))|u(?:arr;|har;)|wangle;|z(?:cy;|igrarr;))|e(?:D(?:Dot;|ot;)|a(?:cute;?|ster;)|c(?:aron;|ir(?:;|c;?)|olon;|y;)|dot;|e;|f(?:Dot;|r;)|g(?:;|rave;?|s(?:;|dot;))|l(?:;|inters;|l;|s(?:;|dot;))|m(?:acr;|pty(?:;|set;|v;)|sp(?:1(?:3;|4;)|;))|n(?:g;|sp;)|o(?:gon;|pf;)|p(?:ar(?:;|sl;)|lus;|si(?:;|lon;|v;))|q(?:c(?:irc;|olon;)|s(?:im;|lant(?:gtr;|less;))|u(?:als;|est;|iv(?:;|DD;))|vparsl;)|r(?:Dot;|arr;)|s(?:cr;|dot;|im;)|t(?:a;|h;?)|u(?:ml;?|ro;)|x(?:cl;|ist;|p(?:ectation;|onentiale;)))|f(?:allingdotseq;|cy;|emale;|f(?:ilig;|l(?:ig;|lig;)|r;)|ilig;|jlig;|l(?:at;|lig;|tns;)|nof;|o(?:pf;|r(?:all;|k(?:;|v;)))|partint;|r(?:a(?:c(?:1(?:2;?|3;|4;?|5;|6;|8;)|2(?:3;|5;)|3(?:4;?|5;|8;)|45;|5(?:6;|8;)|78;)|sl;)|own;)|scr;)|g(?:E(?:;|l;)|a(?:cute;|mma(?:;|d;)|p;)|breve;|c(?:irc;|y;)|dot;|e(?:;|l;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|l;))|l(?:;|es;)))|fr;|g(?:;|g;)|imel;|jcy;|l(?:;|E;|a;|j;)|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|opf;|rave;|s(?:cr;|im(?:;|e;|l;))|t(?:;|c(?:c;|ir;)|dot;|lPar;|quest;|r(?:a(?:pprox;|rr;)|dot;|eq(?:less;|qless;)|less;|sim;)|)|v(?:ertneqq;|nE;))|h(?:Arr;|a(?:irsp;|lf;|milt;|r(?:dcy;|r(?:;|cir;|w;)))|bar;|circ;|e(?:arts(?:;|uit;)|llip;|rcon;)|fr;|ks(?:earow;|warow;)|o(?:arr;|mtht;|ok(?:leftarrow;|rightarrow;)|pf;|rbar;)|s(?:cr;|lash;|trok;)|y(?:bull;|phen;))|i(?:acute;?|c(?:;|irc;?|y;)|e(?:cy;|xcl;?)|f(?:f;|r;)|grave;?|i(?:;|i(?:int;|nt;)|nfin;|ota;)|jlig;|m(?:a(?:cr;|g(?:e;|line;|part;)|th;)|of;|ped;)|n(?:;|care;|fin(?:;|tie;)|odot;|t(?:;|cal;|e(?:gers;|rcal;)|larhk;|prod;))|o(?:cy;|gon;|pf;|ta;)|prod;|quest;?|s(?:cr;|in(?:;|E;|dot;|s(?:;|v;)|v;))|t(?:;|ilde;)|u(?:kcy;|ml;?))|j(?:c(?:irc;|y;)|fr;|math;|opf;|s(?:cr;|ercy;)|ukcy;)|k(?:appa(?:;|v;)|c(?:edil;|y;)|fr;|green;|hcy;|jcy;|opf;|scr;)|l(?:A(?:arr;|rr;|tail;)|Barr;|E(?:;|g;)|Har;|a(?:cute;|emptyv;|gran;|mbda;|ng(?:;|d;|le;)|p;|quo;?|rr(?:;|b(?:;|fs;)|fs;|hk;|lp;|pl;|sim;|tl;)|t(?:;|ail;|e(?:;|s;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|quo(?:;|r;)|r(?:dhar;|ushar;)|sh;)|e(?:;|ft(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|leftarrows;|right(?:arrow(?:;|s;)|harpoons;|squigarrow;)|threetimes;)|g;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|r;))|g(?:;|es;)|s(?:approx;|dot;|eq(?:gtr;|qgtr;)|gtr;|sim;)))|f(?:isht;|loor;|r;)|g(?:;|E;)|h(?:ar(?:d;|u(?:;|l;))|blk;)|jcy;|l(?:;|arr;|corner;|hard;|tri;)|m(?:idot;|oust(?:;|ache;))|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|o(?:a(?:ng;|rr;)|brk;|ng(?:left(?:arrow;|rightarrow;)|mapsto;|rightarrow;)|oparrow(?:left;|right;)|p(?:ar;|f;|lus;)|times;|w(?:ast;|bar;)|z(?:;|enge;|f;))|par(?:;|lt;)|r(?:arr;|corner;|har(?:;|d;)|m;|tri;)|s(?:aquo;|cr;|h;|im(?:;|e;|g;)|q(?:b;|uo(?:;|r;))|trok;)|t(?:;|c(?:c;|ir;)|dot;|hree;|imes;|larr;|quest;|r(?:Par;|i(?:;|e;|f;))|)|ur(?:dshar;|uhar;)|v(?:ertneqq;|nE;))|m(?:DDot;|a(?:cr;?|l(?:e;|t(?:;|ese;))|p(?:;|sto(?:;|down;|left;|up;))|rker;)|c(?:omma;|y;)|dash;|easuredangle;|fr;|ho;|i(?:cro;?|d(?:;|ast;|cir;|dot;?)|nus(?:;|b;|d(?:;|u;)))|l(?:cp;|dr;)|nplus;|o(?:dels;|pf;)|p;|s(?:cr;|tpos;)|u(?:;|ltimap;|map;))|n(?:G(?:g;|t(?:;|v;))|L(?:eft(?:arrow;|rightarrow;)|l;|t(?:;|v;))|Rightarrow;|V(?:Dash;|dash;)|a(?:bla;|cute;|ng;|p(?:;|E;|id;|os;|prox;)|tur(?:;|al(?:;|s;)))|b(?:sp;?|ump(?:;|e;))|c(?:a(?:p;|ron;)|edil;|ong(?:;|dot;)|up;|y;)|dash;|e(?:;|Arr;|ar(?:hk;|r(?:;|ow;))|dot;|quiv;|s(?:ear;|im;)|xist(?:;|s;))|fr;|g(?:E;|e(?:;|q(?:;|q;|slant;)|s;)|sim;|t(?:;|r;))|h(?:Arr;|arr;|par;)|i(?:;|s(?:;|d;)|v;)|jcy;|l(?:Arr;|E;|arr;|dr;|e(?:;|ft(?:arrow;|rightarrow;)|q(?:;|q;|slant;)|s(?:;|s;))|sim;|t(?:;|ri(?:;|e;)))|mid;|o(?:pf;|t(?:;|in(?:;|E;|dot;|v(?:a;|b;|c;))|ni(?:;|v(?:a;|b;|c;))|))|p(?:ar(?:;|allel;|sl;|t;)|olint;|r(?:;|cue;|e(?:;|c(?:;|eq;))))|r(?:Arr;|arr(?:;|c;|w;)|ightarrow;|tri(?:;|e;))|s(?:c(?:;|cue;|e;|r;)|hort(?:mid;|parallel;)|im(?:;|e(?:;|q;))|mid;|par;|qsu(?:be;|pe;)|u(?:b(?:;|E;|e;|set(?:;|eq(?:;|q;)))|cc(?:;|eq;)|p(?:;|E;|e;|set(?:;|eq(?:;|q;)))))|t(?:gl;|ilde;?|lg;|riangle(?:left(?:;|eq;)|right(?:;|eq;)))|u(?:;|m(?:;|ero;|sp;))|v(?:Dash;|Harr;|ap;|dash;|g(?:e;|t;)|infin;|l(?:Arr;|e;|t(?:;|rie;))|r(?:Arr;|trie;)|sim;)|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|near;))|o(?:S;|a(?:cute;?|st;)|c(?:ir(?:;|c;?)|y;)|d(?:ash;|blac;|iv;|ot;|sold;)|elig;|f(?:cir;|r;)|g(?:on;|rave;?|t;)|h(?:bar;|m;)|int;|l(?:arr;|c(?:ir;|ross;)|ine;|t;)|m(?:acr;|ega;|i(?:cron;|d;|nus;))|opf;|p(?:ar;|erp;|lus;)|r(?:;|arr;|d(?:;|er(?:;|of;)|f;?|m;?)|igof;|or;|slope;|v;)|s(?:cr;|lash;?|ol;)|ti(?:lde;?|mes(?:;|as;))|uml;?|vbar;)|p(?:ar(?:;|a(?:;|llel;|)|s(?:im;|l;)|t;)|cy;|er(?:cnt;|iod;|mil;|p;|tenk;)|fr;|h(?:i(?:;|v;)|mmat;|one;)|i(?:;|tchfork;|v;)|l(?:an(?:ck(?:;|h;)|kv;)|us(?:;|acir;|b;|cir;|d(?:o;|u;)|e;|mn;?|sim;|two;))|m;|o(?:intint;|pf;|und;?)|r(?:;|E;|ap;|cue;|e(?:;|c(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;))|ime(?:;|s;)|n(?:E;|ap;|sim;)|o(?:d;|f(?:alar;|line;|surf;)|p(?:;|to;))|sim;|urel;)|s(?:cr;|i;)|uncsp;)|q(?:fr;|int;|opf;|prime;|scr;|u(?:at(?:ernions;|int;)|est(?:;|eq;)|ot;?))|r(?:A(?:arr;|rr;|tail;)|Barr;|Har;|a(?:c(?:e;|ute;)|dic;|emptyv;|ng(?:;|d;|e;|le;)|quo;?|rr(?:;|ap;|b(?:;|fs;)|c;|fs;|hk;|lp;|pl;|sim;|tl;|w;)|t(?:ail;|io(?:;|nals;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|ldhar;|quo(?:;|r;)|sh;)|e(?:al(?:;|ine;|part;|s;)|ct;|g;?)|f(?:isht;|loor;|r;)|h(?:ar(?:d;|u(?:;|l;))|o(?:;|v;))|i(?:ght(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|left(?:arrows;|harpoons;)|rightarrows;|squigarrow;|threetimes;)|ng;|singdotseq;)|l(?:arr;|har;|m;)|moust(?:;|ache;)|nmid;|o(?:a(?:ng;|rr;)|brk;|p(?:ar;|f;|lus;)|times;)|p(?:ar(?:;|gt;)|polint;)|rarr;|s(?:aquo;|cr;|h;|q(?:b;|uo(?:;|r;)))|t(?:hree;|imes;|ri(?:;|e;|f;|ltri;))|uluhar;|x;)|s(?:acute;|bquo;|c(?:;|E;|a(?:p;|ron;)|cue;|e(?:;|dil;)|irc;|n(?:E;|ap;|sim;)|polint;|sim;|y;)|dot(?:;|b;|e;)|e(?:Arr;|ar(?:hk;|r(?:;|ow;))|ct;?|mi;|swar;|tm(?:inus;|n;)|xt;)|fr(?:;|own;)|h(?:arp;|c(?:hcy;|y;)|ort(?:mid;|parallel;)|y;?)|i(?:gma(?:;|f;|v;)|m(?:;|dot;|e(?:;|q;)|g(?:;|E;)|l(?:;|E;)|ne;|plus;|rarr;))|larr;|m(?:a(?:llsetminus;|shp;)|eparsl;|i(?:d;|le;)|t(?:;|e(?:;|s;)))|o(?:ftcy;|l(?:;|b(?:;|ar;))|pf;)|pa(?:des(?:;|uit;)|r;)|q(?:c(?:ap(?:;|s;)|up(?:;|s;))|su(?:b(?:;|e;|set(?:;|eq;))|p(?:;|e;|set(?:;|eq;)))|u(?:;|ar(?:e;|f;)|f;))|rarr;|s(?:cr;|etmn;|mile;|tarf;)|t(?:ar(?:;|f;)|r(?:aight(?:epsilon;|phi;)|ns;))|u(?:b(?:;|E;|dot;|e(?:;|dot;)|mult;|n(?:E;|e;)|plus;|rarr;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;)))|cc(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;)|m;|ng;|p(?:1;?|2;?|3;?|;|E;|d(?:ot;|sub;)|e(?:;|dot;)|hs(?:ol;|ub;)|larr;|mult;|n(?:E;|e;)|plus;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;))))|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|nwar;)|zlig;?)|t(?:a(?:rget;|u;)|brk;|c(?:aron;|edil;|y;)|dot;|elrec;|fr;|h(?:e(?:re(?:4;|fore;)|ta(?:;|sym;|v;))|i(?:ck(?:approx;|sim;)|nsp;)|k(?:ap;|sim;)|orn;?)|i(?:lde;|mes(?:;|b(?:;|ar;)|d;|)|nt;)|o(?:ea;|p(?:;|bot;|cir;|f(?:;|ork;))|sa;)|prime;|r(?:ade;|i(?:angle(?:;|down;|left(?:;|eq;)|q;|right(?:;|eq;))|dot;|e;|minus;|plus;|sb;|time;)|pezium;)|s(?:c(?:r;|y;)|hcy;|trok;)|w(?:ixt;|ohead(?:leftarrow;|rightarrow;)))|u(?:Arr;|Har;|a(?:cute;?|rr;)|br(?:cy;|eve;)|c(?:irc;?|y;)|d(?:arr;|blac;|har;)|f(?:isht;|r;)|grave;?|h(?:ar(?:l;|r;)|blk;)|l(?:c(?:orn(?:;|er;)|rop;)|tri;)|m(?:acr;|l;?)|o(?:gon;|pf;)|p(?:arrow;|downarrow;|harpoon(?:left;|right;)|lus;|si(?:;|h;|lon;)|uparrows;)|r(?:c(?:orn(?:;|er;)|rop;)|ing;|tri;)|scr;|t(?:dot;|ilde;|ri(?:;|f;))|u(?:arr;|ml;?)|wangle;)|v(?:Arr;|Bar(?:;|v;)|Dash;|a(?:ngrt;|r(?:epsilon;|kappa;|nothing;|p(?:hi;|i;|ropto;)|r(?:;|ho;)|s(?:igma;|u(?:bsetneq(?:;|q;)|psetneq(?:;|q;)))|t(?:heta;|riangle(?:left;|right;))))|cy;|dash;|e(?:e(?:;|bar;|eq;)|llip;|r(?:bar;|t;))|fr;|ltri;|nsu(?:b;|p;)|opf;|prop;|rtri;|s(?:cr;|u(?:bn(?:E;|e;)|pn(?:E;|e;)))|zigzag;)|w(?:circ;|e(?:d(?:bar;|ge(?:;|q;))|ierp;)|fr;|opf;|p;|r(?:;|eath;)|scr;)|x(?:c(?:ap;|irc;|up;)|dtri;|fr;|h(?:Arr;|arr;)|i;|l(?:Arr;|arr;)|map;|nis;|o(?:dot;|p(?:f;|lus;)|time;)|r(?:Arr;|arr;)|s(?:cr;|qcup;)|u(?:plus;|tri;)|vee;|wedge;)|y(?:ac(?:ute;?|y;)|c(?:irc;|y;)|en;?|fr;|icy;|opf;|scr;|u(?:cy;|ml;?))|z(?:acute;|c(?:aron;|y;)|dot;|e(?:etrf;|ta;)|fr;|hcy;|igrarr;|opf;|scr;|w(?:j;|nj;)))|[\\s\\S]/g;\nvar NAMEDCHARREF_MAXLEN = 32;\n// Regular expression constants used by the tokenizer and parser\n// Note that \\r is included in all of these regexps because it will need\n// to be converted to LF by the scanChars() function.\nvar DBLQUOTEATTRVAL = /[^\\r\"&\\u0000]+/g;\nvar SINGLEQUOTEATTRVAL = /[^\\r'&\\u0000]+/g;\nvar UNQUOTEDATTRVAL = /[^\\r\\t\\n\\f &>\\u0000]+/g;\nvar TAGNAME = /[^\\r\\t\\n\\f \\/>A-Z\\u0000]+/g;\nvar ATTRNAME = /[^\\r\\t\\n\\f \\/=>A-Z\\u0000]+/g;\nvar CDATATEXT = /[^\\]\\r\\u0000\\uffff]*/g;\nvar DATATEXT = /[^&<\\r\\u0000\\uffff]*/g;\nvar RAWTEXT = /[^<\\r\\u0000\\uffff]*/g;\nvar PLAINTEXT = /[^\\r\\u0000\\uffff]*/g;\n// Since we don't have the 'sticky tag', add '|.' to the end of SIMPLETAG\n// and SIMPLEATTR so that we are guaranteed to always match.  This prevents\n// us from scanning past the lastIndex set. (Note that the desired matches\n// are always greater than 1 char long, so longest-match will ensure that .\n// is not matched unless the desired match fails.)\nvar SIMPLETAG = /(?:(\\/)?([a-z]+)>)|[\\s\\S]/g;\nvar SIMPLEATTR = /(?:([-a-z]+)[ \\t\\n\\f]*=[ \\t\\n\\f]*('[^'&\\r\\u0000]*'|\"[^\"&\\r\\u0000]*\"|[^\\t\\n\\r\\f \"&'\\u0000>][^&> \\t\\n\\r\\f\\u0000]*[ \\t\\n\\f]))|[\\s\\S]/g;\nvar NONWS = /[^\\x09\\x0A\\x0C\\x0D\\x20]/;\nvar ALLNONWS = /[^\\x09\\x0A\\x0C\\x0D\\x20]/g; // like above, with g flag\nvar NONWSNONNUL = /[^\\x00\\x09\\x0A\\x0C\\x0D\\x20]/; // don't allow NUL either\nvar LEADINGWS = /^[\\x09\\x0A\\x0C\\x0D\\x20]+/;\nvar NULCHARS = /\\x00/g;\n/***\n * These are utility functions that don't use any of the parser's\n * internal state.\n */ function buf2str(buf) {\n    var CHUNKSIZE = 16384;\n    if (buf.length < CHUNKSIZE) {\n        return String.fromCharCode.apply(String, buf);\n    }\n    // special case for large strings, to avoid busting the stack.\n    var result = \"\";\n    for(var i = 0; i < buf.length; i += CHUNKSIZE){\n        result += String.fromCharCode.apply(String, buf.slice(i, i + CHUNKSIZE));\n    }\n    return result;\n}\nfunction str2buf(s) {\n    var result = [];\n    for(var i = 0; i < s.length; i++){\n        result[i] = s.charCodeAt(i);\n    }\n    return result;\n}\n// Determine whether the element is a member of the set.\n// The set is an object that maps namespaces to objects. The objects\n// then map local tagnames to the value true if that tag is part of the set\nfunction isA(elt, set) {\n    if (typeof set === \"string\") {\n        // convenience case for testing a particular HTML element\n        return elt.namespaceURI === NAMESPACE.HTML && elt.localName === set;\n    }\n    var tagnames = set[elt.namespaceURI];\n    return tagnames && tagnames[elt.localName];\n}\nfunction isMathmlTextIntegrationPoint(n) {\n    return isA(n, mathmlTextIntegrationPointSet);\n}\nfunction isHTMLIntegrationPoint(n) {\n    if (isA(n, htmlIntegrationPointSet)) return true;\n    if (n.namespaceURI === NAMESPACE.MATHML && n.localName === \"annotation-xml\") {\n        var encoding = n.getAttribute(\"encoding\");\n        if (encoding) encoding = encoding.toLowerCase();\n        if (encoding === \"text/html\" || encoding === \"application/xhtml+xml\") return true;\n    }\n    return false;\n}\nfunction adjustSVGTagName(name) {\n    if (name in svgTagNameAdjustments) return svgTagNameAdjustments[name];\n    else return name;\n}\nfunction adjustSVGAttributes(attrs) {\n    for(var i = 0, n = attrs.length; i < n; i++){\n        if (attrs[i][0] in svgAttrAdjustments) {\n            attrs[i][0] = svgAttrAdjustments[attrs[i][0]];\n        }\n    }\n}\nfunction adjustMathMLAttributes(attrs) {\n    for(var i = 0, n = attrs.length; i < n; i++){\n        if (attrs[i][0] === \"definitionurl\") {\n            attrs[i][0] = \"definitionURL\";\n            break;\n        }\n    }\n}\nfunction adjustForeignAttributes(attrs) {\n    for(var i = 0, n = attrs.length; i < n; i++){\n        if (attrs[i][0] in foreignAttributes) {\n            // Attributes with namespaces get a 3rd element:\n            // [Qname, value, namespace]\n            attrs[i].push(foreignAttributes[attrs[i][0]]);\n        }\n    }\n}\n// For each attribute in attrs, if elt doesn't have an attribute\n// by that name, add the attribute to elt\n// XXX: I'm ignoring namespaces for now\nfunction transferAttributes(attrs, elt) {\n    for(var i = 0, n = attrs.length; i < n; i++){\n        var name = attrs[i][0], value = attrs[i][1];\n        if (elt.hasAttribute(name)) continue;\n        elt._setAttribute(name, value);\n    }\n}\n/***\n * The ElementStack class\n */ HTMLParser.ElementStack = function ElementStack() {\n    this.elements = [];\n    this.top = null; // stack.top is the \"current node\" in the spec\n};\n/*\n// This is for debugging only\nHTMLParser.ElementStack.prototype.toString = function(e) {\n  return \"STACK: \" +\n  this.elements.map(function(e) {return e.localName;}).join(\"-\");\n}\n*/ HTMLParser.ElementStack.prototype.push = function(e) {\n    this.elements.push(e);\n    this.top = e;\n};\nHTMLParser.ElementStack.prototype.pop = function(e) {\n    this.elements.pop();\n    this.top = this.elements[this.elements.length - 1];\n};\n// Pop elements off the stack up to and including the first\n// element with the specified (HTML) tagname\nHTMLParser.ElementStack.prototype.popTag = function(tag) {\n    for(var i = this.elements.length - 1; i > 0; i--){\n        var e = this.elements[i];\n        if (isA(e, tag)) break;\n    }\n    this.elements.length = i;\n    this.top = this.elements[i - 1];\n};\n// Pop elements off the stack up to and including the first\n// element that is an instance of the specified type\nHTMLParser.ElementStack.prototype.popElementType = function(type) {\n    for(var i = this.elements.length - 1; i > 0; i--){\n        if (this.elements[i] instanceof type) break;\n    }\n    this.elements.length = i;\n    this.top = this.elements[i - 1];\n};\n// Pop elements off the stack up to and including the element e.\n// Note that this is very different from removeElement()\n// This requires that e is on the stack.\nHTMLParser.ElementStack.prototype.popElement = function(e) {\n    for(var i = this.elements.length - 1; i > 0; i--){\n        if (this.elements[i] === e) break;\n    }\n    this.elements.length = i;\n    this.top = this.elements[i - 1];\n};\n// Remove a specific element from the stack.\n// Do nothing if the element is not on the stack\nHTMLParser.ElementStack.prototype.removeElement = function(e) {\n    if (this.top === e) this.pop();\n    else {\n        var idx = this.elements.lastIndexOf(e);\n        if (idx !== -1) this.elements.splice(idx, 1);\n    }\n};\nHTMLParser.ElementStack.prototype.clearToContext = function(set) {\n    // Note that we don't loop to 0. Never pop the <html> elt off.\n    for(var i = this.elements.length - 1; i > 0; i--){\n        if (isA(this.elements[i], set)) break;\n    }\n    this.elements.length = i + 1;\n    this.top = this.elements[i];\n};\nHTMLParser.ElementStack.prototype.contains = function(tag) {\n    return this.inSpecificScope(tag, Object.create(null));\n};\nHTMLParser.ElementStack.prototype.inSpecificScope = function(tag, set) {\n    for(var i = this.elements.length - 1; i >= 0; i--){\n        var elt = this.elements[i];\n        if (isA(elt, tag)) return true;\n        if (isA(elt, set)) return false;\n    }\n    return false;\n};\n// Like the above, but for a specific element, not a tagname\nHTMLParser.ElementStack.prototype.elementInSpecificScope = function(target, set) {\n    for(var i = this.elements.length - 1; i >= 0; i--){\n        var elt = this.elements[i];\n        if (elt === target) return true;\n        if (isA(elt, set)) return false;\n    }\n    return false;\n};\n// Like the above, but for an element interface, not a tagname\nHTMLParser.ElementStack.prototype.elementTypeInSpecificScope = function(target, set) {\n    for(var i = this.elements.length - 1; i >= 0; i--){\n        var elt = this.elements[i];\n        if (elt instanceof target) return true;\n        if (isA(elt, set)) return false;\n    }\n    return false;\n};\nHTMLParser.ElementStack.prototype.inScope = function(tag) {\n    return this.inSpecificScope(tag, inScopeSet);\n};\nHTMLParser.ElementStack.prototype.elementInScope = function(e) {\n    return this.elementInSpecificScope(e, inScopeSet);\n};\nHTMLParser.ElementStack.prototype.elementTypeInScope = function(type) {\n    return this.elementTypeInSpecificScope(type, inScopeSet);\n};\nHTMLParser.ElementStack.prototype.inButtonScope = function(tag) {\n    return this.inSpecificScope(tag, inButtonScopeSet);\n};\nHTMLParser.ElementStack.prototype.inListItemScope = function(tag) {\n    return this.inSpecificScope(tag, inListItemScopeSet);\n};\nHTMLParser.ElementStack.prototype.inTableScope = function(tag) {\n    return this.inSpecificScope(tag, inTableScopeSet);\n};\nHTMLParser.ElementStack.prototype.inSelectScope = function(tag) {\n    // Can't implement this one with inSpecificScope, since it involves\n    // a set defined by inverting another set. So implement manually.\n    for(var i = this.elements.length - 1; i >= 0; i--){\n        var elt = this.elements[i];\n        if (elt.namespaceURI !== NAMESPACE.HTML) return false;\n        var localname = elt.localName;\n        if (localname === tag) return true;\n        if (localname !== \"optgroup\" && localname !== \"option\") return false;\n    }\n    return false;\n};\nHTMLParser.ElementStack.prototype.generateImpliedEndTags = function(butnot, thorough) {\n    var endTagSet = thorough ? thoroughImpliedEndTagsSet : impliedEndTagsSet;\n    for(var i = this.elements.length - 1; i >= 0; i--){\n        var e = this.elements[i];\n        if (butnot && isA(e, butnot)) break;\n        if (!isA(this.elements[i], endTagSet)) break;\n    }\n    this.elements.length = i + 1;\n    this.top = this.elements[i];\n};\n/***\n * The ActiveFormattingElements class\n */ HTMLParser.ActiveFormattingElements = function AFE() {\n    this.list = []; // elements\n    this.attrs = []; // attribute tokens for cloning\n};\nHTMLParser.ActiveFormattingElements.prototype.MARKER = {\n    localName: \"|\"\n};\n/*\n// For debugging\nHTMLParser.ActiveFormattingElements.prototype.toString = function() {\n  return \"AFE: \" +\n  this.list.map(function(e) { return e.localName; }).join(\"-\");\n}\n*/ HTMLParser.ActiveFormattingElements.prototype.insertMarker = function() {\n    this.list.push(this.MARKER);\n    this.attrs.push(this.MARKER);\n};\nHTMLParser.ActiveFormattingElements.prototype.push = function(elt, attrs) {\n    // Scan backwards: if there are already 3 copies of this element\n    // before we encounter a marker, then drop the last one\n    var count = 0;\n    for(var i = this.list.length - 1; i >= 0; i--){\n        if (this.list[i] === this.MARKER) break;\n        // equal() is defined below\n        if (equal(elt, this.list[i], this.attrs[i])) {\n            count++;\n            if (count === 3) {\n                this.list.splice(i, 1);\n                this.attrs.splice(i, 1);\n                break;\n            }\n        }\n    }\n    // Now push the element onto the list\n    this.list.push(elt);\n    // Copy the attributes and push those on, too\n    var attrcopy = [];\n    for(var ii = 0; ii < attrs.length; ii++){\n        attrcopy[ii] = attrs[ii];\n    }\n    this.attrs.push(attrcopy);\n    // This function defines equality of two elements for the purposes\n    // of the AFE list.  Note that it compares the new elements\n    // attributes to the saved array of attributes associated with\n    // the old element because a script could have changed the\n    // old element's set of attributes\n    function equal(newelt, oldelt, oldattrs) {\n        if (newelt.localName !== oldelt.localName) return false;\n        if (newelt._numattrs !== oldattrs.length) return false;\n        for(var i = 0, n = oldattrs.length; i < n; i++){\n            var oldname = oldattrs[i][0];\n            var oldval = oldattrs[i][1];\n            if (!newelt.hasAttribute(oldname)) return false;\n            if (newelt.getAttribute(oldname) !== oldval) return false;\n        }\n        return true;\n    }\n};\nHTMLParser.ActiveFormattingElements.prototype.clearToMarker = function() {\n    for(var i = this.list.length - 1; i >= 0; i--){\n        if (this.list[i] === this.MARKER) break;\n    }\n    if (i < 0) i = 0;\n    this.list.length = i;\n    this.attrs.length = i;\n};\n// Find and return the last element with the specified tag between the\n// end of the list and the last marker on the list.\n// Used when parsing <a> in_body_mode()\nHTMLParser.ActiveFormattingElements.prototype.findElementByTag = function(tag) {\n    for(var i = this.list.length - 1; i >= 0; i--){\n        var elt = this.list[i];\n        if (elt === this.MARKER) break;\n        if (elt.localName === tag) return elt;\n    }\n    return null;\n};\nHTMLParser.ActiveFormattingElements.prototype.indexOf = function(e) {\n    return this.list.lastIndexOf(e);\n};\n// Find the element e in the list and remove it\n// Used when parsing <a> in_body()\nHTMLParser.ActiveFormattingElements.prototype.remove = function(e) {\n    var idx = this.list.lastIndexOf(e);\n    if (idx !== -1) {\n        this.list.splice(idx, 1);\n        this.attrs.splice(idx, 1);\n    }\n};\n// Find element a in the list and replace it with element b\n// XXX: Do I need to handle attributes here?\nHTMLParser.ActiveFormattingElements.prototype.replace = function(a, b, attrs) {\n    var idx = this.list.lastIndexOf(a);\n    if (idx !== -1) {\n        this.list[idx] = b;\n        this.attrs[idx] = attrs;\n    }\n};\n// Find a in the list and insert b after it\n// This is only used for insert a bookmark object, so the\n// attrs array doesn't really matter\nHTMLParser.ActiveFormattingElements.prototype.insertAfter = function(a, b) {\n    var idx = this.list.lastIndexOf(a);\n    if (idx !== -1) {\n        this.list.splice(idx, 0, b);\n        this.attrs.splice(idx, 0, b);\n    }\n};\n/***\n * This is the parser factory function. It is the return value of\n * the outer closure that it is defined within.  Most of the parser\n * implementation details are inside this function.\n */ function HTMLParser(address, fragmentContext, options) {\n    /***\n   * These are the parser's state variables\n   */ // Scanner state\n    var chars = null;\n    var numchars = 0; // Length of chars\n    var nextchar = 0; // Index of next char\n    var input_complete = false; // Becomes true when end() called.\n    var scanner_skip_newline = false; // If previous char was CR\n    var reentrant_invocations = 0;\n    var saved_scanner_state = [];\n    var leftovers = \"\";\n    var first_batch = true;\n    var paused = 0; // Becomes non-zero while loading scripts\n    // Tokenizer state\n    var tokenizer = data_state; // Current tokenizer state\n    var return_state;\n    var character_reference_code;\n    var tagnamebuf = \"\";\n    var lasttagname = \"\"; // holds the target end tag for text states\n    var tempbuf = [];\n    var attrnamebuf = \"\";\n    var attrvaluebuf = \"\";\n    var commentbuf = [];\n    var doctypenamebuf = [];\n    var doctypepublicbuf = [];\n    var doctypesystembuf = [];\n    var attributes = [];\n    var is_end_tag = false;\n    // Tree builder state\n    var parser = initial_mode; // Current insertion mode\n    var originalInsertionMode = null; // A saved insertion mode\n    var templateInsertionModes = []; // Stack of template insertion modes.\n    var stack = new HTMLParser.ElementStack(); // Stack of open elements\n    var afe = new HTMLParser.ActiveFormattingElements(); // mis-nested tags\n    var fragment = fragmentContext !== undefined; // For innerHTML, etc.\n    var head_element_pointer = null;\n    var form_element_pointer = null;\n    var scripting_enabled = true;\n    if (fragmentContext) {\n        scripting_enabled = fragmentContext.ownerDocument._scripting_enabled;\n    }\n    if (options && options.scripting_enabled === false) scripting_enabled = false;\n    var frameset_ok = true;\n    var force_quirks = false;\n    var pending_table_text;\n    var text_integration_mode; // XXX a spec bug workaround?\n    // A single run of characters, buffered up to be sent to\n    // the parser as a single string.\n    var textrun = [];\n    var textIncludesNUL = false;\n    var ignore_linefeed = false;\n    /***\n   * This is the parser object that will be the return value of this\n   * factory function, which is some 5000 lines below.\n   * Note that the variable \"parser\" is the current state of the\n   * parser's state machine.  This variable \"htmlparser\" is the\n   * return value and defines the public API of the parser\n   */ var htmlparser = {\n        document: function() {\n            return doc;\n        },\n        // Convenience function for internal use. Can only be called once,\n        // as it removes the nodes from `doc` to add them to fragment.\n        _asDocumentFragment: function() {\n            var frag = doc.createDocumentFragment();\n            var root = doc.firstChild;\n            while(root.hasChildNodes()){\n                frag.appendChild(root.firstChild);\n            }\n            return frag;\n        },\n        // Internal function used from HTMLScriptElement to pause the\n        // parser while a script is being loaded from the network\n        pause: function() {\n            // print(\"pausing parser\");\n            paused++;\n        },\n        // Called when a script finishes loading\n        resume: function() {\n            // print(\"resuming parser\");\n            paused--;\n            // XXX: added this to force a resumption.\n            // Is this the right thing to do?\n            this.parse(\"\");\n        },\n        // Parse the HTML text s.\n        // The second argument should be true if there is no more\n        // text to be parsed, and should be false or omitted otherwise.\n        // The second argument must not be set for recursive invocations\n        // from document.write()\n        parse: function(s, end, shouldPauseFunc) {\n            var moreToDo;\n            // If we're paused, remember the text to parse, but\n            // don't parse it now.\n            // (Don't invoke shouldPauseFunc because we haven't handled 'end' yet.)\n            if (paused > 0) {\n                leftovers += s;\n                return true; // more to do\n            }\n            if (reentrant_invocations === 0) {\n                // A normal, top-level invocation\n                if (leftovers) {\n                    s = leftovers + s;\n                    leftovers = \"\";\n                }\n                // Add a special marker character to the end of\n                // the buffer.  If the scanner is at the end of\n                // the buffer and input_complete is set, then this\n                // character will transform into an EOF token.\n                // Having an actual character that represents EOF\n                // in the character buffer makes lookahead regexp\n                // matching work more easily, and this is\n                // important for character references.\n                if (end) {\n                    s += \"￿\";\n                    input_complete = true; // Makes scanChars() send EOF\n                }\n                chars = s;\n                numchars = s.length;\n                nextchar = 0;\n                if (first_batch) {\n                    // We skip a leading Byte Order Mark (\\uFEFF)\n                    // on first batch of text we're given\n                    first_batch = false;\n                    if (chars.charCodeAt(0) === 0xFEFF) nextchar = 1;\n                }\n                reentrant_invocations++;\n                moreToDo = scanChars(shouldPauseFunc);\n                leftovers = chars.substring(nextchar, numchars);\n                reentrant_invocations--;\n            } else {\n                // This is the re-entrant case, which we have to\n                // handle a little differently.\n                reentrant_invocations++;\n                // Save current scanner state\n                saved_scanner_state.push(chars, numchars, nextchar);\n                // Set new scanner state\n                chars = s;\n                numchars = s.length;\n                nextchar = 0;\n                // Now scan as many of these new chars as we can\n                scanChars();\n                moreToDo = false;\n                leftovers = chars.substring(nextchar, numchars);\n                // restore old scanner state\n                nextchar = saved_scanner_state.pop();\n                numchars = saved_scanner_state.pop();\n                chars = saved_scanner_state.pop();\n                // If there were leftover chars from this invocation\n                // insert them into the pending invocation's buffer\n                // and trim already processed chars at the same time\n                if (leftovers) {\n                    chars = leftovers + chars.substring(nextchar);\n                    numchars = chars.length;\n                    nextchar = 0;\n                    leftovers = \"\";\n                }\n                // Decrement the counter\n                reentrant_invocations--;\n            }\n            return moreToDo;\n        }\n    };\n    // This is the document we'll be building up\n    var doc = new Document(true, address);\n    // The document needs to know about the parser, for document.write().\n    // This _parser property will be deleted when we're done parsing.\n    doc._parser = htmlparser;\n    // XXX I think that any document we use this parser on should support\n    // scripts. But I may need to configure that through a parser parameter\n    // Only documents with windows (\"browsing contexts\" to be precise)\n    // allow scripting.\n    doc._scripting_enabled = scripting_enabled;\n    /***\n   * The actual code of the HTMLParser() factory function begins here.\n   */ if (fragmentContext) {\n        if (fragmentContext.ownerDocument._quirks) doc._quirks = true;\n        if (fragmentContext.ownerDocument._limitedQuirks) doc._limitedQuirks = true;\n        // Set the initial tokenizer state\n        if (fragmentContext.namespaceURI === NAMESPACE.HTML) {\n            switch(fragmentContext.localName){\n                case \"title\":\n                case \"textarea\":\n                    tokenizer = rcdata_state;\n                    break;\n                case \"style\":\n                case \"xmp\":\n                case \"iframe\":\n                case \"noembed\":\n                case \"noframes\":\n                case \"script\":\n                case \"plaintext\":\n                    tokenizer = plaintext_state;\n                    break;\n                case \"noscript\":\n                    if (scripting_enabled) tokenizer = plaintext_state;\n            }\n        }\n        var root = doc.createElement(\"html\");\n        doc._appendChild(root);\n        stack.push(root);\n        if (fragmentContext instanceof impl.HTMLTemplateElement) {\n            templateInsertionModes.push(in_template_mode);\n        }\n        resetInsertionMode();\n        for(var e = fragmentContext; e !== null; e = e.parentElement){\n            if (e instanceof impl.HTMLFormElement) {\n                form_element_pointer = e;\n                break;\n            }\n        }\n    }\n    /***\n   * Scanner functions\n   */ // Loop through the characters in chars, and pass them one at a time\n    // to the tokenizer FSM. Return when no more characters can be processed\n    // (This may leave 1 or more characters in the buffer: like a CR\n    // waiting to see if the next char is LF, or for states that require\n    // lookahead...)\n    function scanChars(shouldPauseFunc) {\n        var codepoint, s, pattern, eof;\n        while(nextchar < numchars){\n            // If we just tokenized a </script> tag, then the paused flag\n            // may have been set to tell us to stop tokenizing while\n            // the script is loading\n            if (paused > 0 || shouldPauseFunc && shouldPauseFunc()) {\n                return true;\n            }\n            switch(typeof tokenizer.lookahead){\n                case \"undefined\":\n                    codepoint = chars.charCodeAt(nextchar++);\n                    if (scanner_skip_newline) {\n                        scanner_skip_newline = false;\n                        if (codepoint === 0x000A) {\n                            nextchar++;\n                            continue;\n                        }\n                    }\n                    switch(codepoint){\n                        case 0x000D:\n                            // CR always turns into LF, but if the next character\n                            // is LF, then that second LF is skipped.\n                            if (nextchar < numchars) {\n                                if (chars.charCodeAt(nextchar) === 0x000A) nextchar++;\n                            } else {\n                                // We don't know the next char right now, so we\n                                // can't check if it is a LF.  So set a flag\n                                scanner_skip_newline = true;\n                            }\n                            // In either case, emit a LF\n                            tokenizer(0x000A);\n                            break;\n                        case 0xFFFF:\n                            if (input_complete && nextchar === numchars) {\n                                tokenizer(EOF); // codepoint will be 0xFFFF here\n                                break;\n                            }\n                        /* falls through */ default:\n                            tokenizer(codepoint);\n                            break;\n                    }\n                    break;\n                case \"number\":\n                    codepoint = chars.charCodeAt(nextchar);\n                    // The only tokenizer states that require fixed lookahead\n                    // only consume alphanum characters, so we don't have\n                    // to worry about CR and LF in this case\n                    // tokenizer wants n chars of lookahead\n                    var n = tokenizer.lookahead;\n                    var needsString = true;\n                    if (n < 0) {\n                        needsString = false;\n                        n = -n;\n                    }\n                    if (n < numchars - nextchar) {\n                        // If we can look ahead that far\n                        s = needsString ? chars.substring(nextchar, nextchar + n) : null;\n                        eof = false;\n                    } else {\n                        if (input_complete) {\n                            // Just return what we have\n                            s = needsString ? chars.substring(nextchar, numchars) : null;\n                            eof = true;\n                            if (codepoint === 0xFFFF && nextchar === numchars - 1) codepoint = EOF;\n                        } else {\n                            // Return now and wait for more chars later\n                            return true;\n                        }\n                    }\n                    tokenizer(codepoint, s, eof);\n                    break;\n                case \"string\":\n                    codepoint = chars.charCodeAt(nextchar);\n                    // tokenizer wants characters up to a matching string\n                    pattern = tokenizer.lookahead;\n                    var pos = chars.indexOf(pattern, nextchar);\n                    if (pos !== -1) {\n                        s = chars.substring(nextchar, pos + pattern.length);\n                        eof = false;\n                    } else {\n                        // If more characters coming, wait for them\n                        if (!input_complete) return true;\n                        // Otherwise, we've got to return what we've got\n                        s = chars.substring(nextchar, numchars);\n                        if (codepoint === 0xFFFF && nextchar === numchars - 1) codepoint = EOF;\n                        eof = true;\n                    }\n                    // The tokenizer states that require this kind of\n                    // lookahead have to be careful to handle CR characters\n                    // correctly\n                    tokenizer(codepoint, s, eof);\n                    break;\n            }\n        }\n        return false; // no more characters to scan!\n    }\n    /***\n   * Tokenizer utility functions\n   */ function addAttribute(name, value) {\n        // Make sure there isn't already an attribute with this name\n        // If there is, ignore this one.\n        for(var i = 0; i < attributes.length; i++){\n            if (attributes[i][0] === name) return;\n        }\n        if (value !== undefined) {\n            attributes.push([\n                name,\n                value\n            ]);\n        } else {\n            attributes.push([\n                name\n            ]);\n        }\n    }\n    // Shortcut for simple attributes\n    function handleSimpleAttribute() {\n        SIMPLEATTR.lastIndex = nextchar - 1;\n        var matched = SIMPLEATTR.exec(chars);\n        if (!matched) throw new Error(\"should never happen\");\n        var name = matched[1];\n        if (!name) return false;\n        var value = matched[2];\n        var len = value.length;\n        switch(value[0]){\n            case '\"':\n            case \"'\":\n                value = value.substring(1, len - 1);\n                nextchar += matched[0].length - 1;\n                tokenizer = after_attribute_value_quoted_state;\n                break;\n            default:\n                tokenizer = before_attribute_name_state;\n                nextchar += matched[0].length - 1;\n                value = value.substring(0, len - 1);\n                break;\n        }\n        // Make sure there isn't already an attribute with this name\n        // If there is, ignore this one.\n        for(var i = 0; i < attributes.length; i++){\n            if (attributes[i][0] === name) return true;\n        }\n        attributes.push([\n            name,\n            value\n        ]);\n        return true;\n    }\n    function beginTagName() {\n        is_end_tag = false;\n        tagnamebuf = \"\";\n        attributes.length = 0;\n    }\n    function beginEndTagName() {\n        is_end_tag = true;\n        tagnamebuf = \"\";\n        attributes.length = 0;\n    }\n    function beginTempBuf() {\n        tempbuf.length = 0;\n    }\n    function beginAttrName() {\n        attrnamebuf = \"\";\n    }\n    function beginAttrValue() {\n        attrvaluebuf = \"\";\n    }\n    function beginComment() {\n        commentbuf.length = 0;\n    }\n    function beginDoctype() {\n        doctypenamebuf.length = 0;\n        doctypepublicbuf = null;\n        doctypesystembuf = null;\n    }\n    function beginDoctypePublicId() {\n        doctypepublicbuf = [];\n    }\n    function beginDoctypeSystemId() {\n        doctypesystembuf = [];\n    }\n    function forcequirks() {\n        force_quirks = true;\n    }\n    function cdataAllowed() {\n        return stack.top && stack.top.namespaceURI !== \"http://www.w3.org/1999/xhtml\";\n    }\n    // Return true if the codepoints in the specified buffer match the\n    // characters of lasttagname\n    function appropriateEndTag(buf) {\n        return lasttagname === buf;\n    }\n    function flushText() {\n        if (textrun.length > 0) {\n            var s = buf2str(textrun);\n            textrun.length = 0;\n            if (ignore_linefeed) {\n                ignore_linefeed = false;\n                if (s[0] === \"\\n\") s = s.substring(1);\n                if (s.length === 0) return;\n            }\n            insertToken(TEXT, s);\n            textIncludesNUL = false;\n        }\n        ignore_linefeed = false;\n    }\n    // Consume chars matched by the pattern and return them as a string. Starts\n    // matching at the current position, so users should drop the current char\n    // otherwise.\n    function getMatchingChars(pattern) {\n        pattern.lastIndex = nextchar - 1;\n        var match = pattern.exec(chars);\n        if (match && match.index === nextchar - 1) {\n            match = match[0];\n            nextchar += match.length - 1;\n            /* Careful!  Make sure we haven't matched the EOF character! */ if (input_complete && nextchar === numchars) {\n                // Oops, backup one.\n                match = match.slice(0, -1);\n                nextchar--;\n            }\n            return match;\n        } else {\n            throw new Error(\"should never happen\");\n        }\n    }\n    // emit a string of chars that match a regexp\n    // Returns false if no chars matched.\n    function emitCharsWhile(pattern) {\n        pattern.lastIndex = nextchar - 1;\n        var match = pattern.exec(chars)[0];\n        if (!match) return false;\n        emitCharString(match);\n        nextchar += match.length - 1;\n        return true;\n    }\n    // This is used by CDATA sections\n    function emitCharString(s) {\n        if (textrun.length > 0) flushText();\n        if (ignore_linefeed) {\n            ignore_linefeed = false;\n            if (s[0] === \"\\n\") s = s.substring(1);\n            if (s.length === 0) return;\n        }\n        insertToken(TEXT, s);\n    }\n    function emitTag() {\n        if (is_end_tag) insertToken(ENDTAG, tagnamebuf);\n        else {\n            // Remember the last open tag we emitted\n            var tagname = tagnamebuf;\n            tagnamebuf = \"\";\n            lasttagname = tagname;\n            insertToken(TAG, tagname, attributes);\n        }\n    }\n    // A shortcut: look ahead and if this is a open or close tag\n    // in lowercase with no spaces and no attributes, just emit it now.\n    function emitSimpleTag() {\n        if (nextchar === numchars) {\n            return false; /* not even 1 char left */ \n        }\n        SIMPLETAG.lastIndex = nextchar;\n        var matched = SIMPLETAG.exec(chars);\n        if (!matched) throw new Error(\"should never happen\");\n        var tagname = matched[2];\n        if (!tagname) return false;\n        var endtag = matched[1];\n        if (endtag) {\n            nextchar += tagname.length + 2;\n            insertToken(ENDTAG, tagname);\n        } else {\n            nextchar += tagname.length + 1;\n            lasttagname = tagname;\n            insertToken(TAG, tagname, NOATTRS);\n        }\n        return true;\n    }\n    function emitSelfClosingTag() {\n        if (is_end_tag) insertToken(ENDTAG, tagnamebuf, null, true);\n        else {\n            insertToken(TAG, tagnamebuf, attributes, true);\n        }\n    }\n    function emitDoctype() {\n        insertToken(DOCTYPE, buf2str(doctypenamebuf), doctypepublicbuf ? buf2str(doctypepublicbuf) : undefined, doctypesystembuf ? buf2str(doctypesystembuf) : undefined);\n    }\n    function emitEOF() {\n        flushText();\n        parser(EOF); // EOF never goes to insertForeignContent()\n        doc.modclock = 1; // Start tracking modifications\n    }\n    // Insert a token, either using the current parser insertion mode\n    // (for HTML stuff) or using the insertForeignToken() method.\n    var insertToken = htmlparser.insertToken = function insertToken(t, value, arg3, arg4) {\n        flushText();\n        var current = stack.top;\n        if (!current || current.namespaceURI === NAMESPACE.HTML) {\n            // This is the common case\n            parser(t, value, arg3, arg4);\n        } else {\n            // Otherwise we may need to insert this token as foreign content\n            if (t !== TAG && t !== TEXT) {\n                insertForeignToken(t, value, arg3, arg4);\n            } else {\n                // But in some cases we treat it as regular content\n                if (isMathmlTextIntegrationPoint(current) && (t === TEXT || t === TAG && value !== \"mglyph\" && value !== \"malignmark\") || t === TAG && value === \"svg\" && current.namespaceURI === NAMESPACE.MATHML && current.localName === \"annotation-xml\" || isHTMLIntegrationPoint(current)) {\n                    // XXX: the text_integration_mode stuff is an\n                    // attempted bug workaround of mine\n                    text_integration_mode = true;\n                    parser(t, value, arg3, arg4);\n                    text_integration_mode = false;\n                } else {\n                    insertForeignToken(t, value, arg3, arg4);\n                }\n            }\n        }\n    };\n    /***\n   * Tree building utility functions\n   */ function insertComment(data) {\n        var parent = stack.top;\n        if (foster_parent_mode && isA(parent, tablesectionrowSet)) {\n            fosterParent(function(doc) {\n                return doc.createComment(data);\n            });\n        } else {\n            // \"If the adjusted insertion location is inside a template element,\n            // let it instead be inside the template element's template contents\"\n            if (parent instanceof impl.HTMLTemplateElement) {\n                parent = parent.content;\n            }\n            parent._appendChild(parent.ownerDocument.createComment(data));\n        }\n    }\n    function insertText(s) {\n        var parent = stack.top;\n        if (foster_parent_mode && isA(parent, tablesectionrowSet)) {\n            fosterParent(function(doc) {\n                return doc.createTextNode(s);\n            });\n        } else {\n            // \"If the adjusted insertion location is inside a template element,\n            // let it instead be inside the template element's template contents\"\n            if (parent instanceof impl.HTMLTemplateElement) {\n                parent = parent.content;\n            }\n            // \"If there is a Text node immediately before the adjusted insertion\n            // location, then append data to that Text node's data.\"\n            var lastChild = parent.lastChild;\n            if (lastChild && lastChild.nodeType === Node.TEXT_NODE) {\n                lastChild.appendData(s);\n            } else {\n                parent._appendChild(parent.ownerDocument.createTextNode(s));\n            }\n        }\n    }\n    function createHTMLElt(doc, name, attrs) {\n        // Create the element this way, rather than with\n        // doc.createElement because createElement() does error\n        // checking on the element name that we need to avoid here.\n        var elt = html.createElement(doc, name, null);\n        if (attrs) {\n            for(var i = 0, n = attrs.length; i < n; i++){\n                // Use the _ version to avoid testing the validity\n                // of the attribute name\n                elt._setAttribute(attrs[i][0], attrs[i][1]);\n            }\n        }\n        // XXX\n        // If the element is a resettable form element,\n        // run its reset algorithm now\n        // XXX\n        // handle case where form-element-pointer is not null\n        return elt;\n    }\n    // The in_table insertion mode turns on this flag, and that makes\n    // insertHTMLElement use the foster parenting algorithm for elements\n    // tags inside a table\n    var foster_parent_mode = false;\n    function insertHTMLElement(name, attrs) {\n        var elt = insertElement(function(doc) {\n            return createHTMLElt(doc, name, attrs);\n        });\n        // XXX\n        // If this is a form element, set its form attribute property here\n        if (isA(elt, formassociatedSet)) {\n            elt._form = form_element_pointer;\n        }\n        return elt;\n    }\n    // Insert the element into the open element or foster parent it\n    function insertElement(eltFunc) {\n        var elt;\n        if (foster_parent_mode && isA(stack.top, tablesectionrowSet)) {\n            elt = fosterParent(eltFunc);\n        } else if (stack.top instanceof impl.HTMLTemplateElement) {\n            // \"If the adjusted insertion location is inside a template element,\n            // let it instead be inside the template element's template contents\"\n            elt = eltFunc(stack.top.content.ownerDocument);\n            stack.top.content._appendChild(elt);\n        } else {\n            elt = eltFunc(stack.top.ownerDocument);\n            stack.top._appendChild(elt);\n        }\n        stack.push(elt);\n        return elt;\n    }\n    function insertForeignElement(name, attrs, ns) {\n        return insertElement(function(doc) {\n            // We need to prevent createElementNS from trying to parse `name` as a\n            // `qname`, so use an internal Document#_createElementNS() interface.\n            var elt = doc._createElementNS(name, ns, null);\n            if (attrs) {\n                for(var i = 0, n = attrs.length; i < n; i++){\n                    var attr = attrs[i];\n                    if (attr.length === 2) elt._setAttribute(attr[0], attr[1]);\n                    else {\n                        elt._setAttributeNS(attr[2], attr[0], attr[1]);\n                    }\n                }\n            }\n            return elt;\n        });\n    }\n    function lastElementOfType(type) {\n        for(var i = stack.elements.length - 1; i >= 0; i--){\n            if (stack.elements[i] instanceof type) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    function fosterParent(eltFunc) {\n        var parent, before, lastTable = -1, lastTemplate = -1, elt;\n        lastTable = lastElementOfType(impl.HTMLTableElement);\n        lastTemplate = lastElementOfType(impl.HTMLTemplateElement);\n        if (lastTemplate >= 0 && (lastTable < 0 || lastTemplate > lastTable)) {\n            parent = stack.elements[lastTemplate];\n        } else if (lastTable >= 0) {\n            parent = stack.elements[lastTable].parentNode;\n            if (parent) {\n                before = stack.elements[lastTable];\n            } else {\n                parent = stack.elements[lastTable - 1];\n            }\n        }\n        if (!parent) parent = stack.elements[0]; // the `html` element.\n        // \"If the adjusted insertion location is inside a template element,\n        // let it instead be inside the template element's template contents\"\n        if (parent instanceof impl.HTMLTemplateElement) {\n            parent = parent.content;\n        }\n        // Create element in the appropriate document.\n        elt = eltFunc(parent.ownerDocument);\n        if (elt.nodeType === Node.TEXT_NODE) {\n            var prev;\n            if (before) prev = before.previousSibling;\n            else prev = parent.lastChild;\n            if (prev && prev.nodeType === Node.TEXT_NODE) {\n                prev.appendData(elt.data);\n                return elt;\n            }\n        }\n        if (before) parent.insertBefore(elt, before);\n        else parent._appendChild(elt);\n        return elt;\n    }\n    function resetInsertionMode() {\n        var last = false;\n        for(var i = stack.elements.length - 1; i >= 0; i--){\n            var node = stack.elements[i];\n            if (i === 0) {\n                last = true;\n                if (fragment) {\n                    node = fragmentContext;\n                }\n            }\n            if (node.namespaceURI === NAMESPACE.HTML) {\n                var tag = node.localName;\n                switch(tag){\n                    case \"select\":\n                        for(var j = i; j > 0;){\n                            var ancestor = stack.elements[--j];\n                            if (ancestor instanceof impl.HTMLTemplateElement) {\n                                break;\n                            } else if (ancestor instanceof impl.HTMLTableElement) {\n                                parser = in_select_in_table_mode;\n                                return;\n                            }\n                        }\n                        parser = in_select_mode;\n                        return;\n                    case \"tr\":\n                        parser = in_row_mode;\n                        return;\n                    case \"tbody\":\n                    case \"tfoot\":\n                    case \"thead\":\n                        parser = in_table_body_mode;\n                        return;\n                    case \"caption\":\n                        parser = in_caption_mode;\n                        return;\n                    case \"colgroup\":\n                        parser = in_column_group_mode;\n                        return;\n                    case \"table\":\n                        parser = in_table_mode;\n                        return;\n                    case \"template\":\n                        parser = templateInsertionModes[templateInsertionModes.length - 1];\n                        return;\n                    case \"body\":\n                        parser = in_body_mode;\n                        return;\n                    case \"frameset\":\n                        parser = in_frameset_mode;\n                        return;\n                    case \"html\":\n                        if (head_element_pointer === null) {\n                            parser = before_head_mode;\n                        } else {\n                            parser = after_head_mode;\n                        }\n                        return;\n                    default:\n                        if (!last) {\n                            if (tag === \"head\") {\n                                parser = in_head_mode;\n                                return;\n                            }\n                            if (tag === \"td\" || tag === \"th\") {\n                                parser = in_cell_mode;\n                                return;\n                            }\n                        }\n                }\n            }\n            if (last) {\n                parser = in_body_mode;\n                return;\n            }\n        }\n    }\n    function parseRawText(name, attrs) {\n        insertHTMLElement(name, attrs);\n        tokenizer = rawtext_state;\n        originalInsertionMode = parser;\n        parser = text_mode;\n    }\n    function parseRCDATA(name, attrs) {\n        insertHTMLElement(name, attrs);\n        tokenizer = rcdata_state;\n        originalInsertionMode = parser;\n        parser = text_mode;\n    }\n    // Make a copy of element i on the list of active formatting\n    // elements, using its original attributes, not current\n    // attributes (which may have been modified by a script)\n    function afeclone(doc, i) {\n        return {\n            elt: createHTMLElt(doc, afe.list[i].localName, afe.attrs[i]),\n            attrs: afe.attrs[i]\n        };\n    }\n    function afereconstruct() {\n        if (afe.list.length === 0) return;\n        var entry = afe.list[afe.list.length - 1];\n        // If the last is a marker , do nothing\n        if (entry === afe.MARKER) return;\n        // Or if it is an open element, do nothing\n        if (stack.elements.lastIndexOf(entry) !== -1) return;\n        // Loop backward through the list until we find a marker or an\n        // open element, and then move forward one from there.\n        for(var i = afe.list.length - 2; i >= 0; i--){\n            entry = afe.list[i];\n            if (entry === afe.MARKER) break;\n            if (stack.elements.lastIndexOf(entry) !== -1) break;\n        }\n        // Now loop forward, starting from the element after the current\n        // one, recreating formatting elements and pushing them back onto\n        // the list of open elements\n        for(i = i + 1; i < afe.list.length; i++){\n            var newelt = insertElement(function(doc) {\n                return afeclone(doc, i).elt;\n            });\n            afe.list[i] = newelt;\n        }\n    }\n    // Used by the adoptionAgency() function\n    var BOOKMARK = {\n        localName: \"BM\"\n    };\n    function adoptionAgency(tag) {\n        // If the current node is an HTML element whose tag name is subject,\n        // and the current node is not in the list of active formatting\n        // elements, then pop the current node off the stack of open\n        // elements and abort these steps.\n        if (isA(stack.top, tag) && afe.indexOf(stack.top) === -1) {\n            stack.pop();\n            return true; // no more handling required\n        }\n        // Let outer loop counter be zero.\n        var outer = 0;\n        // Outer loop: If outer loop counter is greater than or\n        // equal to eight, then abort these steps.\n        while(outer < 8){\n            // Increment outer loop counter by one.\n            outer++;\n            // Let the formatting element be the last element in the list\n            // of active formatting elements that: is between the end of\n            // the list and the last scope marker in the list, if any, or\n            // the start of the list otherwise, and has the same tag name\n            // as the token.\n            var fmtelt = afe.findElementByTag(tag);\n            // If there is no such node, then abort these steps and instead\n            // act as described in the \"any other end tag\" entry below.\n            if (!fmtelt) {\n                return false; // false means handle by the default case\n            }\n            // Otherwise, if there is such a node, but that node is not in\n            // the stack of open elements, then this is a parse error;\n            // remove the element from the list, and abort these steps.\n            var index = stack.elements.lastIndexOf(fmtelt);\n            if (index === -1) {\n                afe.remove(fmtelt);\n                return true; // true means no more handling required\n            }\n            // Otherwise, if there is such a node, and that node is also in\n            // the stack of open elements, but the element is not in scope,\n            // then this is a parse error; ignore the token, and abort\n            // these steps.\n            if (!stack.elementInScope(fmtelt)) {\n                return true;\n            }\n            // Let the furthest block be the topmost node in the stack of\n            // open elements that is lower in the stack than the formatting\n            // element, and is an element in the special category. There\n            // might not be one.\n            var furthestblock = null, furthestblockindex;\n            for(var i = index + 1; i < stack.elements.length; i++){\n                if (isA(stack.elements[i], specialSet)) {\n                    furthestblock = stack.elements[i];\n                    furthestblockindex = i;\n                    break;\n                }\n            }\n            // If there is no furthest block, then the UA must skip the\n            // subsequent steps and instead just pop all the nodes from the\n            // bottom of the stack of open elements, from the current node\n            // up to and including the formatting element, and remove the\n            // formatting element from the list of active formatting\n            // elements.\n            if (!furthestblock) {\n                stack.popElement(fmtelt);\n                afe.remove(fmtelt);\n                return true;\n            } else {\n                // Let the common ancestor be the element immediately above\n                // the formatting element in the stack of open elements.\n                var ancestor = stack.elements[index - 1];\n                // Let a bookmark note the position of the formatting\n                // element in the list of active formatting elements\n                // relative to the elements on either side of it in the\n                // list.\n                afe.insertAfter(fmtelt, BOOKMARK);\n                // Let node and last node be the furthest block.\n                var node = furthestblock;\n                var lastnode = furthestblock;\n                var nodeindex = furthestblockindex;\n                var nodeafeindex;\n                // Let inner loop counter be zero.\n                var inner = 0;\n                while(true){\n                    // Increment inner loop counter by one.\n                    inner++;\n                    // Let node be the element immediately above node in\n                    // the stack of open elements, or if node is no longer\n                    // in the stack of open elements (e.g. because it got\n                    // removed by this algorithm), the element that was\n                    // immediately above node in the stack of open elements\n                    // before node was removed.\n                    node = stack.elements[--nodeindex];\n                    // If node is the formatting element, then go\n                    // to the next step in the overall algorithm.\n                    if (node === fmtelt) break;\n                    // If the inner loop counter is greater than three and node\n                    // is in the list of active formatting elements, then remove\n                    // node from the list of active formatting elements.\n                    nodeafeindex = afe.indexOf(node);\n                    if (inner > 3 && nodeafeindex !== -1) {\n                        afe.remove(node);\n                        nodeafeindex = -1;\n                    }\n                    // If node is not in the list of active formatting\n                    // elements, then remove node from the stack of open\n                    // elements and then go back to the step labeled inner\n                    // loop.\n                    if (nodeafeindex === -1) {\n                        stack.removeElement(node);\n                        continue;\n                    }\n                    // Create an element for the token for which the\n                    // element node was created with common ancestor as\n                    // the intended parent, replace the entry for node\n                    // in the list of active formatting elements with an\n                    // entry for the new element, replace the entry for\n                    // node in the stack of open elements with an entry for\n                    // the new element, and let node be the new element.\n                    var newelt = afeclone(ancestor.ownerDocument, nodeafeindex);\n                    afe.replace(node, newelt.elt, newelt.attrs);\n                    stack.elements[nodeindex] = newelt.elt;\n                    node = newelt.elt;\n                    // If last node is the furthest block, then move the\n                    // aforementioned bookmark to be immediately after the\n                    // new node in the list of active formatting elements.\n                    if (lastnode === furthestblock) {\n                        afe.remove(BOOKMARK);\n                        afe.insertAfter(newelt.elt, BOOKMARK);\n                    }\n                    // Insert last node into node, first removing it from\n                    // its previous parent node if any.\n                    node._appendChild(lastnode);\n                    // Let last node be node.\n                    lastnode = node;\n                }\n                // If the common ancestor node is a table, tbody, tfoot,\n                // thead, or tr element, then, foster parent whatever last\n                // node ended up being in the previous step, first removing\n                // it from its previous parent node if any.\n                if (foster_parent_mode && isA(ancestor, tablesectionrowSet)) {\n                    fosterParent(function() {\n                        return lastnode;\n                    });\n                } else if (ancestor instanceof impl.HTMLTemplateElement) {\n                    ancestor.content._appendChild(lastnode);\n                } else {\n                    ancestor._appendChild(lastnode);\n                }\n                // Create an element for the token for which the\n                // formatting element was created, with furthest block\n                // as the intended parent.\n                var newelt2 = afeclone(furthestblock.ownerDocument, afe.indexOf(fmtelt));\n                // Take all of the child nodes of the furthest block and\n                // append them to the element created in the last step.\n                while(furthestblock.hasChildNodes()){\n                    newelt2.elt._appendChild(furthestblock.firstChild);\n                }\n                // Append that new element to the furthest block.\n                furthestblock._appendChild(newelt2.elt);\n                // Remove the formatting element from the list of active\n                // formatting elements, and insert the new element into the\n                // list of active formatting elements at the position of\n                // the aforementioned bookmark.\n                afe.remove(fmtelt);\n                afe.replace(BOOKMARK, newelt2.elt, newelt2.attrs);\n                // Remove the formatting element from the stack of open\n                // elements, and insert the new element into the stack of\n                // open elements immediately below the position of the\n                // furthest block in that stack.\n                stack.removeElement(fmtelt);\n                var pos = stack.elements.lastIndexOf(furthestblock);\n                stack.elements.splice(pos + 1, 0, newelt2.elt);\n            }\n        }\n        return true;\n    }\n    // We do this when we get /script in in_text_mode\n    function handleScriptEnd() {\n        // XXX:\n        // This is just a stub implementation right now and doesn't run scripts.\n        // Getting this method right involves the event loop, URL resolution\n        // script fetching etc. For now I just want to be able to parse\n        // documents and test the parser.\n        //var script = stack.top;\n        stack.pop();\n        parser = originalInsertionMode;\n        //script._prepare();\n        return;\n    // XXX: here is what this method is supposed to do\n    // Provide a stable state.\n    // Let script be the current node (which will be a script\n    // element).\n    // Pop the current node off the stack of open elements.\n    // Switch the insertion mode to the original insertion mode.\n    // Let the old insertion point have the same value as the current\n    // insertion point. Let the insertion point be just before the\n    // next input character.\n    // Increment the parser's script nesting level by one.\n    // Prepare the script. This might cause some script to execute,\n    // which might cause new characters to be inserted into the\n    // tokenizer, and might cause the tokenizer to output more tokens,\n    // resulting in a reentrant invocation of the parser.\n    // Decrement the parser's script nesting level by one. If the\n    // parser's script nesting level is zero, then set the parser\n    // pause flag to false.\n    // Let the insertion point have the value of the old insertion\n    // point. (In other words, restore the insertion point to its\n    // previous value. This value might be the \"undefined\" value.)\n    // At this stage, if there is a pending parsing-blocking script,\n    // then:\n    // If the script nesting level is not zero:\n    //   Set the parser pause flag to true, and abort the processing\n    //   of any nested invocations of the tokenizer, yielding\n    //   control back to the caller. (Tokenization will resume when\n    //   the caller returns to the \"outer\" tree construction stage.)\n    //   The tree construction stage of this particular parser is\n    //   being called reentrantly, say from a call to\n    //   document.write().\n    // Otherwise:\n    //     Run these steps:\n    //       Let the script be the pending parsing-blocking\n    //       script. There is no longer a pending\n    //       parsing-blocking script.\n    //       Block the tokenizer for this instance of the HTML\n    //       parser, such that the event loop will not run tasks\n    //       that invoke the tokenizer.\n    //       If the parser's Document has a style sheet that is\n    //       blocking scripts or the script's \"ready to be\n    //       parser-executed\" flag is not set: spin the event\n    //       loop until the parser's Document has no style sheet\n    //       that is blocking scripts and the script's \"ready to\n    //       be parser-executed\" flag is set.\n    //       Unblock the tokenizer for this instance of the HTML\n    //       parser, such that tasks that invoke the tokenizer\n    //       can again be run.\n    //       Let the insertion point be just before the next\n    //       input character.\n    //       Increment the parser's script nesting level by one\n    //       (it should be zero before this step, so this sets\n    //       it to one).\n    //       Execute the script.\n    //       Decrement the parser's script nesting level by\n    //       one. If the parser's script nesting level is zero\n    //       (which it always should be at this point), then set\n    //       the parser pause flag to false.\n    //       Let the insertion point be undefined again.\n    //       If there is once again a pending parsing-blocking\n    //       script, then repeat these steps from step 1.\n    }\n    function stopParsing() {\n        // XXX This is just a temporary implementation to get the parser working.\n        // A full implementation involves scripts and events and the event loop.\n        // Remove the link from document to parser.\n        // This is instead of \"set the insertion point to undefined\".\n        // It means that document.write() can't write into the doc anymore.\n        delete doc._parser;\n        stack.elements.length = 0; // pop everything off\n        // If there is a window object associated with the document\n        // then trigger an load event on it\n        if (doc.defaultView) {\n            doc.defaultView.dispatchEvent(new impl.Event(\"load\", {}));\n        }\n    }\n    /****\n   * Tokenizer states\n   */ /**\n   * This file was partially mechanically generated from\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html\n   *\n   * After mechanical conversion, it was further converted from\n   * prose to JS by hand, but the intent is that it is a very\n   * faithful rendering of the HTML tokenization spec in\n   * JavaScript.\n   *\n   * It is not a goal of this tokenizer to detect or report\n   * parse errors.\n   *\n   * XXX The tokenizer is supposed to work with straight UTF32\n   * codepoints. But I don't think it has any dependencies on\n   * any character outside of the BMP so I think it is safe to\n   * pass it UTF16 characters. I don't think it will ever change\n   * state in the middle of a surrogate pair.\n   */ /*\n   * Each state is represented by a function.  For most states, the\n   * scanner simply passes the next character (as an integer\n   * codepoint) to the current state function and automatically\n   * consumes the character.  If the state function can't process\n   * the character it can call pushback() to push it back to the\n   * scanner.\n   *\n   * Some states require lookahead, though.  If a state function has\n   * a lookahead property, then it is invoked differently.  In this\n   * case, the scanner invokes the function with 3 arguments: 1) the\n   * next codepoint 2) a string of lookahead text 3) a boolean that\n   * is true if the lookahead goes all the way to the EOF. (XXX\n   * actually maybe this third is not necessary... the lookahead\n   * could just include \\uFFFF?)\n   *\n   * If the lookahead property of a state function is an integer, it\n   * specifies the number of characters required. If it is a string,\n   * then the scanner will scan for that string and return all\n   * characters up to and including that sequence, or up to EOF.  If\n   * the lookahead property is a regexp, then the scanner will match\n   * the regexp at the current point and return the matching string.\n   *\n   * States that require lookahead are responsible for explicitly\n   * consuming the characters they process. They do this by\n   * incrementing nextchar by the number of processed characters.\n   */ function reconsume(c, new_state) {\n        tokenizer = new_state;\n        nextchar--; // pushback\n    }\n    function data_state(c) {\n        switch(c){\n            case 0x0026:\n                return_state = data_state;\n                tokenizer = character_reference_state;\n                break;\n            case 0x003C:\n                if (emitSimpleTag()) break;\n                tokenizer = tag_open_state;\n                break;\n            case 0x0000:\n                // Usually null characters emitted by the tokenizer will be\n                // ignored by the tree builder, but sometimes they'll be\n                // converted to \\uFFFD.  I don't want to have the search every\n                // string emitted to replace NULs, so I'll set a flag\n                // if I've emitted a NUL.\n                textrun.push(c);\n                textIncludesNUL = true;\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                // Instead of just pushing a single character and then\n                // coming back to the very same place, lookahead and\n                // emit everything we can at once.\n                /*jshint -W030 */ emitCharsWhile(DATATEXT) || textrun.push(c);\n                break;\n        }\n    }\n    function rcdata_state(c) {\n        // Save the open tag so we can find a matching close tag\n        switch(c){\n            case 0x0026:\n                return_state = rcdata_state;\n                tokenizer = character_reference_state;\n                break;\n            case 0x003C:\n                tokenizer = rcdata_less_than_sign_state;\n                break;\n            case 0x0000:\n                textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n                textIncludesNUL = true;\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                textrun.push(c);\n                break;\n        }\n    }\n    function rawtext_state(c) {\n        switch(c){\n            case 0x003C:\n                tokenizer = rawtext_less_than_sign_state;\n                break;\n            case 0x0000:\n                textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                /*jshint -W030 */ emitCharsWhile(RAWTEXT) || textrun.push(c);\n                break;\n        }\n    }\n    function script_data_state(c) {\n        switch(c){\n            case 0x003C:\n                tokenizer = script_data_less_than_sign_state;\n                break;\n            case 0x0000:\n                textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                /*jshint -W030 */ emitCharsWhile(RAWTEXT) || textrun.push(c);\n                break;\n        }\n    }\n    function plaintext_state(c) {\n        switch(c){\n            case 0x0000:\n                textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                /*jshint -W030 */ emitCharsWhile(PLAINTEXT) || textrun.push(c);\n                break;\n        }\n    }\n    function tag_open_state(c) {\n        switch(c){\n            case 0x0021:\n                tokenizer = markup_declaration_open_state;\n                break;\n            case 0x002F:\n                tokenizer = end_tag_open_state;\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                beginTagName();\n                reconsume(c, tag_name_state);\n                break;\n            case 0x003F:\n                reconsume(c, bogus_comment_state);\n                break;\n            default:\n                textrun.push(0x003C); // LESS-THAN SIGN\n                reconsume(c, data_state);\n                break;\n        }\n    }\n    function end_tag_open_state(c) {\n        switch(c){\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                beginEndTagName();\n                reconsume(c, tag_name_state);\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                break;\n            case -1:\n                textrun.push(0x003C); // LESS-THAN SIGN\n                textrun.push(0x002F); // SOLIDUS\n                emitEOF();\n                break;\n            default:\n                reconsume(c, bogus_comment_state);\n                break;\n        }\n    }\n    function tag_name_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                tokenizer = before_attribute_name_state;\n                break;\n            case 0x002F:\n                tokenizer = self_closing_start_tag_state;\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                emitTag();\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n                tagnamebuf += String.fromCharCode(c + 0x0020);\n                break;\n            case 0x0000:\n                tagnamebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                tagnamebuf += getMatchingChars(TAGNAME);\n                break;\n        }\n    }\n    function rcdata_less_than_sign_state(c) {\n        /* identical to the RAWTEXT less-than sign state, except s/RAWTEXT/RCDATA/g */ if (c === 0x002F) {\n            beginTempBuf();\n            tokenizer = rcdata_end_tag_open_state;\n        } else {\n            textrun.push(0x003C); // LESS-THAN SIGN\n            reconsume(c, rcdata_state);\n        }\n    }\n    function rcdata_end_tag_open_state(c) {\n        /* identical to the RAWTEXT (and Script data) end tag open state, except s/RAWTEXT/RCDATA/g */ switch(c){\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                beginEndTagName();\n                reconsume(c, rcdata_end_tag_name_state);\n                break;\n            default:\n                textrun.push(0x003C); // LESS-THAN SIGN\n                textrun.push(0x002F); // SOLIDUS\n                reconsume(c, rcdata_state);\n                break;\n        }\n    }\n    function rcdata_end_tag_name_state(c) {\n        /* identical to the RAWTEXT (and Script data) end tag name state, except s/RAWTEXT/RCDATA/g */ switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = before_attribute_name_state;\n                    return;\n                }\n                break;\n            case 0x002F:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = self_closing_start_tag_state;\n                    return;\n                }\n                break;\n            case 0x003E:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = data_state;\n                    emitTag();\n                    return;\n                }\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n                tagnamebuf += String.fromCharCode(c + 0x0020);\n                tempbuf.push(c);\n                return;\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                tagnamebuf += String.fromCharCode(c);\n                tempbuf.push(c);\n                return;\n            default:\n                break;\n        }\n        // If we don't return in one of the cases above, then this was not\n        // an appropriately matching close tag, so back out by emitting all\n        // the characters as text\n        textrun.push(0x003C); // LESS-THAN SIGN\n        textrun.push(0x002F); // SOLIDUS\n        pushAll(textrun, tempbuf);\n        reconsume(c, rcdata_state);\n    }\n    function rawtext_less_than_sign_state(c) {\n        /* identical to the RCDATA less-than sign state, except s/RCDATA/RAWTEXT/g\n     */ if (c === 0x002F) {\n            beginTempBuf();\n            tokenizer = rawtext_end_tag_open_state;\n        } else {\n            textrun.push(0x003C); // LESS-THAN SIGN\n            reconsume(c, rawtext_state);\n        }\n    }\n    function rawtext_end_tag_open_state(c) {\n        /* identical to the RCDATA (and Script data) end tag open state, except s/RCDATA/RAWTEXT/g */ switch(c){\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                beginEndTagName();\n                reconsume(c, rawtext_end_tag_name_state);\n                break;\n            default:\n                textrun.push(0x003C); // LESS-THAN SIGN\n                textrun.push(0x002F); // SOLIDUS\n                reconsume(c, rawtext_state);\n                break;\n        }\n    }\n    function rawtext_end_tag_name_state(c) {\n        /* identical to the RCDATA (and Script data) end tag name state, except s/RCDATA/RAWTEXT/g */ switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = before_attribute_name_state;\n                    return;\n                }\n                break;\n            case 0x002F:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = self_closing_start_tag_state;\n                    return;\n                }\n                break;\n            case 0x003E:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = data_state;\n                    emitTag();\n                    return;\n                }\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n                tagnamebuf += String.fromCharCode(c + 0x0020);\n                tempbuf.push(c);\n                return;\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                tagnamebuf += String.fromCharCode(c);\n                tempbuf.push(c);\n                return;\n            default:\n                break;\n        }\n        // If we don't return in one of the cases above, then this was not\n        // an appropriately matching close tag, so back out by emitting all\n        // the characters as text\n        textrun.push(0x003C); // LESS-THAN SIGN\n        textrun.push(0x002F); // SOLIDUS\n        pushAll(textrun, tempbuf);\n        reconsume(c, rawtext_state);\n    }\n    function script_data_less_than_sign_state(c) {\n        switch(c){\n            case 0x002F:\n                beginTempBuf();\n                tokenizer = script_data_end_tag_open_state;\n                break;\n            case 0x0021:\n                tokenizer = script_data_escape_start_state;\n                textrun.push(0x003C); // LESS-THAN SIGN\n                textrun.push(0x0021); // EXCLAMATION MARK\n                break;\n            default:\n                textrun.push(0x003C); // LESS-THAN SIGN\n                reconsume(c, script_data_state);\n                break;\n        }\n    }\n    function script_data_end_tag_open_state(c) {\n        /* identical to the RCDATA (and RAWTEXT) end tag open state, except s/RCDATA/Script data/g */ switch(c){\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                beginEndTagName();\n                reconsume(c, script_data_end_tag_name_state);\n                break;\n            default:\n                textrun.push(0x003C); // LESS-THAN SIGN\n                textrun.push(0x002F); // SOLIDUS\n                reconsume(c, script_data_state);\n                break;\n        }\n    }\n    function script_data_end_tag_name_state(c) {\n        /* identical to the RCDATA (and RAWTEXT) end tag name state, except s/RCDATA/Script data/g */ switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = before_attribute_name_state;\n                    return;\n                }\n                break;\n            case 0x002F:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = self_closing_start_tag_state;\n                    return;\n                }\n                break;\n            case 0x003E:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = data_state;\n                    emitTag();\n                    return;\n                }\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n                tagnamebuf += String.fromCharCode(c + 0x0020);\n                tempbuf.push(c);\n                return;\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                tagnamebuf += String.fromCharCode(c);\n                tempbuf.push(c);\n                return;\n            default:\n                break;\n        }\n        // If we don't return in one of the cases above, then this was not\n        // an appropriately matching close tag, so back out by emitting all\n        // the characters as text\n        textrun.push(0x003C); // LESS-THAN SIGN\n        textrun.push(0x002F); // SOLIDUS\n        pushAll(textrun, tempbuf);\n        reconsume(c, script_data_state);\n    }\n    function script_data_escape_start_state(c) {\n        if (c === 0x002D) {\n            tokenizer = script_data_escape_start_dash_state;\n            textrun.push(0x002D); // HYPHEN-MINUS\n        } else {\n            reconsume(c, script_data_state);\n        }\n    }\n    function script_data_escape_start_dash_state(c) {\n        if (c === 0x002D) {\n            tokenizer = script_data_escaped_dash_dash_state;\n            textrun.push(0x002D); // HYPHEN-MINUS\n        } else {\n            reconsume(c, script_data_state);\n        }\n    }\n    function script_data_escaped_state(c) {\n        switch(c){\n            case 0x002D:\n                tokenizer = script_data_escaped_dash_state;\n                textrun.push(0x002D); // HYPHEN-MINUS\n                break;\n            case 0x003C:\n                tokenizer = script_data_escaped_less_than_sign_state;\n                break;\n            case 0x0000:\n                textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                textrun.push(c);\n                break;\n        }\n    }\n    function script_data_escaped_dash_state(c) {\n        switch(c){\n            case 0x002D:\n                tokenizer = script_data_escaped_dash_dash_state;\n                textrun.push(0x002D); // HYPHEN-MINUS\n                break;\n            case 0x003C:\n                tokenizer = script_data_escaped_less_than_sign_state;\n                break;\n            case 0x0000:\n                tokenizer = script_data_escaped_state;\n                textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                tokenizer = script_data_escaped_state;\n                textrun.push(c);\n                break;\n        }\n    }\n    function script_data_escaped_dash_dash_state(c) {\n        switch(c){\n            case 0x002D:\n                textrun.push(0x002D); // HYPHEN-MINUS\n                break;\n            case 0x003C:\n                tokenizer = script_data_escaped_less_than_sign_state;\n                break;\n            case 0x003E:\n                tokenizer = script_data_state;\n                textrun.push(0x003E); // GREATER-THAN SIGN\n                break;\n            case 0x0000:\n                tokenizer = script_data_escaped_state;\n                textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                tokenizer = script_data_escaped_state;\n                textrun.push(c);\n                break;\n        }\n    }\n    function script_data_escaped_less_than_sign_state(c) {\n        switch(c){\n            case 0x002F:\n                beginTempBuf();\n                tokenizer = script_data_escaped_end_tag_open_state;\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                beginTempBuf();\n                textrun.push(0x003C); // LESS-THAN SIGN\n                reconsume(c, script_data_double_escape_start_state);\n                break;\n            default:\n                textrun.push(0x003C); // LESS-THAN SIGN\n                reconsume(c, script_data_escaped_state);\n                break;\n        }\n    }\n    function script_data_escaped_end_tag_open_state(c) {\n        switch(c){\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                beginEndTagName();\n                reconsume(c, script_data_escaped_end_tag_name_state);\n                break;\n            default:\n                textrun.push(0x003C); // LESS-THAN SIGN\n                textrun.push(0x002F); // SOLIDUS\n                reconsume(c, script_data_escaped_state);\n                break;\n        }\n    }\n    function script_data_escaped_end_tag_name_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = before_attribute_name_state;\n                    return;\n                }\n                break;\n            case 0x002F:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = self_closing_start_tag_state;\n                    return;\n                }\n                break;\n            case 0x003E:\n                if (appropriateEndTag(tagnamebuf)) {\n                    tokenizer = data_state;\n                    emitTag();\n                    return;\n                }\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n                tagnamebuf += String.fromCharCode(c + 0x0020);\n                tempbuf.push(c);\n                return;\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                tagnamebuf += String.fromCharCode(c);\n                tempbuf.push(c);\n                return;\n            default:\n                break;\n        }\n        // We get here in the default case, and if the closing tagname\n        // is not an appropriate tagname.\n        textrun.push(0x003C); // LESS-THAN SIGN\n        textrun.push(0x002F); // SOLIDUS\n        pushAll(textrun, tempbuf);\n        reconsume(c, script_data_escaped_state);\n    }\n    function script_data_double_escape_start_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n            case 0x002F:\n            case 0x003E:\n                if (buf2str(tempbuf) === \"script\") {\n                    tokenizer = script_data_double_escaped_state;\n                } else {\n                    tokenizer = script_data_escaped_state;\n                }\n                textrun.push(c);\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n                tempbuf.push(c + 0x0020);\n                textrun.push(c);\n                break;\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                tempbuf.push(c);\n                textrun.push(c);\n                break;\n            default:\n                reconsume(c, script_data_escaped_state);\n                break;\n        }\n    }\n    function script_data_double_escaped_state(c) {\n        switch(c){\n            case 0x002D:\n                tokenizer = script_data_double_escaped_dash_state;\n                textrun.push(0x002D); // HYPHEN-MINUS\n                break;\n            case 0x003C:\n                tokenizer = script_data_double_escaped_less_than_sign_state;\n                textrun.push(0x003C); // LESS-THAN SIGN\n                break;\n            case 0x0000:\n                textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                textrun.push(c);\n                break;\n        }\n    }\n    function script_data_double_escaped_dash_state(c) {\n        switch(c){\n            case 0x002D:\n                tokenizer = script_data_double_escaped_dash_dash_state;\n                textrun.push(0x002D); // HYPHEN-MINUS\n                break;\n            case 0x003C:\n                tokenizer = script_data_double_escaped_less_than_sign_state;\n                textrun.push(0x003C); // LESS-THAN SIGN\n                break;\n            case 0x0000:\n                tokenizer = script_data_double_escaped_state;\n                textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                tokenizer = script_data_double_escaped_state;\n                textrun.push(c);\n                break;\n        }\n    }\n    function script_data_double_escaped_dash_dash_state(c) {\n        switch(c){\n            case 0x002D:\n                textrun.push(0x002D); // HYPHEN-MINUS\n                break;\n            case 0x003C:\n                tokenizer = script_data_double_escaped_less_than_sign_state;\n                textrun.push(0x003C); // LESS-THAN SIGN\n                break;\n            case 0x003E:\n                tokenizer = script_data_state;\n                textrun.push(0x003E); // GREATER-THAN SIGN\n                break;\n            case 0x0000:\n                tokenizer = script_data_double_escaped_state;\n                textrun.push(0xFFFD); // REPLACEMENT CHARACTER\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                tokenizer = script_data_double_escaped_state;\n                textrun.push(c);\n                break;\n        }\n    }\n    function script_data_double_escaped_less_than_sign_state(c) {\n        if (c === 0x002F) {\n            beginTempBuf();\n            tokenizer = script_data_double_escape_end_state;\n            textrun.push(0x002F); // SOLIDUS\n        } else {\n            reconsume(c, script_data_double_escaped_state);\n        }\n    }\n    function script_data_double_escape_end_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n            case 0x002F:\n            case 0x003E:\n                if (buf2str(tempbuf) === \"script\") {\n                    tokenizer = script_data_escaped_state;\n                } else {\n                    tokenizer = script_data_double_escaped_state;\n                }\n                textrun.push(c);\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n                tempbuf.push(c + 0x0020);\n                textrun.push(c);\n                break;\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n            case 0x0067:\n            case 0x0068:\n            case 0x0069:\n            case 0x006A:\n            case 0x006B:\n            case 0x006C:\n            case 0x006D:\n            case 0x006E:\n            case 0x006F:\n            case 0x0070:\n            case 0x0071:\n            case 0x0072:\n            case 0x0073:\n            case 0x0074:\n            case 0x0075:\n            case 0x0076:\n            case 0x0077:\n            case 0x0078:\n            case 0x0079:\n            case 0x007A:\n                tempbuf.push(c);\n                textrun.push(c);\n                break;\n            default:\n                reconsume(c, script_data_double_escaped_state);\n                break;\n        }\n    }\n    function before_attribute_name_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                break;\n            // For SOLIDUS, GREATER-THAN SIGN, and EOF, spec says \"reconsume in\n            // the after attribute name state\", but in our implementation that\n            // state always has an active attribute in attrnamebuf.  Just clone\n            // the rules here, without the addAttribute business.\n            case 0x002F:\n                tokenizer = self_closing_start_tag_state;\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                emitTag();\n                break;\n            case -1:\n                emitEOF();\n                break;\n            case 0x003D:\n                beginAttrName();\n                attrnamebuf += String.fromCharCode(c);\n                tokenizer = attribute_name_state;\n                break;\n            default:\n                if (handleSimpleAttribute()) break;\n                beginAttrName();\n                reconsume(c, attribute_name_state);\n                break;\n        }\n    }\n    // beginAttrName() must have been called before this point\n    // There is an active attribute in attrnamebuf (but not attrvaluebuf)\n    function attribute_name_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n            case 0x002F:\n            case 0x003E:\n            case -1:\n                reconsume(c, after_attribute_name_state);\n                break;\n            case 0x003D:\n                tokenizer = before_attribute_value_state;\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n                attrnamebuf += String.fromCharCode(c + 0x0020);\n                break;\n            case 0x0000:\n                attrnamebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case 0x0022:\n            case 0x0027:\n            case 0x003C:\n            /* falls through */ default:\n                attrnamebuf += getMatchingChars(ATTRNAME);\n                break;\n        }\n    }\n    // There is an active attribute in attrnamebuf, but not yet in attrvaluebuf.\n    function after_attribute_name_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                break;\n            case 0x002F:\n                // Keep in sync with before_attribute_name_state.\n                addAttribute(attrnamebuf);\n                tokenizer = self_closing_start_tag_state;\n                break;\n            case 0x003D:\n                tokenizer = before_attribute_value_state;\n                break;\n            case 0x003E:\n                // Keep in sync with before_attribute_name_state.\n                tokenizer = data_state;\n                addAttribute(attrnamebuf);\n                emitTag();\n                break;\n            case -1:\n                // Keep in sync with before_attribute_name_state.\n                addAttribute(attrnamebuf);\n                emitEOF();\n                break;\n            default:\n                addAttribute(attrnamebuf);\n                beginAttrName();\n                reconsume(c, attribute_name_state);\n                break;\n        }\n    }\n    function before_attribute_value_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                break;\n            case 0x0022:\n                beginAttrValue();\n                tokenizer = attribute_value_double_quoted_state;\n                break;\n            case 0x0027:\n                beginAttrValue();\n                tokenizer = attribute_value_single_quoted_state;\n                break;\n            case 0x003E:\n            /* falls through */ default:\n                beginAttrValue();\n                reconsume(c, attribute_value_unquoted_state);\n                break;\n        }\n    }\n    function attribute_value_double_quoted_state(c) {\n        switch(c){\n            case 0x0022:\n                addAttribute(attrnamebuf, attrvaluebuf);\n                tokenizer = after_attribute_value_quoted_state;\n                break;\n            case 0x0026:\n                return_state = attribute_value_double_quoted_state;\n                tokenizer = character_reference_state;\n                break;\n            case 0x0000:\n                attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case -1:\n                emitEOF();\n                break;\n            case 0x000A:\n                // this could be a converted \\r, so don't use getMatchingChars\n                attrvaluebuf += String.fromCharCode(c);\n                break;\n            default:\n                attrvaluebuf += getMatchingChars(DBLQUOTEATTRVAL);\n                break;\n        }\n    }\n    function attribute_value_single_quoted_state(c) {\n        switch(c){\n            case 0x0027:\n                addAttribute(attrnamebuf, attrvaluebuf);\n                tokenizer = after_attribute_value_quoted_state;\n                break;\n            case 0x0026:\n                return_state = attribute_value_single_quoted_state;\n                tokenizer = character_reference_state;\n                break;\n            case 0x0000:\n                attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case -1:\n                emitEOF();\n                break;\n            case 0x000A:\n                // this could be a converted \\r, so don't use getMatchingChars\n                attrvaluebuf += String.fromCharCode(c);\n                break;\n            default:\n                attrvaluebuf += getMatchingChars(SINGLEQUOTEATTRVAL);\n                break;\n        }\n    }\n    function attribute_value_unquoted_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                addAttribute(attrnamebuf, attrvaluebuf);\n                tokenizer = before_attribute_name_state;\n                break;\n            case 0x0026:\n                return_state = attribute_value_unquoted_state;\n                tokenizer = character_reference_state;\n                break;\n            case 0x003E:\n                addAttribute(attrnamebuf, attrvaluebuf);\n                tokenizer = data_state;\n                emitTag();\n                break;\n            case 0x0000:\n                attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case -1:\n                nextchar--; // pushback\n                tokenizer = data_state;\n                break;\n            case 0x0022:\n            case 0x0027:\n            case 0x003C:\n            case 0x003D:\n            case 0x0060:\n            /* falls through */ default:\n                attrvaluebuf += getMatchingChars(UNQUOTEDATTRVAL);\n                break;\n        }\n    }\n    function after_attribute_value_quoted_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                tokenizer = before_attribute_name_state;\n                break;\n            case 0x002F:\n                tokenizer = self_closing_start_tag_state;\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                emitTag();\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                reconsume(c, before_attribute_name_state);\n                break;\n        }\n    }\n    function self_closing_start_tag_state(c) {\n        switch(c){\n            case 0x003E:\n                // Set the <i>self-closing flag</i> of the current tag token.\n                tokenizer = data_state;\n                emitSelfClosingTag(true);\n                break;\n            case -1:\n                emitEOF();\n                break;\n            default:\n                reconsume(c, before_attribute_name_state);\n                break;\n        }\n    }\n    function bogus_comment_state(c, lookahead, eof) {\n        var len = lookahead.length;\n        if (eof) {\n            nextchar += len - 1; // don't consume the eof\n        } else {\n            nextchar += len;\n        }\n        var comment = lookahead.substring(0, len - 1);\n        comment = comment.replace(/\\u0000/g, \"�\");\n        comment = comment.replace(/\\u000D\\u000A/g, \"\\n\");\n        comment = comment.replace(/\\u000D/g, \"\\n\");\n        insertToken(COMMENT, comment);\n        tokenizer = data_state;\n    }\n    bogus_comment_state.lookahead = \">\";\n    function markup_declaration_open_state(c, lookahead, eof) {\n        if (lookahead[0] === \"-\" && lookahead[1] === \"-\") {\n            nextchar += 2;\n            beginComment();\n            tokenizer = comment_start_state;\n            return;\n        }\n        if (lookahead.toUpperCase() === \"DOCTYPE\") {\n            nextchar += 7;\n            tokenizer = doctype_state;\n        } else if (lookahead === \"[CDATA[\" && cdataAllowed()) {\n            nextchar += 7;\n            tokenizer = cdata_section_state;\n        } else {\n            tokenizer = bogus_comment_state;\n        }\n    }\n    markup_declaration_open_state.lookahead = 7;\n    function comment_start_state(c) {\n        beginComment();\n        switch(c){\n            case 0x002D:\n                tokenizer = comment_start_dash_state;\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                insertToken(COMMENT, buf2str(commentbuf));\n                break; /* see comment in comment end state */ \n            default:\n                reconsume(c, comment_state);\n                break;\n        }\n    }\n    function comment_start_dash_state(c) {\n        switch(c){\n            case 0x002D:\n                tokenizer = comment_end_state;\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                insertToken(COMMENT, buf2str(commentbuf));\n                break;\n            case -1:\n                insertToken(COMMENT, buf2str(commentbuf));\n                emitEOF();\n                break; /* see comment in comment end state */ \n            default:\n                commentbuf.push(0x002D /* HYPHEN-MINUS */ );\n                reconsume(c, comment_state);\n                break;\n        }\n    }\n    function comment_state(c) {\n        switch(c){\n            case 0x003C:\n                commentbuf.push(c);\n                tokenizer = comment_less_than_sign_state;\n                break;\n            case 0x002D:\n                tokenizer = comment_end_dash_state;\n                break;\n            case 0x0000:\n                commentbuf.push(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case -1:\n                insertToken(COMMENT, buf2str(commentbuf));\n                emitEOF();\n                break; /* see comment in comment end state */ \n            default:\n                commentbuf.push(c);\n                break;\n        }\n    }\n    function comment_less_than_sign_state(c) {\n        switch(c){\n            case 0x0021:\n                commentbuf.push(c);\n                tokenizer = comment_less_than_sign_bang_state;\n                break;\n            case 0x003C:\n                commentbuf.push(c);\n                break;\n            default:\n                reconsume(c, comment_state);\n                break;\n        }\n    }\n    function comment_less_than_sign_bang_state(c) {\n        switch(c){\n            case 0x002D:\n                tokenizer = comment_less_than_sign_bang_dash_state;\n                break;\n            default:\n                reconsume(c, comment_state);\n                break;\n        }\n    }\n    function comment_less_than_sign_bang_dash_state(c) {\n        switch(c){\n            case 0x002D:\n                tokenizer = comment_less_than_sign_bang_dash_dash_state;\n                break;\n            default:\n                reconsume(c, comment_end_dash_state);\n                break;\n        }\n    }\n    function comment_less_than_sign_bang_dash_dash_state(c) {\n        switch(c){\n            case 0x003E:\n            case -1:\n                reconsume(c, comment_end_state);\n                break;\n            default:\n                // parse error\n                reconsume(c, comment_end_state);\n                break;\n        }\n    }\n    function comment_end_dash_state(c) {\n        switch(c){\n            case 0x002D:\n                tokenizer = comment_end_state;\n                break;\n            case -1:\n                insertToken(COMMENT, buf2str(commentbuf));\n                emitEOF();\n                break; /* see comment in comment end state */ \n            default:\n                commentbuf.push(0x002D /* HYPHEN-MINUS */ );\n                reconsume(c, comment_state);\n                break;\n        }\n    }\n    function comment_end_state(c) {\n        switch(c){\n            case 0x003E:\n                tokenizer = data_state;\n                insertToken(COMMENT, buf2str(commentbuf));\n                break;\n            case 0x0021:\n                tokenizer = comment_end_bang_state;\n                break;\n            case 0x002D:\n                commentbuf.push(0x002D);\n                break;\n            case -1:\n                insertToken(COMMENT, buf2str(commentbuf));\n                emitEOF();\n                break; /* For security reasons: otherwise, hostile user could put a script in a comment e.g. in a blog comment and then DOS the server so that the end tag isn't read, and then the commented script tag would be treated as live code */ \n            default:\n                commentbuf.push(0x002D);\n                commentbuf.push(0x002D);\n                reconsume(c, comment_state);\n                break;\n        }\n    }\n    function comment_end_bang_state(c) {\n        switch(c){\n            case 0x002D:\n                commentbuf.push(0x002D);\n                commentbuf.push(0x002D);\n                commentbuf.push(0x0021);\n                tokenizer = comment_end_dash_state;\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                insertToken(COMMENT, buf2str(commentbuf));\n                break;\n            case -1:\n                insertToken(COMMENT, buf2str(commentbuf));\n                emitEOF();\n                break; /* see comment in comment end state */ \n            default:\n                commentbuf.push(0x002D);\n                commentbuf.push(0x002D);\n                commentbuf.push(0x0021);\n                reconsume(c, comment_state);\n                break;\n        }\n    }\n    function doctype_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                tokenizer = before_doctype_name_state;\n                break;\n            case -1:\n                beginDoctype();\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                reconsume(c, before_doctype_name_state);\n                break;\n        }\n    }\n    function before_doctype_name_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n                beginDoctype();\n                doctypenamebuf.push(c + 0x0020);\n                tokenizer = doctype_name_state;\n                break;\n            case 0x0000:\n                beginDoctype();\n                doctypenamebuf.push(0xFFFD);\n                tokenizer = doctype_name_state;\n                break;\n            case 0x003E:\n                beginDoctype();\n                forcequirks();\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                beginDoctype();\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                beginDoctype();\n                doctypenamebuf.push(c);\n                tokenizer = doctype_name_state;\n                break;\n        }\n    }\n    function doctype_name_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                tokenizer = after_doctype_name_state;\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0047:\n            case 0x0048:\n            case 0x0049:\n            case 0x004A:\n            case 0x004B:\n            case 0x004C:\n            case 0x004D:\n            case 0x004E:\n            case 0x004F:\n            case 0x0050:\n            case 0x0051:\n            case 0x0052:\n            case 0x0053:\n            case 0x0054:\n            case 0x0055:\n            case 0x0056:\n            case 0x0057:\n            case 0x0058:\n            case 0x0059:\n            case 0x005A:\n                doctypenamebuf.push(c + 0x0020);\n                break;\n            case 0x0000:\n                doctypenamebuf.push(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                doctypenamebuf.push(c);\n                break;\n        }\n    }\n    function after_doctype_name_state(c, lookahead, eof) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                /* Ignore the character. */ nextchar += 1;\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                nextchar += 1;\n                emitDoctype();\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                lookahead = lookahead.toUpperCase();\n                if (lookahead === \"PUBLIC\") {\n                    nextchar += 6;\n                    tokenizer = after_doctype_public_keyword_state;\n                } else if (lookahead === \"SYSTEM\") {\n                    nextchar += 6;\n                    tokenizer = after_doctype_system_keyword_state;\n                } else {\n                    forcequirks();\n                    tokenizer = bogus_doctype_state;\n                }\n                break;\n        }\n    }\n    after_doctype_name_state.lookahead = 6;\n    function after_doctype_public_keyword_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                tokenizer = before_doctype_public_identifier_state;\n                break;\n            case 0x0022:\n                beginDoctypePublicId();\n                tokenizer = doctype_public_identifier_double_quoted_state;\n                break;\n            case 0x0027:\n                beginDoctypePublicId();\n                tokenizer = doctype_public_identifier_single_quoted_state;\n                break;\n            case 0x003E:\n                forcequirks();\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                forcequirks();\n                tokenizer = bogus_doctype_state;\n                break;\n        }\n    }\n    function before_doctype_public_identifier_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                break;\n            case 0x0022:\n                beginDoctypePublicId();\n                tokenizer = doctype_public_identifier_double_quoted_state;\n                break;\n            case 0x0027:\n                beginDoctypePublicId();\n                tokenizer = doctype_public_identifier_single_quoted_state;\n                break;\n            case 0x003E:\n                forcequirks();\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                forcequirks();\n                tokenizer = bogus_doctype_state;\n                break;\n        }\n    }\n    function doctype_public_identifier_double_quoted_state(c) {\n        switch(c){\n            case 0x0022:\n                tokenizer = after_doctype_public_identifier_state;\n                break;\n            case 0x0000:\n                doctypepublicbuf.push(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case 0x003E:\n                forcequirks();\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                doctypepublicbuf.push(c);\n                break;\n        }\n    }\n    function doctype_public_identifier_single_quoted_state(c) {\n        switch(c){\n            case 0x0027:\n                tokenizer = after_doctype_public_identifier_state;\n                break;\n            case 0x0000:\n                doctypepublicbuf.push(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case 0x003E:\n                forcequirks();\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                doctypepublicbuf.push(c);\n                break;\n        }\n    }\n    function after_doctype_public_identifier_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                tokenizer = between_doctype_public_and_system_identifiers_state;\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case 0x0022:\n                beginDoctypeSystemId();\n                tokenizer = doctype_system_identifier_double_quoted_state;\n                break;\n            case 0x0027:\n                beginDoctypeSystemId();\n                tokenizer = doctype_system_identifier_single_quoted_state;\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                forcequirks();\n                tokenizer = bogus_doctype_state;\n                break;\n        }\n    }\n    function between_doctype_public_and_system_identifiers_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case 0x0022:\n                beginDoctypeSystemId();\n                tokenizer = doctype_system_identifier_double_quoted_state;\n                break;\n            case 0x0027:\n                beginDoctypeSystemId();\n                tokenizer = doctype_system_identifier_single_quoted_state;\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                forcequirks();\n                tokenizer = bogus_doctype_state;\n                break;\n        }\n    }\n    function after_doctype_system_keyword_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                tokenizer = before_doctype_system_identifier_state;\n                break;\n            case 0x0022:\n                beginDoctypeSystemId();\n                tokenizer = doctype_system_identifier_double_quoted_state;\n                break;\n            case 0x0027:\n                beginDoctypeSystemId();\n                tokenizer = doctype_system_identifier_single_quoted_state;\n                break;\n            case 0x003E:\n                forcequirks();\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                forcequirks();\n                tokenizer = bogus_doctype_state;\n                break;\n        }\n    }\n    function before_doctype_system_identifier_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                break;\n            case 0x0022:\n                beginDoctypeSystemId();\n                tokenizer = doctype_system_identifier_double_quoted_state;\n                break;\n            case 0x0027:\n                beginDoctypeSystemId();\n                tokenizer = doctype_system_identifier_single_quoted_state;\n                break;\n            case 0x003E:\n                forcequirks();\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                forcequirks();\n                tokenizer = bogus_doctype_state;\n                break;\n        }\n    }\n    function doctype_system_identifier_double_quoted_state(c) {\n        switch(c){\n            case 0x0022:\n                tokenizer = after_doctype_system_identifier_state;\n                break;\n            case 0x0000:\n                doctypesystembuf.push(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case 0x003E:\n                forcequirks();\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                doctypesystembuf.push(c);\n                break;\n        }\n    }\n    function doctype_system_identifier_single_quoted_state(c) {\n        switch(c){\n            case 0x0027:\n                tokenizer = after_doctype_system_identifier_state;\n                break;\n            case 0x0000:\n                doctypesystembuf.push(0xFFFD /* REPLACEMENT CHARACTER */ );\n                break;\n            case 0x003E:\n                forcequirks();\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                doctypesystembuf.push(c);\n                break;\n        }\n    }\n    function after_doctype_system_identifier_state(c) {\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n                break;\n            case 0x003E:\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                forcequirks();\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                tokenizer = bogus_doctype_state;\n                break;\n        }\n    }\n    function bogus_doctype_state(c) {\n        switch(c){\n            case 0x003E:\n                tokenizer = data_state;\n                emitDoctype();\n                break;\n            case -1:\n                emitDoctype();\n                emitEOF();\n                break;\n            default:\n                break;\n        }\n    }\n    function cdata_section_state(c) {\n        switch(c){\n            case 0x005D:\n                tokenizer = cdata_section_bracket_state;\n                break;\n            case -1:\n                emitEOF();\n                break;\n            case 0x0000:\n                textIncludesNUL = true;\n            /* fall through */ default:\n                // Instead of just pushing a single character and then\n                // coming back to the very same place, lookahead and\n                // emit everything we can at once.\n                /*jshint -W030 */ emitCharsWhile(CDATATEXT) || textrun.push(c);\n                break;\n        }\n    }\n    function cdata_section_bracket_state(c) {\n        switch(c){\n            case 0x005D:\n                tokenizer = cdata_section_end_state;\n                break;\n            default:\n                textrun.push(0x005D);\n                reconsume(c, cdata_section_state);\n                break;\n        }\n    }\n    function cdata_section_end_state(c) {\n        switch(c){\n            case 0x005D:\n                textrun.push(0x005D);\n                break;\n            case 0x003E:\n                flushText();\n                tokenizer = data_state;\n                break;\n            default:\n                textrun.push(0x005D);\n                textrun.push(0x005D);\n                reconsume(c, cdata_section_state);\n                break;\n        }\n    }\n    function character_reference_state(c) {\n        beginTempBuf();\n        tempbuf.push(0x0026);\n        switch(c){\n            case 0x0009:\n            case 0x000A:\n            case 0x000C:\n            case 0x0020:\n            case 0x003C:\n            case 0x0026:\n            case -1:\n                reconsume(c, character_reference_end_state);\n                break;\n            case 0x0023:\n                tempbuf.push(c);\n                tokenizer = numeric_character_reference_state;\n                break;\n            default:\n                reconsume(c, named_character_reference_state);\n                break;\n        }\n    }\n    function named_character_reference_state(c) {\n        NAMEDCHARREF.lastIndex = nextchar; // w/ lookahead no char has been consumed\n        var matched = NAMEDCHARREF.exec(chars);\n        if (!matched) throw new Error(\"should never happen\");\n        var name = matched[1];\n        if (!name) {\n            // If no match can be made, switch to the character reference end state\n            tokenizer = character_reference_end_state;\n            return;\n        }\n        // Consume the matched characters and append them to temporary buffer\n        nextchar += name.length;\n        pushAll(tempbuf, str2buf(name));\n        switch(return_state){\n            case attribute_value_double_quoted_state:\n            case attribute_value_single_quoted_state:\n            case attribute_value_unquoted_state:\n                // If the character reference was consumed as part of an attribute...\n                if (name[name.length - 1] !== \";\") {\n                    if (/[=A-Za-z0-9]/.test(chars[nextchar])) {\n                        tokenizer = character_reference_end_state;\n                        return;\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        beginTempBuf();\n        var rv = namedCharRefs[name];\n        if (typeof rv === \"number\") {\n            tempbuf.push(rv);\n        } else {\n            pushAll(tempbuf, rv);\n        }\n        tokenizer = character_reference_end_state;\n    }\n    // We might need to pause tokenization until we have enough characters\n    // in the buffer for longest possible character reference.\n    named_character_reference_state.lookahead = -NAMEDCHARREF_MAXLEN;\n    function numeric_character_reference_state(c) {\n        character_reference_code = 0;\n        switch(c){\n            case 0x0078:\n            case 0x0058:\n                tempbuf.push(c);\n                tokenizer = hexadecimal_character_reference_start_state;\n                break;\n            default:\n                reconsume(c, decimal_character_reference_start_state);\n                break;\n        }\n    }\n    function hexadecimal_character_reference_start_state(c) {\n        switch(c){\n            case 0x0030:\n            case 0x0031:\n            case 0x0032:\n            case 0x0033:\n            case 0x0034:\n            case 0x0035:\n            case 0x0036:\n            case 0x0037:\n            case 0x0038:\n            case 0x0039:\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n                reconsume(c, hexadecimal_character_reference_state);\n                break;\n            default:\n                reconsume(c, character_reference_end_state);\n                break;\n        }\n    }\n    function decimal_character_reference_start_state(c) {\n        switch(c){\n            case 0x0030:\n            case 0x0031:\n            case 0x0032:\n            case 0x0033:\n            case 0x0034:\n            case 0x0035:\n            case 0x0036:\n            case 0x0037:\n            case 0x0038:\n            case 0x0039:\n                reconsume(c, decimal_character_reference_state);\n                break;\n            default:\n                reconsume(c, character_reference_end_state);\n                break;\n        }\n    }\n    function hexadecimal_character_reference_state(c) {\n        switch(c){\n            case 0x0041:\n            case 0x0042:\n            case 0x0043:\n            case 0x0044:\n            case 0x0045:\n            case 0x0046:\n                character_reference_code *= 16;\n                character_reference_code += c - 0x0037;\n                break;\n            case 0x0061:\n            case 0x0062:\n            case 0x0063:\n            case 0x0064:\n            case 0x0065:\n            case 0x0066:\n                character_reference_code *= 16;\n                character_reference_code += c - 0x0057;\n                break;\n            case 0x0030:\n            case 0x0031:\n            case 0x0032:\n            case 0x0033:\n            case 0x0034:\n            case 0x0035:\n            case 0x0036:\n            case 0x0037:\n            case 0x0038:\n            case 0x0039:\n                character_reference_code *= 16;\n                character_reference_code += c - 0x0030;\n                break;\n            case 0x003B:\n                tokenizer = numeric_character_reference_end_state;\n                break;\n            default:\n                reconsume(c, numeric_character_reference_end_state);\n                break;\n        }\n    }\n    function decimal_character_reference_state(c) {\n        switch(c){\n            case 0x0030:\n            case 0x0031:\n            case 0x0032:\n            case 0x0033:\n            case 0x0034:\n            case 0x0035:\n            case 0x0036:\n            case 0x0037:\n            case 0x0038:\n            case 0x0039:\n                character_reference_code *= 10;\n                character_reference_code += c - 0x0030;\n                break;\n            case 0x003B:\n                tokenizer = numeric_character_reference_end_state;\n                break;\n            default:\n                reconsume(c, numeric_character_reference_end_state);\n                break;\n        }\n    }\n    function numeric_character_reference_end_state(c) {\n        if (character_reference_code in numericCharRefReplacements) {\n            character_reference_code = numericCharRefReplacements[character_reference_code];\n        } else if (character_reference_code > 0x10FFFF || character_reference_code >= 0xD800 && character_reference_code < 0xE000) {\n            character_reference_code = 0xFFFD;\n        }\n        beginTempBuf();\n        if (character_reference_code <= 0xFFFF) {\n            tempbuf.push(character_reference_code);\n        } else {\n            character_reference_code = character_reference_code - 0x10000;\n            /* jshint bitwise: false */ tempbuf.push(0xD800 + (character_reference_code >> 10));\n            tempbuf.push(0xDC00 + (character_reference_code & 0x03FF));\n        }\n        reconsume(c, character_reference_end_state);\n    }\n    function character_reference_end_state(c) {\n        switch(return_state){\n            case attribute_value_double_quoted_state:\n            case attribute_value_single_quoted_state:\n            case attribute_value_unquoted_state:\n                // append each character to the current attribute's value\n                attrvaluebuf += buf2str(tempbuf);\n                break;\n            default:\n                pushAll(textrun, tempbuf);\n                break;\n        }\n        reconsume(c, return_state);\n    }\n    /***\n   * The tree builder insertion modes\n   */ // 11.2.5.4.1 The \"initial\" insertion mode\n    function initial_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                value = value.replace(LEADINGWS, \"\"); // Ignore spaces\n                if (value.length === 0) return; // Are we done?\n                break; // Handle anything non-space text below\n            case 4:\n                doc._appendChild(doc.createComment(value));\n                return;\n            case 5:\n                var name = value;\n                var publicid = arg3;\n                var systemid = arg4;\n                // Use the constructor directly instead of\n                // implementation.createDocumentType because the create\n                // function throws errors on invalid characters, and\n                // we don't want the parser to throw them.\n                doc.appendChild(new DocumentType(doc, name, publicid, systemid));\n                // Note that there is no public API for setting quirks mode We can\n                // do this here because we have access to implementation details\n                if (force_quirks || name.toLowerCase() !== \"html\" || quirkyPublicIds.test(publicid) || systemid && systemid.toLowerCase() === quirkySystemId || systemid === undefined && conditionallyQuirkyPublicIds.test(publicid)) doc._quirks = true;\n                else if (limitedQuirkyPublicIds.test(publicid) || systemid !== undefined && conditionallyQuirkyPublicIds.test(publicid)) doc._limitedQuirks = true;\n                parser = before_html_mode;\n                return;\n        }\n        // tags or non-whitespace text\n        doc._quirks = true;\n        parser = before_html_mode;\n        parser(t, value, arg3, arg4);\n    }\n    // 11.2.5.4.2 The \"before html\" insertion mode\n    function before_html_mode(t, value, arg3, arg4) {\n        var elt;\n        switch(t){\n            case 1:\n                value = value.replace(LEADINGWS, \"\"); // Ignore spaces\n                if (value.length === 0) return; // Are we done?\n                break; // Handle anything non-space text below\n            case 5:\n                /* ignore the token */ return;\n            case 4:\n                doc._appendChild(doc.createComment(value));\n                return;\n            case 2:\n                if (value === \"html\") {\n                    elt = createHTMLElt(doc, value, arg3);\n                    stack.push(elt);\n                    doc.appendChild(elt);\n                    // XXX: handle application cache here\n                    parser = before_head_mode;\n                    return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"html\":\n                    case \"head\":\n                    case \"body\":\n                    case \"br\":\n                        break; // fall through on these\n                    default:\n                        return; // ignore most end tags\n                }\n        }\n        // Anything that didn't get handled above is handled like this:\n        elt = createHTMLElt(doc, \"html\", null);\n        stack.push(elt);\n        doc.appendChild(elt);\n        // XXX: handle application cache here\n        parser = before_head_mode;\n        parser(t, value, arg3, arg4);\n    }\n    // 11.2.5.4.3 The \"before head\" insertion mode\n    function before_head_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                value = value.replace(LEADINGWS, \"\"); // Ignore spaces\n                if (value.length === 0) return; // Are we done?\n                break; // Handle anything non-space text below\n            case 5:\n                /* ignore the token */ return;\n            case 4:\n                insertComment(value);\n                return;\n            case 2:\n                switch(value){\n                    case \"html\":\n                        in_body_mode(t, value, arg3, arg4);\n                        return;\n                    case \"head\":\n                        var elt = insertHTMLElement(value, arg3);\n                        head_element_pointer = elt;\n                        parser = in_head_mode;\n                        return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"html\":\n                    case \"head\":\n                    case \"body\":\n                    case \"br\":\n                        break;\n                    default:\n                        return; // ignore most end tags\n                }\n        }\n        // If not handled explicitly above\n        before_head_mode(TAG, \"head\", null); // create a head tag\n        parser(t, value, arg3, arg4); // then try again with this token\n    }\n    function in_head_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                var ws = value.match(LEADINGWS);\n                if (ws) {\n                    insertText(ws[0]);\n                    value = value.substring(ws[0].length);\n                }\n                if (value.length === 0) return;\n                break; // Handle non-whitespace below\n            case 4:\n                insertComment(value);\n                return;\n            case 5:\n                return;\n            case 2:\n                switch(value){\n                    case \"html\":\n                        in_body_mode(t, value, arg3, arg4);\n                        return;\n                    case \"meta\":\n                    // XXX:\n                    // May need to change the encoding based on this tag\n                    /* falls through */ case \"base\":\n                    case \"basefont\":\n                    case \"bgsound\":\n                    case \"link\":\n                        insertHTMLElement(value, arg3);\n                        stack.pop();\n                        return;\n                    case \"title\":\n                        parseRCDATA(value, arg3);\n                        return;\n                    case \"noscript\":\n                        if (!scripting_enabled) {\n                            insertHTMLElement(value, arg3);\n                            parser = in_head_noscript_mode;\n                            return;\n                        }\n                    // Otherwise, if scripting is enabled...\n                    /* falls through */ case \"noframes\":\n                    case \"style\":\n                        parseRawText(value, arg3);\n                        return;\n                    case \"script\":\n                        insertElement(function(doc) {\n                            var elt = createHTMLElt(doc, value, arg3);\n                            elt._parser_inserted = true;\n                            elt._force_async = false;\n                            if (fragment) elt._already_started = true;\n                            flushText();\n                            return elt;\n                        });\n                        tokenizer = script_data_state;\n                        originalInsertionMode = parser;\n                        parser = text_mode;\n                        return;\n                    case \"template\":\n                        insertHTMLElement(value, arg3);\n                        afe.insertMarker();\n                        frameset_ok = false;\n                        parser = in_template_mode;\n                        templateInsertionModes.push(parser);\n                        return;\n                    case \"head\":\n                        return; // ignore it\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"head\":\n                        stack.pop();\n                        parser = after_head_mode;\n                        return;\n                    case \"body\":\n                    case \"html\":\n                    case \"br\":\n                        break; // handle these at the bottom of the function\n                    case \"template\":\n                        if (!stack.contains(\"template\")) {\n                            return;\n                        }\n                        stack.generateImpliedEndTags(null, \"thorough\");\n                        stack.popTag(\"template\");\n                        afe.clearToMarker();\n                        templateInsertionModes.pop();\n                        resetInsertionMode();\n                        return;\n                    default:\n                        // ignore any other end tag\n                        return;\n                }\n                break;\n        }\n        // If not handled above\n        in_head_mode(ENDTAG, \"head\", null); // synthetic </head>\n        parser(t, value, arg3, arg4); // Then redo this one\n    }\n    // 13.2.5.4.5 The \"in head noscript\" insertion mode\n    function in_head_noscript_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 5:\n                return;\n            case 4:\n                in_head_mode(t, value);\n                return;\n            case 1:\n                var ws = value.match(LEADINGWS);\n                if (ws) {\n                    in_head_mode(t, ws[0]);\n                    value = value.substring(ws[0].length);\n                }\n                if (value.length === 0) return; // no more text\n                break; // Handle non-whitespace below\n            case 2:\n                switch(value){\n                    case \"html\":\n                        in_body_mode(t, value, arg3, arg4);\n                        return;\n                    case \"basefont\":\n                    case \"bgsound\":\n                    case \"link\":\n                    case \"meta\":\n                    case \"noframes\":\n                    case \"style\":\n                        in_head_mode(t, value, arg3);\n                        return;\n                    case \"head\":\n                    case \"noscript\":\n                        return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"noscript\":\n                        stack.pop();\n                        parser = in_head_mode;\n                        return;\n                    case \"br\":\n                        break; // goes to the outer default\n                    default:\n                        return; // ignore other end tags\n                }\n                break;\n        }\n        // If not handled above\n        in_head_noscript_mode(ENDTAG, \"noscript\", null);\n        parser(t, value, arg3, arg4);\n    }\n    function after_head_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                var ws = value.match(LEADINGWS);\n                if (ws) {\n                    insertText(ws[0]);\n                    value = value.substring(ws[0].length);\n                }\n                if (value.length === 0) return;\n                break; // Handle non-whitespace below\n            case 4:\n                insertComment(value);\n                return;\n            case 5:\n                return;\n            case 2:\n                switch(value){\n                    case \"html\":\n                        in_body_mode(t, value, arg3, arg4);\n                        return;\n                    case \"body\":\n                        insertHTMLElement(value, arg3);\n                        frameset_ok = false;\n                        parser = in_body_mode;\n                        return;\n                    case \"frameset\":\n                        insertHTMLElement(value, arg3);\n                        parser = in_frameset_mode;\n                        return;\n                    case \"base\":\n                    case \"basefont\":\n                    case \"bgsound\":\n                    case \"link\":\n                    case \"meta\":\n                    case \"noframes\":\n                    case \"script\":\n                    case \"style\":\n                    case \"template\":\n                    case \"title\":\n                        stack.push(head_element_pointer);\n                        in_head_mode(TAG, value, arg3);\n                        stack.removeElement(head_element_pointer);\n                        return;\n                    case \"head\":\n                        return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"template\":\n                        return in_head_mode(t, value, arg3, arg4);\n                    case \"body\":\n                    case \"html\":\n                    case \"br\":\n                        break;\n                    default:\n                        return; // ignore any other end tag\n                }\n                break;\n        }\n        after_head_mode(TAG, \"body\", null);\n        frameset_ok = true;\n        parser(t, value, arg3, arg4);\n    }\n    // 13.2.5.4.7 The \"in body\" insertion mode\n    function in_body_mode(t, value, arg3, arg4) {\n        var body, i, node, elt;\n        switch(t){\n            case 1:\n                if (textIncludesNUL) {\n                    value = value.replace(NULCHARS, \"\");\n                    if (value.length === 0) return;\n                }\n                // If any non-space characters\n                if (frameset_ok && NONWS.test(value)) frameset_ok = false;\n                afereconstruct();\n                insertText(value);\n                return;\n            case 5:\n                return;\n            case 4:\n                insertComment(value);\n                return;\n            case -1:\n                if (templateInsertionModes.length) {\n                    return in_template_mode(t);\n                }\n                stopParsing();\n                return;\n            case 2:\n                switch(value){\n                    case \"html\":\n                        if (stack.contains(\"template\")) {\n                            return;\n                        }\n                        transferAttributes(arg3, stack.elements[0]);\n                        return;\n                    case \"base\":\n                    case \"basefont\":\n                    case \"bgsound\":\n                    case \"link\":\n                    case \"meta\":\n                    case \"noframes\":\n                    case \"script\":\n                    case \"style\":\n                    case \"template\":\n                    case \"title\":\n                        in_head_mode(TAG, value, arg3);\n                        return;\n                    case \"body\":\n                        body = stack.elements[1];\n                        if (!body || !(body instanceof impl.HTMLBodyElement) || stack.contains(\"template\")) return;\n                        frameset_ok = false;\n                        transferAttributes(arg3, body);\n                        return;\n                    case \"frameset\":\n                        if (!frameset_ok) return;\n                        body = stack.elements[1];\n                        if (!body || !(body instanceof impl.HTMLBodyElement)) return;\n                        if (body.parentNode) body.parentNode.removeChild(body);\n                        while(!(stack.top instanceof impl.HTMLHtmlElement))stack.pop();\n                        insertHTMLElement(value, arg3);\n                        parser = in_frameset_mode;\n                        return;\n                    case \"address\":\n                    case \"article\":\n                    case \"aside\":\n                    case \"blockquote\":\n                    case \"center\":\n                    case \"details\":\n                    case \"dialog\":\n                    case \"dir\":\n                    case \"div\":\n                    case \"dl\":\n                    case \"fieldset\":\n                    case \"figcaption\":\n                    case \"figure\":\n                    case \"footer\":\n                    case \"header\":\n                    case \"hgroup\":\n                    case \"main\":\n                    case \"nav\":\n                    case \"ol\":\n                    case \"p\":\n                    case \"section\":\n                    case \"summary\":\n                    case \"ul\":\n                        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"menu\":\n                        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n                        if (isA(stack.top, \"menuitem\")) {\n                            stack.pop();\n                        }\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"h1\":\n                    case \"h2\":\n                    case \"h3\":\n                    case \"h4\":\n                    case \"h5\":\n                    case \"h6\":\n                        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n                        if (stack.top instanceof impl.HTMLHeadingElement) stack.pop();\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"pre\":\n                    case \"listing\":\n                        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n                        insertHTMLElement(value, arg3);\n                        ignore_linefeed = true;\n                        frameset_ok = false;\n                        return;\n                    case \"form\":\n                        if (form_element_pointer && !stack.contains(\"template\")) return;\n                        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n                        elt = insertHTMLElement(value, arg3);\n                        if (!stack.contains(\"template\")) form_element_pointer = elt;\n                        return;\n                    case \"li\":\n                        frameset_ok = false;\n                        for(i = stack.elements.length - 1; i >= 0; i--){\n                            node = stack.elements[i];\n                            if (node instanceof impl.HTMLLIElement) {\n                                in_body_mode(ENDTAG, \"li\");\n                                break;\n                            }\n                            if (isA(node, specialSet) && !isA(node, addressdivpSet)) break;\n                        }\n                        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"dd\":\n                    case \"dt\":\n                        frameset_ok = false;\n                        for(i = stack.elements.length - 1; i >= 0; i--){\n                            node = stack.elements[i];\n                            if (isA(node, dddtSet)) {\n                                in_body_mode(ENDTAG, node.localName);\n                                break;\n                            }\n                            if (isA(node, specialSet) && !isA(node, addressdivpSet)) break;\n                        }\n                        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"plaintext\":\n                        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n                        insertHTMLElement(value, arg3);\n                        tokenizer = plaintext_state;\n                        return;\n                    case \"button\":\n                        if (stack.inScope(\"button\")) {\n                            in_body_mode(ENDTAG, \"button\");\n                            parser(t, value, arg3, arg4);\n                        } else {\n                            afereconstruct();\n                            insertHTMLElement(value, arg3);\n                            frameset_ok = false;\n                        }\n                        return;\n                    case \"a\":\n                        var activeElement = afe.findElementByTag(\"a\");\n                        if (activeElement) {\n                            in_body_mode(ENDTAG, value);\n                            afe.remove(activeElement);\n                            stack.removeElement(activeElement);\n                        }\n                    /* falls through */ case \"b\":\n                    case \"big\":\n                    case \"code\":\n                    case \"em\":\n                    case \"font\":\n                    case \"i\":\n                    case \"s\":\n                    case \"small\":\n                    case \"strike\":\n                    case \"strong\":\n                    case \"tt\":\n                    case \"u\":\n                        afereconstruct();\n                        afe.push(insertHTMLElement(value, arg3), arg3);\n                        return;\n                    case \"nobr\":\n                        afereconstruct();\n                        if (stack.inScope(value)) {\n                            in_body_mode(ENDTAG, value);\n                            afereconstruct();\n                        }\n                        afe.push(insertHTMLElement(value, arg3), arg3);\n                        return;\n                    case \"applet\":\n                    case \"marquee\":\n                    case \"object\":\n                        afereconstruct();\n                        insertHTMLElement(value, arg3);\n                        afe.insertMarker();\n                        frameset_ok = false;\n                        return;\n                    case \"table\":\n                        if (!doc._quirks && stack.inButtonScope(\"p\")) {\n                            in_body_mode(ENDTAG, \"p\");\n                        }\n                        insertHTMLElement(value, arg3);\n                        frameset_ok = false;\n                        parser = in_table_mode;\n                        return;\n                    case \"area\":\n                    case \"br\":\n                    case \"embed\":\n                    case \"img\":\n                    case \"keygen\":\n                    case \"wbr\":\n                        afereconstruct();\n                        insertHTMLElement(value, arg3);\n                        stack.pop();\n                        frameset_ok = false;\n                        return;\n                    case \"input\":\n                        afereconstruct();\n                        elt = insertHTMLElement(value, arg3);\n                        stack.pop();\n                        var type = elt.getAttribute(\"type\");\n                        if (!type || type.toLowerCase() !== \"hidden\") frameset_ok = false;\n                        return;\n                    case \"param\":\n                    case \"source\":\n                    case \"track\":\n                        insertHTMLElement(value, arg3);\n                        stack.pop();\n                        return;\n                    case \"hr\":\n                        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n                        if (isA(stack.top, \"menuitem\")) {\n                            stack.pop();\n                        }\n                        insertHTMLElement(value, arg3);\n                        stack.pop();\n                        frameset_ok = false;\n                        return;\n                    case \"image\":\n                        in_body_mode(TAG, \"img\", arg3, arg4);\n                        return;\n                    case \"textarea\":\n                        insertHTMLElement(value, arg3);\n                        ignore_linefeed = true;\n                        frameset_ok = false;\n                        tokenizer = rcdata_state;\n                        originalInsertionMode = parser;\n                        parser = text_mode;\n                        return;\n                    case \"xmp\":\n                        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\n                        afereconstruct();\n                        frameset_ok = false;\n                        parseRawText(value, arg3);\n                        return;\n                    case \"iframe\":\n                        frameset_ok = false;\n                        parseRawText(value, arg3);\n                        return;\n                    case \"noembed\":\n                        parseRawText(value, arg3);\n                        return;\n                    case \"noscript\":\n                        if (scripting_enabled) {\n                            parseRawText(value, arg3);\n                            return;\n                        }\n                        break; // XXX Otherwise treat it as any other open tag?\n                    case \"select\":\n                        afereconstruct();\n                        insertHTMLElement(value, arg3);\n                        frameset_ok = false;\n                        if (parser === in_table_mode || parser === in_caption_mode || parser === in_table_body_mode || parser === in_row_mode || parser === in_cell_mode) parser = in_select_in_table_mode;\n                        else parser = in_select_mode;\n                        return;\n                    case \"optgroup\":\n                    case \"option\":\n                        if (stack.top instanceof impl.HTMLOptionElement) {\n                            in_body_mode(ENDTAG, \"option\");\n                        }\n                        afereconstruct();\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"menuitem\":\n                        if (isA(stack.top, \"menuitem\")) {\n                            stack.pop();\n                        }\n                        afereconstruct();\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"rb\":\n                    case \"rtc\":\n                        if (stack.inScope(\"ruby\")) {\n                            stack.generateImpliedEndTags();\n                        }\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"rp\":\n                    case \"rt\":\n                        if (stack.inScope(\"ruby\")) {\n                            stack.generateImpliedEndTags(\"rtc\");\n                        }\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"math\":\n                        afereconstruct();\n                        adjustMathMLAttributes(arg3);\n                        adjustForeignAttributes(arg3);\n                        insertForeignElement(value, arg3, NAMESPACE.MATHML);\n                        if (arg4) stack.pop();\n                        return;\n                    case \"svg\":\n                        afereconstruct();\n                        adjustSVGAttributes(arg3);\n                        adjustForeignAttributes(arg3);\n                        insertForeignElement(value, arg3, NAMESPACE.SVG);\n                        if (arg4) stack.pop();\n                        return;\n                    case \"caption\":\n                    case \"col\":\n                    case \"colgroup\":\n                    case \"frame\":\n                    case \"head\":\n                    case \"tbody\":\n                    case \"td\":\n                    case \"tfoot\":\n                    case \"th\":\n                    case \"thead\":\n                    case \"tr\":\n                        // Ignore table tags if we're not in_table mode\n                        return;\n                }\n                // Handle any other start tag here\n                // (and also noscript tags when scripting is disabled)\n                afereconstruct();\n                insertHTMLElement(value, arg3);\n                return;\n            case 3:\n                switch(value){\n                    case \"template\":\n                        in_head_mode(ENDTAG, value, arg3);\n                        return;\n                    case \"body\":\n                        if (!stack.inScope(\"body\")) return;\n                        parser = after_body_mode;\n                        return;\n                    case \"html\":\n                        if (!stack.inScope(\"body\")) return;\n                        parser = after_body_mode;\n                        parser(t, value, arg3);\n                        return;\n                    case \"address\":\n                    case \"article\":\n                    case \"aside\":\n                    case \"blockquote\":\n                    case \"button\":\n                    case \"center\":\n                    case \"details\":\n                    case \"dialog\":\n                    case \"dir\":\n                    case \"div\":\n                    case \"dl\":\n                    case \"fieldset\":\n                    case \"figcaption\":\n                    case \"figure\":\n                    case \"footer\":\n                    case \"header\":\n                    case \"hgroup\":\n                    case \"listing\":\n                    case \"main\":\n                    case \"menu\":\n                    case \"nav\":\n                    case \"ol\":\n                    case \"pre\":\n                    case \"section\":\n                    case \"summary\":\n                    case \"ul\":\n                        // Ignore if there is not a matching open tag\n                        if (!stack.inScope(value)) return;\n                        stack.generateImpliedEndTags();\n                        stack.popTag(value);\n                        return;\n                    case \"form\":\n                        if (!stack.contains(\"template\")) {\n                            var openform = form_element_pointer;\n                            form_element_pointer = null;\n                            if (!openform || !stack.elementInScope(openform)) return;\n                            stack.generateImpliedEndTags();\n                            stack.removeElement(openform);\n                        } else {\n                            if (!stack.inScope(\"form\")) return;\n                            stack.generateImpliedEndTags();\n                            stack.popTag(\"form\");\n                        }\n                        return;\n                    case \"p\":\n                        if (!stack.inButtonScope(value)) {\n                            in_body_mode(TAG, value, null);\n                            parser(t, value, arg3, arg4);\n                        } else {\n                            stack.generateImpliedEndTags(value);\n                            stack.popTag(value);\n                        }\n                        return;\n                    case \"li\":\n                        if (!stack.inListItemScope(value)) return;\n                        stack.generateImpliedEndTags(value);\n                        stack.popTag(value);\n                        return;\n                    case \"dd\":\n                    case \"dt\":\n                        if (!stack.inScope(value)) return;\n                        stack.generateImpliedEndTags(value);\n                        stack.popTag(value);\n                        return;\n                    case \"h1\":\n                    case \"h2\":\n                    case \"h3\":\n                    case \"h4\":\n                    case \"h5\":\n                    case \"h6\":\n                        if (!stack.elementTypeInScope(impl.HTMLHeadingElement)) return;\n                        stack.generateImpliedEndTags();\n                        stack.popElementType(impl.HTMLHeadingElement);\n                        return;\n                    case \"sarcasm\":\n                        break;\n                    case \"a\":\n                    case \"b\":\n                    case \"big\":\n                    case \"code\":\n                    case \"em\":\n                    case \"font\":\n                    case \"i\":\n                    case \"nobr\":\n                    case \"s\":\n                    case \"small\":\n                    case \"strike\":\n                    case \"strong\":\n                    case \"tt\":\n                    case \"u\":\n                        var result = adoptionAgency(value);\n                        if (result) return; // If we did something we're done\n                        break; // Go to the \"any other end tag\" case\n                    case \"applet\":\n                    case \"marquee\":\n                    case \"object\":\n                        if (!stack.inScope(value)) return;\n                        stack.generateImpliedEndTags();\n                        stack.popTag(value);\n                        afe.clearToMarker();\n                        return;\n                    case \"br\":\n                        in_body_mode(TAG, value, null); // Turn </br> into <br>\n                        return;\n                }\n                // Any other end tag goes here\n                for(i = stack.elements.length - 1; i >= 0; i--){\n                    node = stack.elements[i];\n                    if (isA(node, value)) {\n                        stack.generateImpliedEndTags(value);\n                        stack.popElement(node);\n                        break;\n                    } else if (isA(node, specialSet)) {\n                        return;\n                    }\n                }\n                return;\n        }\n    }\n    function text_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                insertText(value);\n                return;\n            case -1:\n                if (stack.top instanceof impl.HTMLScriptElement) stack.top._already_started = true;\n                stack.pop();\n                parser = originalInsertionMode;\n                parser(t);\n                return;\n            case 3:\n                if (value === \"script\") {\n                    handleScriptEnd();\n                } else {\n                    stack.pop();\n                    parser = originalInsertionMode;\n                }\n                return;\n            default:\n                // We should never get any other token types\n                return;\n        }\n    }\n    function in_table_mode(t, value, arg3, arg4) {\n        function getTypeAttr(attrs) {\n            for(var i = 0, n = attrs.length; i < n; i++){\n                if (attrs[i][0] === \"type\") return attrs[i][1].toLowerCase();\n            }\n            return null;\n        }\n        switch(t){\n            case 1:\n                // XXX the text_integration_mode stuff is\n                // just a hack I made up\n                if (text_integration_mode) {\n                    in_body_mode(t, value, arg3, arg4);\n                    return;\n                } else if (isA(stack.top, tablesectionrowSet)) {\n                    pending_table_text = [];\n                    originalInsertionMode = parser;\n                    parser = in_table_text_mode;\n                    parser(t, value, arg3, arg4);\n                    return;\n                }\n                break;\n            case 4:\n                insertComment(value);\n                return;\n            case 5:\n                return;\n            case 2:\n                switch(value){\n                    case \"caption\":\n                        stack.clearToContext(tableContextSet);\n                        afe.insertMarker();\n                        insertHTMLElement(value, arg3);\n                        parser = in_caption_mode;\n                        return;\n                    case \"colgroup\":\n                        stack.clearToContext(tableContextSet);\n                        insertHTMLElement(value, arg3);\n                        parser = in_column_group_mode;\n                        return;\n                    case \"col\":\n                        in_table_mode(TAG, \"colgroup\", null);\n                        parser(t, value, arg3, arg4);\n                        return;\n                    case \"tbody\":\n                    case \"tfoot\":\n                    case \"thead\":\n                        stack.clearToContext(tableContextSet);\n                        insertHTMLElement(value, arg3);\n                        parser = in_table_body_mode;\n                        return;\n                    case \"td\":\n                    case \"th\":\n                    case \"tr\":\n                        in_table_mode(TAG, \"tbody\", null);\n                        parser(t, value, arg3, arg4);\n                        return;\n                    case \"table\":\n                        if (!stack.inTableScope(value)) {\n                            return; // Ignore the token\n                        }\n                        in_table_mode(ENDTAG, value);\n                        parser(t, value, arg3, arg4);\n                        return;\n                    case \"style\":\n                    case \"script\":\n                    case \"template\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                    case \"input\":\n                        var type = getTypeAttr(arg3);\n                        if (type !== \"hidden\") break; // to the anything else case\n                        insertHTMLElement(value, arg3);\n                        stack.pop();\n                        return;\n                    case \"form\":\n                        if (form_element_pointer || stack.contains(\"template\")) return;\n                        form_element_pointer = insertHTMLElement(value, arg3);\n                        stack.popElement(form_element_pointer);\n                        return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"table\":\n                        if (!stack.inTableScope(value)) return;\n                        stack.popTag(value);\n                        resetInsertionMode();\n                        return;\n                    case \"body\":\n                    case \"caption\":\n                    case \"col\":\n                    case \"colgroup\":\n                    case \"html\":\n                    case \"tbody\":\n                    case \"td\":\n                    case \"tfoot\":\n                    case \"th\":\n                    case \"thead\":\n                    case \"tr\":\n                        return;\n                    case \"template\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n            case -1:\n                in_body_mode(t, value, arg3, arg4);\n                return;\n        }\n        // This is the anything else case\n        foster_parent_mode = true;\n        in_body_mode(t, value, arg3, arg4);\n        foster_parent_mode = false;\n    }\n    function in_table_text_mode(t, value, arg3, arg4) {\n        if (t === TEXT) {\n            if (textIncludesNUL) {\n                value = value.replace(NULCHARS, \"\");\n                if (value.length === 0) return;\n            }\n            pending_table_text.push(value);\n        } else {\n            var s = pending_table_text.join(\"\");\n            pending_table_text.length = 0;\n            if (NONWS.test(s)) {\n                // This must be the same code as the \"anything else\"\n                // case of the in_table mode above.\n                foster_parent_mode = true;\n                in_body_mode(TEXT, s);\n                foster_parent_mode = false;\n            } else {\n                insertText(s);\n            }\n            parser = originalInsertionMode;\n            parser(t, value, arg3, arg4);\n        }\n    }\n    function in_caption_mode(t, value, arg3, arg4) {\n        function end_caption() {\n            if (!stack.inTableScope(\"caption\")) return false;\n            stack.generateImpliedEndTags();\n            stack.popTag(\"caption\");\n            afe.clearToMarker();\n            parser = in_table_mode;\n            return true;\n        }\n        switch(t){\n            case 2:\n                switch(value){\n                    case \"caption\":\n                    case \"col\":\n                    case \"colgroup\":\n                    case \"tbody\":\n                    case \"td\":\n                    case \"tfoot\":\n                    case \"th\":\n                    case \"thead\":\n                    case \"tr\":\n                        if (end_caption()) parser(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"caption\":\n                        end_caption();\n                        return;\n                    case \"table\":\n                        if (end_caption()) parser(t, value, arg3, arg4);\n                        return;\n                    case \"body\":\n                    case \"col\":\n                    case \"colgroup\":\n                    case \"html\":\n                    case \"tbody\":\n                    case \"td\":\n                    case \"tfoot\":\n                    case \"th\":\n                    case \"thead\":\n                    case \"tr\":\n                        return;\n                }\n                break;\n        }\n        // The Anything Else case\n        in_body_mode(t, value, arg3, arg4);\n    }\n    function in_column_group_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                var ws = value.match(LEADINGWS);\n                if (ws) {\n                    insertText(ws[0]);\n                    value = value.substring(ws[0].length);\n                }\n                if (value.length === 0) return;\n                break; // Handle non-whitespace below\n            case 4:\n                insertComment(value);\n                return;\n            case 5:\n                return;\n            case 2:\n                switch(value){\n                    case \"html\":\n                        in_body_mode(t, value, arg3, arg4);\n                        return;\n                    case \"col\":\n                        insertHTMLElement(value, arg3);\n                        stack.pop();\n                        return;\n                    case \"template\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"colgroup\":\n                        if (!isA(stack.top, \"colgroup\")) {\n                            return; // Ignore the token.\n                        }\n                        stack.pop();\n                        parser = in_table_mode;\n                        return;\n                    case \"col\":\n                        return;\n                    case \"template\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n            case -1:\n                in_body_mode(t, value, arg3, arg4);\n                return;\n        }\n        // Anything else\n        if (!isA(stack.top, \"colgroup\")) {\n            return; // Ignore the token.\n        }\n        in_column_group_mode(ENDTAG, \"colgroup\");\n        parser(t, value, arg3, arg4);\n    }\n    function in_table_body_mode(t, value, arg3, arg4) {\n        function endsect() {\n            if (!stack.inTableScope(\"tbody\") && !stack.inTableScope(\"thead\") && !stack.inTableScope(\"tfoot\")) return;\n            stack.clearToContext(tableBodyContextSet);\n            in_table_body_mode(ENDTAG, stack.top.localName, null);\n            parser(t, value, arg3, arg4);\n        }\n        switch(t){\n            case 2:\n                switch(value){\n                    case \"tr\":\n                        stack.clearToContext(tableBodyContextSet);\n                        insertHTMLElement(value, arg3);\n                        parser = in_row_mode;\n                        return;\n                    case \"th\":\n                    case \"td\":\n                        in_table_body_mode(TAG, \"tr\", null);\n                        parser(t, value, arg3, arg4);\n                        return;\n                    case \"caption\":\n                    case \"col\":\n                    case \"colgroup\":\n                    case \"tbody\":\n                    case \"tfoot\":\n                    case \"thead\":\n                        endsect();\n                        return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"table\":\n                        endsect();\n                        return;\n                    case \"tbody\":\n                    case \"tfoot\":\n                    case \"thead\":\n                        if (stack.inTableScope(value)) {\n                            stack.clearToContext(tableBodyContextSet);\n                            stack.pop();\n                            parser = in_table_mode;\n                        }\n                        return;\n                    case \"body\":\n                    case \"caption\":\n                    case \"col\":\n                    case \"colgroup\":\n                    case \"html\":\n                    case \"td\":\n                    case \"th\":\n                    case \"tr\":\n                        return;\n                }\n                break;\n        }\n        // Anything else:\n        in_table_mode(t, value, arg3, arg4);\n    }\n    function in_row_mode(t, value, arg3, arg4) {\n        function endrow() {\n            if (!stack.inTableScope(\"tr\")) return false;\n            stack.clearToContext(tableRowContextSet);\n            stack.pop();\n            parser = in_table_body_mode;\n            return true;\n        }\n        switch(t){\n            case 2:\n                switch(value){\n                    case \"th\":\n                    case \"td\":\n                        stack.clearToContext(tableRowContextSet);\n                        insertHTMLElement(value, arg3);\n                        parser = in_cell_mode;\n                        afe.insertMarker();\n                        return;\n                    case \"caption\":\n                    case \"col\":\n                    case \"colgroup\":\n                    case \"tbody\":\n                    case \"tfoot\":\n                    case \"thead\":\n                    case \"tr\":\n                        if (endrow()) parser(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"tr\":\n                        endrow();\n                        return;\n                    case \"table\":\n                        if (endrow()) parser(t, value, arg3, arg4);\n                        return;\n                    case \"tbody\":\n                    case \"tfoot\":\n                    case \"thead\":\n                        if (stack.inTableScope(value)) {\n                            if (endrow()) parser(t, value, arg3, arg4);\n                        }\n                        return;\n                    case \"body\":\n                    case \"caption\":\n                    case \"col\":\n                    case \"colgroup\":\n                    case \"html\":\n                    case \"td\":\n                    case \"th\":\n                        return;\n                }\n                break;\n        }\n        // anything else\n        in_table_mode(t, value, arg3, arg4);\n    }\n    function in_cell_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 2:\n                switch(value){\n                    case \"caption\":\n                    case \"col\":\n                    case \"colgroup\":\n                    case \"tbody\":\n                    case \"td\":\n                    case \"tfoot\":\n                    case \"th\":\n                    case \"thead\":\n                    case \"tr\":\n                        if (stack.inTableScope(\"td\")) {\n                            in_cell_mode(ENDTAG, \"td\");\n                            parser(t, value, arg3, arg4);\n                        } else if (stack.inTableScope(\"th\")) {\n                            in_cell_mode(ENDTAG, \"th\");\n                            parser(t, value, arg3, arg4);\n                        }\n                        return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"td\":\n                    case \"th\":\n                        if (!stack.inTableScope(value)) return;\n                        stack.generateImpliedEndTags();\n                        stack.popTag(value);\n                        afe.clearToMarker();\n                        parser = in_row_mode;\n                        return;\n                    case \"body\":\n                    case \"caption\":\n                    case \"col\":\n                    case \"colgroup\":\n                    case \"html\":\n                        return;\n                    case \"table\":\n                    case \"tbody\":\n                    case \"tfoot\":\n                    case \"thead\":\n                    case \"tr\":\n                        if (!stack.inTableScope(value)) return;\n                        in_cell_mode(ENDTAG, stack.inTableScope(\"td\") ? \"td\" : \"th\");\n                        parser(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n        }\n        // anything else\n        in_body_mode(t, value, arg3, arg4);\n    }\n    function in_select_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                if (textIncludesNUL) {\n                    value = value.replace(NULCHARS, \"\");\n                    if (value.length === 0) return;\n                }\n                insertText(value);\n                return;\n            case 4:\n                insertComment(value);\n                return;\n            case 5:\n                return;\n            case -1:\n                in_body_mode(t, value, arg3, arg4);\n                return;\n            case 2:\n                switch(value){\n                    case \"html\":\n                        in_body_mode(t, value, arg3, arg4);\n                        return;\n                    case \"option\":\n                        if (stack.top instanceof impl.HTMLOptionElement) in_select_mode(ENDTAG, value);\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"optgroup\":\n                        if (stack.top instanceof impl.HTMLOptionElement) in_select_mode(ENDTAG, \"option\");\n                        if (stack.top instanceof impl.HTMLOptGroupElement) in_select_mode(ENDTAG, value);\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"select\":\n                        in_select_mode(ENDTAG, value); // treat it as a close tag\n                        return;\n                    case \"input\":\n                    case \"keygen\":\n                    case \"textarea\":\n                        if (!stack.inSelectScope(\"select\")) return;\n                        in_select_mode(ENDTAG, \"select\");\n                        parser(t, value, arg3, arg4);\n                        return;\n                    case \"script\":\n                    case \"template\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n            case 3:\n                switch(value){\n                    case \"optgroup\":\n                        if (stack.top instanceof impl.HTMLOptionElement && stack.elements[stack.elements.length - 2] instanceof impl.HTMLOptGroupElement) {\n                            in_select_mode(ENDTAG, \"option\");\n                        }\n                        if (stack.top instanceof impl.HTMLOptGroupElement) stack.pop();\n                        return;\n                    case \"option\":\n                        if (stack.top instanceof impl.HTMLOptionElement) stack.pop();\n                        return;\n                    case \"select\":\n                        if (!stack.inSelectScope(value)) return;\n                        stack.popTag(value);\n                        resetInsertionMode();\n                        return;\n                    case \"template\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n        }\n    // anything else: just ignore the token\n    }\n    function in_select_in_table_mode(t, value, arg3, arg4) {\n        switch(value){\n            case \"caption\":\n            case \"table\":\n            case \"tbody\":\n            case \"tfoot\":\n            case \"thead\":\n            case \"tr\":\n            case \"td\":\n            case \"th\":\n                switch(t){\n                    case 2:\n                        in_select_in_table_mode(ENDTAG, \"select\");\n                        parser(t, value, arg3, arg4);\n                        return;\n                    case 3:\n                        if (stack.inTableScope(value)) {\n                            in_select_in_table_mode(ENDTAG, \"select\");\n                            parser(t, value, arg3, arg4);\n                        }\n                        return;\n                }\n        }\n        // anything else\n        in_select_mode(t, value, arg3, arg4);\n    }\n    function in_template_mode(t, value, arg3, arg4) {\n        function switchModeAndReprocess(mode) {\n            parser = mode;\n            templateInsertionModes[templateInsertionModes.length - 1] = parser;\n            parser(t, value, arg3, arg4);\n        }\n        switch(t){\n            case 1:\n            case 4:\n            case 5:\n                in_body_mode(t, value, arg3, arg4);\n                return;\n            case -1:\n                if (!stack.contains(\"template\")) {\n                    stopParsing();\n                } else {\n                    stack.popTag(\"template\");\n                    afe.clearToMarker();\n                    templateInsertionModes.pop();\n                    resetInsertionMode();\n                    parser(t, value, arg3, arg4);\n                }\n                return;\n            case 2:\n                switch(value){\n                    case \"base\":\n                    case \"basefont\":\n                    case \"bgsound\":\n                    case \"link\":\n                    case \"meta\":\n                    case \"noframes\":\n                    case \"script\":\n                    case \"style\":\n                    case \"template\":\n                    case \"title\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                    case \"caption\":\n                    case \"colgroup\":\n                    case \"tbody\":\n                    case \"tfoot\":\n                    case \"thead\":\n                        switchModeAndReprocess(in_table_mode);\n                        return;\n                    case \"col\":\n                        switchModeAndReprocess(in_column_group_mode);\n                        return;\n                    case \"tr\":\n                        switchModeAndReprocess(in_table_body_mode);\n                        return;\n                    case \"td\":\n                    case \"th\":\n                        switchModeAndReprocess(in_row_mode);\n                        return;\n                }\n                switchModeAndReprocess(in_body_mode);\n                return;\n            case 3:\n                switch(value){\n                    case \"template\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                    default:\n                        return;\n                }\n        }\n    }\n    function after_body_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                // If any non-space chars, handle below\n                if (NONWS.test(value)) break;\n                in_body_mode(t, value);\n                return;\n            case 4:\n                // Append it to the <html> element\n                stack.elements[0]._appendChild(doc.createComment(value));\n                return;\n            case 5:\n                return;\n            case -1:\n                stopParsing();\n                return;\n            case 2:\n                if (value === \"html\") {\n                    in_body_mode(t, value, arg3, arg4);\n                    return;\n                }\n                break; // for any other tags\n            case 3:\n                if (value === \"html\") {\n                    if (fragment) return;\n                    parser = after_after_body_mode;\n                    return;\n                }\n                break; // for any other tags\n        }\n        // anything else\n        parser = in_body_mode;\n        parser(t, value, arg3, arg4);\n    }\n    function in_frameset_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                // Ignore any non-space characters\n                value = value.replace(ALLNONWS, \"\");\n                if (value.length > 0) insertText(value);\n                return;\n            case 4:\n                insertComment(value);\n                return;\n            case 5:\n                return;\n            case -1:\n                stopParsing();\n                return;\n            case 2:\n                switch(value){\n                    case \"html\":\n                        in_body_mode(t, value, arg3, arg4);\n                        return;\n                    case \"frameset\":\n                        insertHTMLElement(value, arg3);\n                        return;\n                    case \"frame\":\n                        insertHTMLElement(value, arg3);\n                        stack.pop();\n                        return;\n                    case \"noframes\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n            case 3:\n                if (value === \"frameset\") {\n                    if (fragment && stack.top instanceof impl.HTMLHtmlElement) return;\n                    stack.pop();\n                    if (!fragment && !(stack.top instanceof impl.HTMLFrameSetElement)) parser = after_frameset_mode;\n                    return;\n                }\n                break;\n        }\n    // ignore anything else\n    }\n    function after_frameset_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                // Ignore any non-space characters\n                value = value.replace(ALLNONWS, \"\");\n                if (value.length > 0) insertText(value);\n                return;\n            case 4:\n                insertComment(value);\n                return;\n            case 5:\n                return;\n            case -1:\n                stopParsing();\n                return;\n            case 2:\n                switch(value){\n                    case \"html\":\n                        in_body_mode(t, value, arg3, arg4);\n                        return;\n                    case \"noframes\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n            case 3:\n                if (value === \"html\") {\n                    parser = after_after_frameset_mode;\n                    return;\n                }\n                break;\n        }\n    // ignore anything else\n    }\n    function after_after_body_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                // If any non-space chars, handle below\n                if (NONWS.test(value)) break;\n                in_body_mode(t, value, arg3, arg4);\n                return;\n            case 4:\n                doc._appendChild(doc.createComment(value));\n                return;\n            case 5:\n                in_body_mode(t, value, arg3, arg4);\n                return;\n            case -1:\n                stopParsing();\n                return;\n            case 2:\n                if (value === \"html\") {\n                    in_body_mode(t, value, arg3, arg4);\n                    return;\n                }\n                break;\n        }\n        // anything else\n        parser = in_body_mode;\n        parser(t, value, arg3, arg4);\n    }\n    function after_after_frameset_mode(t, value, arg3, arg4) {\n        switch(t){\n            case 1:\n                // Ignore any non-space characters\n                value = value.replace(ALLNONWS, \"\");\n                if (value.length > 0) in_body_mode(t, value, arg3, arg4);\n                return;\n            case 4:\n                doc._appendChild(doc.createComment(value));\n                return;\n            case 5:\n                in_body_mode(t, value, arg3, arg4);\n                return;\n            case -1:\n                stopParsing();\n                return;\n            case 2:\n                switch(value){\n                    case \"html\":\n                        in_body_mode(t, value, arg3, arg4);\n                        return;\n                    case \"noframes\":\n                        in_head_mode(t, value, arg3, arg4);\n                        return;\n                }\n                break;\n        }\n    // ignore anything else\n    }\n    // 13.2.5.5 The rules for parsing tokens in foreign content\n    //\n    // This is like one of the insertion modes above, but is\n    // invoked somewhat differently when the current token is not HTML.\n    // See the insertToken() function.\n    function insertForeignToken(t, value, arg3, arg4) {\n        // A <font> tag is an HTML font tag if it has a color, font, or size\n        // attribute.  Otherwise we assume it is foreign content\n        function isHTMLFont(attrs) {\n            for(var i = 0, n = attrs.length; i < n; i++){\n                switch(attrs[i][0]){\n                    case \"color\":\n                    case \"face\":\n                    case \"size\":\n                        return true;\n                }\n            }\n            return false;\n        }\n        var current;\n        switch(t){\n            case 1:\n                // If any non-space, non-nul characters\n                if (frameset_ok && NONWSNONNUL.test(value)) frameset_ok = false;\n                if (textIncludesNUL) {\n                    value = value.replace(NULCHARS, \"�\");\n                }\n                insertText(value);\n                return;\n            case 4:\n                insertComment(value);\n                return;\n            case 5:\n                // ignore it\n                return;\n            case 2:\n                switch(value){\n                    case \"font\":\n                        if (!isHTMLFont(arg3)) break;\n                    /* falls through */ case \"b\":\n                    case \"big\":\n                    case \"blockquote\":\n                    case \"body\":\n                    case \"br\":\n                    case \"center\":\n                    case \"code\":\n                    case \"dd\":\n                    case \"div\":\n                    case \"dl\":\n                    case \"dt\":\n                    case \"em\":\n                    case \"embed\":\n                    case \"h1\":\n                    case \"h2\":\n                    case \"h3\":\n                    case \"h4\":\n                    case \"h5\":\n                    case \"h6\":\n                    case \"head\":\n                    case \"hr\":\n                    case \"i\":\n                    case \"img\":\n                    case \"li\":\n                    case \"listing\":\n                    case \"menu\":\n                    case \"meta\":\n                    case \"nobr\":\n                    case \"ol\":\n                    case \"p\":\n                    case \"pre\":\n                    case \"ruby\":\n                    case \"s\":\n                    case \"small\":\n                    case \"span\":\n                    case \"strong\":\n                    case \"strike\":\n                    case \"sub\":\n                    case \"sup\":\n                    case \"table\":\n                    case \"tt\":\n                    case \"u\":\n                    case \"ul\":\n                    case \"var\":\n                        if (fragment) {\n                            break;\n                        }\n                        do {\n                            stack.pop();\n                            current = stack.top;\n                        }while (current.namespaceURI !== NAMESPACE.HTML && !isMathmlTextIntegrationPoint(current) && !isHTMLIntegrationPoint(current));\n                        insertToken(t, value, arg3, arg4); // reprocess\n                        return;\n                }\n                // Any other start tag case goes here\n                current = stack.elements.length === 1 && fragment ? fragmentContext : stack.top;\n                if (current.namespaceURI === NAMESPACE.MATHML) {\n                    adjustMathMLAttributes(arg3);\n                } else if (current.namespaceURI === NAMESPACE.SVG) {\n                    value = adjustSVGTagName(value);\n                    adjustSVGAttributes(arg3);\n                }\n                adjustForeignAttributes(arg3);\n                insertForeignElement(value, arg3, current.namespaceURI);\n                if (arg4) {\n                    if (value === \"script\" && current.namespaceURI === NAMESPACE.SVG) {\n                    // XXX deal with SVG scripts here\n                    }\n                    stack.pop();\n                }\n                return;\n            case 3:\n                current = stack.top;\n                if (value === \"script\" && current.namespaceURI === NAMESPACE.SVG && current.localName === \"script\") {\n                    stack.pop();\n                // XXX\n                // Deal with SVG scripts here\n                } else {\n                    // The any other end tag case\n                    var i = stack.elements.length - 1;\n                    var node = stack.elements[i];\n                    for(;;){\n                        if (node.localName.toLowerCase() === value) {\n                            stack.popElement(node);\n                            break;\n                        }\n                        node = stack.elements[--i];\n                        // If non-html, keep looping\n                        if (node.namespaceURI !== NAMESPACE.HTML) continue;\n                        // Otherwise process the end tag as html\n                        parser(t, value, arg3, arg4);\n                        break;\n                    }\n                }\n                return;\n        }\n    }\n    /***\n   * Finally, this is the end of the HTMLParser() factory function.\n   * It returns the htmlparser object with the append() and end() methods.\n   */ // Sneak another method into the htmlparser object to allow us to run\n    // tokenizer tests.  This can be commented out in production code.\n    // This is a hook for testing the tokenizer. It has to be here\n    // because the tokenizer details are all hidden away within the closure.\n    // It should return an array of tokens generated while parsing the\n    // input string.\n    htmlparser.testTokenizer = function(input, initialState, lastStartTag, charbychar) {\n        var tokens = [];\n        switch(initialState){\n            case \"PCDATA state\":\n                tokenizer = data_state;\n                break;\n            case \"RCDATA state\":\n                tokenizer = rcdata_state;\n                break;\n            case \"RAWTEXT state\":\n                tokenizer = rawtext_state;\n                break;\n            case \"PLAINTEXT state\":\n                tokenizer = plaintext_state;\n                break;\n        }\n        if (lastStartTag) {\n            lasttagname = lastStartTag;\n        }\n        insertToken = function(t, value, arg3, arg4) {\n            flushText();\n            switch(t){\n                case 1:\n                    if (tokens.length > 0 && tokens[tokens.length - 1][0] === \"Character\") {\n                        tokens[tokens.length - 1][1] += value;\n                    } else tokens.push([\n                        \"Character\",\n                        value\n                    ]);\n                    break;\n                case 4:\n                    tokens.push([\n                        \"Comment\",\n                        value\n                    ]);\n                    break;\n                case 5:\n                    tokens.push([\n                        \"DOCTYPE\",\n                        value,\n                        arg3 === undefined ? null : arg3,\n                        arg4 === undefined ? null : arg4,\n                        !force_quirks\n                    ]);\n                    break;\n                case 2:\n                    var attrs = Object.create(null);\n                    for(var i = 0; i < arg3.length; i++){\n                        // XXX: does attribute order matter?\n                        var a = arg3[i];\n                        if (a.length === 1) {\n                            attrs[a[0]] = \"\";\n                        } else {\n                            attrs[a[0]] = a[1];\n                        }\n                    }\n                    var token = [\n                        \"StartTag\",\n                        value,\n                        attrs\n                    ];\n                    if (arg4) token.push(true);\n                    tokens.push(token);\n                    break;\n                case 3:\n                    tokens.push([\n                        \"EndTag\",\n                        value\n                    ]);\n                    break;\n                case -1:\n                    break;\n            }\n        };\n        if (!charbychar) {\n            this.parse(input, true);\n        } else {\n            for(var i = 0; i < input.length; i++){\n                this.parse(input[i]);\n            }\n            this.parse(\"\", true);\n        }\n        return tokens;\n    };\n    // Return the parser object from the HTMLParser() factory function\n    return htmlparser;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/HTMLParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/Leaf.js":
/*!**************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/Leaf.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Leaf;\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar NodeList = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeList.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar HierarchyRequestError = utils.HierarchyRequestError;\nvar NotFoundError = utils.NotFoundError;\n// This class defines common functionality for node subtypes that\n// can never have children\nfunction Leaf() {\n    Node.call(this);\n}\nLeaf.prototype = Object.create(Node.prototype, {\n    hasChildNodes: {\n        value: function() {\n            return false;\n        }\n    },\n    firstChild: {\n        value: null\n    },\n    lastChild: {\n        value: null\n    },\n    insertBefore: {\n        value: function(node, child) {\n            if (!node.nodeType) throw new TypeError(\"not a node\");\n            HierarchyRequestError();\n        }\n    },\n    replaceChild: {\n        value: function(node, child) {\n            if (!node.nodeType) throw new TypeError(\"not a node\");\n            HierarchyRequestError();\n        }\n    },\n    removeChild: {\n        value: function(node) {\n            if (!node.nodeType) throw new TypeError(\"not a node\");\n            NotFoundError();\n        }\n    },\n    removeChildren: {\n        value: function() {}\n    },\n    childNodes: {\n        get: function() {\n            if (!this._childNodes) this._childNodes = new NodeList();\n            return this._childNodes;\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9MZWFmLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUUsUUFBUUYsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUcsd0JBQXdCRCxNQUFNQyxxQkFBcUI7QUFDdkQsSUFBSUMsZ0JBQWdCRixNQUFNRSxhQUFhO0FBRXZDLGlFQUFpRTtBQUNqRSwwQkFBMEI7QUFDMUIsU0FBU047SUFDUEMsS0FBS00sSUFBSSxDQUFDLElBQUk7QUFDaEI7QUFFQVAsS0FBS1EsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNULEtBQUtPLFNBQVMsRUFBRTtJQUM3Q0csZUFBZTtRQUFFQyxPQUFPO1lBQWEsT0FBTztRQUFPO0lBQUM7SUFDcERDLFlBQVk7UUFBRUQsT0FBTztJQUFLO0lBQzFCRSxXQUFXO1FBQUVGLE9BQU87SUFBSztJQUN6QkcsY0FBYztRQUFFSCxPQUFPLFNBQVNJLElBQUksRUFBRUMsS0FBSztZQUN6QyxJQUFJLENBQUNELEtBQUtFLFFBQVEsRUFBRSxNQUFNLElBQUlDLFVBQVU7WUFDeENkO1FBQ0Y7SUFBQztJQUNEZSxjQUFjO1FBQUVSLE9BQU8sU0FBU0ksSUFBSSxFQUFFQyxLQUFLO1lBQ3pDLElBQUksQ0FBQ0QsS0FBS0UsUUFBUSxFQUFFLE1BQU0sSUFBSUMsVUFBVTtZQUN4Q2Q7UUFDRjtJQUFDO0lBQ0RnQixhQUFhO1FBQUVULE9BQU8sU0FBU0ksSUFBSTtZQUNqQyxJQUFJLENBQUNBLEtBQUtFLFFBQVEsRUFBRSxNQUFNLElBQUlDLFVBQVU7WUFDeENiO1FBQ0Y7SUFBQztJQUNEZ0IsZ0JBQWdCO1FBQUVWLE9BQU8sWUFBeUI7SUFBQztJQUNuRFcsWUFBWTtRQUFFQyxLQUFLO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUNDLFdBQVcsRUFBRSxJQUFJLENBQUNBLFdBQVcsR0FBRyxJQUFJdEI7WUFDOUMsT0FBTyxJQUFJLENBQUNzQixXQUFXO1FBQ3pCO0lBQUM7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbWF0aHBpeC9kb21pbm8vbGliL0xlYWYuanM/MDU0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gTGVhZjtcblxudmFyIE5vZGUgPSByZXF1aXJlKCcuL05vZGUnKTtcbnZhciBOb2RlTGlzdCA9IHJlcXVpcmUoJy4vTm9kZUxpc3QnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBIaWVyYXJjaHlSZXF1ZXN0RXJyb3IgPSB1dGlscy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3I7XG52YXIgTm90Rm91bmRFcnJvciA9IHV0aWxzLk5vdEZvdW5kRXJyb3I7XG5cbi8vIFRoaXMgY2xhc3MgZGVmaW5lcyBjb21tb24gZnVuY3Rpb25hbGl0eSBmb3Igbm9kZSBzdWJ0eXBlcyB0aGF0XG4vLyBjYW4gbmV2ZXIgaGF2ZSBjaGlsZHJlblxuZnVuY3Rpb24gTGVhZigpIHtcbiAgTm9kZS5jYWxsKHRoaXMpO1xufVxuXG5MZWFmLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTm9kZS5wcm90b3R5cGUsIHtcbiAgaGFzQ2hpbGROb2RlczogeyB2YWx1ZTogZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfX0sXG4gIGZpcnN0Q2hpbGQ6IHsgdmFsdWU6IG51bGwgfSxcbiAgbGFzdENoaWxkOiB7IHZhbHVlOiBudWxsIH0sXG4gIGluc2VydEJlZm9yZTogeyB2YWx1ZTogZnVuY3Rpb24obm9kZSwgY2hpbGQpIHtcbiAgICBpZiAoIW5vZGUubm9kZVR5cGUpIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIG5vZGUnKTtcbiAgICBIaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgfX0sXG4gIHJlcGxhY2VDaGlsZDogeyB2YWx1ZTogZnVuY3Rpb24obm9kZSwgY2hpbGQpIHtcbiAgICBpZiAoIW5vZGUubm9kZVR5cGUpIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIG5vZGUnKTtcbiAgICBIaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcbiAgfX0sXG4gIHJlbW92ZUNoaWxkOiB7IHZhbHVlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLm5vZGVUeXBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBub2RlJyk7XG4gICAgTm90Rm91bmRFcnJvcigpO1xuICB9fSxcbiAgcmVtb3ZlQ2hpbGRyZW46IHsgdmFsdWU6IGZ1bmN0aW9uKCkgeyAvKiBubyBvcCAqLyB9fSxcbiAgY2hpbGROb2RlczogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5fY2hpbGROb2RlcykgdGhpcy5fY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuICAgIHJldHVybiB0aGlzLl9jaGlsZE5vZGVzO1xuICB9fVxufSk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkxlYWYiLCJOb2RlIiwicmVxdWlyZSIsIk5vZGVMaXN0IiwidXRpbHMiLCJIaWVyYXJjaHlSZXF1ZXN0RXJyb3IiLCJOb3RGb3VuZEVycm9yIiwiY2FsbCIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImhhc0NoaWxkTm9kZXMiLCJ2YWx1ZSIsImZpcnN0Q2hpbGQiLCJsYXN0Q2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJub2RlIiwiY2hpbGQiLCJub2RlVHlwZSIsIlR5cGVFcnJvciIsInJlcGxhY2VDaGlsZCIsInJlbW92ZUNoaWxkIiwicmVtb3ZlQ2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwiZ2V0IiwiX2NoaWxkTm9kZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/Leaf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/LinkedList.js":
/*!********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/LinkedList.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar LinkedList = module.exports = {\n    // basic validity tests on a circular linked list a\n    valid: function(a) {\n        utils.assert(a, \"list falsy\");\n        utils.assert(a._previousSibling, \"previous falsy\");\n        utils.assert(a._nextSibling, \"next falsy\");\n        // xxx check that list is actually circular\n        return true;\n    },\n    // insert a before b\n    insertBefore: function(a, b) {\n        utils.assert(LinkedList.valid(a) && LinkedList.valid(b));\n        var a_first = a, a_last = a._previousSibling;\n        var b_first = b, b_last = b._previousSibling;\n        a_first._previousSibling = b_last;\n        a_last._nextSibling = b_first;\n        b_last._nextSibling = a_first;\n        b_first._previousSibling = a_last;\n        utils.assert(LinkedList.valid(a) && LinkedList.valid(b));\n    },\n    // replace a single node a with a list b (which could be null)\n    replace: function(a, b) {\n        utils.assert(LinkedList.valid(a) && (b === null || LinkedList.valid(b)));\n        if (b !== null) {\n            LinkedList.insertBefore(b, a);\n        }\n        LinkedList.remove(a);\n        utils.assert(LinkedList.valid(a) && (b === null || LinkedList.valid(b)));\n    },\n    // remove single node a from its list\n    remove: function(a) {\n        utils.assert(LinkedList.valid(a));\n        var prev = a._previousSibling;\n        if (prev === a) {\n            return;\n        }\n        var next = a._nextSibling;\n        prev._nextSibling = next;\n        next._previousSibling = prev;\n        a._previousSibling = a._nextSibling = a;\n        utils.assert(LinkedList.valid(a));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9MaW5rZWRMaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEIsSUFBSUMsYUFBYUMsT0FBT0MsT0FBTyxHQUFHO0lBQzlCLG1EQUFtRDtJQUNuREMsT0FBTyxTQUFTQyxDQUFDO1FBQ2JOLE1BQU1PLE1BQU0sQ0FBQ0QsR0FBRztRQUNoQk4sTUFBTU8sTUFBTSxDQUFDRCxFQUFFRSxnQkFBZ0IsRUFBRTtRQUNqQ1IsTUFBTU8sTUFBTSxDQUFDRCxFQUFFRyxZQUFZLEVBQUU7UUFDN0IsMkNBQTJDO1FBQzNDLE9BQU87SUFDWDtJQUNBLG9CQUFvQjtJQUNwQkMsY0FBYyxTQUFTSixDQUFDLEVBQUVLLENBQUM7UUFDdkJYLE1BQU1PLE1BQU0sQ0FBQ0wsV0FBV0csS0FBSyxDQUFDQyxNQUFNSixXQUFXRyxLQUFLLENBQUNNO1FBQ3JELElBQUlDLFVBQVVOLEdBQUdPLFNBQVNQLEVBQUVFLGdCQUFnQjtRQUM1QyxJQUFJTSxVQUFVSCxHQUFHSSxTQUFTSixFQUFFSCxnQkFBZ0I7UUFDNUNJLFFBQVFKLGdCQUFnQixHQUFHTztRQUMzQkYsT0FBT0osWUFBWSxHQUFHSztRQUN0QkMsT0FBT04sWUFBWSxHQUFHRztRQUN0QkUsUUFBUU4sZ0JBQWdCLEdBQUdLO1FBQzNCYixNQUFNTyxNQUFNLENBQUNMLFdBQVdHLEtBQUssQ0FBQ0MsTUFBTUosV0FBV0csS0FBSyxDQUFDTTtJQUN6RDtJQUNBLDhEQUE4RDtJQUM5REssU0FBUyxTQUFTVixDQUFDLEVBQUVLLENBQUM7UUFDbEJYLE1BQU1PLE1BQU0sQ0FBQ0wsV0FBV0csS0FBSyxDQUFDQyxNQUFPSyxDQUFBQSxNQUFJLFFBQVFULFdBQVdHLEtBQUssQ0FBQ00sRUFBQztRQUNuRSxJQUFJQSxNQUFJLE1BQU07WUFDVlQsV0FBV1EsWUFBWSxDQUFDQyxHQUFHTDtRQUMvQjtRQUNBSixXQUFXZSxNQUFNLENBQUNYO1FBQ2xCTixNQUFNTyxNQUFNLENBQUNMLFdBQVdHLEtBQUssQ0FBQ0MsTUFBT0ssQ0FBQUEsTUFBSSxRQUFRVCxXQUFXRyxLQUFLLENBQUNNLEVBQUM7SUFDdkU7SUFDQSxxQ0FBcUM7SUFDckNNLFFBQVEsU0FBU1gsQ0FBQztRQUNkTixNQUFNTyxNQUFNLENBQUNMLFdBQVdHLEtBQUssQ0FBQ0M7UUFDOUIsSUFBSVksT0FBT1osRUFBRUUsZ0JBQWdCO1FBQzdCLElBQUlVLFNBQVNaLEdBQUc7WUFBRTtRQUFRO1FBQzFCLElBQUlhLE9BQU9iLEVBQUVHLFlBQVk7UUFDekJTLEtBQUtULFlBQVksR0FBR1U7UUFDcEJBLEtBQUtYLGdCQUFnQixHQUFHVTtRQUN4QlosRUFBRUUsZ0JBQWdCLEdBQUdGLEVBQUVHLFlBQVksR0FBR0g7UUFDdENOLE1BQU1PLE1BQU0sQ0FBQ0wsV0FBV0csS0FBSyxDQUFDQztJQUNsQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BtYXRocGl4L2RvbWluby9saWIvTGlua2VkTGlzdC5qcz9kZTRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgTGlua2VkTGlzdCA9IG1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8vIGJhc2ljIHZhbGlkaXR5IHRlc3RzIG9uIGEgY2lyY3VsYXIgbGlua2VkIGxpc3QgYVxuICAgIHZhbGlkOiBmdW5jdGlvbihhKSB7XG4gICAgICAgIHV0aWxzLmFzc2VydChhLCBcImxpc3QgZmFsc3lcIik7XG4gICAgICAgIHV0aWxzLmFzc2VydChhLl9wcmV2aW91c1NpYmxpbmcsIFwicHJldmlvdXMgZmFsc3lcIik7XG4gICAgICAgIHV0aWxzLmFzc2VydChhLl9uZXh0U2libGluZywgXCJuZXh0IGZhbHN5XCIpO1xuICAgICAgICAvLyB4eHggY2hlY2sgdGhhdCBsaXN0IGlzIGFjdHVhbGx5IGNpcmN1bGFyXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgLy8gaW5zZXJ0IGEgYmVmb3JlIGJcbiAgICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgdXRpbHMuYXNzZXJ0KExpbmtlZExpc3QudmFsaWQoYSkgJiYgTGlua2VkTGlzdC52YWxpZChiKSk7XG4gICAgICAgIHZhciBhX2ZpcnN0ID0gYSwgYV9sYXN0ID0gYS5fcHJldmlvdXNTaWJsaW5nO1xuICAgICAgICB2YXIgYl9maXJzdCA9IGIsIGJfbGFzdCA9IGIuX3ByZXZpb3VzU2libGluZztcbiAgICAgICAgYV9maXJzdC5fcHJldmlvdXNTaWJsaW5nID0gYl9sYXN0O1xuICAgICAgICBhX2xhc3QuX25leHRTaWJsaW5nID0gYl9maXJzdDtcbiAgICAgICAgYl9sYXN0Ll9uZXh0U2libGluZyA9IGFfZmlyc3Q7XG4gICAgICAgIGJfZmlyc3QuX3ByZXZpb3VzU2libGluZyA9IGFfbGFzdDtcbiAgICAgICAgdXRpbHMuYXNzZXJ0KExpbmtlZExpc3QudmFsaWQoYSkgJiYgTGlua2VkTGlzdC52YWxpZChiKSk7XG4gICAgfSxcbiAgICAvLyByZXBsYWNlIGEgc2luZ2xlIG5vZGUgYSB3aXRoIGEgbGlzdCBiICh3aGljaCBjb3VsZCBiZSBudWxsKVxuICAgIHJlcGxhY2U6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgdXRpbHMuYXNzZXJ0KExpbmtlZExpc3QudmFsaWQoYSkgJiYgKGI9PT1udWxsIHx8IExpbmtlZExpc3QudmFsaWQoYikpKTtcbiAgICAgICAgaWYgKGIhPT1udWxsKSB7XG4gICAgICAgICAgICBMaW5rZWRMaXN0Lmluc2VydEJlZm9yZShiLCBhKTtcbiAgICAgICAgfVxuICAgICAgICBMaW5rZWRMaXN0LnJlbW92ZShhKTtcbiAgICAgICAgdXRpbHMuYXNzZXJ0KExpbmtlZExpc3QudmFsaWQoYSkgJiYgKGI9PT1udWxsIHx8IExpbmtlZExpc3QudmFsaWQoYikpKTtcbiAgICB9LFxuICAgIC8vIHJlbW92ZSBzaW5nbGUgbm9kZSBhIGZyb20gaXRzIGxpc3RcbiAgICByZW1vdmU6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgdXRpbHMuYXNzZXJ0KExpbmtlZExpc3QudmFsaWQoYSkpO1xuICAgICAgICB2YXIgcHJldiA9IGEuX3ByZXZpb3VzU2libGluZztcbiAgICAgICAgaWYgKHByZXYgPT09IGEpIHsgcmV0dXJuOyB9XG4gICAgICAgIHZhciBuZXh0ID0gYS5fbmV4dFNpYmxpbmc7XG4gICAgICAgIHByZXYuX25leHRTaWJsaW5nID0gbmV4dDtcbiAgICAgICAgbmV4dC5fcHJldmlvdXNTaWJsaW5nID0gcHJldjtcbiAgICAgICAgYS5fcHJldmlvdXNTaWJsaW5nID0gYS5fbmV4dFNpYmxpbmcgPSBhO1xuICAgICAgICB1dGlscy5hc3NlcnQoTGlua2VkTGlzdC52YWxpZChhKSk7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJMaW5rZWRMaXN0IiwibW9kdWxlIiwiZXhwb3J0cyIsInZhbGlkIiwiYSIsImFzc2VydCIsIl9wcmV2aW91c1NpYmxpbmciLCJfbmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJiIiwiYV9maXJzdCIsImFfbGFzdCIsImJfZmlyc3QiLCJiX2xhc3QiLCJyZXBsYWNlIiwicmVtb3ZlIiwicHJldiIsIm5leHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/LinkedList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/Location.js":
/*!******************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/Location.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar URL = __webpack_require__(/*! ./URL */ \"(ssr)/./node_modules/@mathpix/domino/lib/URL.js\");\nvar URLUtils = __webpack_require__(/*! ./URLUtils */ \"(ssr)/./node_modules/@mathpix/domino/lib/URLUtils.js\");\nmodule.exports = Location;\nfunction Location(window, href) {\n    this._window = window;\n    this._href = href;\n}\nLocation.prototype = Object.create(URLUtils.prototype, {\n    constructor: {\n        value: Location\n    },\n    // Special behavior when href is set\n    href: {\n        get: function() {\n            return this._href;\n        },\n        set: function(v) {\n            this.assign(v);\n        }\n    },\n    assign: {\n        value: function(url) {\n            // Resolve the new url against the current one\n            // XXX:\n            // This is not actually correct. It should be resolved against\n            // the URL of the document of the script. For now, though, I only\n            // support a single window and there is only one base url.\n            // So this is good enough for now.\n            var current = new URL(this._href);\n            var newurl = current.resolve(url);\n            // Save the new url\n            this._href = newurl;\n        // Start loading the new document!\n        // XXX\n        // This is just something hacked together.\n        // The real algorithm is: http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#navigate\n        }\n    },\n    replace: {\n        value: function(url) {\n            // XXX\n            // Since we aren't tracking history yet, replace is the same as assign\n            this.assign(url);\n        }\n    },\n    reload: {\n        value: function() {\n            // XXX:\n            // Actually, the spec is a lot more complicated than this\n            this.assign(this.href);\n        }\n    },\n    toString: {\n        value: function() {\n            return this.href;\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Mb2NhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLE1BQU1DLG1CQUFPQSxDQUFDO0FBQ2xCLElBQUlDLFdBQVdELG1CQUFPQSxDQUFDO0FBRXZCRSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLFNBQVNBLFNBQVNDLE1BQU0sRUFBRUMsSUFBSTtJQUM1QixJQUFJLENBQUNDLE9BQU8sR0FBR0Y7SUFDZixJQUFJLENBQUNHLEtBQUssR0FBR0Y7QUFDZjtBQUVBRixTQUFTSyxTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ1YsU0FBU1EsU0FBUyxFQUFFO0lBQ3JERyxhQUFhO1FBQUVDLE9BQU9UO0lBQVM7SUFFL0Isb0NBQW9DO0lBQ3BDRSxNQUFNO1FBQ0pRLEtBQUs7WUFBYSxPQUFPLElBQUksQ0FBQ04sS0FBSztRQUFFO1FBQ3JDTyxLQUFLLFNBQVNDLENBQUM7WUFBSSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0Q7UUFBSTtJQUNyQztJQUVBQyxRQUFRO1FBQUVKLE9BQU8sU0FBU0ssR0FBRztZQUMzQiw4Q0FBOEM7WUFDOUMsT0FBTztZQUNQLDhEQUE4RDtZQUM5RCxpRUFBaUU7WUFDakUsMERBQTBEO1lBQzFELGtDQUFrQztZQUNsQyxJQUFJQyxVQUFVLElBQUlwQixJQUFJLElBQUksQ0FBQ1MsS0FBSztZQUNoQyxJQUFJWSxTQUFTRCxRQUFRRSxPQUFPLENBQUNIO1lBRTdCLG1CQUFtQjtZQUNuQixJQUFJLENBQUNWLEtBQUssR0FBR1k7UUFFYixrQ0FBa0M7UUFDbEMsTUFBTTtRQUNOLDBDQUEwQztRQUMxQywyR0FBMkc7UUFDN0c7SUFBQztJQUVERSxTQUFTO1FBQUVULE9BQU8sU0FBU0ssR0FBRztZQUM1QixNQUFNO1lBQ04sc0VBQXNFO1lBQ3RFLElBQUksQ0FBQ0QsTUFBTSxDQUFDQztRQUNkO0lBQUM7SUFFREssUUFBUTtRQUFFVixPQUFPO1lBQ2YsT0FBTztZQUNQLHlEQUF5RDtZQUN6RCxJQUFJLENBQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUNYLElBQUk7UUFDdkI7SUFBQztJQUVEa0IsVUFBVTtRQUFFWCxPQUFPO1lBQ2pCLE9BQU8sSUFBSSxDQUFDUCxJQUFJO1FBQ2xCO0lBQUM7QUFFSCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbWF0aHBpeC9kb21pbm8vbGliL0xvY2F0aW9uLmpzPzExMzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgVVJMID0gcmVxdWlyZSgnLi9VUkwnKTtcbnZhciBVUkxVdGlscyA9IHJlcXVpcmUoJy4vVVJMVXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2NhdGlvbjtcblxuZnVuY3Rpb24gTG9jYXRpb24od2luZG93LCBocmVmKSB7XG4gIHRoaXMuX3dpbmRvdyA9IHdpbmRvdztcbiAgdGhpcy5faHJlZiA9IGhyZWY7XG59XG5cbkxvY2F0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVVJMVXRpbHMucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBMb2NhdGlvbiB9LFxuXG4gIC8vIFNwZWNpYWwgYmVoYXZpb3Igd2hlbiBocmVmIGlzIHNldFxuICBocmVmOiB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX2hyZWY7IH0sXG4gICAgc2V0OiBmdW5jdGlvbih2KSB7IHRoaXMuYXNzaWduKHYpOyB9XG4gIH0sXG5cbiAgYXNzaWduOiB7IHZhbHVlOiBmdW5jdGlvbih1cmwpIHtcbiAgICAvLyBSZXNvbHZlIHRoZSBuZXcgdXJsIGFnYWluc3QgdGhlIGN1cnJlbnQgb25lXG4gICAgLy8gWFhYOlxuICAgIC8vIFRoaXMgaXMgbm90IGFjdHVhbGx5IGNvcnJlY3QuIEl0IHNob3VsZCBiZSByZXNvbHZlZCBhZ2FpbnN0XG4gICAgLy8gdGhlIFVSTCBvZiB0aGUgZG9jdW1lbnQgb2YgdGhlIHNjcmlwdC4gRm9yIG5vdywgdGhvdWdoLCBJIG9ubHlcbiAgICAvLyBzdXBwb3J0IGEgc2luZ2xlIHdpbmRvdyBhbmQgdGhlcmUgaXMgb25seSBvbmUgYmFzZSB1cmwuXG4gICAgLy8gU28gdGhpcyBpcyBnb29kIGVub3VnaCBmb3Igbm93LlxuICAgIHZhciBjdXJyZW50ID0gbmV3IFVSTCh0aGlzLl9ocmVmKTtcbiAgICB2YXIgbmV3dXJsID0gY3VycmVudC5yZXNvbHZlKHVybCk7XG5cbiAgICAvLyBTYXZlIHRoZSBuZXcgdXJsXG4gICAgdGhpcy5faHJlZiA9IG5ld3VybDtcblxuICAgIC8vIFN0YXJ0IGxvYWRpbmcgdGhlIG5ldyBkb2N1bWVudCFcbiAgICAvLyBYWFhcbiAgICAvLyBUaGlzIGlzIGp1c3Qgc29tZXRoaW5nIGhhY2tlZCB0b2dldGhlci5cbiAgICAvLyBUaGUgcmVhbCBhbGdvcml0aG0gaXM6IGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2hpc3RvcnkuaHRtbCNuYXZpZ2F0ZVxuICB9fSxcblxuICByZXBsYWNlOiB7IHZhbHVlOiBmdW5jdGlvbih1cmwpIHtcbiAgICAvLyBYWFhcbiAgICAvLyBTaW5jZSB3ZSBhcmVuJ3QgdHJhY2tpbmcgaGlzdG9yeSB5ZXQsIHJlcGxhY2UgaXMgdGhlIHNhbWUgYXMgYXNzaWduXG4gICAgdGhpcy5hc3NpZ24odXJsKTtcbiAgfX0sXG5cbiAgcmVsb2FkOiB7IHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAvLyBYWFg6XG4gICAgLy8gQWN0dWFsbHksIHRoZSBzcGVjIGlzIGEgbG90IG1vcmUgY29tcGxpY2F0ZWQgdGhhbiB0aGlzXG4gICAgdGhpcy5hc3NpZ24odGhpcy5ocmVmKTtcbiAgfX0sXG5cbiAgdG9TdHJpbmc6IHsgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmhyZWY7XG4gIH19XG5cbn0pO1xuIl0sIm5hbWVzIjpbIlVSTCIsInJlcXVpcmUiLCJVUkxVdGlscyIsIm1vZHVsZSIsImV4cG9ydHMiLCJMb2NhdGlvbiIsIndpbmRvdyIsImhyZWYiLCJfd2luZG93IiwiX2hyZWYiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZ2V0Iiwic2V0IiwidiIsImFzc2lnbiIsInVybCIsImN1cnJlbnQiLCJuZXd1cmwiLCJyZXNvbHZlIiwicmVwbGFjZSIsInJlbG9hZCIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/Location.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/MouseEvent.js":
/*!********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/MouseEvent.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar UIEvent = __webpack_require__(/*! ./UIEvent */ \"(ssr)/./node_modules/@mathpix/domino/lib/UIEvent.js\");\nmodule.exports = MouseEvent;\nfunction MouseEvent() {\n    // Just use the superclass constructor to initialize\n    UIEvent.call(this);\n    this.screenX = this.screenY = this.clientX = this.clientY = 0;\n    this.ctrlKey = this.altKey = this.shiftKey = this.metaKey = false;\n    this.button = 0;\n    this.buttons = 1;\n    this.relatedTarget = null;\n}\nMouseEvent.prototype = Object.create(UIEvent.prototype, {\n    constructor: {\n        value: MouseEvent\n    },\n    initMouseEvent: {\n        value: function(type, bubbles, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget) {\n            this.initEvent(type, bubbles, cancelable, view, detail);\n            this.screenX = screenX;\n            this.screenY = screenY;\n            this.clientX = clientX;\n            this.clientY = clientY;\n            this.ctrlKey = ctrlKey;\n            this.altKey = altKey;\n            this.shiftKey = shiftKey;\n            this.metaKey = metaKey;\n            this.button = button;\n            switch(button){\n                case 0:\n                    this.buttons = 1;\n                    break;\n                case 1:\n                    this.buttons = 4;\n                    break;\n                case 2:\n                    this.buttons = 2;\n                    break;\n                default:\n                    this.buttons = 0;\n                    break;\n            }\n            this.relatedTarget = relatedTarget;\n        }\n    },\n    getModifierState: {\n        value: function(key) {\n            switch(key){\n                case \"Alt\":\n                    return this.altKey;\n                case \"Control\":\n                    return this.ctrlKey;\n                case \"Shift\":\n                    return this.shiftKey;\n                case \"Meta\":\n                    return this.metaKey;\n                default:\n                    return false;\n            }\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Nb3VzZUV2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUM7QUFFdEJDLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsU0FBU0E7SUFDUCxvREFBb0Q7SUFDcERKLFFBQVFLLElBQUksQ0FBQyxJQUFJO0lBRWpCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUksQ0FBQ0MsT0FBTyxHQUFHO0lBQzVELElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUksQ0FBQ0MsT0FBTyxHQUFHO0lBQzVELElBQUksQ0FBQ0MsTUFBTSxHQUFHO0lBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDZixJQUFJLENBQUNDLGFBQWEsR0FBRztBQUN2QjtBQUNBWixXQUFXYSxTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ25CLFFBQVFpQixTQUFTLEVBQUU7SUFDdERHLGFBQWE7UUFBRUMsT0FBT2pCO0lBQVc7SUFDakNrQixnQkFBZ0I7UUFBRUQsT0FBTyxTQUFTRSxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxFQUN6REMsSUFBSSxFQUFFQyxNQUFNLEVBQ1pyQixPQUFPLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQ2xDQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQ2xDQyxNQUFNLEVBQUVFLGFBQWE7WUFFckIsSUFBSSxDQUFDWSxTQUFTLENBQUNMLE1BQU1DLFNBQVNDLFlBQVlDLE1BQU1DO1lBQ2hELElBQUksQ0FBQ3JCLE9BQU8sR0FBR0E7WUFDZixJQUFJLENBQUNDLE9BQU8sR0FBR0E7WUFDZixJQUFJLENBQUNDLE9BQU8sR0FBR0E7WUFDZixJQUFJLENBQUNDLE9BQU8sR0FBR0E7WUFDZixJQUFJLENBQUNDLE9BQU8sR0FBR0E7WUFDZixJQUFJLENBQUNDLE1BQU0sR0FBR0E7WUFDZCxJQUFJLENBQUNDLFFBQVEsR0FBR0E7WUFDaEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1lBQ2YsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1lBQ2QsT0FBT0E7Z0JBQ1AsS0FBSztvQkFBRyxJQUFJLENBQUNDLE9BQU8sR0FBRztvQkFBRztnQkFDMUIsS0FBSztvQkFBRyxJQUFJLENBQUNBLE9BQU8sR0FBRztvQkFBRztnQkFDMUIsS0FBSztvQkFBRyxJQUFJLENBQUNBLE9BQU8sR0FBRztvQkFBRztnQkFDMUI7b0JBQVMsSUFBSSxDQUFDQSxPQUFPLEdBQUc7b0JBQUc7WUFDM0I7WUFDQSxJQUFJLENBQUNDLGFBQWEsR0FBR0E7UUFDdkI7SUFBQztJQUVEYSxrQkFBa0I7UUFBRVIsT0FBTyxTQUFTUyxHQUFHO1lBQ3JDLE9BQU9BO2dCQUNQLEtBQUs7b0JBQU8sT0FBTyxJQUFJLENBQUNuQixNQUFNO2dCQUM5QixLQUFLO29CQUFXLE9BQU8sSUFBSSxDQUFDRCxPQUFPO2dCQUNuQyxLQUFLO29CQUFTLE9BQU8sSUFBSSxDQUFDRSxRQUFRO2dCQUNsQyxLQUFLO29CQUFRLE9BQU8sSUFBSSxDQUFDQyxPQUFPO2dCQUNoQztvQkFBUyxPQUFPO1lBQ2hCO1FBQ0Y7SUFBQztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BtYXRocGl4L2RvbWluby9saWIvTW91c2VFdmVudC5qcz9kMWU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIFVJRXZlbnQgPSByZXF1aXJlKCcuL1VJRXZlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb3VzZUV2ZW50O1xuXG5mdW5jdGlvbiBNb3VzZUV2ZW50KCkge1xuICAvLyBKdXN0IHVzZSB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3RvciB0byBpbml0aWFsaXplXG4gIFVJRXZlbnQuY2FsbCh0aGlzKTtcblxuICB0aGlzLnNjcmVlblggPSB0aGlzLnNjcmVlblkgPSB0aGlzLmNsaWVudFggPSB0aGlzLmNsaWVudFkgPSAwO1xuICB0aGlzLmN0cmxLZXkgPSB0aGlzLmFsdEtleSA9IHRoaXMuc2hpZnRLZXkgPSB0aGlzLm1ldGFLZXkgPSBmYWxzZTtcbiAgdGhpcy5idXR0b24gPSAwO1xuICB0aGlzLmJ1dHRvbnMgPSAxO1xuICB0aGlzLnJlbGF0ZWRUYXJnZXQgPSBudWxsO1xufVxuTW91c2VFdmVudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFVJRXZlbnQucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBNb3VzZUV2ZW50IH0sXG4gIGluaXRNb3VzZUV2ZW50OiB7IHZhbHVlOiBmdW5jdGlvbih0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlLFxuICAgIHZpZXcsIGRldGFpbCxcbiAgICBzY3JlZW5YLCBzY3JlZW5ZLCBjbGllbnRYLCBjbGllbnRZLFxuICAgIGN0cmxLZXksIGFsdEtleSwgc2hpZnRLZXksIG1ldGFLZXksXG4gICAgYnV0dG9uLCByZWxhdGVkVGFyZ2V0KSB7XG5cbiAgICB0aGlzLmluaXRFdmVudCh0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlLCB2aWV3LCBkZXRhaWwpO1xuICAgIHRoaXMuc2NyZWVuWCA9IHNjcmVlblg7XG4gICAgdGhpcy5zY3JlZW5ZID0gc2NyZWVuWTtcbiAgICB0aGlzLmNsaWVudFggPSBjbGllbnRYO1xuICAgIHRoaXMuY2xpZW50WSA9IGNsaWVudFk7XG4gICAgdGhpcy5jdHJsS2V5ID0gY3RybEtleTtcbiAgICB0aGlzLmFsdEtleSA9IGFsdEtleTtcbiAgICB0aGlzLnNoaWZ0S2V5ID0gc2hpZnRLZXk7XG4gICAgdGhpcy5tZXRhS2V5ID0gbWV0YUtleTtcbiAgICB0aGlzLmJ1dHRvbiA9IGJ1dHRvbjtcbiAgICBzd2l0Y2goYnV0dG9uKSB7XG4gICAgY2FzZSAwOiB0aGlzLmJ1dHRvbnMgPSAxOyBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMuYnV0dG9ucyA9IDQ7IGJyZWFrO1xuICAgIGNhc2UgMjogdGhpcy5idXR0b25zID0gMjsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5idXR0b25zID0gMDsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMucmVsYXRlZFRhcmdldCA9IHJlbGF0ZWRUYXJnZXQ7XG4gIH19LFxuXG4gIGdldE1vZGlmaWVyU3RhdGU6IHsgdmFsdWU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHN3aXRjaChrZXkpIHtcbiAgICBjYXNlIFwiQWx0XCI6IHJldHVybiB0aGlzLmFsdEtleTtcbiAgICBjYXNlIFwiQ29udHJvbFwiOiByZXR1cm4gdGhpcy5jdHJsS2V5O1xuICAgIGNhc2UgXCJTaGlmdFwiOiByZXR1cm4gdGhpcy5zaGlmdEtleTtcbiAgICBjYXNlIFwiTWV0YVwiOiByZXR1cm4gdGhpcy5tZXRhS2V5O1xuICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH19XG59KTtcbiJdLCJuYW1lcyI6WyJVSUV2ZW50IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJNb3VzZUV2ZW50IiwiY2FsbCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJjdHJsS2V5IiwiYWx0S2V5Iiwic2hpZnRLZXkiLCJtZXRhS2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiaW5pdE1vdXNlRXZlbnQiLCJ0eXBlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ2aWV3IiwiZGV0YWlsIiwiaW5pdEV2ZW50IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/MouseEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/MutationConstants.js":
/*!***************************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/MutationConstants.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    VALUE: 1,\n    ATTR: 2,\n    REMOVE_ATTR: 3,\n    REMOVE: 4,\n    MOVE: 5,\n    INSERT: 6 // A node (or a subtree of nodes) was inserted\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9NdXRhdGlvbkNvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsT0FBTztJQUNQQyxNQUFNO0lBQ05DLGFBQWE7SUFDYkMsUUFBUTtJQUNSQyxNQUFNO0lBQ05DLFFBQVEsRUFBRSw4Q0FBOEM7QUFDMUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9NdXRhdGlvbkNvbnN0YW50cy5qcz83YzNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFZBTFVFOiAxLCAvLyBUaGUgdmFsdWUgb2YgYSBUZXh0LCBDb21tZW50IG9yIFBJIG5vZGUgY2hhbmdlZFxuICBBVFRSOiAyLCAvLyBBIG5ldyBhdHRyaWJ1dGUgd2FzIGFkZGVkIG9yIGFuIGF0dHJpYnV0ZSB2YWx1ZSBhbmQvb3IgcHJlZml4IGNoYW5nZWRcbiAgUkVNT1ZFX0FUVFI6IDMsIC8vIEFuIGF0dHJpYnV0ZSB3YXMgcmVtb3ZlZFxuICBSRU1PVkU6IDQsIC8vIEEgbm9kZSB3YXMgcmVtb3ZlZFxuICBNT1ZFOiA1LCAvLyBBIG5vZGUgd2FzIG1vdmVkXG4gIElOU0VSVDogNiAvLyBBIG5vZGUgKG9yIGEgc3VidHJlZSBvZiBub2Rlcykgd2FzIGluc2VydGVkXG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiVkFMVUUiLCJBVFRSIiwiUkVNT1ZFX0FUVFIiLCJSRU1PVkUiLCJNT1ZFIiwiSU5TRVJUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/MutationConstants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/NamedNodeMap.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/NamedNodeMap.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = NamedNodeMap;\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\n/* This is a hacky implementation of NamedNodeMap, intended primarily to\n * satisfy clients (like dompurify and the web-platform-tests) which check\n * to ensure that Node#attributes instanceof NamedNodeMap. */ function NamedNodeMap(element) {\n    this.element = element;\n}\nObject.defineProperties(NamedNodeMap.prototype, {\n    length: {\n        get: utils.shouldOverride\n    },\n    item: {\n        value: utils.shouldOverride\n    },\n    getNamedItem: {\n        value: function getNamedItem(qualifiedName) {\n            return this.element.getAttributeNode(qualifiedName);\n        }\n    },\n    getNamedItemNS: {\n        value: function getNamedItemNS(namespace, localName) {\n            return this.element.getAttributeNodeNS(namespace, localName);\n        }\n    },\n    setNamedItem: {\n        value: utils.nyi\n    },\n    setNamedItemNS: {\n        value: utils.nyi\n    },\n    removeNamedItem: {\n        value: function removeNamedItem(qualifiedName) {\n            var attr = this.element.getAttributeNode(qualifiedName);\n            if (attr) {\n                this.element.removeAttribute(qualifiedName);\n                return attr;\n            }\n            utils.NotFoundError();\n        }\n    },\n    removeNamedItemNS: {\n        value: function removeNamedItemNS(ns, lname) {\n            var attr = this.element.getAttributeNodeNS(ns, lname);\n            if (attr) {\n                this.element.removeAttributeNS(ns, lname);\n                return attr;\n            }\n            utils.NotFoundError();\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9OYW1lZE5vZGVNYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixJQUFJQyxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQjs7MkRBRTJELEdBRTNELFNBQVNGLGFBQWFHLE9BQU87SUFDM0IsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0FBQ2pCO0FBQ0FDLE9BQU9DLGdCQUFnQixDQUFDTCxhQUFhTSxTQUFTLEVBQUU7SUFDOUNDLFFBQVE7UUFBRUMsS0FBS1AsTUFBTVEsY0FBYztJQUFDO0lBQ3BDQyxNQUFNO1FBQUVDLE9BQU9WLE1BQU1RLGNBQWM7SUFBQztJQUVwQ0csY0FBYztRQUFFRCxPQUFPLFNBQVNDLGFBQWFDLGFBQWE7WUFDeEQsT0FBTyxJQUFJLENBQUNWLE9BQU8sQ0FBQ1csZ0JBQWdCLENBQUNEO1FBQ3ZDO0lBQUU7SUFDRkUsZ0JBQWdCO1FBQUVKLE9BQU8sU0FBU0ksZUFBZUMsU0FBUyxFQUFFQyxTQUFTO1lBQ25FLE9BQU8sSUFBSSxDQUFDZCxPQUFPLENBQUNlLGtCQUFrQixDQUFDRixXQUFXQztRQUNwRDtJQUFFO0lBQ0ZFLGNBQWM7UUFBRVIsT0FBT1YsTUFBTW1CLEdBQUc7SUFBQztJQUNqQ0MsZ0JBQWdCO1FBQUVWLE9BQU9WLE1BQU1tQixHQUFHO0lBQUM7SUFDbkNFLGlCQUFpQjtRQUFFWCxPQUFPLFNBQVNXLGdCQUFnQlQsYUFBYTtZQUM5RCxJQUFJVSxPQUFPLElBQUksQ0FBQ3BCLE9BQU8sQ0FBQ1csZ0JBQWdCLENBQUNEO1lBQ3pDLElBQUlVLE1BQU07Z0JBQ1IsSUFBSSxDQUFDcEIsT0FBTyxDQUFDcUIsZUFBZSxDQUFDWDtnQkFDN0IsT0FBT1U7WUFDVDtZQUNBdEIsTUFBTXdCLGFBQWE7UUFDckI7SUFBRTtJQUNGQyxtQkFBbUI7UUFBRWYsT0FBTyxTQUFTZSxrQkFBa0JDLEVBQUUsRUFBRUMsS0FBSztZQUM5RCxJQUFJTCxPQUFPLElBQUksQ0FBQ3BCLE9BQU8sQ0FBQ2Usa0JBQWtCLENBQUNTLElBQUlDO1lBQy9DLElBQUlMLE1BQU07Z0JBQ1IsSUFBSSxDQUFDcEIsT0FBTyxDQUFDMEIsaUJBQWlCLENBQUNGLElBQUlDO2dCQUNuQyxPQUFPTDtZQUNUO1lBQ0F0QixNQUFNd0IsYUFBYTtRQUNyQjtJQUFFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9OYW1lZE5vZGVNYXAuanM/ZDBkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gTmFtZWROb2RlTWFwO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8qIFRoaXMgaXMgYSBoYWNreSBpbXBsZW1lbnRhdGlvbiBvZiBOYW1lZE5vZGVNYXAsIGludGVuZGVkIHByaW1hcmlseSB0b1xuICogc2F0aXNmeSBjbGllbnRzIChsaWtlIGRvbXB1cmlmeSBhbmQgdGhlIHdlYi1wbGF0Zm9ybS10ZXN0cykgd2hpY2ggY2hlY2tcbiAqIHRvIGVuc3VyZSB0aGF0IE5vZGUjYXR0cmlidXRlcyBpbnN0YW5jZW9mIE5hbWVkTm9kZU1hcC4gKi9cblxuZnVuY3Rpb24gTmFtZWROb2RlTWFwKGVsZW1lbnQpIHtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE5hbWVkTm9kZU1hcC5wcm90b3R5cGUsIHtcbiAgbGVuZ3RoOiB7IGdldDogdXRpbHMuc2hvdWxkT3ZlcnJpZGUgfSxcbiAgaXRlbTogeyB2YWx1ZTogdXRpbHMuc2hvdWxkT3ZlcnJpZGUgfSxcblxuICBnZXROYW1lZEl0ZW06IHsgdmFsdWU6IGZ1bmN0aW9uIGdldE5hbWVkSXRlbShxdWFsaWZpZWROYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGVOb2RlKHF1YWxpZmllZE5hbWUpO1xuICB9IH0sXG4gIGdldE5hbWVkSXRlbU5TOiB7IHZhbHVlOiBmdW5jdGlvbiBnZXROYW1lZEl0ZW1OUyhuYW1lc3BhY2UsIGxvY2FsTmFtZSkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZSwgbG9jYWxOYW1lKTtcbiAgfSB9LFxuICBzZXROYW1lZEl0ZW06IHsgdmFsdWU6IHV0aWxzLm55aSB9LFxuICBzZXROYW1lZEl0ZW1OUzogeyB2YWx1ZTogdXRpbHMubnlpIH0sXG4gIHJlbW92ZU5hbWVkSXRlbTogeyB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTmFtZWRJdGVtKHF1YWxpZmllZE5hbWUpIHtcbiAgICB2YXIgYXR0ciA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGVOb2RlKHF1YWxpZmllZE5hbWUpO1xuICAgIGlmIChhdHRyKSB7XG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHF1YWxpZmllZE5hbWUpO1xuICAgICAgcmV0dXJuIGF0dHI7XG4gICAgfVxuICAgIHV0aWxzLk5vdEZvdW5kRXJyb3IoKTtcbiAgfSB9LFxuICByZW1vdmVOYW1lZEl0ZW1OUzogeyB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTmFtZWRJdGVtTlMobnMsIGxuYW1lKSB7XG4gICAgdmFyIGF0dHIgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlTm9kZU5TKG5zLCBsbmFtZSk7XG4gICAgaWYgKGF0dHIpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGVOUyhucywgbG5hbWUpO1xuICAgICAgcmV0dXJuIGF0dHI7XG4gICAgfVxuICAgIHV0aWxzLk5vdEZvdW5kRXJyb3IoKTtcbiAgfSB9LFxufSk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIk5hbWVkTm9kZU1hcCIsInV0aWxzIiwicmVxdWlyZSIsImVsZW1lbnQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvdG90eXBlIiwibGVuZ3RoIiwiZ2V0Iiwic2hvdWxkT3ZlcnJpZGUiLCJpdGVtIiwidmFsdWUiLCJnZXROYW1lZEl0ZW0iLCJxdWFsaWZpZWROYW1lIiwiZ2V0QXR0cmlidXRlTm9kZSIsImdldE5hbWVkSXRlbU5TIiwibmFtZXNwYWNlIiwibG9jYWxOYW1lIiwiZ2V0QXR0cmlidXRlTm9kZU5TIiwic2V0TmFtZWRJdGVtIiwibnlpIiwic2V0TmFtZWRJdGVtTlMiLCJyZW1vdmVOYW1lZEl0ZW0iLCJhdHRyIiwicmVtb3ZlQXR0cmlidXRlIiwiTm90Rm91bmRFcnJvciIsInJlbW92ZU5hbWVkSXRlbU5TIiwibnMiLCJsbmFtZSIsInJlbW92ZUF0dHJpYnV0ZU5TIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/NamedNodeMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/NavigatorID.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/NavigatorID.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("\n// https://html.spec.whatwg.org/multipage/webappapis.html#navigatorid\nvar NavigatorID = Object.create(null, {\n    appCodeName: {\n        value: \"Mozilla\"\n    },\n    appName: {\n        value: \"Netscape\"\n    },\n    appVersion: {\n        value: \"4.0\"\n    },\n    platform: {\n        value: \"\"\n    },\n    product: {\n        value: \"Gecko\"\n    },\n    productSub: {\n        value: \"20100101\"\n    },\n    userAgent: {\n        value: \"\"\n    },\n    vendor: {\n        value: \"\"\n    },\n    vendorSub: {\n        value: \"\"\n    },\n    taintEnabled: {\n        value: function() {\n            return false;\n        }\n    }\n});\nmodule.exports = NavigatorID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9OYXZpZ2F0b3JJRC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLHFFQUFxRTtBQUNyRSxJQUFJQSxjQUFjQyxPQUFPQyxNQUFNLENBQUMsTUFBTTtJQUNwQ0MsYUFBYTtRQUFFQyxPQUFPO0lBQVU7SUFDaENDLFNBQVM7UUFBRUQsT0FBTztJQUFXO0lBQzdCRSxZQUFZO1FBQUVGLE9BQU87SUFBTTtJQUMzQkcsVUFBVTtRQUFFSCxPQUFPO0lBQUc7SUFDdEJJLFNBQVM7UUFBRUosT0FBTztJQUFRO0lBQzFCSyxZQUFZO1FBQUVMLE9BQU87SUFBVztJQUNoQ00sV0FBVztRQUFFTixPQUFPO0lBQUc7SUFDdkJPLFFBQVE7UUFBRVAsT0FBTztJQUFHO0lBQ3BCUSxXQUFXO1FBQUVSLE9BQU87SUFBRztJQUN2QlMsY0FBYztRQUFFVCxPQUFPO1lBQWEsT0FBTztRQUFPO0lBQUU7QUFDdEQ7QUFFQVUsT0FBT0MsT0FBTyxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbWF0aHBpeC9kb21pbm8vbGliL05hdmlnYXRvcklELmpzPzc1YzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dlYmFwcGFwaXMuaHRtbCNuYXZpZ2F0b3JpZFxudmFyIE5hdmlnYXRvcklEID0gT2JqZWN0LmNyZWF0ZShudWxsLCB7XG4gIGFwcENvZGVOYW1lOiB7IHZhbHVlOiBcIk1vemlsbGFcIiB9LFxuICBhcHBOYW1lOiB7IHZhbHVlOiBcIk5ldHNjYXBlXCIgfSxcbiAgYXBwVmVyc2lvbjogeyB2YWx1ZTogXCI0LjBcIiB9LFxuICBwbGF0Zm9ybTogeyB2YWx1ZTogXCJcIiB9LFxuICBwcm9kdWN0OiB7IHZhbHVlOiBcIkdlY2tvXCIgfSxcbiAgcHJvZHVjdFN1YjogeyB2YWx1ZTogXCIyMDEwMDEwMVwiIH0sXG4gIHVzZXJBZ2VudDogeyB2YWx1ZTogXCJcIiB9LFxuICB2ZW5kb3I6IHsgdmFsdWU6IFwiXCIgfSxcbiAgdmVuZG9yU3ViOiB7IHZhbHVlOiBcIlwiIH0sXG4gIHRhaW50RW5hYmxlZDogeyB2YWx1ZTogZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfSB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBOYXZpZ2F0b3JJRDtcbiJdLCJuYW1lcyI6WyJOYXZpZ2F0b3JJRCIsIk9iamVjdCIsImNyZWF0ZSIsImFwcENvZGVOYW1lIiwidmFsdWUiLCJhcHBOYW1lIiwiYXBwVmVyc2lvbiIsInBsYXRmb3JtIiwicHJvZHVjdCIsInByb2R1Y3RTdWIiLCJ1c2VyQWdlbnQiLCJ2ZW5kb3IiLCJ2ZW5kb3JTdWIiLCJ0YWludEVuYWJsZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/NavigatorID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/Node.js":
/*!**************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/Node.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Node;\nvar EventTarget = __webpack_require__(/*! ./EventTarget */ \"(ssr)/./node_modules/@mathpix/domino/lib/EventTarget.js\");\nvar LinkedList = __webpack_require__(/*! ./LinkedList */ \"(ssr)/./node_modules/@mathpix/domino/lib/LinkedList.js\");\nvar NodeUtils = __webpack_require__(/*! ./NodeUtils */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeUtils.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\n// All nodes have a nodeType and an ownerDocument.\n// Once inserted, they also have a parentNode.\n// This is an abstract class; all nodes in a document are instances\n// of a subtype, so all the properties are defined by more specific\n// constructors.\nfunction Node() {\n    EventTarget.call(this);\n    this.parentNode = null;\n    this._nextSibling = this._previousSibling = this;\n    this._index = undefined;\n}\nvar ELEMENT_NODE = Node.ELEMENT_NODE = 1;\nvar ATTRIBUTE_NODE = Node.ATTRIBUTE_NODE = 2;\nvar TEXT_NODE = Node.TEXT_NODE = 3;\nvar CDATA_SECTION_NODE = Node.CDATA_SECTION_NODE = 4;\nvar ENTITY_REFERENCE_NODE = Node.ENTITY_REFERENCE_NODE = 5;\nvar ENTITY_NODE = Node.ENTITY_NODE = 6;\nvar PROCESSING_INSTRUCTION_NODE = Node.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE = Node.COMMENT_NODE = 8;\nvar DOCUMENT_NODE = Node.DOCUMENT_NODE = 9;\nvar DOCUMENT_TYPE_NODE = Node.DOCUMENT_TYPE_NODE = 10;\nvar DOCUMENT_FRAGMENT_NODE = Node.DOCUMENT_FRAGMENT_NODE = 11;\nvar NOTATION_NODE = Node.NOTATION_NODE = 12;\nvar DOCUMENT_POSITION_DISCONNECTED = Node.DOCUMENT_POSITION_DISCONNECTED = 0x01;\nvar DOCUMENT_POSITION_PRECEDING = Node.DOCUMENT_POSITION_PRECEDING = 0x02;\nvar DOCUMENT_POSITION_FOLLOWING = Node.DOCUMENT_POSITION_FOLLOWING = 0x04;\nvar DOCUMENT_POSITION_CONTAINS = Node.DOCUMENT_POSITION_CONTAINS = 0x08;\nvar DOCUMENT_POSITION_CONTAINED_BY = Node.DOCUMENT_POSITION_CONTAINED_BY = 0x10;\nvar DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;\nNode.prototype = Object.create(EventTarget.prototype, {\n    // Node that are not inserted into the tree inherit a null parent\n    // XXX: the baseURI attribute is defined by dom core, but\n    // a correct implementation of it requires HTML features, so\n    // we'll come back to this later.\n    baseURI: {\n        get: utils.nyi\n    },\n    parentElement: {\n        get: function() {\n            return this.parentNode && this.parentNode.nodeType === ELEMENT_NODE ? this.parentNode : null;\n        }\n    },\n    hasChildNodes: {\n        value: utils.shouldOverride\n    },\n    firstChild: {\n        get: utils.shouldOverride\n    },\n    lastChild: {\n        get: utils.shouldOverride\n    },\n    previousSibling: {\n        get: function() {\n            var parent = this.parentNode;\n            if (!parent) return null;\n            if (this === parent.firstChild) return null;\n            return this._previousSibling;\n        }\n    },\n    nextSibling: {\n        get: function() {\n            var parent = this.parentNode, next = this._nextSibling;\n            if (!parent) return null;\n            if (next === parent.firstChild) return null;\n            return next;\n        }\n    },\n    textContent: {\n        // Should override for DocumentFragment/Element/Attr/Text/PI/Comment\n        get: function() {\n            return null;\n        },\n        set: function(v) {}\n    },\n    _countChildrenOfType: {\n        value: function(type) {\n            var sum = 0;\n            for(var kid = this.firstChild; kid !== null; kid = kid.nextSibling){\n                if (kid.nodeType === type) sum++;\n            }\n            return sum;\n        }\n    },\n    _ensureInsertValid: {\n        value: function _ensureInsertValid(node, child, isPreinsert) {\n            var parent = this, i, kid;\n            if (!node.nodeType) throw new TypeError(\"not a node\");\n            // 1. If parent is not a Document, DocumentFragment, or Element\n            // node, throw a HierarchyRequestError.\n            switch(parent.nodeType){\n                case DOCUMENT_NODE:\n                case DOCUMENT_FRAGMENT_NODE:\n                case ELEMENT_NODE:\n                    break;\n                default:\n                    utils.HierarchyRequestError();\n            }\n            // 2. If node is a host-including inclusive ancestor of parent,\n            // throw a HierarchyRequestError.\n            if (node.isAncestor(parent)) utils.HierarchyRequestError();\n            // 3. If child is not null and its parent is not parent, then\n            // throw a NotFoundError. (replaceChild omits the 'child is not null'\n            // and throws a TypeError here if child is null.)\n            if (child !== null || !isPreinsert) {\n                if (child.parentNode !== parent) utils.NotFoundError();\n            }\n            // 4. If node is not a DocumentFragment, DocumentType, Element,\n            // Text, ProcessingInstruction, or Comment node, throw a\n            // HierarchyRequestError.\n            switch(node.nodeType){\n                case DOCUMENT_FRAGMENT_NODE:\n                case DOCUMENT_TYPE_NODE:\n                case ELEMENT_NODE:\n                case TEXT_NODE:\n                case PROCESSING_INSTRUCTION_NODE:\n                case COMMENT_NODE:\n                    break;\n                default:\n                    utils.HierarchyRequestError();\n            }\n            // 5. If either node is a Text node and parent is a document, or\n            // node is a doctype and parent is not a document, throw a\n            // HierarchyRequestError.\n            // 6. If parent is a document, and any of the statements below, switched\n            // on node, are true, throw a HierarchyRequestError.\n            if (parent.nodeType === DOCUMENT_NODE) {\n                switch(node.nodeType){\n                    case TEXT_NODE:\n                        utils.HierarchyRequestError();\n                        break;\n                    case DOCUMENT_FRAGMENT_NODE:\n                        // 6a1. If node has more than one element child or has a Text\n                        // node child.\n                        if (node._countChildrenOfType(TEXT_NODE) > 0) utils.HierarchyRequestError();\n                        switch(node._countChildrenOfType(ELEMENT_NODE)){\n                            case 0:\n                                break;\n                            case 1:\n                                // 6a2. Otherwise, if node has one element child and either\n                                // parent has an element child, child is a doctype, or child\n                                // is not null and a doctype is following child. [preinsert]\n                                // 6a2. Otherwise, if node has one element child and either\n                                // parent has an element child that is not child or a\n                                // doctype is following child. [replaceWith]\n                                if (child !== null) {\n                                    if (isPreinsert && child.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();\n                                    for(kid = child.nextSibling; kid !== null; kid = kid.nextSibling){\n                                        if (kid.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();\n                                    }\n                                }\n                                i = parent._countChildrenOfType(ELEMENT_NODE);\n                                if (isPreinsert) {\n                                    // \"parent has an element child\"\n                                    if (i > 0) utils.HierarchyRequestError();\n                                } else {\n                                    // \"parent has an element child that is not child\"\n                                    if (i > 1 || i === 1 && child.nodeType !== ELEMENT_NODE) utils.HierarchyRequestError();\n                                }\n                                break;\n                            default:\n                                utils.HierarchyRequestError();\n                        }\n                        break;\n                    case ELEMENT_NODE:\n                        // 6b. parent has an element child, child is a doctype, or\n                        // child is not null and a doctype is following child. [preinsert]\n                        // 6b. parent has an element child that is not child or a\n                        // doctype is following child. [replaceWith]\n                        if (child !== null) {\n                            if (isPreinsert && child.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();\n                            for(kid = child.nextSibling; kid !== null; kid = kid.nextSibling){\n                                if (kid.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();\n                            }\n                        }\n                        i = parent._countChildrenOfType(ELEMENT_NODE);\n                        if (isPreinsert) {\n                            // \"parent has an element child\"\n                            if (i > 0) utils.HierarchyRequestError();\n                        } else {\n                            // \"parent has an element child that is not child\"\n                            if (i > 1 || i === 1 && child.nodeType !== ELEMENT_NODE) utils.HierarchyRequestError();\n                        }\n                        break;\n                    case DOCUMENT_TYPE_NODE:\n                        // 6c. parent has a doctype child, child is non-null and an\n                        // element is preceding child, or child is null and parent has\n                        // an element child. [preinsert]\n                        // 6c. parent has a doctype child that is not child, or an\n                        // element is preceding child. [replaceWith]\n                        if (child === null) {\n                            if (parent._countChildrenOfType(ELEMENT_NODE)) utils.HierarchyRequestError();\n                        } else {\n                            // child is always non-null for [replaceWith] case\n                            for(kid = parent.firstChild; kid !== null; kid = kid.nextSibling){\n                                if (kid === child) break;\n                                if (kid.nodeType === ELEMENT_NODE) utils.HierarchyRequestError();\n                            }\n                        }\n                        i = parent._countChildrenOfType(DOCUMENT_TYPE_NODE);\n                        if (isPreinsert) {\n                            // \"parent has an doctype child\"\n                            if (i > 0) utils.HierarchyRequestError();\n                        } else {\n                            // \"parent has an doctype child that is not child\"\n                            if (i > 1 || i === 1 && child.nodeType !== DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();\n                        }\n                        break;\n                }\n            } else {\n                // 5, continued: (parent is not a document)\n                if (node.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();\n            }\n        }\n    },\n    insertBefore: {\n        value: function insertBefore(node, child) {\n            var parent = this;\n            // 1. Ensure pre-insertion validity\n            parent._ensureInsertValid(node, child, true);\n            // 2. Let reference child be child.\n            var refChild = child;\n            // 3. If reference child is node, set it to node's next sibling\n            if (refChild === node) {\n                refChild = node.nextSibling;\n            }\n            // 4. Adopt node into parent's node document.\n            parent.doc.adoptNode(node);\n            // 5. Insert node into parent before reference child.\n            node._insertOrReplace(parent, refChild, false);\n            // 6. Return node\n            return node;\n        }\n    },\n    appendChild: {\n        value: function(child) {\n            // This invokes _appendChild after doing validity checks.\n            return this.insertBefore(child, null);\n        }\n    },\n    _appendChild: {\n        value: function(child) {\n            child._insertOrReplace(this, null, false);\n        }\n    },\n    removeChild: {\n        value: function removeChild(child) {\n            var parent = this;\n            if (!child.nodeType) throw new TypeError(\"not a node\");\n            if (child.parentNode !== parent) utils.NotFoundError();\n            child.remove();\n            return child;\n        }\n    },\n    // To replace a `child` with `node` within a `parent` (this)\n    replaceChild: {\n        value: function replaceChild(node, child) {\n            var parent = this;\n            // Ensure validity (slight differences from pre-insertion check)\n            parent._ensureInsertValid(node, child, false);\n            // Adopt node into parent's node document.\n            if (node.doc !== parent.doc) {\n                // XXX adoptNode has side-effect of removing node from its parent\n                // and generating a mutation event, thus causing the _insertOrReplace\n                // to generate two deletes and an insert instead of a 'move'\n                // event.  It looks like the new MutationObserver stuff avoids\n                // this problem, but for now let's only adopt (ie, remove `node`\n                // from its parent) here if we need to.\n                parent.doc.adoptNode(node);\n            }\n            // Do the replace.\n            node._insertOrReplace(parent, child, true);\n            return child;\n        }\n    },\n    // See: http://ejohn.org/blog/comparing-document-position/\n    contains: {\n        value: function contains(node) {\n            if (node === null) {\n                return false;\n            }\n            if (this === node) {\n                return true; /* inclusive descendant */ \n            }\n            /* jshint bitwise: false */ return (this.compareDocumentPosition(node) & DOCUMENT_POSITION_CONTAINED_BY) !== 0;\n        }\n    },\n    compareDocumentPosition: {\n        value: function compareDocumentPosition(that) {\n            // Basic algorithm for finding the relative position of two nodes.\n            // Make a list the ancestors of each node, starting with the\n            // document element and proceeding down to the nodes themselves.\n            // Then, loop through the lists, looking for the first element\n            // that differs.  The order of those two elements give the\n            // order of their descendant nodes.  Or, if one list is a prefix\n            // of the other one, then that node contains the other.\n            if (this === that) return 0;\n            // If they're not owned by the same document or if one is rooted\n            // and one is not, then they're disconnected.\n            if (this.doc !== that.doc || this.rooted !== that.rooted) return DOCUMENT_POSITION_DISCONNECTED + DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;\n            // Get arrays of ancestors for this and that\n            var these = [], those = [];\n            for(var n = this; n !== null; n = n.parentNode)these.push(n);\n            for(n = that; n !== null; n = n.parentNode)those.push(n);\n            these.reverse(); // So we start with the outermost\n            those.reverse();\n            if (these[0] !== those[0]) return DOCUMENT_POSITION_DISCONNECTED + DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;\n            n = Math.min(these.length, those.length);\n            for(var i = 1; i < n; i++){\n                if (these[i] !== those[i]) {\n                    // We found two different ancestors, so compare\n                    // their positions\n                    if (these[i].index < those[i].index) return DOCUMENT_POSITION_FOLLOWING;\n                    else return DOCUMENT_POSITION_PRECEDING;\n                }\n            }\n            // If we get to here, then one of the nodes (the one with the\n            // shorter list of ancestors) contains the other one.\n            if (these.length < those.length) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY;\n            else return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS;\n        }\n    },\n    isSameNode: {\n        value: function isSameNode(node) {\n            return this === node;\n        }\n    },\n    // This method implements the generic parts of node equality testing\n    // and defers to the (non-recursive) type-specific isEqual() method\n    // defined by subclasses\n    isEqualNode: {\n        value: function isEqualNode(node) {\n            if (!node) return false;\n            if (node.nodeType !== this.nodeType) return false;\n            // Check type-specific properties for equality\n            if (!this.isEqual(node)) return false;\n            // Now check children for number and equality\n            for(var c1 = this.firstChild, c2 = node.firstChild; c1 && c2; c1 = c1.nextSibling, c2 = c2.nextSibling){\n                if (!c1.isEqualNode(c2)) return false;\n            }\n            return c1 === null && c2 === null;\n        }\n    },\n    // This method delegates shallow cloning to a clone() method\n    // that each concrete subclass must implement\n    cloneNode: {\n        value: function(deep) {\n            // Clone this node\n            var clone = this.clone();\n            // Handle the recursive case if necessary\n            if (deep) {\n                for(var kid = this.firstChild; kid !== null; kid = kid.nextSibling){\n                    clone._appendChild(kid.cloneNode(true));\n                }\n            }\n            return clone;\n        }\n    },\n    lookupPrefix: {\n        value: function lookupPrefix(ns) {\n            var e;\n            if (ns === \"\" || ns === null || ns === undefined) return null;\n            switch(this.nodeType){\n                case ELEMENT_NODE:\n                    return this._lookupNamespacePrefix(ns, this);\n                case DOCUMENT_NODE:\n                    e = this.documentElement;\n                    return e ? e.lookupPrefix(ns) : null;\n                case ENTITY_NODE:\n                case NOTATION_NODE:\n                case DOCUMENT_FRAGMENT_NODE:\n                case DOCUMENT_TYPE_NODE:\n                    return null;\n                case ATTRIBUTE_NODE:\n                    e = this.ownerElement;\n                    return e ? e.lookupPrefix(ns) : null;\n                default:\n                    e = this.parentElement;\n                    return e ? e.lookupPrefix(ns) : null;\n            }\n        }\n    },\n    lookupNamespaceURI: {\n        value: function lookupNamespaceURI(prefix) {\n            if (prefix === \"\" || prefix === undefined) {\n                prefix = null;\n            }\n            var e;\n            switch(this.nodeType){\n                case ELEMENT_NODE:\n                    return utils.shouldOverride();\n                case DOCUMENT_NODE:\n                    e = this.documentElement;\n                    return e ? e.lookupNamespaceURI(prefix) : null;\n                case ENTITY_NODE:\n                case NOTATION_NODE:\n                case DOCUMENT_TYPE_NODE:\n                case DOCUMENT_FRAGMENT_NODE:\n                    return null;\n                case ATTRIBUTE_NODE:\n                    e = this.ownerElement;\n                    return e ? e.lookupNamespaceURI(prefix) : null;\n                default:\n                    e = this.parentElement;\n                    return e ? e.lookupNamespaceURI(prefix) : null;\n            }\n        }\n    },\n    isDefaultNamespace: {\n        value: function isDefaultNamespace(ns) {\n            if (ns === \"\" || ns === undefined) {\n                ns = null;\n            }\n            var defaultNamespace = this.lookupNamespaceURI(null);\n            return defaultNamespace === ns;\n        }\n    },\n    // Utility methods for nodes.  Not part of the DOM\n    // Return the index of this node in its parent.\n    // Throw if no parent, or if this node is not a child of its parent\n    index: {\n        get: function() {\n            var parent = this.parentNode;\n            if (this === parent.firstChild) return 0; // fast case\n            var kids = parent.childNodes;\n            if (this._index === undefined || kids[this._index] !== this) {\n                // Ensure that we don't have an O(N^2) blowup if none of the\n                // kids have defined indices yet and we're traversing via\n                // nextSibling or previousSibling\n                for(var i = 0; i < kids.length; i++){\n                    kids[i]._index = i;\n                }\n                utils.assert(kids[this._index] === this);\n            }\n            return this._index;\n        }\n    },\n    // Return true if this node is equal to or is an ancestor of that node\n    // Note that nodes are considered to be ancestors of themselves\n    isAncestor: {\n        value: function(that) {\n            // If they belong to different documents, then they're unrelated.\n            if (this.doc !== that.doc) return false;\n            // If one is rooted and one isn't then they're not related\n            if (this.rooted !== that.rooted) return false;\n            // Otherwise check by traversing the parentNode chain\n            for(var e = that; e; e = e.parentNode){\n                if (e === this) return true;\n            }\n            return false;\n        }\n    },\n    // DOMINO Changed the behavior to conform with the specs. See:\n    // https://groups.google.com/d/topic/mozilla.dev.platform/77sIYcpdDmc/discussion\n    ensureSameDoc: {\n        value: function(that) {\n            if (that.ownerDocument === null) {\n                that.ownerDocument = this.doc;\n            } else if (that.ownerDocument !== this.doc) {\n                utils.WrongDocumentError();\n            }\n        }\n    },\n    removeChildren: {\n        value: utils.shouldOverride\n    },\n    // Insert this node as a child of parent before the specified child,\n    // or insert as the last child of parent if specified child is null,\n    // or replace the specified child with this node, firing mutation events as\n    // necessary\n    _insertOrReplace: {\n        value: function _insertOrReplace(parent, before, isReplace) {\n            var child = this, before_index, i;\n            if (child.nodeType === DOCUMENT_FRAGMENT_NODE && child.rooted) {\n                utils.HierarchyRequestError();\n            }\n            /* Ensure index of `before` is cached before we (possibly) remove it. */ if (parent._childNodes) {\n                before_index = before === null ? parent._childNodes.length : before.index; /* ensure _index is cached */ \n                // If we are already a child of the specified parent, then\n                // the index may have to be adjusted.\n                if (child.parentNode === parent) {\n                    var child_index = child.index;\n                    // If the child is before the spot it is to be inserted at,\n                    // then when it is removed, the index of that spot will be\n                    // reduced.\n                    if (child_index < before_index) {\n                        before_index--;\n                    }\n                }\n            }\n            // Delete the old child\n            if (isReplace) {\n                if (before.rooted) before.doc.mutateRemove(before);\n                before.parentNode = null;\n            }\n            var n = before;\n            if (n === null) {\n                n = parent.firstChild;\n            }\n            // If both the child and the parent are rooted, then we want to\n            // transplant the child without uprooting and rerooting it.\n            var bothRooted = child.rooted && parent.rooted;\n            if (child.nodeType === DOCUMENT_FRAGMENT_NODE) {\n                var spliceArgs = [\n                    0,\n                    isReplace ? 1 : 0\n                ], next;\n                for(var kid = child.firstChild; kid !== null; kid = next){\n                    next = kid.nextSibling;\n                    spliceArgs.push(kid);\n                    kid.parentNode = parent;\n                }\n                var len = spliceArgs.length;\n                // Add all nodes to the new parent, overwriting the old child\n                if (isReplace) {\n                    LinkedList.replace(n, len > 2 ? spliceArgs[2] : null);\n                } else if (len > 2 && n !== null) {\n                    LinkedList.insertBefore(spliceArgs[2], n);\n                }\n                if (parent._childNodes) {\n                    spliceArgs[0] = before === null ? parent._childNodes.length : before._index;\n                    parent._childNodes.splice.apply(parent._childNodes, spliceArgs);\n                    for(i = 2; i < len; i++){\n                        spliceArgs[i]._index = spliceArgs[0] + (i - 2);\n                    }\n                } else if (parent._firstChild === before) {\n                    if (len > 2) {\n                        parent._firstChild = spliceArgs[2];\n                    } else if (isReplace) {\n                        parent._firstChild = null;\n                    }\n                }\n                // Remove all nodes from the document fragment\n                if (child._childNodes) {\n                    child._childNodes.length = 0;\n                } else {\n                    child._firstChild = null;\n                }\n                // Call the mutation handlers\n                // Use spliceArgs since the original array has been destroyed. The\n                // liveness guarantee requires us to clone the array so that\n                // references to the childNodes of the DocumentFragment will be empty\n                // when the insertion handlers are called.\n                if (parent.rooted) {\n                    parent.modify();\n                    for(i = 2; i < len; i++){\n                        parent.doc.mutateInsert(spliceArgs[i]);\n                    }\n                }\n            } else {\n                if (before === child) {\n                    return;\n                }\n                if (bothRooted) {\n                    // Remove the child from its current position in the tree\n                    // without calling remove(), since we don't want to uproot it.\n                    child._remove();\n                } else if (child.parentNode) {\n                    child.remove();\n                }\n                // Insert it as a child of its new parent\n                child.parentNode = parent;\n                if (isReplace) {\n                    LinkedList.replace(n, child);\n                    if (parent._childNodes) {\n                        child._index = before_index;\n                        parent._childNodes[before_index] = child;\n                    } else if (parent._firstChild === before) {\n                        parent._firstChild = child;\n                    }\n                } else {\n                    if (n !== null) {\n                        LinkedList.insertBefore(child, n);\n                    }\n                    if (parent._childNodes) {\n                        child._index = before_index;\n                        parent._childNodes.splice(before_index, 0, child);\n                    } else if (parent._firstChild === before) {\n                        parent._firstChild = child;\n                    }\n                }\n                if (bothRooted) {\n                    parent.modify();\n                    // Generate a move mutation event\n                    parent.doc.mutateMove(child);\n                } else if (parent.rooted) {\n                    parent.modify();\n                    parent.doc.mutateInsert(child);\n                }\n            }\n        }\n    },\n    // Return the lastModTime value for this node. (For use as a\n    // cache invalidation mechanism. If the node does not already\n    // have one, initialize it from the owner document's modclock\n    // property. (Note that modclock does not return the actual\n    // time; it is simply a counter incremented on each document\n    // modification)\n    lastModTime: {\n        get: function() {\n            if (!this._lastModTime) {\n                this._lastModTime = this.doc.modclock;\n            }\n            return this._lastModTime;\n        }\n    },\n    // Increment the owner document's modclock and use the new\n    // value to update the lastModTime value for this node and\n    // all of its ancestors. Nodes that have never had their\n    // lastModTime value queried do not need to have a\n    // lastModTime property set on them since there is no\n    // previously queried value to ever compare the new value\n    // against, so only update nodes that already have a\n    // _lastModTime property.\n    modify: {\n        value: function() {\n            if (this.doc.modclock) {\n                var time = ++this.doc.modclock;\n                for(var n = this; n; n = n.parentElement){\n                    if (n._lastModTime) {\n                        n._lastModTime = time;\n                    }\n                }\n            }\n        }\n    },\n    // This attribute is not part of the DOM but is quite helpful.\n    // It returns the document with which a node is associated.  Usually\n    // this is the ownerDocument. But ownerDocument is null for the\n    // document object itself, so this is a handy way to get the document\n    // regardless of the node type\n    doc: {\n        get: function() {\n            return this.ownerDocument || this;\n        }\n    },\n    // If the node has a nid (node id), then it is rooted in a document\n    rooted: {\n        get: function() {\n            return !!this._nid;\n        }\n    },\n    normalize: {\n        value: function() {\n            var next;\n            for(var child = this.firstChild; child !== null; child = next){\n                next = child.nextSibling;\n                if (child.normalize) {\n                    child.normalize();\n                }\n                if (child.nodeType !== Node.TEXT_NODE) {\n                    continue;\n                }\n                if (child.nodeValue === \"\") {\n                    this.removeChild(child);\n                    continue;\n                }\n                var prevChild = child.previousSibling;\n                if (prevChild === null) {\n                    continue;\n                } else if (prevChild.nodeType === Node.TEXT_NODE) {\n                    // merge this with previous and remove the child\n                    prevChild.appendData(child.nodeValue);\n                    this.removeChild(child);\n                }\n            }\n        }\n    },\n    // Convert the children of a node to an HTML string.\n    // This is used by the innerHTML getter\n    // The serialization spec is at:\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#serializing-html-fragments\n    //\n    // The serialization logic is intentionally implemented in a separate\n    // `NodeUtils` helper instead of the more obvious choice of a private\n    // `_serializeOne()` method on the `Node.prototype` in order to avoid\n    // the megamorphic `this._serializeOne` property access, which reduces\n    // performance unnecessarily. If you need specialized behavior for a\n    // certain subclass, you'll need to implement that in `NodeUtils`.\n    // See https://github.com/fgnass/domino/pull/142 for more information.\n    serialize: {\n        value: function() {\n            var s = \"\";\n            for(var kid = this.firstChild; kid !== null; kid = kid.nextSibling){\n                s += NodeUtils.serializeOne(kid, this);\n            }\n            return s;\n        }\n    },\n    // Non-standard, but often useful for debugging.\n    outerHTML: {\n        get: function() {\n            return NodeUtils.serializeOne(this, {\n                nodeType: 0\n            });\n        },\n        set: utils.nyi\n    },\n    // mirror node type properties in the prototype, so they are present\n    // in instances of Node (and subclasses)\n    ELEMENT_NODE: {\n        value: ELEMENT_NODE\n    },\n    ATTRIBUTE_NODE: {\n        value: ATTRIBUTE_NODE\n    },\n    TEXT_NODE: {\n        value: TEXT_NODE\n    },\n    CDATA_SECTION_NODE: {\n        value: CDATA_SECTION_NODE\n    },\n    ENTITY_REFERENCE_NODE: {\n        value: ENTITY_REFERENCE_NODE\n    },\n    ENTITY_NODE: {\n        value: ENTITY_NODE\n    },\n    PROCESSING_INSTRUCTION_NODE: {\n        value: PROCESSING_INSTRUCTION_NODE\n    },\n    COMMENT_NODE: {\n        value: COMMENT_NODE\n    },\n    DOCUMENT_NODE: {\n        value: DOCUMENT_NODE\n    },\n    DOCUMENT_TYPE_NODE: {\n        value: DOCUMENT_TYPE_NODE\n    },\n    DOCUMENT_FRAGMENT_NODE: {\n        value: DOCUMENT_FRAGMENT_NODE\n    },\n    NOTATION_NODE: {\n        value: NOTATION_NODE\n    },\n    DOCUMENT_POSITION_DISCONNECTED: {\n        value: DOCUMENT_POSITION_DISCONNECTED\n    },\n    DOCUMENT_POSITION_PRECEDING: {\n        value: DOCUMENT_POSITION_PRECEDING\n    },\n    DOCUMENT_POSITION_FOLLOWING: {\n        value: DOCUMENT_POSITION_FOLLOWING\n    },\n    DOCUMENT_POSITION_CONTAINS: {\n        value: DOCUMENT_POSITION_CONTAINS\n    },\n    DOCUMENT_POSITION_CONTAINED_BY: {\n        value: DOCUMENT_POSITION_CONTAINED_BY\n    },\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: {\n        value: DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/Node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/NodeFilter.js":
/*!********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/NodeFilter.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\nvar NodeFilter = {\n    // Constants for acceptNode()\n    FILTER_ACCEPT: 1,\n    FILTER_REJECT: 2,\n    FILTER_SKIP: 3,\n    // Constants for whatToShow\n    SHOW_ALL: 0xFFFFFFFF,\n    SHOW_ELEMENT: 0x1,\n    SHOW_ATTRIBUTE: 0x2,\n    SHOW_TEXT: 0x4,\n    SHOW_CDATA_SECTION: 0x8,\n    SHOW_ENTITY_REFERENCE: 0x10,\n    SHOW_ENTITY: 0x20,\n    SHOW_PROCESSING_INSTRUCTION: 0x40,\n    SHOW_COMMENT: 0x80,\n    SHOW_DOCUMENT: 0x100,\n    SHOW_DOCUMENT_TYPE: 0x200,\n    SHOW_DOCUMENT_FRAGMENT: 0x400,\n    SHOW_NOTATION: 0x800 // historical\n};\nmodule.exports = NodeFilter.constructor = NodeFilter.prototype = NodeFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Ob2RlRmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsYUFBYTtJQUNmLDZCQUE2QjtJQUM3QkMsZUFBZTtJQUNmQyxlQUFlO0lBQ2ZDLGFBQWE7SUFFYiwyQkFBMkI7SUFDM0JDLFVBQVU7SUFDVkMsY0FBYztJQUNkQyxnQkFBZ0I7SUFDaEJDLFdBQVc7SUFDWEMsb0JBQW9CO0lBQ3BCQyx1QkFBdUI7SUFDdkJDLGFBQWE7SUFDYkMsNkJBQTZCO0lBQzdCQyxjQUFjO0lBQ2RDLGVBQWU7SUFDZkMsb0JBQW9CO0lBQ3BCQyx3QkFBd0I7SUFDeEJDLGVBQWUsTUFBTSxhQUFhO0FBQ3BDO0FBRUFDLE9BQU9DLE9BQU8sR0FBSWxCLFdBQVdtQixXQUFXLEdBQUduQixXQUFXb0IsU0FBUyxHQUFHcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Ob2RlRmlsdGVyLmpzPzQ4YzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgTm9kZUZpbHRlciA9IHtcbiAgLy8gQ29uc3RhbnRzIGZvciBhY2NlcHROb2RlKClcbiAgRklMVEVSX0FDQ0VQVDogMSxcbiAgRklMVEVSX1JFSkVDVDogMixcbiAgRklMVEVSX1NLSVA6IDMsXG5cbiAgLy8gQ29uc3RhbnRzIGZvciB3aGF0VG9TaG93XG4gIFNIT1dfQUxMOiAweEZGRkZGRkZGLFxuICBTSE9XX0VMRU1FTlQ6IDB4MSxcbiAgU0hPV19BVFRSSUJVVEU6IDB4MiwgLy8gaGlzdG9yaWNhbFxuICBTSE9XX1RFWFQ6IDB4NCxcbiAgU0hPV19DREFUQV9TRUNUSU9OOiAweDgsIC8vIGhpc3RvcmljYWxcbiAgU0hPV19FTlRJVFlfUkVGRVJFTkNFOiAweDEwLCAvLyBoaXN0b3JpY2FsXG4gIFNIT1dfRU5USVRZOiAweDIwLCAvLyBoaXN0b3JpY2FsXG4gIFNIT1dfUFJPQ0VTU0lOR19JTlNUUlVDVElPTjogMHg0MCxcbiAgU0hPV19DT01NRU5UOiAweDgwLFxuICBTSE9XX0RPQ1VNRU5UOiAweDEwMCxcbiAgU0hPV19ET0NVTUVOVF9UWVBFOiAweDIwMCxcbiAgU0hPV19ET0NVTUVOVF9GUkFHTUVOVDogMHg0MDAsXG4gIFNIT1dfTk9UQVRJT046IDB4ODAwIC8vIGhpc3RvcmljYWxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gKE5vZGVGaWx0ZXIuY29uc3RydWN0b3IgPSBOb2RlRmlsdGVyLnByb3RvdHlwZSA9IE5vZGVGaWx0ZXIpO1xuIl0sIm5hbWVzIjpbIk5vZGVGaWx0ZXIiLCJGSUxURVJfQUNDRVBUIiwiRklMVEVSX1JFSkVDVCIsIkZJTFRFUl9TS0lQIiwiU0hPV19BTEwiLCJTSE9XX0VMRU1FTlQiLCJTSE9XX0FUVFJJQlVURSIsIlNIT1dfVEVYVCIsIlNIT1dfQ0RBVEFfU0VDVElPTiIsIlNIT1dfRU5USVRZX1JFRkVSRU5DRSIsIlNIT1dfRU5USVRZIiwiU0hPV19QUk9DRVNTSU5HX0lOU1RSVUNUSU9OIiwiU0hPV19DT01NRU5UIiwiU0hPV19ET0NVTUVOVCIsIlNIT1dfRE9DVU1FTlRfVFlQRSIsIlNIT1dfRE9DVU1FTlRfRlJBR01FTlQiLCJTSE9XX05PVEFUSU9OIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/NodeFilter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/NodeIterator.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/NodeIterator.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = NodeIterator;\nvar NodeFilter = __webpack_require__(/*! ./NodeFilter */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeFilter.js\");\nvar NodeTraversal = __webpack_require__(/*! ./NodeTraversal */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeTraversal.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\n/* Private methods and helpers */ /**\n * @based on WebKit's NodeIterator::moveToNext and NodeIterator::moveToPrevious\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeIterator.cpp?rev=186279#L51\n */ function move(node, stayWithin, directionIsNext) {\n    if (directionIsNext) {\n        return NodeTraversal.next(node, stayWithin);\n    } else {\n        if (node === stayWithin) {\n            return null;\n        }\n        return NodeTraversal.previous(node, null);\n    }\n}\nfunction isInclusiveAncestor(node, possibleChild) {\n    for(; possibleChild; possibleChild = possibleChild.parentNode){\n        if (node === possibleChild) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @spec http://www.w3.org/TR/dom/#concept-nodeiterator-traverse\n * @method\n * @access private\n * @param {NodeIterator} ni\n * @param {string} direction One of 'next' or 'previous'.\n * @return {Node|null}\n */ function traverse(ni, directionIsNext) {\n    var node, beforeNode;\n    node = ni._referenceNode;\n    beforeNode = ni._pointerBeforeReferenceNode;\n    while(true){\n        if (beforeNode === directionIsNext) {\n            beforeNode = !beforeNode;\n        } else {\n            node = move(node, ni._root, directionIsNext);\n            if (node === null) {\n                return null;\n            }\n        }\n        var result = ni._internalFilter(node);\n        if (result === NodeFilter.FILTER_ACCEPT) {\n            break;\n        }\n    }\n    ni._referenceNode = node;\n    ni._pointerBeforeReferenceNode = beforeNode;\n    return node;\n}\n/* Public API */ /**\n * Implemented version: http://www.w3.org/TR/2015/WD-dom-20150618/#nodeiterator\n * Latest version: http://www.w3.org/TR/dom/#nodeiterator\n *\n * @constructor\n * @param {Node} root\n * @param {number} whatToShow [optional]\n * @param {Function|NodeFilter} filter [optional]\n * @throws Error\n */ function NodeIterator(root, whatToShow, filter) {\n    if (!root || !root.nodeType) {\n        utils.NotSupportedError();\n    }\n    // Read-only properties\n    this._root = root;\n    this._referenceNode = root;\n    this._pointerBeforeReferenceNode = true;\n    this._whatToShow = Number(whatToShow) || 0;\n    this._filter = filter || null;\n    this._active = false;\n    // Record active node iterators in the document, in order to perform\n    // \"node iterator pre-removal steps\".\n    root.doc._attachNodeIterator(this);\n}\nObject.defineProperties(NodeIterator.prototype, {\n    root: {\n        get: function root() {\n            return this._root;\n        }\n    },\n    referenceNode: {\n        get: function referenceNode() {\n            return this._referenceNode;\n        }\n    },\n    pointerBeforeReferenceNode: {\n        get: function pointerBeforeReferenceNode() {\n            return this._pointerBeforeReferenceNode;\n        }\n    },\n    whatToShow: {\n        get: function whatToShow() {\n            return this._whatToShow;\n        }\n    },\n    filter: {\n        get: function filter() {\n            return this._filter;\n        }\n    },\n    /**\n   * @method\n   * @param {Node} node\n   * @return {Number} Constant NodeFilter.FILTER_ACCEPT,\n   *  NodeFilter.FILTER_REJECT or NodeFilter.FILTER_SKIP.\n   */ _internalFilter: {\n        value: function _internalFilter(node) {\n            /* jshint bitwise: false */ var result, filter;\n            if (this._active) {\n                utils.InvalidStateError();\n            }\n            // Maps nodeType to whatToShow\n            if (!(1 << node.nodeType - 1 & this._whatToShow)) {\n                return NodeFilter.FILTER_SKIP;\n            }\n            filter = this._filter;\n            if (filter === null) {\n                result = NodeFilter.FILTER_ACCEPT;\n            } else {\n                this._active = true;\n                try {\n                    if (typeof filter === \"function\") {\n                        result = filter(node);\n                    } else {\n                        result = filter.acceptNode(node);\n                    }\n                } finally{\n                    this._active = false;\n                }\n            }\n            // Note that coercing to a number means that\n            //  `true` becomes `1` (which is NodeFilter.FILTER_ACCEPT)\n            //  `false` becomes `0` (neither accept, reject, or skip)\n            return +result;\n        }\n    },\n    /**\n   * @spec https://dom.spec.whatwg.org/#nodeiterator-pre-removing-steps\n   * @method\n   * @return void\n   */ _preremove: {\n        value: function _preremove(toBeRemovedNode) {\n            if (isInclusiveAncestor(toBeRemovedNode, this._root)) {\n                return;\n            }\n            if (!isInclusiveAncestor(toBeRemovedNode, this._referenceNode)) {\n                return;\n            }\n            if (this._pointerBeforeReferenceNode) {\n                var next = toBeRemovedNode;\n                while(next.lastChild){\n                    next = next.lastChild;\n                }\n                next = NodeTraversal.next(next, this.root);\n                if (next) {\n                    this._referenceNode = next;\n                    return;\n                }\n                this._pointerBeforeReferenceNode = false;\n            // fall through\n            }\n            if (toBeRemovedNode.previousSibling === null) {\n                this._referenceNode = toBeRemovedNode.parentNode;\n            } else {\n                this._referenceNode = toBeRemovedNode.previousSibling;\n                var lastChild;\n                for(lastChild = this._referenceNode.lastChild; lastChild; lastChild = this._referenceNode.lastChild){\n                    this._referenceNode = lastChild;\n                }\n            }\n        }\n    },\n    /**\n   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-nextnode\n   * @method\n   * @return {Node|null}\n   */ nextNode: {\n        value: function nextNode() {\n            return traverse(this, true);\n        }\n    },\n    /**\n   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-previousnode\n   * @method\n   * @return {Node|null}\n   */ previousNode: {\n        value: function previousNode() {\n            return traverse(this, false);\n        }\n    },\n    /**\n   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-detach\n   * @method\n   * @return void\n   */ detach: {\n        value: function detach() {\n        /* \"The detach() method must do nothing.\n     * Its functionality (disabling a NodeIterator object) was removed,\n     * but the method itself is preserved for compatibility.\n     */ }\n    },\n    /** For compatibility with web-platform-tests. */ toString: {\n        value: function toString() {\n            return \"[object NodeIterator]\";\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/NodeIterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/NodeList.es5.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/NodeList.es5.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("\n// No support for subclassing array, return an actual Array object.\nfunction item(i) {\n    /* jshint validthis: true */ return this[i] || null;\n}\nfunction NodeList(a) {\n    if (!a) a = [];\n    a.item = item;\n    return a;\n}\nmodule.exports = NodeList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Ob2RlTGlzdC5lczUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixtRUFBbUU7QUFDbkUsU0FBU0EsS0FBS0MsQ0FBQztJQUNYLDBCQUEwQixHQUMxQixPQUFPLElBQUksQ0FBQ0EsRUFBRSxJQUFJO0FBQ3RCO0FBRUEsU0FBU0MsU0FBU0MsQ0FBQztJQUNmLElBQUksQ0FBQ0EsR0FBR0EsSUFBSSxFQUFFO0lBQ2RBLEVBQUVILElBQUksR0FBR0E7SUFDVCxPQUFPRztBQUNYO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Ob2RlTGlzdC5lczUuanM/MmI2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gTm8gc3VwcG9ydCBmb3Igc3ViY2xhc3NpbmcgYXJyYXksIHJldHVybiBhbiBhY3R1YWwgQXJyYXkgb2JqZWN0LlxuZnVuY3Rpb24gaXRlbShpKSB7XG4gICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgIHJldHVybiB0aGlzW2ldIHx8IG51bGw7XG59XG5cbmZ1bmN0aW9uIE5vZGVMaXN0KGEpIHtcbiAgICBpZiAoIWEpIGEgPSBbXTtcbiAgICBhLml0ZW0gPSBpdGVtO1xuICAgIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGVMaXN0O1xuIl0sIm5hbWVzIjpbIml0ZW0iLCJpIiwiTm9kZUxpc3QiLCJhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/NodeList.es5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/NodeList.es6.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/NodeList.es6.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("/* jshint esversion: 6 */ \nmodule.exports = class NodeList extends Array {\n    constructor(a){\n        super(a && a.length || 0);\n        if (a) {\n            for(var idx in a){\n                this[idx] = a[idx];\n            }\n        }\n    }\n    item(i) {\n        return this[i] || null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Ob2RlTGlzdC5lczYuanMiLCJtYXBwaW5ncyI6IkFBQUEsdUJBQXVCLEdBQ1Y7QUFFYkEsT0FBT0MsT0FBTyxHQUFHLE1BQU1DLGlCQUFpQkM7SUFDcENDLFlBQVlDLENBQUMsQ0FBRTtRQUNYLEtBQUssQ0FBQyxLQUFNQSxFQUFFQyxNQUFNLElBQUs7UUFDekIsSUFBSUQsR0FBRztZQUNILElBQUssSUFBSUUsT0FBT0YsRUFBRztnQkFBRSxJQUFJLENBQUNFLElBQUksR0FBR0YsQ0FBQyxDQUFDRSxJQUFJO1lBQUU7UUFDN0M7SUFDSjtJQUNBQyxLQUFLQyxDQUFDLEVBQUU7UUFBRSxPQUFPLElBQUksQ0FBQ0EsRUFBRSxJQUFJO0lBQU07QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Ob2RlTGlzdC5lczYuanM/MGIxNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBqc2hpbnQgZXN2ZXJzaW9uOiA2ICovXG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBOb2RlTGlzdCBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihhKSB7XG4gICAgICAgIHN1cGVyKChhICYmIGEubGVuZ3RoKSB8fCAwKTtcbiAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGlkeCBpbiBhKSB7IHRoaXNbaWR4XSA9IGFbaWR4XTsgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGl0ZW0oaSkgeyByZXR1cm4gdGhpc1tpXSB8fCBudWxsOyB9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJOb2RlTGlzdCIsIkFycmF5IiwiY29uc3RydWN0b3IiLCJhIiwibGVuZ3RoIiwiaWR4IiwiaXRlbSIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/NodeList.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/NodeList.js":
/*!******************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/NodeList.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar NodeList;\ntry {\n    // Attempt to use ES6-style Array subclass if possible.\n    NodeList = __webpack_require__(/*! ./NodeList.es6.js */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeList.es6.js\");\n} catch (e) {\n    // No support for subclassing array, return an actual Array object.\n    NodeList = __webpack_require__(/*! ./NodeList.es5.js */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeList.es5.js\");\n}\nmodule.exports = NodeList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Ob2RlTGlzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBO0FBRUosSUFBSTtJQUNBLHVEQUF1RDtJQUN2REEsV0FBV0MsbUJBQU9BLENBQUM7QUFDdkIsRUFBRSxPQUFPQyxHQUFHO0lBQ1IsbUVBQW1FO0lBQ25FRixXQUFXQyxtQkFBT0EsQ0FBQztBQUN2QjtBQUVBRSxPQUFPQyxPQUFPLEdBQUdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BtYXRocGl4L2RvbWluby9saWIvTm9kZUxpc3QuanM/NGVhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIE5vZGVMaXN0O1xuXG50cnkge1xuICAgIC8vIEF0dGVtcHQgdG8gdXNlIEVTNi1zdHlsZSBBcnJheSBzdWJjbGFzcyBpZiBwb3NzaWJsZS5cbiAgICBOb2RlTGlzdCA9IHJlcXVpcmUoJy4vTm9kZUxpc3QuZXM2LmpzJyk7XG59IGNhdGNoIChlKSB7XG4gICAgLy8gTm8gc3VwcG9ydCBmb3Igc3ViY2xhc3NpbmcgYXJyYXksIHJldHVybiBhbiBhY3R1YWwgQXJyYXkgb2JqZWN0LlxuICAgIE5vZGVMaXN0ID0gcmVxdWlyZSgnLi9Ob2RlTGlzdC5lczUuanMnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOb2RlTGlzdDtcbiJdLCJuYW1lcyI6WyJOb2RlTGlzdCIsInJlcXVpcmUiLCJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/NodeList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/NodeTraversal.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/NodeTraversal.js ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
eval("\n/* exported NodeTraversal */ var NodeTraversal = module.exports = {\n    nextSkippingChildren: nextSkippingChildren,\n    nextAncestorSibling: nextAncestorSibling,\n    next: next,\n    previous: previous,\n    deepLastChild: deepLastChild\n};\n/**\n * @based on WebKit's NodeTraversal::nextSkippingChildren\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L109\n */ function nextSkippingChildren(node, stayWithin) {\n    if (node === stayWithin) {\n        return null;\n    }\n    if (node.nextSibling !== null) {\n        return node.nextSibling;\n    }\n    return nextAncestorSibling(node, stayWithin);\n}\n/**\n * @based on WebKit's NodeTraversal::nextAncestorSibling\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.cpp?rev=179143#L93\n */ function nextAncestorSibling(node, stayWithin) {\n    for(node = node.parentNode; node !== null; node = node.parentNode){\n        if (node === stayWithin) {\n            return null;\n        }\n        if (node.nextSibling !== null) {\n            return node.nextSibling;\n        }\n    }\n    return null;\n}\n/**\n * @based on WebKit's NodeTraversal::next\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L99\n */ function next(node, stayWithin) {\n    var n;\n    n = node.firstChild;\n    if (n !== null) {\n        return n;\n    }\n    if (node === stayWithin) {\n        return null;\n    }\n    n = node.nextSibling;\n    if (n !== null) {\n        return n;\n    }\n    return nextAncestorSibling(node, stayWithin);\n}\n/**\n * @based on WebKit's NodeTraversal::deepLastChild\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.cpp?rev=179143#L116\n */ function deepLastChild(node) {\n    while(node.lastChild){\n        node = node.lastChild;\n    }\n    return node;\n}\n/**\n * @based on WebKit's NodeTraversal::previous\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L121\n */ function previous(node, stayWithin) {\n    var p;\n    p = node.previousSibling;\n    if (p !== null) {\n        return deepLastChild(p);\n    }\n    p = node.parentNode;\n    if (p === stayWithin) {\n        return null;\n    }\n    return p;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Ob2RlVHJhdmVyc2FsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMEJBQTBCLEdBQzFCLElBQUlBLGdCQUFnQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ25DQyxzQkFBc0JBO0lBQ3RCQyxxQkFBcUJBO0lBQ3JCQyxNQUFNQTtJQUNOQyxVQUFVQTtJQUNWQyxlQUFlQTtBQUNqQjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNKLHFCQUFxQkssSUFBSSxFQUFFQyxVQUFVO0lBQzVDLElBQUlELFNBQVNDLFlBQVk7UUFDdkIsT0FBTztJQUNUO0lBQ0EsSUFBSUQsS0FBS0UsV0FBVyxLQUFLLE1BQU07UUFDN0IsT0FBT0YsS0FBS0UsV0FBVztJQUN6QjtJQUNBLE9BQU9OLG9CQUFvQkksTUFBTUM7QUFDbkM7QUFFQTs7O0NBR0MsR0FDRCxTQUFTTCxvQkFBb0JJLElBQUksRUFBRUMsVUFBVTtJQUMzQyxJQUFLRCxPQUFPQSxLQUFLRyxVQUFVLEVBQUVILFNBQVMsTUFBTUEsT0FBT0EsS0FBS0csVUFBVSxDQUFFO1FBQ2xFLElBQUlILFNBQVNDLFlBQVk7WUFDdkIsT0FBTztRQUNUO1FBQ0EsSUFBSUQsS0FBS0UsV0FBVyxLQUFLLE1BQU07WUFDN0IsT0FBT0YsS0FBS0UsV0FBVztRQUN6QjtJQUNGO0lBQ0EsT0FBTztBQUNUO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0wsS0FBS0csSUFBSSxFQUFFQyxVQUFVO0lBQzVCLElBQUlHO0lBQ0pBLElBQUlKLEtBQUtLLFVBQVU7SUFDbkIsSUFBSUQsTUFBTSxNQUFNO1FBQ2QsT0FBT0E7SUFDVDtJQUNBLElBQUlKLFNBQVNDLFlBQVk7UUFDdkIsT0FBTztJQUNUO0lBQ0FHLElBQUlKLEtBQUtFLFdBQVc7SUFDcEIsSUFBSUUsTUFBTSxNQUFNO1FBQ2QsT0FBT0E7SUFDVDtJQUNBLE9BQU9SLG9CQUFvQkksTUFBTUM7QUFDbkM7QUFFQTs7O0NBR0MsR0FDRCxTQUFTRixjQUFjQyxJQUFJO0lBQ3pCLE1BQU9BLEtBQUtNLFNBQVMsQ0FBRTtRQUNyQk4sT0FBT0EsS0FBS00sU0FBUztJQUN2QjtJQUNBLE9BQU9OO0FBQ1Q7QUFFQTs7O0NBR0MsR0FDRCxTQUFTRixTQUFTRSxJQUFJLEVBQUVDLFVBQVU7SUFDaEMsSUFBSU07SUFDSkEsSUFBSVAsS0FBS1EsZUFBZTtJQUN4QixJQUFJRCxNQUFNLE1BQU07UUFDZCxPQUFPUixjQUFjUTtJQUN2QjtJQUNBQSxJQUFJUCxLQUFLRyxVQUFVO0lBQ25CLElBQUlJLE1BQU1OLFlBQVk7UUFDcEIsT0FBTztJQUNUO0lBQ0EsT0FBT007QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbWF0aHBpeC9kb21pbm8vbGliL05vZGVUcmF2ZXJzYWwuanM/MzgxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIGV4cG9ydGVkIE5vZGVUcmF2ZXJzYWwgKi9cbnZhciBOb2RlVHJhdmVyc2FsID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIG5leHRTa2lwcGluZ0NoaWxkcmVuOiBuZXh0U2tpcHBpbmdDaGlsZHJlbixcbiAgbmV4dEFuY2VzdG9yU2libGluZzogbmV4dEFuY2VzdG9yU2libGluZyxcbiAgbmV4dDogbmV4dCxcbiAgcHJldmlvdXM6IHByZXZpb3VzLFxuICBkZWVwTGFzdENoaWxkOiBkZWVwTGFzdENoaWxkXG59O1xuXG4vKipcbiAqIEBiYXNlZCBvbiBXZWJLaXQncyBOb2RlVHJhdmVyc2FsOjpuZXh0U2tpcHBpbmdDaGlsZHJlblxuICogaHR0cHM6Ly90cmFjLndlYmtpdC5vcmcvYnJvd3Nlci90cnVuay9Tb3VyY2UvV2ViQ29yZS9kb20vTm9kZVRyYXZlcnNhbC5oP3Jldj0xNzkxNDMjTDEwOVxuICovXG5mdW5jdGlvbiBuZXh0U2tpcHBpbmdDaGlsZHJlbihub2RlLCBzdGF5V2l0aGluKSB7XG4gIGlmIChub2RlID09PSBzdGF5V2l0aGluKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKG5vZGUubmV4dFNpYmxpbmcgIT09IG51bGwpIHtcbiAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgfVxuICByZXR1cm4gbmV4dEFuY2VzdG9yU2libGluZyhub2RlLCBzdGF5V2l0aGluKTtcbn1cblxuLyoqXG4gKiBAYmFzZWQgb24gV2ViS2l0J3MgTm9kZVRyYXZlcnNhbDo6bmV4dEFuY2VzdG9yU2libGluZ1xuICogaHR0cHM6Ly90cmFjLndlYmtpdC5vcmcvYnJvd3Nlci90cnVuay9Tb3VyY2UvV2ViQ29yZS9kb20vTm9kZVRyYXZlcnNhbC5jcHA/cmV2PTE3OTE0MyNMOTNcbiAqL1xuZnVuY3Rpb24gbmV4dEFuY2VzdG9yU2libGluZyhub2RlLCBzdGF5V2l0aGluKSB7XG4gIGZvciAobm9kZSA9IG5vZGUucGFyZW50Tm9kZTsgbm9kZSAhPT0gbnVsbDsgbm9kZSA9IG5vZGUucGFyZW50Tm9kZSkge1xuICAgIGlmIChub2RlID09PSBzdGF5V2l0aGluKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKG5vZGUubmV4dFNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBAYmFzZWQgb24gV2ViS2l0J3MgTm9kZVRyYXZlcnNhbDo6bmV4dFxuICogaHR0cHM6Ly90cmFjLndlYmtpdC5vcmcvYnJvd3Nlci90cnVuay9Tb3VyY2UvV2ViQ29yZS9kb20vTm9kZVRyYXZlcnNhbC5oP3Jldj0xNzkxNDMjTDk5XG4gKi9cbmZ1bmN0aW9uIG5leHQobm9kZSwgc3RheVdpdGhpbikge1xuICB2YXIgbjtcbiAgbiA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgaWYgKG4gIT09IG51bGwpIHtcbiAgICByZXR1cm4gbjtcbiAgfVxuICBpZiAobm9kZSA9PT0gc3RheVdpdGhpbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIG4gPSBub2RlLm5leHRTaWJsaW5nO1xuICBpZiAobiAhPT0gbnVsbCkge1xuICAgIHJldHVybiBuO1xuICB9XG4gIHJldHVybiBuZXh0QW5jZXN0b3JTaWJsaW5nKG5vZGUsIHN0YXlXaXRoaW4pO1xufVxuXG4vKipcbiAqIEBiYXNlZCBvbiBXZWJLaXQncyBOb2RlVHJhdmVyc2FsOjpkZWVwTGFzdENoaWxkXG4gKiBodHRwczovL3RyYWMud2Via2l0Lm9yZy9icm93c2VyL3RydW5rL1NvdXJjZS9XZWJDb3JlL2RvbS9Ob2RlVHJhdmVyc2FsLmNwcD9yZXY9MTc5MTQzI0wxMTZcbiAqL1xuZnVuY3Rpb24gZGVlcExhc3RDaGlsZChub2RlKSB7XG4gIHdoaWxlIChub2RlLmxhc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBAYmFzZWQgb24gV2ViS2l0J3MgTm9kZVRyYXZlcnNhbDo6cHJldmlvdXNcbiAqIGh0dHBzOi8vdHJhYy53ZWJraXQub3JnL2Jyb3dzZXIvdHJ1bmsvU291cmNlL1dlYkNvcmUvZG9tL05vZGVUcmF2ZXJzYWwuaD9yZXY9MTc5MTQzI0wxMjFcbiAqL1xuZnVuY3Rpb24gcHJldmlvdXMobm9kZSwgc3RheVdpdGhpbikge1xuICB2YXIgcDtcbiAgcCA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICBpZiAocCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBkZWVwTGFzdENoaWxkKHApO1xuICB9XG4gIHAgPSBub2RlLnBhcmVudE5vZGU7XG4gIGlmIChwID09PSBzdGF5V2l0aGluKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHA7XG59XG4iXSwibmFtZXMiOlsiTm9kZVRyYXZlcnNhbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0U2tpcHBpbmdDaGlsZHJlbiIsIm5leHRBbmNlc3RvclNpYmxpbmciLCJuZXh0IiwicHJldmlvdXMiLCJkZWVwTGFzdENoaWxkIiwibm9kZSIsInN0YXlXaXRoaW4iLCJuZXh0U2libGluZyIsInBhcmVudE5vZGUiLCJuIiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsInAiLCJwcmV2aW91c1NpYmxpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/NodeTraversal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/NodeUtils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/NodeUtils.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = {\n    // NOTE: The `serializeOne()` function used to live on the `Node.prototype`\n    // as a private method `Node#_serializeOne(child)`, however that requires\n    // a megamorphic property access `this._serializeOne` just to get to the\n    // method, and this is being done on lots of different `Node` subclasses,\n    // which puts a lot of pressure on V8's megamorphic stub cache. So by\n    // moving the helper off of the `Node.prototype` and into a separate\n    // function in this helper module, we get a monomorphic property access\n    // `NodeUtils.serializeOne` to get to the function and reduce pressure\n    // on the megamorphic stub cache.\n    // See https://github.com/fgnass/domino/pull/142 for more information.\n    serializeOne: serializeOne\n};\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar NAMESPACE = utils.NAMESPACE;\nvar hasRawContent = {\n    STYLE: true,\n    SCRIPT: true,\n    XMP: true,\n    IFRAME: true,\n    NOEMBED: true,\n    NOFRAMES: true,\n    PLAINTEXT: true\n};\nvar emptyElements = {\n    area: true,\n    base: true,\n    basefont: true,\n    bgsound: true,\n    br: true,\n    col: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true\n};\nvar extraNewLine = {\n};\nfunction escape(s) {\n    return s.replace(/[&<>\\u00A0]/g, function(c) {\n        switch(c){\n            case \"&\":\n                return \"&amp;\";\n            case \"<\":\n                return \"&lt;\";\n            case \">\":\n                return \"&gt;\";\n            case \"\\xa0\":\n                return \"&nbsp;\";\n        }\n    });\n}\nfunction escapeAttr(s) {\n    var toEscape = /[&\"\\u00A0]/g;\n    if (!toEscape.test(s)) {\n        // nothing to do, fast path\n        return s;\n    } else {\n        return s.replace(toEscape, function(c) {\n            switch(c){\n                case \"&\":\n                    return \"&amp;\";\n                case '\"':\n                    return \"&quot;\";\n                case \"\\xa0\":\n                    return \"&nbsp;\";\n            }\n        });\n    }\n}\nfunction attrname(a) {\n    var ns = a.namespaceURI;\n    if (!ns) return a.localName;\n    if (ns === NAMESPACE.XML) return \"xml:\" + a.localName;\n    if (ns === NAMESPACE.XLINK) return \"xlink:\" + a.localName;\n    if (ns === NAMESPACE.XMLNS) {\n        if (a.localName === \"xmlns\") return \"xmlns\";\n        else return \"xmlns:\" + a.localName;\n    }\n    return a.name;\n}\nfunction serializeOne(kid, parent) {\n    var s = \"\";\n    switch(kid.nodeType){\n        case 1:\n            var ns = kid.namespaceURI;\n            var html = ns === NAMESPACE.HTML;\n            var tagname = html || ns === NAMESPACE.SVG || ns === NAMESPACE.MATHML ? kid.localName : kid.tagName;\n            s += \"<\" + tagname;\n            for(var j = 0, k = kid._numattrs; j < k; j++){\n                var a = kid._attr(j);\n                s += \" \" + attrname(a);\n                if (a.value !== undefined) s += '=\"' + escapeAttr(a.value) + '\"';\n            }\n            s += \">\";\n            if (!(html && emptyElements[tagname])) {\n                var ss = kid.serialize();\n                if (html && extraNewLine[tagname] && ss.charAt(0) === \"\\n\") s += \"\\n\";\n                // Serialize children and add end tag for all others\n                s += ss;\n                s += \"</\" + tagname + \">\";\n            }\n            break;\n        case 3:\n        case 4:\n            var parenttag;\n            if (parent.nodeType === 1 /*ELEMENT_NODE*/  && parent.namespaceURI === NAMESPACE.HTML) parenttag = parent.tagName;\n            else parenttag = \"\";\n            if (hasRawContent[parenttag] || parenttag === \"NOSCRIPT\" && parent.ownerDocument._scripting_enabled) {\n                s += kid.data;\n            } else {\n                s += escape(kid.data);\n            }\n            break;\n        case 8:\n            s += \"<!--\" + kid.data + \"-->\";\n            break;\n        case 7:\n            s += \"<?\" + kid.target + \" \" + kid.data + \"?>\";\n            break;\n        case 10:\n            s += \"<!DOCTYPE \" + kid.name;\n            if (false) {}\n            s += \">\";\n            break;\n        default:\n            utils.InvalidStateError();\n    }\n    return s;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/NodeUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/NonDocumentTypeChildNode.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/NonDocumentTypeChildNode.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar NonDocumentTypeChildNode = {\n    nextElementSibling: {\n        get: function() {\n            if (this.parentNode) {\n                for(var kid = this.nextSibling; kid !== null; kid = kid.nextSibling){\n                    if (kid.nodeType === Node.ELEMENT_NODE) return kid;\n                }\n            }\n            return null;\n        }\n    },\n    previousElementSibling: {\n        get: function() {\n            if (this.parentNode) {\n                for(var kid = this.previousSibling; kid !== null; kid = kid.previousSibling){\n                    if (kid.nodeType === Node.ELEMENT_NODE) return kid;\n                }\n            }\n            return null;\n        }\n    }\n};\nmodule.exports = NonDocumentTypeChildNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Ob25Eb2N1bWVudFR5cGVDaGlsZE5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVuQixJQUFJQywyQkFBMkI7SUFFN0JDLG9CQUFvQjtRQUFFQyxLQUFLO1lBQ3pCLElBQUksSUFBSSxDQUFDQyxVQUFVLEVBQUU7Z0JBQ25CLElBQUssSUFBSUMsTUFBTSxJQUFJLENBQUNDLFdBQVcsRUFBRUQsUUFBUSxNQUFNQSxNQUFNQSxJQUFJQyxXQUFXLENBQUU7b0JBQ3BFLElBQUlELElBQUlFLFFBQVEsS0FBS1IsS0FBS1MsWUFBWSxFQUFFLE9BQU9IO2dCQUNqRDtZQUNGO1lBQ0EsT0FBTztRQUNUO0lBQUM7SUFFREksd0JBQXdCO1FBQUVOLEtBQUs7WUFDN0IsSUFBSSxJQUFJLENBQUNDLFVBQVUsRUFBRTtnQkFDbkIsSUFBSyxJQUFJQyxNQUFNLElBQUksQ0FBQ0ssZUFBZSxFQUFFTCxRQUFRLE1BQU1BLE1BQU1BLElBQUlLLGVBQWUsQ0FBRTtvQkFDNUUsSUFBSUwsSUFBSUUsUUFBUSxLQUFLUixLQUFLUyxZQUFZLEVBQUUsT0FBT0g7Z0JBQ2pEO1lBQ0Y7WUFDQSxPQUFPO1FBQ1Q7SUFBQztBQUVIO0FBRUFNLE9BQU9DLE9BQU8sR0FBR1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Ob25Eb2N1bWVudFR5cGVDaGlsZE5vZGUuanM/Yjc5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XG5cbnZhciBOb25Eb2N1bWVudFR5cGVDaGlsZE5vZGUgPSB7XG5cbiAgbmV4dEVsZW1lbnRTaWJsaW5nOiB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMucGFyZW50Tm9kZSkge1xuICAgICAgZm9yICh2YXIga2lkID0gdGhpcy5uZXh0U2libGluZzsga2lkICE9PSBudWxsOyBraWQgPSBraWQubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgaWYgKGtpZC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHJldHVybiBraWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9fSxcblxuICBwcmV2aW91c0VsZW1lbnRTaWJsaW5nOiB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMucGFyZW50Tm9kZSkge1xuICAgICAgZm9yICh2YXIga2lkID0gdGhpcy5wcmV2aW91c1NpYmxpbmc7IGtpZCAhPT0gbnVsbDsga2lkID0ga2lkLnByZXZpb3VzU2libGluZykge1xuICAgICAgICBpZiAoa2lkLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkgcmV0dXJuIGtpZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH19XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlO1xuIl0sIm5hbWVzIjpbIk5vZGUiLCJyZXF1aXJlIiwiTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0IiwicGFyZW50Tm9kZSIsImtpZCIsIm5leHRTaWJsaW5nIiwibm9kZVR5cGUiLCJFTEVNRU5UX05PREUiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldmlvdXNTaWJsaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/NonDocumentTypeChildNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/ProcessingInstruction.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/ProcessingInstruction.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = ProcessingInstruction;\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar CharacterData = __webpack_require__(/*! ./CharacterData */ \"(ssr)/./node_modules/@mathpix/domino/lib/CharacterData.js\");\nfunction ProcessingInstruction(doc, target, data) {\n    CharacterData.call(this);\n    this.nodeType = Node.PROCESSING_INSTRUCTION_NODE;\n    this.ownerDocument = doc;\n    this.target = target;\n    this._data = data;\n}\nvar nodeValue = {\n    get: function() {\n        return this._data;\n    },\n    set: function(v) {\n        if (v === null || v === undefined) {\n            v = \"\";\n        } else {\n            v = String(v);\n        }\n        this._data = v;\n        if (this.rooted) this.ownerDocument.mutateValue(this);\n    }\n};\nProcessingInstruction.prototype = Object.create(CharacterData.prototype, {\n    nodeName: {\n        get: function() {\n            return this.target;\n        }\n    },\n    nodeValue: nodeValue,\n    textContent: nodeValue,\n    data: {\n        get: nodeValue.get,\n        set: function(v) {\n            nodeValue.set.call(this, v === null ? \"\" : String(v));\n        }\n    },\n    // Utility methods\n    clone: {\n        value: function clone() {\n            return new ProcessingInstruction(this.ownerDocument, this.target, this._data);\n        }\n    },\n    isEqual: {\n        value: function isEqual(n) {\n            return this.target === n.target && this._data === n._data;\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixJQUFJQyxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxnQkFBZ0JELG1CQUFPQSxDQUFDO0FBRTVCLFNBQVNGLHNCQUFzQkksR0FBRyxFQUFFQyxNQUFNLEVBQUVDLElBQUk7SUFDOUNILGNBQWNJLElBQUksQ0FBQyxJQUFJO0lBQ3ZCLElBQUksQ0FBQ0MsUUFBUSxHQUFHUCxLQUFLUSwyQkFBMkI7SUFDaEQsSUFBSSxDQUFDQyxhQUFhLEdBQUdOO0lBQ3JCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtJQUNkLElBQUksQ0FBQ00sS0FBSyxHQUFHTDtBQUNmO0FBRUEsSUFBSU0sWUFBWTtJQUNkQyxLQUFLO1FBQWEsT0FBTyxJQUFJLENBQUNGLEtBQUs7SUFBRTtJQUNyQ0csS0FBSyxTQUFTQyxDQUFDO1FBQ2IsSUFBSUEsTUFBTSxRQUFRQSxNQUFNQyxXQUFXO1lBQUVELElBQUk7UUFBSSxPQUFPO1lBQUVBLElBQUlFLE9BQU9GO1FBQUk7UUFDckUsSUFBSSxDQUFDSixLQUFLLEdBQUdJO1FBQ2IsSUFBSSxJQUFJLENBQUNHLE1BQU0sRUFBRSxJQUFJLENBQUNSLGFBQWEsQ0FBQ1MsV0FBVyxDQUFDLElBQUk7SUFDdEQ7QUFDRjtBQUVBbkIsc0JBQXNCb0IsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNuQixjQUFjaUIsU0FBUyxFQUFFO0lBQ3ZFRyxVQUFVO1FBQUVWLEtBQUs7WUFBYSxPQUFPLElBQUksQ0FBQ1IsTUFBTTtRQUFFO0lBQUM7SUFDbkRPLFdBQVdBO0lBQ1hZLGFBQWFaO0lBQ2JOLE1BQU07UUFDSk8sS0FBS0QsVUFBVUMsR0FBRztRQUNsQkMsS0FBSyxTQUFTQyxDQUFDO1lBQ2JILFVBQVVFLEdBQUcsQ0FBQ1AsSUFBSSxDQUFDLElBQUksRUFBRVEsTUFBSSxPQUFPLEtBQUtFLE9BQU9GO1FBQ2xEO0lBQ0Y7SUFFQSxrQkFBa0I7SUFDbEJVLE9BQU87UUFBRUMsT0FBTyxTQUFTRDtZQUNyQixPQUFPLElBQUl6QixzQkFBc0IsSUFBSSxDQUFDVSxhQUFhLEVBQUUsSUFBSSxDQUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDTSxLQUFLO1FBQ2hGO0lBQUM7SUFDRGdCLFNBQVM7UUFBRUQsT0FBTyxTQUFTQyxRQUFRQyxDQUFDO1lBQ2hDLE9BQU8sSUFBSSxDQUFDdkIsTUFBTSxLQUFLdUIsRUFBRXZCLE1BQU0sSUFBSSxJQUFJLENBQUNNLEtBQUssS0FBS2lCLEVBQUVqQixLQUFLO1FBQzdEO0lBQUM7QUFFSCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbWF0aHBpeC9kb21pbm8vbGliL1Byb2Nlc3NpbmdJbnN0cnVjdGlvbi5qcz81NDljIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XG52YXIgQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyRGF0YScpO1xuXG5mdW5jdGlvbiBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oZG9jLCB0YXJnZXQsIGRhdGEpIHtcbiAgQ2hhcmFjdGVyRGF0YS5jYWxsKHRoaXMpO1xuICB0aGlzLm5vZGVUeXBlID0gTm9kZS5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IGRvYztcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMuX2RhdGEgPSBkYXRhO1xufVxuXG52YXIgbm9kZVZhbHVlID0ge1xuICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5fZGF0YTsgfSxcbiAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgaWYgKHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkKSB7IHYgPSAnJzsgfSBlbHNlIHsgdiA9IFN0cmluZyh2KTsgfVxuICAgIHRoaXMuX2RhdGEgPSB2O1xuICAgIGlmICh0aGlzLnJvb3RlZCkgdGhpcy5vd25lckRvY3VtZW50Lm11dGF0ZVZhbHVlKHRoaXMpO1xuICB9XG59O1xuXG5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwge1xuICBub2RlTmFtZTogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy50YXJnZXQ7IH19LFxuICBub2RlVmFsdWU6IG5vZGVWYWx1ZSxcbiAgdGV4dENvbnRlbnQ6IG5vZGVWYWx1ZSxcbiAgZGF0YToge1xuICAgIGdldDogbm9kZVZhbHVlLmdldCxcbiAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIG5vZGVWYWx1ZS5zZXQuY2FsbCh0aGlzLCB2PT09bnVsbCA/ICcnIDogU3RyaW5nKHYpKTtcbiAgICB9LFxuICB9LFxuXG4gIC8vIFV0aWxpdHkgbWV0aG9kc1xuICBjbG9uZTogeyB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICByZXR1cm4gbmV3IFByb2Nlc3NpbmdJbnN0cnVjdGlvbih0aGlzLm93bmVyRG9jdW1lbnQsIHRoaXMudGFyZ2V0LCB0aGlzLl9kYXRhKTtcbiAgfX0sXG4gIGlzRXF1YWw6IHsgdmFsdWU6IGZ1bmN0aW9uIGlzRXF1YWwobikge1xuICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0ID09PSBuLnRhcmdldCAmJiB0aGlzLl9kYXRhID09PSBuLl9kYXRhO1xuICB9fVxuXG59KTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiTm9kZSIsInJlcXVpcmUiLCJDaGFyYWN0ZXJEYXRhIiwiZG9jIiwidGFyZ2V0IiwiZGF0YSIsImNhbGwiLCJub2RlVHlwZSIsIlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSIsIm93bmVyRG9jdW1lbnQiLCJfZGF0YSIsIm5vZGVWYWx1ZSIsImdldCIsInNldCIsInYiLCJ1bmRlZmluZWQiLCJTdHJpbmciLCJyb290ZWQiLCJtdXRhdGVWYWx1ZSIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIm5vZGVOYW1lIiwidGV4dENvbnRlbnQiLCJjbG9uZSIsInZhbHVlIiwiaXNFcXVhbCIsIm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/ProcessingInstruction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/Text.js":
/*!**************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/Text.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Text;\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar CharacterData = __webpack_require__(/*! ./CharacterData */ \"(ssr)/./node_modules/@mathpix/domino/lib/CharacterData.js\");\nfunction Text(doc, data) {\n    CharacterData.call(this);\n    this.nodeType = Node.TEXT_NODE;\n    this.ownerDocument = doc;\n    this._data = data;\n    this._index = undefined;\n}\nvar nodeValue = {\n    get: function() {\n        return this._data;\n    },\n    set: function(v) {\n        if (v === null || v === undefined) {\n            v = \"\";\n        } else {\n            v = String(v);\n        }\n        if (v === this._data) return;\n        this._data = v;\n        if (this.rooted) this.ownerDocument.mutateValue(this);\n        if (this.parentNode && this.parentNode._textchangehook) this.parentNode._textchangehook(this);\n    }\n};\nText.prototype = Object.create(CharacterData.prototype, {\n    nodeName: {\n        value: \"#text\"\n    },\n    // These three attributes are all the same.\n    // The data attribute has a [TreatNullAs=EmptyString] but we'll\n    // implement that at the interface level\n    nodeValue: nodeValue,\n    textContent: nodeValue,\n    data: {\n        get: nodeValue.get,\n        set: function(v) {\n            nodeValue.set.call(this, v === null ? \"\" : String(v));\n        }\n    },\n    splitText: {\n        value: function splitText(offset) {\n            if (offset > this._data.length || offset < 0) utils.IndexSizeError();\n            var newdata = this._data.substring(offset), newnode = this.ownerDocument.createTextNode(newdata);\n            this.data = this.data.substring(0, offset);\n            var parent = this.parentNode;\n            if (parent !== null) parent.insertBefore(newnode, this.nextSibling);\n            return newnode;\n        }\n    },\n    wholeText: {\n        get: function wholeText() {\n            var result = this.textContent;\n            for(var next = this.nextSibling; next; next = next.nextSibling){\n                if (next.nodeType !== Node.TEXT_NODE) {\n                    break;\n                }\n                result += next.textContent;\n            }\n            return result;\n        }\n    },\n    // Obsolete, removed from spec.\n    replaceWholeText: {\n        value: utils.nyi\n    },\n    // Utility methods\n    clone: {\n        value: function clone() {\n            return new Text(this.ownerDocument, this._data);\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9UZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsUUFBUUMsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUUsZ0JBQWdCRixtQkFBT0EsQ0FBQztBQUU1QixTQUFTRixLQUFLSyxHQUFHLEVBQUVDLElBQUk7SUFDckJGLGNBQWNHLElBQUksQ0FBQyxJQUFJO0lBQ3ZCLElBQUksQ0FBQ0MsUUFBUSxHQUFHTCxLQUFLTSxTQUFTO0lBQzlCLElBQUksQ0FBQ0MsYUFBYSxHQUFHTDtJQUNyQixJQUFJLENBQUNNLEtBQUssR0FBR0w7SUFDYixJQUFJLENBQUNNLE1BQU0sR0FBR0M7QUFDaEI7QUFFQSxJQUFJQyxZQUFZO0lBQ2RDLEtBQUs7UUFBYSxPQUFPLElBQUksQ0FBQ0osS0FBSztJQUFFO0lBQ3JDSyxLQUFLLFNBQVNDLENBQUM7UUFDYixJQUFJQSxNQUFNLFFBQVFBLE1BQU1KLFdBQVc7WUFBRUksSUFBSTtRQUFJLE9BQU87WUFBRUEsSUFBSUMsT0FBT0Q7UUFBSTtRQUNyRSxJQUFJQSxNQUFNLElBQUksQ0FBQ04sS0FBSyxFQUFFO1FBQ3RCLElBQUksQ0FBQ0EsS0FBSyxHQUFHTTtRQUNiLElBQUksSUFBSSxDQUFDRSxNQUFNLEVBQ2IsSUFBSSxDQUFDVCxhQUFhLENBQUNVLFdBQVcsQ0FBQyxJQUFJO1FBQ3JDLElBQUksSUFBSSxDQUFDQyxVQUFVLElBQ2pCLElBQUksQ0FBQ0EsVUFBVSxDQUFDQyxlQUFlLEVBQy9CLElBQUksQ0FBQ0QsVUFBVSxDQUFDQyxlQUFlLENBQUMsSUFBSTtJQUN4QztBQUNGO0FBRUF0QixLQUFLdUIsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNyQixjQUFjbUIsU0FBUyxFQUFFO0lBQ3RERyxVQUFVO1FBQUVDLE9BQU87SUFBUTtJQUMzQiwyQ0FBMkM7SUFDM0MsK0RBQStEO0lBQy9ELHdDQUF3QztJQUN4Q2IsV0FBV0E7SUFDWGMsYUFBYWQ7SUFDYlIsTUFBTTtRQUNKUyxLQUFLRCxVQUFVQyxHQUFHO1FBQ2xCQyxLQUFLLFNBQVNDLENBQUM7WUFDYkgsVUFBVUUsR0FBRyxDQUFDVCxJQUFJLENBQUMsSUFBSSxFQUFFVSxNQUFJLE9BQU8sS0FBS0MsT0FBT0Q7UUFDbEQ7SUFDRjtJQUVBWSxXQUFXO1FBQUVGLE9BQU8sU0FBU0UsVUFBVUMsTUFBTTtZQUMzQyxJQUFJQSxTQUFTLElBQUksQ0FBQ25CLEtBQUssQ0FBQ29CLE1BQU0sSUFBSUQsU0FBUyxHQUFHN0IsTUFBTStCLGNBQWM7WUFFbEUsSUFBSUMsVUFBVSxJQUFJLENBQUN0QixLQUFLLENBQUN1QixTQUFTLENBQUNKLFNBQ2pDSyxVQUFVLElBQUksQ0FBQ3pCLGFBQWEsQ0FBQzBCLGNBQWMsQ0FBQ0g7WUFDOUMsSUFBSSxDQUFDM0IsSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxDQUFDNEIsU0FBUyxDQUFDLEdBQUdKO1lBRW5DLElBQUlPLFNBQVMsSUFBSSxDQUFDaEIsVUFBVTtZQUM1QixJQUFJZ0IsV0FBVyxNQUNiQSxPQUFPQyxZQUFZLENBQUNILFNBQVMsSUFBSSxDQUFDSSxXQUFXO1lBRS9DLE9BQU9KO1FBQ1Q7SUFBQztJQUVESyxXQUFXO1FBQUV6QixLQUFLLFNBQVN5QjtZQUN6QixJQUFJQyxTQUFTLElBQUksQ0FBQ2IsV0FBVztZQUM3QixJQUFLLElBQUljLE9BQU8sSUFBSSxDQUFDSCxXQUFXLEVBQUVHLE1BQU1BLE9BQU9BLEtBQUtILFdBQVcsQ0FBRTtnQkFDL0QsSUFBSUcsS0FBS2xDLFFBQVEsS0FBS0wsS0FBS00sU0FBUyxFQUFFO29CQUFFO2dCQUFPO2dCQUMvQ2dDLFVBQVVDLEtBQUtkLFdBQVc7WUFDNUI7WUFDQSxPQUFPYTtRQUNUO0lBQUM7SUFDRCwrQkFBK0I7SUFDL0JFLGtCQUFrQjtRQUFFaEIsT0FBTzFCLE1BQU0yQyxHQUFHO0lBQUM7SUFFckMsa0JBQWtCO0lBQ2xCQyxPQUFPO1FBQUVsQixPQUFPLFNBQVNrQjtZQUN2QixPQUFPLElBQUk3QyxLQUFLLElBQUksQ0FBQ1UsYUFBYSxFQUFFLElBQUksQ0FBQ0MsS0FBSztRQUNoRDtJQUFDO0FBRUgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9UZXh0LmpzP2I3OTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFRleHQ7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XG52YXIgQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyRGF0YScpO1xuXG5mdW5jdGlvbiBUZXh0KGRvYywgZGF0YSkge1xuICBDaGFyYWN0ZXJEYXRhLmNhbGwodGhpcyk7XG4gIHRoaXMubm9kZVR5cGUgPSBOb2RlLlRFWFRfTk9ERTtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gZG9jO1xuICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgdGhpcy5faW5kZXggPSB1bmRlZmluZWQ7XG59XG5cbnZhciBub2RlVmFsdWUgPSB7XG4gIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9kYXRhOyB9LFxuICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQpIHsgdiA9ICcnOyB9IGVsc2UgeyB2ID0gU3RyaW5nKHYpOyB9XG4gICAgaWYgKHYgPT09IHRoaXMuX2RhdGEpIHJldHVybjtcbiAgICB0aGlzLl9kYXRhID0gdjtcbiAgICBpZiAodGhpcy5yb290ZWQpXG4gICAgICB0aGlzLm93bmVyRG9jdW1lbnQubXV0YXRlVmFsdWUodGhpcyk7XG4gICAgaWYgKHRoaXMucGFyZW50Tm9kZSAmJlxuICAgICAgdGhpcy5wYXJlbnROb2RlLl90ZXh0Y2hhbmdlaG9vaylcbiAgICAgIHRoaXMucGFyZW50Tm9kZS5fdGV4dGNoYW5nZWhvb2sodGhpcyk7XG4gIH1cbn07XG5cblRleHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwge1xuICBub2RlTmFtZTogeyB2YWx1ZTogXCIjdGV4dFwiIH0sXG4gIC8vIFRoZXNlIHRocmVlIGF0dHJpYnV0ZXMgYXJlIGFsbCB0aGUgc2FtZS5cbiAgLy8gVGhlIGRhdGEgYXR0cmlidXRlIGhhcyBhIFtUcmVhdE51bGxBcz1FbXB0eVN0cmluZ10gYnV0IHdlJ2xsXG4gIC8vIGltcGxlbWVudCB0aGF0IGF0IHRoZSBpbnRlcmZhY2UgbGV2ZWxcbiAgbm9kZVZhbHVlOiBub2RlVmFsdWUsXG4gIHRleHRDb250ZW50OiBub2RlVmFsdWUsXG4gIGRhdGE6IHtcbiAgICBnZXQ6IG5vZGVWYWx1ZS5nZXQsXG4gICAgc2V0OiBmdW5jdGlvbih2KSB7XG4gICAgICBub2RlVmFsdWUuc2V0LmNhbGwodGhpcywgdj09PW51bGwgPyAnJyA6IFN0cmluZyh2KSk7XG4gICAgfSxcbiAgfSxcblxuICBzcGxpdFRleHQ6IHsgdmFsdWU6IGZ1bmN0aW9uIHNwbGl0VGV4dChvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID4gdGhpcy5fZGF0YS5sZW5ndGggfHwgb2Zmc2V0IDwgMCkgdXRpbHMuSW5kZXhTaXplRXJyb3IoKTtcblxuICAgIHZhciBuZXdkYXRhID0gdGhpcy5fZGF0YS5zdWJzdHJpbmcob2Zmc2V0KSxcbiAgICAgIG5ld25vZGUgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobmV3ZGF0YSk7XG4gICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhLnN1YnN0cmluZygwLCBvZmZzZXQpO1xuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50ICE9PSBudWxsKVxuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShuZXdub2RlLCB0aGlzLm5leHRTaWJsaW5nKTtcblxuICAgIHJldHVybiBuZXdub2RlO1xuICB9fSxcblxuICB3aG9sZVRleHQ6IHsgZ2V0OiBmdW5jdGlvbiB3aG9sZVRleHQoKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMudGV4dENvbnRlbnQ7XG4gICAgZm9yICh2YXIgbmV4dCA9IHRoaXMubmV4dFNpYmxpbmc7IG5leHQ7IG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nKSB7XG4gICAgICBpZiAobmV4dC5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUpIHsgYnJlYWs7IH1cbiAgICAgIHJlc3VsdCArPSBuZXh0LnRleHRDb250ZW50O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9fSxcbiAgLy8gT2Jzb2xldGUsIHJlbW92ZWQgZnJvbSBzcGVjLlxuICByZXBsYWNlV2hvbGVUZXh0OiB7IHZhbHVlOiB1dGlscy5ueWkgfSxcblxuICAvLyBVdGlsaXR5IG1ldGhvZHNcbiAgY2xvbmU6IHsgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgVGV4dCh0aGlzLm93bmVyRG9jdW1lbnQsIHRoaXMuX2RhdGEpO1xuICB9fSxcblxufSk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlRleHQiLCJ1dGlscyIsInJlcXVpcmUiLCJOb2RlIiwiQ2hhcmFjdGVyRGF0YSIsImRvYyIsImRhdGEiLCJjYWxsIiwibm9kZVR5cGUiLCJURVhUX05PREUiLCJvd25lckRvY3VtZW50IiwiX2RhdGEiLCJfaW5kZXgiLCJ1bmRlZmluZWQiLCJub2RlVmFsdWUiLCJnZXQiLCJzZXQiLCJ2IiwiU3RyaW5nIiwicm9vdGVkIiwibXV0YXRlVmFsdWUiLCJwYXJlbnROb2RlIiwiX3RleHRjaGFuZ2Vob29rIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwibm9kZU5hbWUiLCJ2YWx1ZSIsInRleHRDb250ZW50Iiwic3BsaXRUZXh0Iiwib2Zmc2V0IiwibGVuZ3RoIiwiSW5kZXhTaXplRXJyb3IiLCJuZXdkYXRhIiwic3Vic3RyaW5nIiwibmV3bm9kZSIsImNyZWF0ZVRleHROb2RlIiwicGFyZW50IiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJ3aG9sZVRleHQiLCJyZXN1bHQiLCJuZXh0IiwicmVwbGFjZVdob2xlVGV4dCIsIm55aSIsImNsb25lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/Text.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/TreeWalker.js":
/*!********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/TreeWalker.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = TreeWalker;\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar NodeFilter = __webpack_require__(/*! ./NodeFilter */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeFilter.js\");\nvar NodeTraversal = __webpack_require__(/*! ./NodeTraversal */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeTraversal.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar mapChild = {\n    first: \"firstChild\",\n    last: \"lastChild\",\n    next: \"firstChild\",\n    previous: \"lastChild\"\n};\nvar mapSibling = {\n    first: \"nextSibling\",\n    last: \"previousSibling\",\n    next: \"nextSibling\",\n    previous: \"previousSibling\"\n};\n/* Private methods and helpers */ /**\n * @spec https://dom.spec.whatwg.org/#concept-traverse-children\n * @method\n * @access private\n * @param {TreeWalker} tw\n * @param {string} type One of 'first' or 'last'.\n * @return {Node|null}\n */ function traverseChildren(tw, type) {\n    var child, node, parent, result, sibling;\n    node = tw._currentNode[mapChild[type]];\n    while(node !== null){\n        result = tw._internalFilter(node);\n        if (result === NodeFilter.FILTER_ACCEPT) {\n            tw._currentNode = node;\n            return node;\n        }\n        if (result === NodeFilter.FILTER_SKIP) {\n            child = node[mapChild[type]];\n            if (child !== null) {\n                node = child;\n                continue;\n            }\n        }\n        while(node !== null){\n            sibling = node[mapSibling[type]];\n            if (sibling !== null) {\n                node = sibling;\n                break;\n            }\n            parent = node.parentNode;\n            if (parent === null || parent === tw.root || parent === tw._currentNode) {\n                return null;\n            } else {\n                node = parent;\n            }\n        }\n    }\n    return null;\n}\n/**\n * @spec https://dom.spec.whatwg.org/#concept-traverse-siblings\n * @method\n * @access private\n * @param {TreeWalker} tw\n * @param {TreeWalker} type One of 'next' or 'previous'.\n * @return {Node|nul}\n */ function traverseSiblings(tw, type) {\n    var node, result, sibling;\n    node = tw._currentNode;\n    if (node === tw.root) {\n        return null;\n    }\n    while(true){\n        sibling = node[mapSibling[type]];\n        while(sibling !== null){\n            node = sibling;\n            result = tw._internalFilter(node);\n            if (result === NodeFilter.FILTER_ACCEPT) {\n                tw._currentNode = node;\n                return node;\n            }\n            sibling = node[mapChild[type]];\n            if (result === NodeFilter.FILTER_REJECT || sibling === null) {\n                sibling = node[mapSibling[type]];\n            }\n        }\n        node = node.parentNode;\n        if (node === null || node === tw.root) {\n            return null;\n        }\n        if (tw._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {\n            return null;\n        }\n    }\n}\n/* Public API */ /**\n * Latest version: https://dom.spec.whatwg.org/#treewalker\n *\n * @constructor\n * @param {Node} root\n * @param {number} whatToShow [optional]\n * @param {Function|NodeFilter} filter [optional]\n * @throws Error\n */ function TreeWalker(root, whatToShow, filter) {\n    if (!root || !root.nodeType) {\n        utils.NotSupportedError();\n    }\n    // Read-only properties\n    this._root = root;\n    this._whatToShow = Number(whatToShow) || 0;\n    this._filter = filter || null;\n    this._active = false;\n    // Read-write property\n    this._currentNode = root;\n}\nObject.defineProperties(TreeWalker.prototype, {\n    root: {\n        get: function() {\n            return this._root;\n        }\n    },\n    whatToShow: {\n        get: function() {\n            return this._whatToShow;\n        }\n    },\n    filter: {\n        get: function() {\n            return this._filter;\n        }\n    },\n    currentNode: {\n        get: function currentNode() {\n            return this._currentNode;\n        },\n        set: function setCurrentNode(v) {\n            if (!(v instanceof Node)) {\n                throw new TypeError(\"Not a Node\"); // `null` is also not a node\n            }\n            this._currentNode = v;\n        }\n    },\n    /**\n   * @method\n   * @param {Node} node\n   * @return {Number} Constant NodeFilter.FILTER_ACCEPT,\n   *  NodeFilter.FILTER_REJECT or NodeFilter.FILTER_SKIP.\n   */ _internalFilter: {\n        value: function _internalFilter(node) {\n            /* jshint bitwise: false */ var result, filter;\n            if (this._active) {\n                utils.InvalidStateError();\n            }\n            // Maps nodeType to whatToShow\n            if (!(1 << node.nodeType - 1 & this._whatToShow)) {\n                return NodeFilter.FILTER_SKIP;\n            }\n            filter = this._filter;\n            if (filter === null) {\n                result = NodeFilter.FILTER_ACCEPT;\n            } else {\n                this._active = true;\n                try {\n                    if (typeof filter === \"function\") {\n                        result = filter(node);\n                    } else {\n                        result = filter.acceptNode(node);\n                    }\n                } finally{\n                    this._active = false;\n                }\n            }\n            // Note that coercing to a number means that\n            //  `true` becomes `1` (which is NodeFilter.FILTER_ACCEPT)\n            //  `false` becomes `0` (neither accept, reject, or skip)\n            return +result;\n        }\n    },\n    /**\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-parentnode\n   * @based on WebKit's TreeWalker::parentNode\n   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L50\n   * @method\n   * @return {Node|null}\n   */ parentNode: {\n        value: function parentNode() {\n            var node = this._currentNode;\n            while(node !== this.root){\n                node = node.parentNode;\n                if (node === null) {\n                    return null;\n                }\n                if (this._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {\n                    this._currentNode = node;\n                    return node;\n                }\n            }\n            return null;\n        }\n    },\n    /**\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-firstchild\n   * @method\n   * @return {Node|null}\n   */ firstChild: {\n        value: function firstChild() {\n            return traverseChildren(this, \"first\");\n        }\n    },\n    /**\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-lastchild\n   * @method\n   * @return {Node|null}\n   */ lastChild: {\n        value: function lastChild() {\n            return traverseChildren(this, \"last\");\n        }\n    },\n    /**\n   * @spec http://www.w3.org/TR/dom/#dom-treewalker-previoussibling\n   * @method\n   * @return {Node|null}\n   */ previousSibling: {\n        value: function previousSibling() {\n            return traverseSiblings(this, \"previous\");\n        }\n    },\n    /**\n   * @spec http://www.w3.org/TR/dom/#dom-treewalker-nextsibling\n   * @method\n   * @return {Node|null}\n   */ nextSibling: {\n        value: function nextSibling() {\n            return traverseSiblings(this, \"next\");\n        }\n    },\n    /**\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-previousnode\n   * @based on WebKit's TreeWalker::previousNode\n   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L181\n   * @method\n   * @return {Node|null}\n   */ previousNode: {\n        value: function previousNode() {\n            var node, result, previousSibling, lastChild;\n            node = this._currentNode;\n            while(node !== this._root){\n                for(previousSibling = node.previousSibling; previousSibling; previousSibling = node.previousSibling){\n                    node = previousSibling;\n                    result = this._internalFilter(node);\n                    if (result === NodeFilter.FILTER_REJECT) {\n                        continue;\n                    }\n                    for(lastChild = node.lastChild; lastChild; lastChild = node.lastChild){\n                        node = lastChild;\n                        result = this._internalFilter(node);\n                        if (result === NodeFilter.FILTER_REJECT) {\n                            break;\n                        }\n                    }\n                    if (result === NodeFilter.FILTER_ACCEPT) {\n                        this._currentNode = node;\n                        return node;\n                    }\n                }\n                if (node === this.root || node.parentNode === null) {\n                    return null;\n                }\n                node = node.parentNode;\n                if (this._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {\n                    this._currentNode = node;\n                    return node;\n                }\n            }\n            return null;\n        }\n    },\n    /**\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-nextnode\n   * @based on WebKit's TreeWalker::nextNode\n   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L228\n   * @method\n   * @return {Node|null}\n   */ nextNode: {\n        value: function nextNode() {\n            var node, result, firstChild, nextSibling;\n            node = this._currentNode;\n            result = NodeFilter.FILTER_ACCEPT;\n            CHILDREN: while(true){\n                for(firstChild = node.firstChild; firstChild; firstChild = node.firstChild){\n                    node = firstChild;\n                    result = this._internalFilter(node);\n                    if (result === NodeFilter.FILTER_ACCEPT) {\n                        this._currentNode = node;\n                        return node;\n                    } else if (result === NodeFilter.FILTER_REJECT) {\n                        break;\n                    }\n                }\n                for(nextSibling = NodeTraversal.nextSkippingChildren(node, this.root); nextSibling; nextSibling = NodeTraversal.nextSkippingChildren(node, this.root)){\n                    node = nextSibling;\n                    result = this._internalFilter(node);\n                    if (result === NodeFilter.FILTER_ACCEPT) {\n                        this._currentNode = node;\n                        return node;\n                    } else if (result === NodeFilter.FILTER_SKIP) {\n                        continue CHILDREN;\n                    }\n                }\n                return null;\n            }\n        }\n    },\n    /** For compatibility with web-platform-tests. */ toString: {\n        value: function toString() {\n            return \"[object TreeWalker]\";\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/TreeWalker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/UIEvent.js":
/*!*****************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/UIEvent.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Event = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/@mathpix/domino/lib/Event.js\");\nmodule.exports = UIEvent;\nfunction UIEvent() {\n    // Just use the superclass constructor to initialize\n    Event.call(this);\n    this.view = null; // FF uses the current window\n    this.detail = 0;\n}\nUIEvent.prototype = Object.create(Event.prototype, {\n    constructor: {\n        value: UIEvent\n    },\n    initUIEvent: {\n        value: function(type, bubbles, cancelable, view, detail) {\n            this.initEvent(type, bubbles, cancelable);\n            this.view = view;\n            this.detail = detail;\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9VSUV2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEJDLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsU0FBU0E7SUFDUCxvREFBb0Q7SUFDcERKLE1BQU1LLElBQUksQ0FBQyxJQUFJO0lBQ2YsSUFBSSxDQUFDQyxJQUFJLEdBQUcsTUFBTSw2QkFBNkI7SUFDL0MsSUFBSSxDQUFDQyxNQUFNLEdBQUc7QUFDaEI7QUFDQUgsUUFBUUksU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNWLE1BQU1RLFNBQVMsRUFBRTtJQUNqREcsYUFBYTtRQUFFQyxPQUFPUjtJQUFRO0lBQzlCUyxhQUFhO1FBQUVELE9BQU8sU0FBU0UsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRVYsSUFBSSxFQUFFQyxNQUFNO1lBQ3BFLElBQUksQ0FBQ1UsU0FBUyxDQUFDSCxNQUFNQyxTQUFTQztZQUM5QixJQUFJLENBQUNWLElBQUksR0FBR0E7WUFDWixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDaEI7SUFBQztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BtYXRocGl4L2RvbWluby9saWIvVUlFdmVudC5qcz8xZThlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIEV2ZW50ID0gcmVxdWlyZSgnLi9FdmVudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVJRXZlbnQ7XG5cbmZ1bmN0aW9uIFVJRXZlbnQoKSB7XG4gIC8vIEp1c3QgdXNlIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yIHRvIGluaXRpYWxpemVcbiAgRXZlbnQuY2FsbCh0aGlzKTtcbiAgdGhpcy52aWV3ID0gbnVsbDsgLy8gRkYgdXNlcyB0aGUgY3VycmVudCB3aW5kb3dcbiAgdGhpcy5kZXRhaWwgPSAwO1xufVxuVUlFdmVudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEV2ZW50LnByb3RvdHlwZSwge1xuICBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogVUlFdmVudCB9LFxuICBpbml0VUlFdmVudDogeyB2YWx1ZTogZnVuY3Rpb24odHlwZSwgYnViYmxlcywgY2FuY2VsYWJsZSwgdmlldywgZGV0YWlsKSB7XG4gICAgdGhpcy5pbml0RXZlbnQodHlwZSwgYnViYmxlcywgY2FuY2VsYWJsZSk7XG4gICAgdGhpcy52aWV3ID0gdmlldztcbiAgICB0aGlzLmRldGFpbCA9IGRldGFpbDtcbiAgfX1cbn0pO1xuIl0sIm5hbWVzIjpbIkV2ZW50IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJVSUV2ZW50IiwiY2FsbCIsInZpZXciLCJkZXRhaWwiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiaW5pdFVJRXZlbnQiLCJ0eXBlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJpbml0RXZlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/UIEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/URL.js":
/*!*************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/URL.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = URL;\nfunction URL(url) {\n    if (!url) return Object.create(URL.prototype);\n    // Can't use String.trim() since it defines whitespace differently than HTML\n    this.url = url.replace(/^[ \\t\\n\\r\\f]+|[ \\t\\n\\r\\f]+$/g, \"\");\n    // See http://tools.ietf.org/html/rfc3986#appendix-B\n    // and https://url.spec.whatwg.org/#parsing\n    var match = URL.pattern.exec(this.url);\n    if (match) {\n        if (match[2]) this.scheme = match[2];\n        if (match[4]) {\n            // parse username/password\n            var userinfo = match[4].match(URL.userinfoPattern);\n            if (userinfo) {\n                this.username = userinfo[1];\n                this.password = userinfo[3];\n                match[4] = match[4].substring(userinfo[0].length);\n            }\n            if (match[4].match(URL.portPattern)) {\n                var pos = match[4].lastIndexOf(\":\");\n                this.host = match[4].substring(0, pos);\n                this.port = match[4].substring(pos + 1);\n            } else {\n                this.host = match[4];\n            }\n        }\n        if (match[5]) this.path = match[5];\n        if (match[6]) this.query = match[7];\n        if (match[8]) this.fragment = match[9];\n    }\n}\nURL.pattern = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/;\nURL.userinfoPattern = /^([^@:]*)(:([^@]*))?@/;\nURL.portPattern = /:\\d+$/;\nURL.authorityPattern = /^[^:\\/?#]+:\\/\\//;\nURL.hierarchyPattern = /^[^:\\/?#]+:\\//;\n// Return a percentEncoded version of s.\n// S should be a single-character string\n// XXX: needs to do utf-8 encoding?\nURL.percentEncode = function percentEncode(s) {\n    var c = s.charCodeAt(0);\n    if (c < 256) return \"%\" + c.toString(16);\n    else throw Error(\"can't percent-encode codepoints > 255 yet\");\n};\nURL.prototype = {\n    constructor: URL,\n    // XXX: not sure if this is the precise definition of absolute\n    isAbsolute: function() {\n        return !!this.scheme;\n    },\n    isAuthorityBased: function() {\n        return URL.authorityPattern.test(this.url);\n    },\n    isHierarchical: function() {\n        return URL.hierarchyPattern.test(this.url);\n    },\n    toString: function() {\n        var s = \"\";\n        if (this.scheme !== undefined) s += this.scheme + \":\";\n        if (this.isAbsolute()) {\n            s += \"//\";\n            if (this.username || this.password) {\n                s += this.username || \"\";\n                if (this.password) {\n                    s += \":\" + this.password;\n                }\n                s += \"@\";\n            }\n            if (this.host) {\n                s += this.host;\n            }\n        }\n        if (this.port !== undefined) s += \":\" + this.port;\n        if (this.path !== undefined) s += this.path;\n        if (this.query !== undefined) s += \"?\" + this.query;\n        if (this.fragment !== undefined) s += \"#\" + this.fragment;\n        return s;\n    },\n    // See: http://tools.ietf.org/html/rfc3986#section-5.2\n    // and https://url.spec.whatwg.org/#constructors\n    resolve: function(relative) {\n        var base = this; // The base url we're resolving against\n        var r = new URL(relative); // The relative reference url to resolve\n        var t = new URL(); // The absolute target url we will return\n        if (r.scheme !== undefined) {\n            t.scheme = r.scheme;\n            t.username = r.username;\n            t.password = r.password;\n            t.host = r.host;\n            t.port = r.port;\n            t.path = remove_dot_segments(r.path);\n            t.query = r.query;\n        } else {\n            t.scheme = base.scheme;\n            if (r.host !== undefined) {\n                t.username = r.username;\n                t.password = r.password;\n                t.host = r.host;\n                t.port = r.port;\n                t.path = remove_dot_segments(r.path);\n                t.query = r.query;\n            } else {\n                t.username = base.username;\n                t.password = base.password;\n                t.host = base.host;\n                t.port = base.port;\n                if (!r.path) {\n                    t.path = base.path;\n                    if (r.query !== undefined) t.query = r.query;\n                    else t.query = base.query;\n                } else {\n                    if (r.path.charAt(0) === \"/\") {\n                        t.path = remove_dot_segments(r.path);\n                    } else {\n                        t.path = merge(base.path, r.path);\n                        t.path = remove_dot_segments(t.path);\n                    }\n                    t.query = r.query;\n                }\n            }\n        }\n        t.fragment = r.fragment;\n        return t.toString();\n        function merge(basepath, refpath) {\n            if (base.host !== undefined && !base.path) return \"/\" + refpath;\n            var lastslash = basepath.lastIndexOf(\"/\");\n            if (lastslash === -1) return refpath;\n            else return basepath.substring(0, lastslash + 1) + refpath;\n        }\n        function remove_dot_segments(path) {\n            if (!path) return path; // For \"\" or undefined\n            var output = \"\";\n            while(path.length > 0){\n                if (path === \".\" || path === \"..\") {\n                    path = \"\";\n                    break;\n                }\n                var twochars = path.substring(0, 2);\n                var threechars = path.substring(0, 3);\n                var fourchars = path.substring(0, 4);\n                if (threechars === \"../\") {\n                    path = path.substring(3);\n                } else if (twochars === \"./\") {\n                    path = path.substring(2);\n                } else if (threechars === \"/./\") {\n                    path = \"/\" + path.substring(3);\n                } else if (twochars === \"/.\" && path.length === 2) {\n                    path = \"/\";\n                } else if (fourchars === \"/../\" || threechars === \"/..\" && path.length === 3) {\n                    path = \"/\" + path.substring(4);\n                    output = output.replace(/\\/?[^\\/]*$/, \"\");\n                } else {\n                    var segment = path.match(/(\\/?([^\\/]*))/)[0];\n                    output += segment;\n                    path = path.substring(segment.length);\n                }\n            }\n            return output;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/URL.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/URLUtils.js":
/*!******************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/URLUtils.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar URL = __webpack_require__(/*! ./URL */ \"(ssr)/./node_modules/@mathpix/domino/lib/URL.js\");\nmodule.exports = URLUtils;\n// Allow the `x == null` pattern.  This is eslint's \"null: 'ignore'\" option,\n// but jshint doesn't support this.\n/* jshint eqeqeq: false */ // This is an abstract superclass for Location, HTMLAnchorElement and\n// other types that have the standard complement of \"URL decomposition\n// IDL attributes\".  This is now standardized as URLUtils, see:\n// https://url.spec.whatwg.org/#urlutils\n// Subclasses must define a getter/setter on href.\n// The getter and setter methods parse and rebuild the URL on each\n// invocation; there is no attempt to cache the value and be more efficient\nfunction URLUtils() {}\nURLUtils.prototype = Object.create(Object.prototype, {\n    _url: {\n        get: function() {\n            // XXX: this should do the \"Reinitialize url\" steps, and \"null\" should\n            // be a valid return value.\n            return new URL(this.href);\n        }\n    },\n    protocol: {\n        get: function() {\n            var url = this._url;\n            if (url && url.scheme) return url.scheme + \":\";\n            else return \":\";\n        },\n        set: function(v) {\n            var output = this.href;\n            var url = new URL(output);\n            if (url.isAbsolute()) {\n                v = v.replace(/:+$/, \"\");\n                v = v.replace(/[^-+\\.a-zA-Z0-9]/g, URL.percentEncode);\n                if (v.length > 0) {\n                    url.scheme = v;\n                    output = url.toString();\n                }\n            }\n            this.href = output;\n        }\n    },\n    host: {\n        get: function() {\n            var url = this._url;\n            if (url.isAbsolute() && url.isAuthorityBased()) return url.host + (url.port ? \":\" + url.port : \"\");\n            else return \"\";\n        },\n        set: function(v) {\n            var output = this.href;\n            var url = new URL(output);\n            if (url.isAbsolute() && url.isAuthorityBased()) {\n                v = v.replace(/[^-+\\._~!$&'()*,;:=a-zA-Z0-9]/g, URL.percentEncode);\n                if (v.length > 0) {\n                    url.host = v;\n                    delete url.port;\n                    output = url.toString();\n                }\n            }\n            this.href = output;\n        }\n    },\n    hostname: {\n        get: function() {\n            var url = this._url;\n            if (url.isAbsolute() && url.isAuthorityBased()) return url.host;\n            else return \"\";\n        },\n        set: function(v) {\n            var output = this.href;\n            var url = new URL(output);\n            if (url.isAbsolute() && url.isAuthorityBased()) {\n                v = v.replace(/^\\/+/, \"\");\n                v = v.replace(/[^-+\\._~!$&'()*,;:=a-zA-Z0-9]/g, URL.percentEncode);\n                if (v.length > 0) {\n                    url.host = v;\n                    output = url.toString();\n                }\n            }\n            this.href = output;\n        }\n    },\n    port: {\n        get: function() {\n            var url = this._url;\n            if (url.isAbsolute() && url.isAuthorityBased() && url.port !== undefined) return url.port;\n            else return \"\";\n        },\n        set: function(v) {\n            var output = this.href;\n            var url = new URL(output);\n            if (url.isAbsolute() && url.isAuthorityBased()) {\n                v = \"\" + v;\n                v = v.replace(/[^0-9].*$/, \"\");\n                v = v.replace(/^0+/, \"\");\n                if (v.length === 0) v = \"0\";\n                if (parseInt(v, 10) <= 65535) {\n                    url.port = v;\n                    output = url.toString();\n                }\n            }\n            this.href = output;\n        }\n    },\n    pathname: {\n        get: function() {\n            var url = this._url;\n            if (url.isAbsolute() && url.isHierarchical()) return url.path;\n            else return \"\";\n        },\n        set: function(v) {\n            var output = this.href;\n            var url = new URL(output);\n            if (url.isAbsolute() && url.isHierarchical()) {\n                if (v.charAt(0) !== \"/\") v = \"/\" + v;\n                v = v.replace(/[^-+\\._~!$&'()*,;:=@\\/a-zA-Z0-9]/g, URL.percentEncode);\n                url.path = v;\n                output = url.toString();\n            }\n            this.href = output;\n        }\n    },\n    search: {\n        get: function() {\n            var url = this._url;\n            if (url.isAbsolute() && url.isHierarchical() && url.query !== undefined) return \"?\" + url.query;\n            else return \"\";\n        },\n        set: function(v) {\n            var output = this.href;\n            var url = new URL(output);\n            if (url.isAbsolute() && url.isHierarchical()) {\n                if (v.charAt(0) === \"?\") v = v.substring(1);\n                v = v.replace(/[^-+\\._~!$&'()*,;:=@\\/?a-zA-Z0-9]/g, URL.percentEncode);\n                url.query = v;\n                output = url.toString();\n            }\n            this.href = output;\n        }\n    },\n    hash: {\n        get: function() {\n            var url = this._url;\n            if (url == null || url.fragment == null || url.fragment === \"\") {\n                return \"\";\n            } else {\n                return \"#\" + url.fragment;\n            }\n        },\n        set: function(v) {\n            var output = this.href;\n            var url = new URL(output);\n            if (v.charAt(0) === \"#\") v = v.substring(1);\n            v = v.replace(/[^-+\\._~!$&'()*,;:=@\\/?a-zA-Z0-9]/g, URL.percentEncode);\n            url.fragment = v;\n            output = url.toString();\n            this.href = output;\n        }\n    },\n    username: {\n        get: function() {\n            var url = this._url;\n            return url.username || \"\";\n        },\n        set: function(v) {\n            var output = this.href;\n            var url = new URL(output);\n            if (url.isAbsolute()) {\n                v = v.replace(/[\\x00-\\x1F\\x7F-\\uFFFF \"#<>?`\\/@\\\\:]/g, URL.percentEncode);\n                url.username = v;\n                output = url.toString();\n            }\n            this.href = output;\n        }\n    },\n    password: {\n        get: function() {\n            var url = this._url;\n            return url.password || \"\";\n        },\n        set: function(v) {\n            var output = this.href;\n            var url = new URL(output);\n            if (url.isAbsolute()) {\n                if (v === \"\") {\n                    url.password = null;\n                } else {\n                    v = v.replace(/[\\x00-\\x1F\\x7F-\\uFFFF \"#<>?`\\/@\\\\]/g, URL.percentEncode);\n                    url.password = v;\n                }\n                output = url.toString();\n            }\n            this.href = output;\n        }\n    },\n    origin: {\n        get: function() {\n            var url = this._url;\n            if (url == null) {\n                return \"\";\n            }\n            var originForPort = function(defaultPort) {\n                var origin = [\n                    url.scheme,\n                    url.host,\n                    +url.port || defaultPort\n                ];\n                // XXX should be \"unicode serialization\"\n                return origin[0] + \"://\" + origin[1] + (origin[2] === defaultPort ? \"\" : \":\" + origin[2]);\n            };\n            switch(url.scheme){\n                case \"ftp\":\n                    return originForPort(21);\n                case \"gopher\":\n                    return originForPort(70);\n                case \"http\":\n                case \"ws\":\n                    return originForPort(80);\n                case \"https\":\n                case \"wss\":\n                    return originForPort(443);\n                default:\n                    // this is what chrome does\n                    return url.scheme + \"://\";\n            }\n        }\n    }\n});\nURLUtils._inherit = function(proto) {\n    // copy getters/setters from URLUtils to o.\n    Object.getOwnPropertyNames(URLUtils.prototype).forEach(function(p) {\n        if (p === \"constructor\" || p === \"href\") {\n            return;\n        }\n        var desc = Object.getOwnPropertyDescriptor(URLUtils.prototype, p);\n        Object.defineProperty(proto, p, desc);\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/URLUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/Window.js":
/*!****************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/Window.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar DOMImplementation = __webpack_require__(/*! ./DOMImplementation */ \"(ssr)/./node_modules/@mathpix/domino/lib/DOMImplementation.js\");\nvar EventTarget = __webpack_require__(/*! ./EventTarget */ \"(ssr)/./node_modules/@mathpix/domino/lib/EventTarget.js\");\nvar Location = __webpack_require__(/*! ./Location */ \"(ssr)/./node_modules/@mathpix/domino/lib/Location.js\");\nvar sloppy = __webpack_require__(/*! ./sloppy */ \"(ssr)/./node_modules/@mathpix/domino/lib/sloppy.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nmodule.exports = Window;\nfunction Window(document) {\n    this.document = document || new DOMImplementation(null).createHTMLDocument(\"\");\n    this.document._scripting_enabled = true;\n    this.document.defaultView = this;\n    this.location = new Location(this, this.document._address || \"about:blank\");\n}\nWindow.prototype = Object.create(EventTarget.prototype, {\n    _run: {\n        value: sloppy.Window_run\n    },\n    console: {\n        value: console\n    },\n    history: {\n        value: {\n            back: utils.nyi,\n            forward: utils.nyi,\n            go: utils.nyi\n        }\n    },\n    navigator: {\n        value: __webpack_require__(/*! ./NavigatorID */ \"(ssr)/./node_modules/@mathpix/domino/lib/NavigatorID.js\")\n    },\n    // Self-referential properties\n    window: {\n        get: function() {\n            return this;\n        }\n    },\n    self: {\n        get: function() {\n            return this;\n        }\n    },\n    frames: {\n        get: function() {\n            return this;\n        }\n    },\n    // Self-referential properties for a top-level window\n    parent: {\n        get: function() {\n            return this;\n        }\n    },\n    top: {\n        get: function() {\n            return this;\n        }\n    },\n    // We don't support any other windows for now\n    length: {\n        value: 0\n    },\n    frameElement: {\n        value: null\n    },\n    opener: {\n        value: null\n    },\n    // The onload event handler.\n    // XXX: need to support a bunch of other event types, too,\n    // and have them interoperate with document.body.\n    onload: {\n        get: function() {\n            return this._getEventHandler(\"load\");\n        },\n        set: function(v) {\n            this._setEventHandler(\"load\", v);\n        }\n    },\n    // XXX This is a completely broken implementation\n    getComputedStyle: {\n        value: function getComputedStyle(elt) {\n            return elt.style;\n        }\n    }\n});\nutils.expose(__webpack_require__(/*! ./WindowTimers */ \"(ssr)/./node_modules/@mathpix/domino/lib/WindowTimers.js\"), Window);\nutils.expose(__webpack_require__(/*! ./impl */ \"(ssr)/./node_modules/@mathpix/domino/lib/impl.js\"), Window);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9XaW5kb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxvQkFBb0JDLG1CQUFPQSxDQUFDO0FBQ2hDLElBQUlDLGNBQWNELG1CQUFPQSxDQUFDO0FBQzFCLElBQUlFLFdBQVdGLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlJLFFBQVFKLG1CQUFPQSxDQUFDO0FBRXBCSyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLFNBQVNBLE9BQU9DLFFBQVE7SUFDdEIsSUFBSSxDQUFDQSxRQUFRLEdBQUdBLFlBQVksSUFBSVQsa0JBQWtCLE1BQU1VLGtCQUFrQixDQUFDO0lBQzNFLElBQUksQ0FBQ0QsUUFBUSxDQUFDRSxrQkFBa0IsR0FBRztJQUNuQyxJQUFJLENBQUNGLFFBQVEsQ0FBQ0csV0FBVyxHQUFHLElBQUk7SUFDaEMsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSVYsU0FBUyxJQUFJLEVBQUUsSUFBSSxDQUFDTSxRQUFRLENBQUNLLFFBQVEsSUFBSTtBQUMvRDtBQUVBTixPQUFPTyxTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ2YsWUFBWWEsU0FBUyxFQUFFO0lBQ3RERyxNQUFNO1FBQUVDLE9BQU9mLE9BQU9nQixVQUFVO0lBQUM7SUFDakNDLFNBQVM7UUFBRUYsT0FBT0U7SUFBUTtJQUMxQkMsU0FBUztRQUFFSCxPQUFPO1lBQ2hCSSxNQUFNbEIsTUFBTW1CLEdBQUc7WUFDZkMsU0FBU3BCLE1BQU1tQixHQUFHO1lBQ2xCRSxJQUFJckIsTUFBTW1CLEdBQUc7UUFDZjtJQUFDO0lBQ0RHLFdBQVc7UUFBRVIsT0FBT2xCLG1CQUFPQSxDQUFDLDhFQUFlO0lBQUU7SUFFN0MsOEJBQThCO0lBQzlCMkIsUUFBUTtRQUFFQyxLQUFLO1lBQWEsT0FBTyxJQUFJO1FBQUU7SUFBQztJQUMxQ0MsTUFBTTtRQUFFRCxLQUFLO1lBQWEsT0FBTyxJQUFJO1FBQUU7SUFBQztJQUN4Q0UsUUFBUTtRQUFFRixLQUFLO1lBQWEsT0FBTyxJQUFJO1FBQUU7SUFBQztJQUUxQyxxREFBcUQ7SUFDckRHLFFBQVE7UUFBRUgsS0FBSztZQUFhLE9BQU8sSUFBSTtRQUFFO0lBQUM7SUFDMUNJLEtBQUs7UUFBRUosS0FBSztZQUFhLE9BQU8sSUFBSTtRQUFFO0lBQUM7SUFFdkMsNkNBQTZDO0lBQzdDSyxRQUFRO1FBQUVmLE9BQU87SUFBRTtJQUNuQmdCLGNBQWM7UUFBRWhCLE9BQU87SUFBSztJQUM1QmlCLFFBQVE7UUFBRWpCLE9BQU87SUFBSztJQUV0Qiw0QkFBNEI7SUFDNUIsMERBQTBEO0lBQzFELGlEQUFpRDtJQUVqRGtCLFFBQVE7UUFDTlIsS0FBSztZQUNILE9BQU8sSUFBSSxDQUFDUyxnQkFBZ0IsQ0FBQztRQUMvQjtRQUNBQyxLQUFLLFNBQVNDLENBQUM7WUFDYixJQUFJLENBQUNDLGdCQUFnQixDQUFDLFFBQVFEO1FBQ2hDO0lBQ0Y7SUFFQSxpREFBaUQ7SUFDakRFLGtCQUFrQjtRQUFFdkIsT0FBTyxTQUFTdUIsaUJBQWlCQyxHQUFHO1lBQ3RELE9BQU9BLElBQUlDLEtBQUs7UUFDbEI7SUFBQztBQUVIO0FBRUF2QyxNQUFNd0MsTUFBTSxDQUFDNUMsbUJBQU9BLENBQUMsbUZBQW1CTztBQUN4Q0gsTUFBTXdDLE1BQU0sQ0FBQzVDLG1CQUFPQSxDQUFDLG1FQUFXTyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbWF0aHBpeC9kb21pbm8vbGliL1dpbmRvdy5qcz82MjRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIERPTUltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9ET01JbXBsZW1lbnRhdGlvbicpO1xudmFyIEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9FdmVudFRhcmdldCcpO1xudmFyIExvY2F0aW9uID0gcmVxdWlyZSgnLi9Mb2NhdGlvbicpO1xudmFyIHNsb3BweSA9IHJlcXVpcmUoJy4vc2xvcHB5Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2luZG93O1xuXG5mdW5jdGlvbiBXaW5kb3coZG9jdW1lbnQpIHtcbiAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50IHx8IG5ldyBET01JbXBsZW1lbnRhdGlvbihudWxsKS5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIik7XG4gIHRoaXMuZG9jdW1lbnQuX3NjcmlwdGluZ19lbmFibGVkID0gdHJ1ZTtcbiAgdGhpcy5kb2N1bWVudC5kZWZhdWx0VmlldyA9IHRoaXM7XG4gIHRoaXMubG9jYXRpb24gPSBuZXcgTG9jYXRpb24odGhpcywgdGhpcy5kb2N1bWVudC5fYWRkcmVzcyB8fCAnYWJvdXQ6YmxhbmsnKTtcbn1cblxuV2luZG93LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXZlbnRUYXJnZXQucHJvdG90eXBlLCB7XG4gIF9ydW46IHsgdmFsdWU6IHNsb3BweS5XaW5kb3dfcnVuIH0sXG4gIGNvbnNvbGU6IHsgdmFsdWU6IGNvbnNvbGUgfSxcbiAgaGlzdG9yeTogeyB2YWx1ZToge1xuICAgIGJhY2s6IHV0aWxzLm55aSxcbiAgICBmb3J3YXJkOiB1dGlscy5ueWksXG4gICAgZ286IHV0aWxzLm55aVxuICB9fSxcbiAgbmF2aWdhdG9yOiB7IHZhbHVlOiByZXF1aXJlKFwiLi9OYXZpZ2F0b3JJRFwiKSB9LFxuXG4gIC8vIFNlbGYtcmVmZXJlbnRpYWwgcHJvcGVydGllc1xuICB3aW5kb3c6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH19LFxuICBzZWxmOiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9fSxcbiAgZnJhbWVzOiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9fSxcblxuICAvLyBTZWxmLXJlZmVyZW50aWFsIHByb3BlcnRpZXMgZm9yIGEgdG9wLWxldmVsIHdpbmRvd1xuICBwYXJlbnQ6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH19LFxuICB0b3A6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH19LFxuXG4gIC8vIFdlIGRvbid0IHN1cHBvcnQgYW55IG90aGVyIHdpbmRvd3MgZm9yIG5vd1xuICBsZW5ndGg6IHsgdmFsdWU6IDAgfSwgICAgICAgICAgIC8vIG5vIGZyYW1lc1xuICBmcmFtZUVsZW1lbnQ6IHsgdmFsdWU6IG51bGwgfSwgIC8vIG5vdCBwYXJ0IG9mIGEgZnJhbWVcbiAgb3BlbmVyOiB7IHZhbHVlOiBudWxsIH0sICAgICAgICAvLyBub3Qgb3BlbmVkIGJ5IGFub3RoZXIgd2luZG93XG5cbiAgLy8gVGhlIG9ubG9hZCBldmVudCBoYW5kbGVyLlxuICAvLyBYWFg6IG5lZWQgdG8gc3VwcG9ydCBhIGJ1bmNoIG9mIG90aGVyIGV2ZW50IHR5cGVzLCB0b28sXG4gIC8vIGFuZCBoYXZlIHRoZW0gaW50ZXJvcGVyYXRlIHdpdGggZG9jdW1lbnQuYm9keS5cblxuICBvbmxvYWQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldEV2ZW50SGFuZGxlcihcImxvYWRcIik7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRoaXMuX3NldEV2ZW50SGFuZGxlcihcImxvYWRcIiwgdik7XG4gICAgfVxuICB9LFxuXG4gIC8vIFhYWCBUaGlzIGlzIGEgY29tcGxldGVseSBicm9rZW4gaW1wbGVtZW50YXRpb25cbiAgZ2V0Q29tcHV0ZWRTdHlsZTogeyB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbHQpIHtcbiAgICByZXR1cm4gZWx0LnN0eWxlO1xuICB9fVxuXG59KTtcblxudXRpbHMuZXhwb3NlKHJlcXVpcmUoJy4vV2luZG93VGltZXJzJyksIFdpbmRvdyk7XG51dGlscy5leHBvc2UocmVxdWlyZSgnLi9pbXBsJyksIFdpbmRvdyk7XG4iXSwibmFtZXMiOlsiRE9NSW1wbGVtZW50YXRpb24iLCJyZXF1aXJlIiwiRXZlbnRUYXJnZXQiLCJMb2NhdGlvbiIsInNsb3BweSIsInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsIldpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlSFRNTERvY3VtZW50IiwiX3NjcmlwdGluZ19lbmFibGVkIiwiZGVmYXVsdFZpZXciLCJsb2NhdGlvbiIsIl9hZGRyZXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiX3J1biIsInZhbHVlIiwiV2luZG93X3J1biIsImNvbnNvbGUiLCJoaXN0b3J5IiwiYmFjayIsIm55aSIsImZvcndhcmQiLCJnbyIsIm5hdmlnYXRvciIsIndpbmRvdyIsImdldCIsInNlbGYiLCJmcmFtZXMiLCJwYXJlbnQiLCJ0b3AiLCJsZW5ndGgiLCJmcmFtZUVsZW1lbnQiLCJvcGVuZXIiLCJvbmxvYWQiLCJfZ2V0RXZlbnRIYW5kbGVyIiwic2V0IiwidiIsIl9zZXRFdmVudEhhbmRsZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiZWx0Iiwic3R5bGUiLCJleHBvc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/Window.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/WindowTimers.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/WindowTimers.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("\n// https://html.spec.whatwg.org/multipage/webappapis.html#windowtimers\nvar WindowTimers = {\n    setTimeout: setTimeout,\n    clearTimeout: clearTimeout,\n    setInterval: setInterval,\n    clearInterval: clearInterval\n};\nmodule.exports = WindowTimers;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9XaW5kb3dUaW1lcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixzRUFBc0U7QUFDdEUsSUFBSUEsZUFBZTtJQUNqQkMsWUFBWUE7SUFDWkMsY0FBY0E7SUFDZEMsYUFBYUE7SUFDYkMsZUFBZUE7QUFDakI7QUFFQUMsT0FBT0MsT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbWF0aHBpeC9kb21pbm8vbGliL1dpbmRvd1RpbWVycy5qcz84N2E2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjd2luZG93dGltZXJzXG52YXIgV2luZG93VGltZXJzID0ge1xuICBzZXRUaW1lb3V0OiBzZXRUaW1lb3V0LFxuICBjbGVhclRpbWVvdXQ6IGNsZWFyVGltZW91dCxcbiAgc2V0SW50ZXJ2YWw6IHNldEludGVydmFsLFxuICBjbGVhckludGVydmFsOiBjbGVhckludGVydmFsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdpbmRvd1RpbWVycztcbiJdLCJuYW1lcyI6WyJXaW5kb3dUaW1lcnMiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/WindowTimers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/attributes.js":
/*!********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/attributes.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nexports.property = function(attr) {\n    if (Array.isArray(attr.type)) {\n        var valid = Object.create(null);\n        attr.type.forEach(function(val) {\n            valid[val.value || val] = val.alias || val;\n        });\n        var missingValueDefault = attr.missing;\n        if (missingValueDefault === undefined) {\n            missingValueDefault = null;\n        }\n        var invalidValueDefault = attr.invalid;\n        if (invalidValueDefault === undefined) {\n            invalidValueDefault = missingValueDefault;\n        }\n        return {\n            get: function() {\n                var v = this._getattr(attr.name);\n                if (v === null) return missingValueDefault;\n                v = valid[v.toLowerCase()];\n                if (v !== undefined) return v;\n                if (invalidValueDefault !== null) return invalidValueDefault;\n                return v;\n            },\n            set: function(v) {\n                this._setattr(attr.name, v);\n            }\n        };\n    } else if (attr.type === Boolean) {\n        return {\n            get: function() {\n                return this.hasAttribute(attr.name);\n            },\n            set: function(v) {\n                if (v) {\n                    this._setattr(attr.name, \"\");\n                } else {\n                    this.removeAttribute(attr.name);\n                }\n            }\n        };\n    } else if (attr.type === Number || attr.type === \"long\" || attr.type === \"unsigned long\" || attr.type === \"limited unsigned long with fallback\") {\n        return numberPropDesc(attr);\n    } else if (!attr.type || attr.type === String) {\n        return {\n            get: function() {\n                return this._getattr(attr.name) || \"\";\n            },\n            set: function(v) {\n                if (attr.treatNullAsEmptyString && v === null) {\n                    v = \"\";\n                }\n                this._setattr(attr.name, v);\n            }\n        };\n    } else if (typeof attr.type === \"function\") {\n        return attr.type(attr.name, attr);\n    }\n    throw new Error(\"Invalid attribute definition\");\n};\n// See http://www.whatwg.org/specs/web-apps/current-work/#reflect\n//\n// defval is the default value. If it is a function, then that function\n// will be invoked as a method of the element to obtain the default.\n// If no default is specified for a given attribute, then the default\n// depends on the type of the attribute, but since this function handles\n// 4 integer cases, you must specify the default value in each call\n//\n// min and max define a valid range for getting the attribute.\n//\n// setmin defines a minimum value when setting.  If the value is less\n// than that, then throw INDEX_SIZE_ERR.\n//\n// Conveniently, JavaScript's parseInt function appears to be\n// compatible with HTML's 'rules for parsing integers'\nfunction numberPropDesc(a) {\n    var def;\n    if (typeof a.default === \"function\") {\n        def = a.default;\n    } else if (typeof a.default === \"number\") {\n        def = function() {\n            return a.default;\n        };\n    } else {\n        def = function() {\n            utils.assert(false, typeof a.default);\n        };\n    }\n    var unsigned_long = a.type === \"unsigned long\";\n    var signed_long = a.type === \"long\";\n    var unsigned_fallback = a.type === \"limited unsigned long with fallback\";\n    var min = a.min, max = a.max, setmin = a.setmin;\n    if (min === undefined) {\n        if (unsigned_long) min = 0;\n        if (signed_long) min = -0x80000000;\n        if (unsigned_fallback) min = 1;\n    }\n    if (max === undefined) {\n        if (unsigned_long || signed_long || unsigned_fallback) max = 0x7FFFFFFF;\n    }\n    return {\n        get: function() {\n            var v = this._getattr(a.name);\n            var n = a.float ? parseFloat(v) : parseInt(v, 10);\n            if (v === null || !isFinite(n) || min !== undefined && n < min || max !== undefined && n > max) {\n                return def.call(this);\n            }\n            if (unsigned_long || signed_long || unsigned_fallback) {\n                if (!/^[ \\t\\n\\f\\r]*[-+]?[0-9]/.test(v)) {\n                    return def.call(this);\n                }\n                n = n | 0; // jshint ignore:line\n            }\n            return n;\n        },\n        set: function(v) {\n            if (!a.float) {\n                v = Math.floor(v);\n            }\n            if (setmin !== undefined && v < setmin) {\n                utils.IndexSizeError(a.name + \" set to \" + v);\n            }\n            if (unsigned_long) {\n                v = v < 0 || v > 0x7FFFFFFF ? def.call(this) : v | 0; // jshint ignore:line\n            } else if (unsigned_fallback) {\n                v = v < 1 || v > 0x7FFFFFFF ? def.call(this) : v | 0; // jshint ignore:line\n            } else if (signed_long) {\n                v = v < -0x80000000 || v > 0x7FFFFFFF ? def.call(this) : v | 0; // jshint ignore:line\n            }\n            this._setattr(a.name, String(v));\n        }\n    };\n}\n// This is a utility function for setting up change handler functions\n// for attributes like 'id' that require special handling when they change.\nexports.registerChangeHandler = function(c, name, handler) {\n    var p = c.prototype;\n    // If p does not already have its own _attributeChangeHandlers\n    // then create one for it, inheriting from the inherited\n    // _attributeChangeHandlers. At the top (for the Element class) the\n    // _attributeChangeHandlers object will be created with a null prototype.\n    if (!Object.prototype.hasOwnProperty.call(p, \"_attributeChangeHandlers\")) {\n        p._attributeChangeHandlers = Object.create(p._attributeChangeHandlers || null);\n    }\n    p._attributeChangeHandlers[name] = handler;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/attributes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/config.js":
/*!****************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/config.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n * This file defines Domino behaviour that can be externally configured.\n * To change these settings, set the relevant global property *before*\n * you call `require(\"domino\")`.\n */ exports.isApiWritable = !global.__domino_frozen__;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9jb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Q0FJQyxHQUVEQSxxQkFBcUIsR0FBRyxDQUFDRSxPQUFPQyxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9jb25maWcuanM/NDM4NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVGhpcyBmaWxlIGRlZmluZXMgRG9taW5vIGJlaGF2aW91ciB0aGF0IGNhbiBiZSBleHRlcm5hbGx5IGNvbmZpZ3VyZWQuXG4gKiBUbyBjaGFuZ2UgdGhlc2Ugc2V0dGluZ3MsIHNldCB0aGUgcmVsZXZhbnQgZ2xvYmFsIHByb3BlcnR5ICpiZWZvcmUqXG4gKiB5b3UgY2FsbCBgcmVxdWlyZShcImRvbWlub1wiKWAuXG4gKi9cblxuZXhwb3J0cy5pc0FwaVdyaXRhYmxlID0gIWdsb2JhbC5fX2RvbWlub19mcm96ZW5fXztcbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwiaXNBcGlXcml0YWJsZSIsImdsb2JhbCIsIl9fZG9taW5vX2Zyb3plbl9fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/cssparser.js":
/*!*******************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/cssparser.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/* jshint node:true, latedef:false */  // jshint ignore:line\n/*!\nParser-Lib\nCopyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/ /* Version v0.2.5+domino1, Build time: 30-January-2016 05:13:03 */ var parserlib = Object.create(null);\n(function() {\n    /**\n * A generic base to inherit from for any object\n * that needs event handling.\n * @class EventTarget\n * @constructor\n */ function EventTarget() {\n        /**\n     * The array of listeners for various events.\n     * @type Object\n     * @property _listeners\n     * @private\n     */ this._listeners = Object.create(null);\n    }\n    EventTarget.prototype = {\n        //restore constructor\n        constructor: EventTarget,\n        /**\n     * Adds a listener for a given event type.\n     * @param {String} type The type of event to add a listener for.\n     * @param {Function} listener The function to call when the event occurs.\n     * @return {void}\n     * @method addListener\n     */ addListener: function(type, listener) {\n            if (!this._listeners[type]) {\n                this._listeners[type] = [];\n            }\n            this._listeners[type].push(listener);\n        },\n        /**\n     * Fires an event based on the passed-in object.\n     * @param {Object|String} event An object with at least a 'type' attribute\n     *      or a string indicating the event name.\n     * @return {void}\n     * @method fire\n     */ fire: function(event) {\n            if (typeof event === \"string\") {\n                event = {\n                    type: event\n                };\n            }\n            if (typeof event.target !== \"undefined\") {\n                event.target = this;\n            }\n            if (typeof event.type === \"undefined\") {\n                throw new Error(\"Event object missing 'type' property.\");\n            }\n            if (this._listeners[event.type]) {\n                //create a copy of the array and use that so listeners can't chane\n                var listeners = this._listeners[event.type].concat();\n                for(var i = 0, len = listeners.length; i < len; i++){\n                    listeners[i].call(this, event);\n                }\n            }\n        },\n        /**\n     * Removes a listener for a given event type.\n     * @param {String} type The type of event to remove a listener from.\n     * @param {Function} listener The function to remove from the event.\n     * @return {void}\n     * @method removeListener\n     */ removeListener: function(type, listener) {\n            if (this._listeners[type]) {\n                var listeners = this._listeners[type];\n                for(var i = 0, len = listeners.length; i < len; i++){\n                    if (listeners[i] === listener) {\n                        listeners.splice(i, 1);\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n * Convenient way to read through strings.\n * @namespace parserlib.util\n * @class StringReader\n * @constructor\n * @param {String} text The text to read.\n */ function StringReader(text) {\n        /**\n     * The input text with line endings normalized.\n     * @property _input\n     * @type String\n     * @private\n     */ this._input = text.replace(/(\\r|\\n){1,2}/g, \"\\n\");\n        /**\n     * The row for the character to be read next.\n     * @property _line\n     * @type int\n     * @private\n     */ this._line = 1;\n        /**\n     * The column for the character to be read next.\n     * @property _col\n     * @type int\n     * @private\n     */ this._col = 1;\n        /**\n     * The index of the character in the input to be read next.\n     * @property _cursor\n     * @type int\n     * @private\n     */ this._cursor = 0;\n    }\n    StringReader.prototype = {\n        //restore constructor\n        constructor: StringReader,\n        //-------------------------------------------------------------------------\n        // Position info\n        //-------------------------------------------------------------------------\n        /**\n     * Returns the column of the character to be read next.\n     * @return {int} The column of the character to be read next.\n     * @method getCol\n     */ getCol: function() {\n            return this._col;\n        },\n        /**\n     * Returns the row of the character to be read next.\n     * @return {int} The row of the character to be read next.\n     * @method getLine\n     */ getLine: function() {\n            return this._line;\n        },\n        /**\n     * Determines if you're at the end of the input.\n     * @return {Boolean} True if there's no more input, false otherwise.\n     * @method eof\n     */ eof: function() {\n            return this._cursor === this._input.length;\n        },\n        //-------------------------------------------------------------------------\n        // Basic reading\n        //-------------------------------------------------------------------------\n        /**\n     * Reads the next character without advancing the cursor.\n     * @param {int} count How many characters to look ahead (default is 1).\n     * @return {String} The next character or null if there is no next character.\n     * @method peek\n     */ peek: function(count) {\n            var c = null;\n            count = typeof count === \"undefined\" ? 1 : count;\n            //if we're not at the end of the input...\n            if (this._cursor < this._input.length) {\n                //get character and increment cursor and column\n                c = this._input.charAt(this._cursor + count - 1);\n            }\n            return c;\n        },\n        /**\n     * Reads the next character from the input and adjusts the row and column\n     * accordingly.\n     * @return {String} The next character or null if there is no next character.\n     * @method read\n     */ read: function() {\n            var c = null;\n            //if we're not at the end of the input...\n            if (this._cursor < this._input.length) {\n                //if the last character was a newline, increment row count\n                //and reset column count\n                if (this._input.charAt(this._cursor) === \"\\n\") {\n                    this._line++;\n                    this._col = 1;\n                } else {\n                    this._col++;\n                }\n                //get character and increment cursor and column\n                c = this._input.charAt(this._cursor++);\n            }\n            return c;\n        },\n        //-------------------------------------------------------------------------\n        // Misc\n        //-------------------------------------------------------------------------\n        /**\n     * Saves the current location so it can be returned to later.\n     * @method mark\n     * @return {void}\n     */ mark: function() {\n            this._bookmark = {\n                cursor: this._cursor,\n                line: this._line,\n                col: this._col\n            };\n        },\n        reset: function() {\n            if (this._bookmark) {\n                this._cursor = this._bookmark.cursor;\n                this._line = this._bookmark.line;\n                this._col = this._bookmark.col;\n                delete this._bookmark;\n            }\n        },\n        //-------------------------------------------------------------------------\n        // Advanced reading\n        //-------------------------------------------------------------------------\n        /**\n     * Reads up to and including the given string. Throws an error if that\n     * string is not found.\n     * @param {String} pattern The string to read.\n     * @return {String} The string when it is found.\n     * @throws Error when the string pattern is not found.\n     * @method readTo\n     */ readTo: function(pattern) {\n            var buffer = \"\", c;\n            /*\n         * First, buffer must be the same length as the pattern.\n         * Then, buffer must end with the pattern or else reach the\n         * end of the input.\n         */ while(buffer.length < pattern.length || buffer.lastIndexOf(pattern) !== buffer.length - pattern.length){\n                c = this.read();\n                if (c) {\n                    buffer += c;\n                } else {\n                    throw new Error('Expected \"' + pattern + '\" at line ' + this._line + \", col \" + this._col + \".\");\n                }\n            }\n            return buffer;\n        },\n        /**\n     * Reads characters while each character causes the given\n     * filter function to return true. The function is passed\n     * in each character and either returns true to continue\n     * reading or false to stop.\n     * @param {Function} filter The function to read on each character.\n     * @return {String} The string made up of all characters that passed the\n     *      filter check.\n     * @method readWhile\n     */ readWhile: function(filter) {\n            var buffer = \"\", c = this.read();\n            while(c !== null && filter(c)){\n                buffer += c;\n                c = this.read();\n            }\n            return buffer;\n        },\n        /**\n     * Reads characters that match either text or a regular expression and\n     * returns those characters. If a match is found, the row and column\n     * are adjusted; if no match is found, the reader's state is unchanged.\n     * reading or false to stop.\n     * @param {String|RegExp} matchter If a string, then the literal string\n     *      value is searched for. If a regular expression, then any string\n     *      matching the pattern is search for.\n     * @return {String} The string made up of all characters that matched or\n     *      null if there was no match.\n     * @method readMatch\n     */ readMatch: function(matcher) {\n            var source = this._input.substring(this._cursor), value = null;\n            //if it's a string, just do a straight match\n            if (typeof matcher === \"string\") {\n                if (source.indexOf(matcher) === 0) {\n                    value = this.readCount(matcher.length);\n                }\n            } else if (matcher instanceof RegExp) {\n                if (matcher.test(source)) {\n                    value = this.readCount(RegExp.lastMatch.length);\n                }\n            }\n            return value;\n        },\n        /**\n     * Reads a given number of characters. If the end of the input is reached,\n     * it reads only the remaining characters and does not throw an error.\n     * @param {int} count The number of characters to read.\n     * @return {String} The string made up the read characters.\n     * @method readCount\n     */ readCount: function(count) {\n            var buffer = \"\";\n            while(count--){\n                buffer += this.read();\n            }\n            return buffer;\n        }\n    };\n    /**\n * Type to use when a syntax error occurs.\n * @class SyntaxError\n * @namespace parserlib.util\n * @constructor\n * @param {String} message The error message.\n * @param {int} line The line at which the error occurred.\n * @param {int} col The column at which the error occurred.\n */ function SyntaxError(message, line, col) {\n        Error.call(this);\n        this.name = this.constructor.name;\n        /**\n     * The column at which the error occurred.\n     * @type int\n     * @property col\n     */ this.col = col;\n        /**\n     * The line at which the error occurred.\n     * @type int\n     * @property line\n     */ this.line = line;\n        /**\n     * The text representation of the unit.\n     * @type String\n     * @property text\n     */ this.message = message;\n    }\n    //inherit from Error\n    SyntaxError.prototype = Object.create(Error.prototype); // jshint ignore:line\n    SyntaxError.prototype.constructor = SyntaxError; // jshint ignore:line\n    /**\n * Base type to represent a single syntactic unit.\n * @class SyntaxUnit\n * @namespace parserlib.util\n * @constructor\n * @param {String} text The text of the unit.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */ function SyntaxUnit(text, line, col, type) {\n        /**\n     * The column of text on which the unit resides.\n     * @type int\n     * @property col\n     */ this.col = col;\n        /**\n     * The line of text on which the unit resides.\n     * @type int\n     * @property line\n     */ this.line = line;\n        /**\n     * The text representation of the unit.\n     * @type String\n     * @property text\n     */ this.text = text;\n        /**\n     * The type of syntax unit.\n     * @type int\n     * @property type\n     */ this.type = type;\n    }\n    /**\n * Create a new syntax unit based solely on the given token.\n * Convenience method for creating a new syntax unit when\n * it represents a single token instead of multiple.\n * @param {Object} token The token object to represent.\n * @return {parserlib.util.SyntaxUnit} The object representing the token.\n * @static\n * @method fromToken\n */ SyntaxUnit.fromToken = function(token) {\n        return new SyntaxUnit(token.value, token.startLine, token.startCol);\n    };\n    SyntaxUnit.prototype = {\n        //restore constructor\n        constructor: SyntaxUnit,\n        /**\n     * Returns the text representation of the unit.\n     * @return {String} The text representation of the unit.\n     * @method valueOf\n     */ valueOf: function() {\n            return this.toString();\n        },\n        /**\n     * Returns the text representation of the unit.\n     * @return {String} The text representation of the unit.\n     * @method toString\n     */ toString: function() {\n            return this.text;\n        }\n    };\n    /**\n * Generic TokenStream providing base functionality.\n * @class TokenStreamBase\n * @namespace parserlib.util\n * @constructor\n * @param {String|StringReader} input The text to tokenize or a reader from\n *      which to read the input.\n */ function TokenStreamBase(input, tokenData) {\n        /**\n     * The string reader for easy access to the text.\n     * @type StringReader\n     * @property _reader\n     * @private\n     */ this._reader = input ? new StringReader(input.toString()) : null;\n        /**\n     * Token object for the last consumed token.\n     * @type Token\n     * @property _token\n     * @private\n     */ this._token = null;\n        /**\n     * The array of token information.\n     * @type Array\n     * @property _tokenData\n     * @private\n     */ this._tokenData = tokenData;\n        /**\n     * Lookahead token buffer.\n     * @type Array\n     * @property _lt\n     * @private\n     */ this._lt = [];\n        /**\n     * Lookahead token buffer index.\n     * @type int\n     * @property _ltIndex\n     * @private\n     */ this._ltIndex = 0;\n        this._ltIndexCache = [];\n    }\n    /**\n * Accepts an array of token information and outputs\n * an array of token data containing key-value mappings\n * and matching functions that the TokenStream needs.\n * @param {Array} tokens An array of token descriptors.\n * @return {Array} An array of processed token data.\n * @method createTokenData\n * @static\n */ TokenStreamBase.createTokenData = function(tokens) {\n        var nameMap = [], typeMap = Object.create(null), tokenData = tokens.concat([]), i = 0, len = tokenData.length + 1;\n        tokenData.UNKNOWN = -1;\n        tokenData.unshift({\n            name: \"EOF\"\n        });\n        for(; i < len; i++){\n            nameMap.push(tokenData[i].name);\n            tokenData[tokenData[i].name] = i;\n            if (tokenData[i].text) {\n                typeMap[tokenData[i].text] = i;\n            }\n        }\n        tokenData.name = function(tt) {\n            return nameMap[tt];\n        };\n        tokenData.type = function(c) {\n            return typeMap[c];\n        };\n        return tokenData;\n    };\n    TokenStreamBase.prototype = {\n        //restore constructor\n        constructor: TokenStreamBase,\n        //-------------------------------------------------------------------------\n        // Matching methods\n        //-------------------------------------------------------------------------\n        /**\n     * Determines if the next token matches the given token type.\n     * If so, that token is consumed; if not, the token is placed\n     * back onto the token stream. You can pass in any number of\n     * token types and this will return true if any of the token\n     * types is found.\n     * @param {int|int[]} tokenTypes Either a single token type or an array of\n     *      token types that the next token might be. If an array is passed,\n     *      it's assumed that the token can be any of these.\n     * @param {variant} channel (Optional) The channel to read from. If not\n     *      provided, reads from the default (unnamed) channel.\n     * @return {Boolean} True if the token type matches, false if not.\n     * @method match\n     */ match: function(tokenTypes, channel) {\n            //always convert to an array, makes things easier\n            if (!(tokenTypes instanceof Array)) {\n                tokenTypes = [\n                    tokenTypes\n                ];\n            }\n            var tt = this.get(channel), i = 0, len = tokenTypes.length;\n            while(i < len){\n                if (tt === tokenTypes[i++]) {\n                    return true;\n                }\n            }\n            //no match found, put the token back\n            this.unget();\n            return false;\n        },\n        /**\n     * Determines if the next token matches the given token type.\n     * If so, that token is consumed; if not, an error is thrown.\n     * @param {int|int[]} tokenTypes Either a single token type or an array of\n     *      token types that the next token should be. If an array is passed,\n     *      it's assumed that the token must be one of these.\n     * @param {variant} channel (Optional) The channel to read from. If not\n     *      provided, reads from the default (unnamed) channel.\n     * @return {void}\n     * @method mustMatch\n     */ mustMatch: function(tokenTypes, channel) {\n            var token;\n            //always convert to an array, makes things easier\n            if (!(tokenTypes instanceof Array)) {\n                tokenTypes = [\n                    tokenTypes\n                ];\n            }\n            if (!this.match.apply(this, arguments)) {\n                token = this.LT(1);\n                throw new SyntaxError(\"Expected \" + this._tokenData[tokenTypes[0]].name + \" at line \" + token.startLine + \", col \" + token.startCol + \".\", token.startLine, token.startCol);\n            }\n        },\n        //-------------------------------------------------------------------------\n        // Consuming methods\n        //-------------------------------------------------------------------------\n        /**\n     * Keeps reading from the token stream until either one of the specified\n     * token types is found or until the end of the input is reached.\n     * @param {int|int[]} tokenTypes Either a single token type or an array of\n     *      token types that the next token should be. If an array is passed,\n     *      it's assumed that the token must be one of these.\n     * @param {variant} channel (Optional) The channel to read from. If not\n     *      provided, reads from the default (unnamed) channel.\n     * @return {void}\n     * @method advance\n     */ advance: function(tokenTypes, channel) {\n            while(this.LA(0) !== 0 && !this.match(tokenTypes, channel)){\n                this.get();\n            }\n            return this.LA(0);\n        },\n        /**\n     * Consumes the next token from the token stream.\n     * @return {int} The token type of the token that was just consumed.\n     * @method get\n     */ get: function(channel) {\n            var tokenInfo = this._tokenData, i = 0, token, info;\n            //check the lookahead buffer first\n            if (this._lt.length && this._ltIndex >= 0 && this._ltIndex < this._lt.length) {\n                i++;\n                this._token = this._lt[this._ltIndex++];\n                info = tokenInfo[this._token.type];\n                //obey channels logic\n                while(info.channel !== undefined && channel !== info.channel && this._ltIndex < this._lt.length){\n                    this._token = this._lt[this._ltIndex++];\n                    info = tokenInfo[this._token.type];\n                    i++;\n                }\n                //here be dragons\n                if ((info.channel === undefined || channel === info.channel) && this._ltIndex <= this._lt.length) {\n                    this._ltIndexCache.push(i);\n                    return this._token.type;\n                }\n            }\n            //call token retriever method\n            token = this._getToken();\n            //if it should be hidden, don't save a token\n            if (token.type > -1 && !tokenInfo[token.type].hide) {\n                //apply token channel\n                token.channel = tokenInfo[token.type].channel;\n                //save for later\n                this._token = token;\n                this._lt.push(token);\n                //save space that will be moved (must be done before array is truncated)\n                this._ltIndexCache.push(this._lt.length - this._ltIndex + i);\n                //keep the buffer under 5 items\n                if (this._lt.length > 5) {\n                    this._lt.shift();\n                }\n                //also keep the shift buffer under 5 items\n                if (this._ltIndexCache.length > 5) {\n                    this._ltIndexCache.shift();\n                }\n                //update lookahead index\n                this._ltIndex = this._lt.length;\n            }\n            /*\n         * Skip to the next token if:\n         * 1. The token type is marked as hidden.\n         * 2. The token type has a channel specified and it isn't the current channel.\n         */ info = tokenInfo[token.type];\n            if (info && (info.hide || info.channel !== undefined && channel !== info.channel)) {\n                return this.get(channel);\n            } else {\n                //return just the type\n                return token.type;\n            }\n        },\n        /**\n     * Looks ahead a certain number of tokens and returns the token type at\n     * that position. This will throw an error if you lookahead past the\n     * end of input, past the size of the lookahead buffer, or back past\n     * the first token in the lookahead buffer.\n     * @param {int} The index of the token type to retrieve. 0 for the\n     *      current token, 1 for the next, -1 for the previous, etc.\n     * @return {int} The token type of the token in the given position.\n     * @method LA\n     */ LA: function(index) {\n            var total = index, tt;\n            if (index > 0) {\n                //TODO: Store 5 somewhere\n                if (index > 5) {\n                    throw new Error(\"Too much lookahead.\");\n                }\n                //get all those tokens\n                while(total){\n                    tt = this.get();\n                    total--;\n                }\n                //unget all those tokens\n                while(total < index){\n                    this.unget();\n                    total++;\n                }\n            } else if (index < 0) {\n                if (this._lt[this._ltIndex + index]) {\n                    tt = this._lt[this._ltIndex + index].type;\n                } else {\n                    throw new Error(\"Too much lookbehind.\");\n                }\n            } else {\n                tt = this._token.type;\n            }\n            return tt;\n        },\n        /**\n     * Looks ahead a certain number of tokens and returns the token at\n     * that position. This will throw an error if you lookahead past the\n     * end of input, past the size of the lookahead buffer, or back past\n     * the first token in the lookahead buffer.\n     * @param {int} The index of the token type to retrieve. 0 for the\n     *      current token, 1 for the next, -1 for the previous, etc.\n     * @return {Object} The token of the token in the given position.\n     * @method LA\n     */ LT: function(index) {\n            //lookahead first to prime the token buffer\n            this.LA(index);\n            //now find the token, subtract one because _ltIndex is already at the next index\n            return this._lt[this._ltIndex + index - 1];\n        },\n        /**\n     * Returns the token type for the next token in the stream without\n     * consuming it.\n     * @return {int} The token type of the next token in the stream.\n     * @method peek\n     */ peek: function() {\n            return this.LA(1);\n        },\n        /**\n     * Returns the actual token object for the last consumed token.\n     * @return {Token} The token object for the last consumed token.\n     * @method token\n     */ token: function() {\n            return this._token;\n        },\n        /**\n     * Returns the name of the token for the given token type.\n     * @param {int} tokenType The type of token to get the name of.\n     * @return {String} The name of the token or \"UNKNOWN_TOKEN\" for any\n     *      invalid token type.\n     * @method tokenName\n     */ tokenName: function(tokenType) {\n            if (tokenType < 0 || tokenType > this._tokenData.length) {\n                return \"UNKNOWN_TOKEN\";\n            } else {\n                return this._tokenData[tokenType].name;\n            }\n        },\n        /**\n     * Returns the token type value for the given token name.\n     * @param {String} tokenName The name of the token whose value should be returned.\n     * @return {int} The token type value for the given token name or -1\n     *      for an unknown token.\n     * @method tokenName\n     */ tokenType: function(tokenName) {\n            return this._tokenData[tokenName] || -1;\n        },\n        /**\n     * Returns the last consumed token to the token stream.\n     * @method unget\n     */ unget: function() {\n            //if (this._ltIndex > -1){\n            if (this._ltIndexCache.length) {\n                this._ltIndex -= this._ltIndexCache.pop(); //--;\n                this._token = this._lt[this._ltIndex - 1];\n            } else {\n                throw new Error(\"Too much lookahead.\");\n            }\n        }\n    };\n    parserlib.util = {\n        __proto__: null,\n        StringReader: StringReader,\n        SyntaxError: SyntaxError,\n        SyntaxUnit: SyntaxUnit,\n        EventTarget: EventTarget,\n        TokenStreamBase: TokenStreamBase\n    };\n})();\n/*\nParser-Lib\nCopyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/ /* Version v0.2.5+domino1, Build time: 30-January-2016 05:13:03 */ (function() {\n    var EventTarget = parserlib.util.EventTarget, TokenStreamBase = parserlib.util.TokenStreamBase, StringReader = parserlib.util.StringReader, SyntaxError = parserlib.util.SyntaxError, SyntaxUnit = parserlib.util.SyntaxUnit;\n    var Colors = {\n        __proto__: null,\n        aliceblue: \"#f0f8ff\",\n        antiquewhite: \"#faebd7\",\n        aqua: \"#00ffff\",\n        aquamarine: \"#7fffd4\",\n        azure: \"#f0ffff\",\n        beige: \"#f5f5dc\",\n        bisque: \"#ffe4c4\",\n        black: \"#000000\",\n        blanchedalmond: \"#ffebcd\",\n        blue: \"#0000ff\",\n        blueviolet: \"#8a2be2\",\n        brown: \"#a52a2a\",\n        burlywood: \"#deb887\",\n        cadetblue: \"#5f9ea0\",\n        chartreuse: \"#7fff00\",\n        chocolate: \"#d2691e\",\n        coral: \"#ff7f50\",\n        cornflowerblue: \"#6495ed\",\n        cornsilk: \"#fff8dc\",\n        crimson: \"#dc143c\",\n        cyan: \"#00ffff\",\n        darkblue: \"#00008b\",\n        darkcyan: \"#008b8b\",\n        darkgoldenrod: \"#b8860b\",\n        darkgray: \"#a9a9a9\",\n        darkgrey: \"#a9a9a9\",\n        darkgreen: \"#006400\",\n        darkkhaki: \"#bdb76b\",\n        darkmagenta: \"#8b008b\",\n        darkolivegreen: \"#556b2f\",\n        darkorange: \"#ff8c00\",\n        darkorchid: \"#9932cc\",\n        darkred: \"#8b0000\",\n        darksalmon: \"#e9967a\",\n        darkseagreen: \"#8fbc8f\",\n        darkslateblue: \"#483d8b\",\n        darkslategray: \"#2f4f4f\",\n        darkslategrey: \"#2f4f4f\",\n        darkturquoise: \"#00ced1\",\n        darkviolet: \"#9400d3\",\n        deeppink: \"#ff1493\",\n        deepskyblue: \"#00bfff\",\n        dimgray: \"#696969\",\n        dimgrey: \"#696969\",\n        dodgerblue: \"#1e90ff\",\n        firebrick: \"#b22222\",\n        floralwhite: \"#fffaf0\",\n        forestgreen: \"#228b22\",\n        fuchsia: \"#ff00ff\",\n        gainsboro: \"#dcdcdc\",\n        ghostwhite: \"#f8f8ff\",\n        gold: \"#ffd700\",\n        goldenrod: \"#daa520\",\n        gray: \"#808080\",\n        grey: \"#808080\",\n        green: \"#008000\",\n        greenyellow: \"#adff2f\",\n        honeydew: \"#f0fff0\",\n        hotpink: \"#ff69b4\",\n        indianred: \"#cd5c5c\",\n        indigo: \"#4b0082\",\n        ivory: \"#fffff0\",\n        khaki: \"#f0e68c\",\n        lavender: \"#e6e6fa\",\n        lavenderblush: \"#fff0f5\",\n        lawngreen: \"#7cfc00\",\n        lemonchiffon: \"#fffacd\",\n        lightblue: \"#add8e6\",\n        lightcoral: \"#f08080\",\n        lightcyan: \"#e0ffff\",\n        lightgoldenrodyellow: \"#fafad2\",\n        lightgray: \"#d3d3d3\",\n        lightgrey: \"#d3d3d3\",\n        lightgreen: \"#90ee90\",\n        lightpink: \"#ffb6c1\",\n        lightsalmon: \"#ffa07a\",\n        lightseagreen: \"#20b2aa\",\n        lightskyblue: \"#87cefa\",\n        lightslategray: \"#778899\",\n        lightslategrey: \"#778899\",\n        lightsteelblue: \"#b0c4de\",\n        lightyellow: \"#ffffe0\",\n        lime: \"#00ff00\",\n        limegreen: \"#32cd32\",\n        linen: \"#faf0e6\",\n        magenta: \"#ff00ff\",\n        maroon: \"#800000\",\n        mediumaquamarine: \"#66cdaa\",\n        mediumblue: \"#0000cd\",\n        mediumorchid: \"#ba55d3\",\n        mediumpurple: \"#9370d8\",\n        mediumseagreen: \"#3cb371\",\n        mediumslateblue: \"#7b68ee\",\n        mediumspringgreen: \"#00fa9a\",\n        mediumturquoise: \"#48d1cc\",\n        mediumvioletred: \"#c71585\",\n        midnightblue: \"#191970\",\n        mintcream: \"#f5fffa\",\n        mistyrose: \"#ffe4e1\",\n        moccasin: \"#ffe4b5\",\n        navajowhite: \"#ffdead\",\n        navy: \"#000080\",\n        oldlace: \"#fdf5e6\",\n        olive: \"#808000\",\n        olivedrab: \"#6b8e23\",\n        orange: \"#ffa500\",\n        orangered: \"#ff4500\",\n        orchid: \"#da70d6\",\n        palegoldenrod: \"#eee8aa\",\n        palegreen: \"#98fb98\",\n        paleturquoise: \"#afeeee\",\n        palevioletred: \"#d87093\",\n        papayawhip: \"#ffefd5\",\n        peachpuff: \"#ffdab9\",\n        peru: \"#cd853f\",\n        pink: \"#ffc0cb\",\n        plum: \"#dda0dd\",\n        powderblue: \"#b0e0e6\",\n        purple: \"#800080\",\n        red: \"#ff0000\",\n        rosybrown: \"#bc8f8f\",\n        royalblue: \"#4169e1\",\n        saddlebrown: \"#8b4513\",\n        salmon: \"#fa8072\",\n        sandybrown: \"#f4a460\",\n        seagreen: \"#2e8b57\",\n        seashell: \"#fff5ee\",\n        sienna: \"#a0522d\",\n        silver: \"#c0c0c0\",\n        skyblue: \"#87ceeb\",\n        slateblue: \"#6a5acd\",\n        slategray: \"#708090\",\n        slategrey: \"#708090\",\n        snow: \"#fffafa\",\n        springgreen: \"#00ff7f\",\n        steelblue: \"#4682b4\",\n        tan: \"#d2b48c\",\n        teal: \"#008080\",\n        thistle: \"#d8bfd8\",\n        tomato: \"#ff6347\",\n        turquoise: \"#40e0d0\",\n        violet: \"#ee82ee\",\n        wheat: \"#f5deb3\",\n        white: \"#ffffff\",\n        whitesmoke: \"#f5f5f5\",\n        yellow: \"#ffff00\",\n        yellowgreen: \"#9acd32\",\n        //'currentColor' color keyword http://www.w3.org/TR/css3-color/#currentcolor\n        currentColor: \"The value of the 'color' property.\",\n        //CSS2 system colors http://www.w3.org/TR/css3-color/#css2-system\n        activeBorder: \"Active window border.\",\n        activecaption: \"Active window caption.\",\n        appworkspace: \"Background color of multiple document interface.\",\n        background: \"Desktop background.\",\n        buttonface: \"The face background color for 3-D elements that appear 3-D due to one layer of surrounding border.\",\n        buttonhighlight: \"The color of the border facing the light source for 3-D elements that appear 3-D due to one layer of surrounding border.\",\n        buttonshadow: \"The color of the border away from the light source for 3-D elements that appear 3-D due to one layer of surrounding border.\",\n        buttontext: \"Text on push buttons.\",\n        captiontext: \"Text in caption, size box, and scrollbar arrow box.\",\n        graytext: \"Grayed (disabled) text. This color is set to #000 if the current display driver does not support a solid gray color.\",\n        greytext: \"Greyed (disabled) text. This color is set to #000 if the current display driver does not support a solid grey color.\",\n        highlight: \"Item(s) selected in a control.\",\n        highlighttext: \"Text of item(s) selected in a control.\",\n        inactiveborder: \"Inactive window border.\",\n        inactivecaption: \"Inactive window caption.\",\n        inactivecaptiontext: \"Color of text in an inactive caption.\",\n        infobackground: \"Background color for tooltip controls.\",\n        infotext: \"Text color for tooltip controls.\",\n        menu: \"Menu background.\",\n        menutext: \"Text in menus.\",\n        scrollbar: \"Scroll bar gray area.\",\n        threeddarkshadow: \"The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n        threedface: \"The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n        threedhighlight: \"The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n        threedlightshadow: \"The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n        threedshadow: \"The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.\",\n        window: \"Window background.\",\n        windowframe: \"Window frame.\",\n        windowtext: \"Text in windows.\"\n    };\n    /**\n * Represents a selector combinator (whitespace, +, >).\n * @namespace parserlib.css\n * @class Combinator\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {String} text The text representation of the unit.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */ function Combinator(text, line, col) {\n        SyntaxUnit.call(this, text, line, col, Parser.COMBINATOR_TYPE);\n        /**\n     * The type of modifier.\n     * @type String\n     * @property type\n     */ this.type = \"unknown\";\n        //pretty simple\n        if (/^\\s+$/.test(text)) {\n            this.type = \"descendant\";\n        } else if (text === \">\") {\n            this.type = \"child\";\n        } else if (text === \"+\") {\n            this.type = \"adjacent-sibling\";\n        } else if (text === \"~\") {\n            this.type = \"sibling\";\n        }\n    }\n    Combinator.prototype = new SyntaxUnit();\n    Combinator.prototype.constructor = Combinator;\n    /**\n * Represents a media feature, such as max-width:500.\n * @namespace parserlib.css\n * @class MediaFeature\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {SyntaxUnit} name The name of the feature.\n * @param {SyntaxUnit} value The value of the feature or null if none.\n */ function MediaFeature(name, value) {\n        SyntaxUnit.call(this, \"(\" + name + (value !== null ? \":\" + value : \"\") + \")\", name.startLine, name.startCol, Parser.MEDIA_FEATURE_TYPE);\n        /**\n     * The name of the media feature\n     * @type String\n     * @property name\n     */ this.name = name;\n        /**\n     * The value for the feature or null if there is none.\n     * @type SyntaxUnit\n     * @property value\n     */ this.value = value;\n    }\n    MediaFeature.prototype = new SyntaxUnit();\n    MediaFeature.prototype.constructor = MediaFeature;\n    /**\n * Represents an individual media query.\n * @namespace parserlib.css\n * @class MediaQuery\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {String} modifier The modifier \"not\" or \"only\" (or null).\n * @param {String} mediaType The type of media (i.e., \"print\").\n * @param {Array} parts Array of selectors parts making up this selector.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */ function MediaQuery(modifier, mediaType, features, line, col) {\n        SyntaxUnit.call(this, (modifier ? modifier + \" \" : \"\") + (mediaType ? mediaType : \"\") + (mediaType && features.length > 0 ? \" and \" : \"\") + features.join(\" and \"), line, col, Parser.MEDIA_QUERY_TYPE);\n        /**\n     * The media modifier (\"not\" or \"only\")\n     * @type String\n     * @property modifier\n     */ this.modifier = modifier;\n        /**\n     * The mediaType (i.e., \"print\")\n     * @type String\n     * @property mediaType\n     */ this.mediaType = mediaType;\n        /**\n     * The parts that make up the selector.\n     * @type Array\n     * @property features\n     */ this.features = features;\n    }\n    MediaQuery.prototype = new SyntaxUnit();\n    MediaQuery.prototype.constructor = MediaQuery;\n    /**\n * A CSS3 parser.\n * @namespace parserlib.css\n * @class Parser\n * @constructor\n * @param {Object} options (Optional) Various options for the parser:\n *      starHack (true|false) to allow IE6 star hack as valid,\n *      underscoreHack (true|false) to interpret leading underscores\n *      as IE6-7 targeting for known properties, ieFilters (true|false)\n *      to indicate that IE < 8 filters should be accepted and not throw\n *      syntax errors.\n */ function Parser(options) {\n        //inherit event functionality\n        EventTarget.call(this);\n        this.options = options || {};\n        this._tokenStream = null;\n    }\n    //Static constants\n    Parser.DEFAULT_TYPE = 0;\n    Parser.COMBINATOR_TYPE = 1;\n    Parser.MEDIA_FEATURE_TYPE = 2;\n    Parser.MEDIA_QUERY_TYPE = 3;\n    Parser.PROPERTY_NAME_TYPE = 4;\n    Parser.PROPERTY_VALUE_TYPE = 5;\n    Parser.PROPERTY_VALUE_PART_TYPE = 6;\n    Parser.SELECTOR_TYPE = 7;\n    Parser.SELECTOR_PART_TYPE = 8;\n    Parser.SELECTOR_SUB_PART_TYPE = 9;\n    Parser.prototype = function() {\n        var proto = new EventTarget(), prop, additions = {\n            __proto__: null,\n            //restore constructor\n            constructor: Parser,\n            //instance constants - yuck\n            DEFAULT_TYPE: 0,\n            COMBINATOR_TYPE: 1,\n            MEDIA_FEATURE_TYPE: 2,\n            MEDIA_QUERY_TYPE: 3,\n            PROPERTY_NAME_TYPE: 4,\n            PROPERTY_VALUE_TYPE: 5,\n            PROPERTY_VALUE_PART_TYPE: 6,\n            SELECTOR_TYPE: 7,\n            SELECTOR_PART_TYPE: 8,\n            SELECTOR_SUB_PART_TYPE: 9,\n            //-----------------------------------------------------------------\n            // Grammar\n            //-----------------------------------------------------------------\n            _stylesheet: function() {\n                /*\n                 * stylesheet\n                 *  : [ CHARSET_SYM S* STRING S* ';' ]?\n                 *    [S|CDO|CDC]* [ import [S|CDO|CDC]* ]*\n                 *    [ namespace [S|CDO|CDC]* ]*\n                 *    [ [ ruleset | media | page | font_face | keyframes ] [S|CDO|CDC]* ]*\n                 *  ;\n                 */ var tokenStream = this._tokenStream, count, token, tt;\n                this.fire(\"startstylesheet\");\n                //try to read character set\n                this._charset();\n                this._skipCruft();\n                //try to read imports - may be more than one\n                while(tokenStream.peek() === Tokens.IMPORT_SYM){\n                    this._import();\n                    this._skipCruft();\n                }\n                //try to read namespaces - may be more than one\n                while(tokenStream.peek() === Tokens.NAMESPACE_SYM){\n                    this._namespace();\n                    this._skipCruft();\n                }\n                //get the next token\n                tt = tokenStream.peek();\n                //try to read the rest\n                while(tt > Tokens.EOF){\n                    try {\n                        switch(tt){\n                            case Tokens.MEDIA_SYM:\n                                this._media();\n                                this._skipCruft();\n                                break;\n                            case Tokens.PAGE_SYM:\n                                this._page();\n                                this._skipCruft();\n                                break;\n                            case Tokens.FONT_FACE_SYM:\n                                this._font_face();\n                                this._skipCruft();\n                                break;\n                            case Tokens.KEYFRAMES_SYM:\n                                this._keyframes();\n                                this._skipCruft();\n                                break;\n                            case Tokens.VIEWPORT_SYM:\n                                this._viewport();\n                                this._skipCruft();\n                                break;\n                            case Tokens.DOCUMENT_SYM:\n                                this._document();\n                                this._skipCruft();\n                                break;\n                            case Tokens.UNKNOWN_SYM:\n                                tokenStream.get();\n                                if (!this.options.strict) {\n                                    //fire error event\n                                    this.fire({\n                                        type: \"error\",\n                                        error: null,\n                                        message: \"Unknown @ rule: \" + tokenStream.LT(0).value + \".\",\n                                        line: tokenStream.LT(0).startLine,\n                                        col: tokenStream.LT(0).startCol\n                                    });\n                                    //skip braces\n                                    count = 0;\n                                    while(tokenStream.advance([\n                                        Tokens.LBRACE,\n                                        Tokens.RBRACE\n                                    ]) === Tokens.LBRACE){\n                                        count++; //keep track of nesting depth\n                                    }\n                                    while(count){\n                                        tokenStream.advance([\n                                            Tokens.RBRACE\n                                        ]);\n                                        count--;\n                                    }\n                                } else {\n                                    //not a syntax error, rethrow it\n                                    throw new SyntaxError(\"Unknown @ rule.\", tokenStream.LT(0).startLine, tokenStream.LT(0).startCol);\n                                }\n                                break;\n                            case Tokens.S:\n                                this._readWhitespace();\n                                break;\n                            default:\n                                if (!this._ruleset()) {\n                                    //error handling for known issues\n                                    switch(tt){\n                                        case Tokens.CHARSET_SYM:\n                                            token = tokenStream.LT(1);\n                                            this._charset(false);\n                                            throw new SyntaxError(\"@charset not allowed here.\", token.startLine, token.startCol);\n                                        case Tokens.IMPORT_SYM:\n                                            token = tokenStream.LT(1);\n                                            this._import(false);\n                                            throw new SyntaxError(\"@import not allowed here.\", token.startLine, token.startCol);\n                                        case Tokens.NAMESPACE_SYM:\n                                            token = tokenStream.LT(1);\n                                            this._namespace(false);\n                                            throw new SyntaxError(\"@namespace not allowed here.\", token.startLine, token.startCol);\n                                        default:\n                                            tokenStream.get(); //get the last token\n                                            this._unexpectedToken(tokenStream.token());\n                                    }\n                                }\n                        }\n                    } catch (ex) {\n                        if (ex instanceof SyntaxError && !this.options.strict) {\n                            this.fire({\n                                type: \"error\",\n                                error: ex,\n                                message: ex.message,\n                                line: ex.line,\n                                col: ex.col\n                            });\n                        } else {\n                            throw ex;\n                        }\n                    }\n                    tt = tokenStream.peek();\n                }\n                if (tt !== Tokens.EOF) {\n                    this._unexpectedToken(tokenStream.token());\n                }\n                this.fire(\"endstylesheet\");\n            },\n            _charset: function(emit) {\n                var tokenStream = this._tokenStream, charset, token, line, col;\n                if (tokenStream.match(Tokens.CHARSET_SYM)) {\n                    line = tokenStream.token().startLine;\n                    col = tokenStream.token().startCol;\n                    this._readWhitespace();\n                    tokenStream.mustMatch(Tokens.STRING);\n                    token = tokenStream.token();\n                    charset = token.value;\n                    this._readWhitespace();\n                    tokenStream.mustMatch(Tokens.SEMICOLON);\n                    if (emit !== false) {\n                        this.fire({\n                            type: \"charset\",\n                            charset: charset,\n                            line: line,\n                            col: col\n                        });\n                    }\n                }\n            },\n            _import: function(emit) {\n                /*\n                 * import\n                 *   : IMPORT_SYM S*\n                 *    [STRING|URI] S* media_query_list? ';' S*\n                 */ var tokenStream = this._tokenStream, uri, importToken, mediaList = [];\n                //read import symbol\n                tokenStream.mustMatch(Tokens.IMPORT_SYM);\n                importToken = tokenStream.token();\n                this._readWhitespace();\n                tokenStream.mustMatch([\n                    Tokens.STRING,\n                    Tokens.URI\n                ]);\n                //grab the URI value\n                uri = tokenStream.token().value.replace(/^(?:url\\()?[\"']?([^\"']+?)[\"']?\\)?$/, \"$1\");\n                this._readWhitespace();\n                mediaList = this._media_query_list();\n                //must end with a semicolon\n                tokenStream.mustMatch(Tokens.SEMICOLON);\n                this._readWhitespace();\n                if (emit !== false) {\n                    this.fire({\n                        type: \"import\",\n                        uri: uri,\n                        media: mediaList,\n                        line: importToken.startLine,\n                        col: importToken.startCol\n                    });\n                }\n            },\n            _namespace: function(emit) {\n                /*\n                 * namespace\n                 *   : NAMESPACE_SYM S* [namespace_prefix S*]? [STRING|URI] S* ';' S*\n                 */ var tokenStream = this._tokenStream, line, col, prefix, uri;\n                //read import symbol\n                tokenStream.mustMatch(Tokens.NAMESPACE_SYM);\n                line = tokenStream.token().startLine;\n                col = tokenStream.token().startCol;\n                this._readWhitespace();\n                //it's a namespace prefix - no _namespace_prefix() method because it's just an IDENT\n                if (tokenStream.match(Tokens.IDENT)) {\n                    prefix = tokenStream.token().value;\n                    this._readWhitespace();\n                }\n                tokenStream.mustMatch([\n                    Tokens.STRING,\n                    Tokens.URI\n                ]);\n                /*if (!tokenStream.match(Tokens.STRING)){\n                    tokenStream.mustMatch(Tokens.URI);\n                }*/ //grab the URI value\n                uri = tokenStream.token().value.replace(/(?:url\\()?[\"']([^\"']+)[\"']\\)?/, \"$1\");\n                this._readWhitespace();\n                //must end with a semicolon\n                tokenStream.mustMatch(Tokens.SEMICOLON);\n                this._readWhitespace();\n                if (emit !== false) {\n                    this.fire({\n                        type: \"namespace\",\n                        prefix: prefix,\n                        uri: uri,\n                        line: line,\n                        col: col\n                    });\n                }\n            },\n            _media: function() {\n                /*\n                 * media\n                 *   : MEDIA_SYM S* media_query_list S* '{' S* ruleset* '}' S*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, line, col, mediaList; //       = [];\n                //look for @media\n                tokenStream.mustMatch(Tokens.MEDIA_SYM);\n                line = tokenStream.token().startLine;\n                col = tokenStream.token().startCol;\n                this._readWhitespace();\n                mediaList = this._media_query_list();\n                tokenStream.mustMatch(Tokens.LBRACE);\n                this._readWhitespace();\n                this.fire({\n                    type: \"startmedia\",\n                    media: mediaList,\n                    line: line,\n                    col: col\n                });\n                while(true){\n                    if (tokenStream.peek() === Tokens.PAGE_SYM) {\n                        this._page();\n                    } else if (tokenStream.peek() === Tokens.FONT_FACE_SYM) {\n                        this._font_face();\n                    } else if (tokenStream.peek() === Tokens.VIEWPORT_SYM) {\n                        this._viewport();\n                    } else if (tokenStream.peek() === Tokens.DOCUMENT_SYM) {\n                        this._document();\n                    } else if (!this._ruleset()) {\n                        break;\n                    }\n                }\n                tokenStream.mustMatch(Tokens.RBRACE);\n                this._readWhitespace();\n                this.fire({\n                    type: \"endmedia\",\n                    media: mediaList,\n                    line: line,\n                    col: col\n                });\n            },\n            //CSS3 Media Queries\n            _media_query_list: function() {\n                /*\n                 * media_query_list\n                 *   : S* [media_query [ ',' S* media_query ]* ]?\n                 *   ;\n                 */ var tokenStream = this._tokenStream, mediaList = [];\n                this._readWhitespace();\n                if (tokenStream.peek() === Tokens.IDENT || tokenStream.peek() === Tokens.LPAREN) {\n                    mediaList.push(this._media_query());\n                }\n                while(tokenStream.match(Tokens.COMMA)){\n                    this._readWhitespace();\n                    mediaList.push(this._media_query());\n                }\n                return mediaList;\n            },\n            /*\n             * Note: \"expression\" in the grammar maps to the _media_expression\n             * method.\n\n             */ _media_query: function() {\n                /*\n                 * media_query\n                 *   : [ONLY | NOT]? S* media_type S* [ AND S* expression ]*\n                 *   | expression [ AND S* expression ]*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, type = null, ident = null, token = null, expressions = [];\n                if (tokenStream.match(Tokens.IDENT)) {\n                    ident = tokenStream.token().value.toLowerCase();\n                    //since there's no custom tokens for these, need to manually check\n                    if (ident !== \"only\" && ident !== \"not\") {\n                        tokenStream.unget();\n                        ident = null;\n                    } else {\n                        token = tokenStream.token();\n                    }\n                }\n                this._readWhitespace();\n                if (tokenStream.peek() === Tokens.IDENT) {\n                    type = this._media_type();\n                    if (token === null) {\n                        token = tokenStream.token();\n                    }\n                } else if (tokenStream.peek() === Tokens.LPAREN) {\n                    if (token === null) {\n                        token = tokenStream.LT(1);\n                    }\n                    expressions.push(this._media_expression());\n                }\n                if (type === null && expressions.length === 0) {\n                    return null;\n                } else {\n                    this._readWhitespace();\n                    while(tokenStream.match(Tokens.IDENT)){\n                        if (tokenStream.token().value.toLowerCase() !== \"and\") {\n                            this._unexpectedToken(tokenStream.token());\n                        }\n                        this._readWhitespace();\n                        expressions.push(this._media_expression());\n                    }\n                }\n                return new MediaQuery(ident, type, expressions, token.startLine, token.startCol);\n            },\n            //CSS3 Media Queries\n            _media_type: function() {\n                /*\n                 * media_type\n                 *   : IDENT\n                 *   ;\n                 */ return this._media_feature();\n            },\n            /**\n             * Note: in CSS3 Media Queries, this is called \"expression\".\n             * Renamed here to avoid conflict with CSS3 Selectors\n             * definition of \"expression\". Also note that \"expr\" in the\n             * grammar now maps to \"expression\" from CSS3 selectors.\n             * @method _media_expression\n             * @private\n             */ _media_expression: function() {\n                /*\n                 * expression\n                 *  : '(' S* media_feature S* [ ':' S* expr ]? ')' S*\n                 *  ;\n                 */ var tokenStream = this._tokenStream, feature = null, token, expression = null;\n                tokenStream.mustMatch(Tokens.LPAREN);\n                feature = this._media_feature();\n                this._readWhitespace();\n                if (tokenStream.match(Tokens.COLON)) {\n                    this._readWhitespace();\n                    token = tokenStream.LT(1);\n                    expression = this._expression();\n                }\n                tokenStream.mustMatch(Tokens.RPAREN);\n                this._readWhitespace();\n                return new MediaFeature(feature, expression ? new SyntaxUnit(expression, token.startLine, token.startCol) : null);\n            },\n            //CSS3 Media Queries\n            _media_feature: function() {\n                /*\n                 * media_feature\n                 *   : IDENT\n                 *   ;\n                 */ var tokenStream = this._tokenStream;\n                this._readWhitespace();\n                tokenStream.mustMatch(Tokens.IDENT);\n                return SyntaxUnit.fromToken(tokenStream.token());\n            },\n            //CSS3 Paged Media\n            _page: function() {\n                /*\n                 * page:\n                 *    PAGE_SYM S* IDENT? pseudo_page? S*\n                 *    '{' S* [ declaration | margin ]? [ ';' S* [ declaration | margin ]? ]* '}' S*\n                 *    ;\n                 */ var tokenStream = this._tokenStream, line, col, identifier = null, pseudoPage = null;\n                //look for @page\n                tokenStream.mustMatch(Tokens.PAGE_SYM);\n                line = tokenStream.token().startLine;\n                col = tokenStream.token().startCol;\n                this._readWhitespace();\n                if (tokenStream.match(Tokens.IDENT)) {\n                    identifier = tokenStream.token().value;\n                    //The value 'auto' may not be used as a page name and MUST be treated as a syntax error.\n                    if (identifier.toLowerCase() === \"auto\") {\n                        this._unexpectedToken(tokenStream.token());\n                    }\n                }\n                //see if there's a colon upcoming\n                if (tokenStream.peek() === Tokens.COLON) {\n                    pseudoPage = this._pseudo_page();\n                }\n                this._readWhitespace();\n                this.fire({\n                    type: \"startpage\",\n                    id: identifier,\n                    pseudo: pseudoPage,\n                    line: line,\n                    col: col\n                });\n                this._readDeclarations(true, true);\n                this.fire({\n                    type: \"endpage\",\n                    id: identifier,\n                    pseudo: pseudoPage,\n                    line: line,\n                    col: col\n                });\n            },\n            //CSS3 Paged Media\n            _margin: function() {\n                /*\n                 * margin :\n                 *    margin_sym S* '{' declaration [ ';' S* declaration? ]* '}' S*\n                 *    ;\n                 */ var tokenStream = this._tokenStream, line, col, marginSym = this._margin_sym();\n                if (marginSym) {\n                    line = tokenStream.token().startLine;\n                    col = tokenStream.token().startCol;\n                    this.fire({\n                        type: \"startpagemargin\",\n                        margin: marginSym,\n                        line: line,\n                        col: col\n                    });\n                    this._readDeclarations(true);\n                    this.fire({\n                        type: \"endpagemargin\",\n                        margin: marginSym,\n                        line: line,\n                        col: col\n                    });\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n            //CSS3 Paged Media\n            _margin_sym: function() {\n                /*\n                 * margin_sym :\n                 *    TOPLEFTCORNER_SYM |\n                 *    TOPLEFT_SYM |\n                 *    TOPCENTER_SYM |\n                 *    TOPRIGHT_SYM |\n                 *    TOPRIGHTCORNER_SYM |\n                 *    BOTTOMLEFTCORNER_SYM |\n                 *    BOTTOMLEFT_SYM |\n                 *    BOTTOMCENTER_SYM |\n                 *    BOTTOMRIGHT_SYM |\n                 *    BOTTOMRIGHTCORNER_SYM |\n                 *    LEFTTOP_SYM |\n                 *    LEFTMIDDLE_SYM |\n                 *    LEFTBOTTOM_SYM |\n                 *    RIGHTTOP_SYM |\n                 *    RIGHTMIDDLE_SYM |\n                 *    RIGHTBOTTOM_SYM\n                 *    ;\n                 */ var tokenStream = this._tokenStream;\n                if (tokenStream.match([\n                    Tokens.TOPLEFTCORNER_SYM,\n                    Tokens.TOPLEFT_SYM,\n                    Tokens.TOPCENTER_SYM,\n                    Tokens.TOPRIGHT_SYM,\n                    Tokens.TOPRIGHTCORNER_SYM,\n                    Tokens.BOTTOMLEFTCORNER_SYM,\n                    Tokens.BOTTOMLEFT_SYM,\n                    Tokens.BOTTOMCENTER_SYM,\n                    Tokens.BOTTOMRIGHT_SYM,\n                    Tokens.BOTTOMRIGHTCORNER_SYM,\n                    Tokens.LEFTTOP_SYM,\n                    Tokens.LEFTMIDDLE_SYM,\n                    Tokens.LEFTBOTTOM_SYM,\n                    Tokens.RIGHTTOP_SYM,\n                    Tokens.RIGHTMIDDLE_SYM,\n                    Tokens.RIGHTBOTTOM_SYM\n                ])) {\n                    return SyntaxUnit.fromToken(tokenStream.token());\n                } else {\n                    return null;\n                }\n            },\n            _pseudo_page: function() {\n                /*\n                 * pseudo_page\n                 *   : ':' IDENT\n                 *   ;\n                 */ var tokenStream = this._tokenStream;\n                tokenStream.mustMatch(Tokens.COLON);\n                tokenStream.mustMatch(Tokens.IDENT);\n                //TODO: CSS3 Paged Media says only \"left\", \"center\", and \"right\" are allowed\n                return tokenStream.token().value;\n            },\n            _font_face: function() {\n                /*\n                 * font_face\n                 *   : FONT_FACE_SYM S*\n                 *     '{' S* declaration [ ';' S* declaration ]* '}' S*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, line, col;\n                //look for @page\n                tokenStream.mustMatch(Tokens.FONT_FACE_SYM);\n                line = tokenStream.token().startLine;\n                col = tokenStream.token().startCol;\n                this._readWhitespace();\n                this.fire({\n                    type: \"startfontface\",\n                    line: line,\n                    col: col\n                });\n                this._readDeclarations(true);\n                this.fire({\n                    type: \"endfontface\",\n                    line: line,\n                    col: col\n                });\n            },\n            _viewport: function() {\n                /*\n                 * viewport\n                 *   : VIEWPORT_SYM S*\n                 *     '{' S* declaration? [ ';' S* declaration? ]* '}' S*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, line, col;\n                tokenStream.mustMatch(Tokens.VIEWPORT_SYM);\n                line = tokenStream.token().startLine;\n                col = tokenStream.token().startCol;\n                this._readWhitespace();\n                this.fire({\n                    type: \"startviewport\",\n                    line: line,\n                    col: col\n                });\n                this._readDeclarations(true);\n                this.fire({\n                    type: \"endviewport\",\n                    line: line,\n                    col: col\n                });\n            },\n            _document: function() {\n                /*\n                 * document\n                 *   : DOCUMENT_SYM S*\n                 *     _document_function [ ',' S* _document_function ]* S*\n                 *     '{' S* ruleset* '}'\n                 *   ;\n                 */ var tokenStream = this._tokenStream, token, functions = [], prefix = \"\";\n                tokenStream.mustMatch(Tokens.DOCUMENT_SYM);\n                token = tokenStream.token();\n                if (/^@\\-([^\\-]+)\\-/.test(token.value)) {\n                    prefix = RegExp.$1;\n                }\n                this._readWhitespace();\n                functions.push(this._document_function());\n                while(tokenStream.match(Tokens.COMMA)){\n                    this._readWhitespace();\n                    functions.push(this._document_function());\n                }\n                tokenStream.mustMatch(Tokens.LBRACE);\n                this._readWhitespace();\n                this.fire({\n                    type: \"startdocument\",\n                    functions: functions,\n                    prefix: prefix,\n                    line: token.startLine,\n                    col: token.startCol\n                });\n                while(true){\n                    if (tokenStream.peek() === Tokens.PAGE_SYM) {\n                        this._page();\n                    } else if (tokenStream.peek() === Tokens.FONT_FACE_SYM) {\n                        this._font_face();\n                    } else if (tokenStream.peek() === Tokens.VIEWPORT_SYM) {\n                        this._viewport();\n                    } else if (tokenStream.peek() === Tokens.MEDIA_SYM) {\n                        this._media();\n                    } else if (!this._ruleset()) {\n                        break;\n                    }\n                }\n                tokenStream.mustMatch(Tokens.RBRACE);\n                this._readWhitespace();\n                this.fire({\n                    type: \"enddocument\",\n                    functions: functions,\n                    prefix: prefix,\n                    line: token.startLine,\n                    col: token.startCol\n                });\n            },\n            _document_function: function() {\n                /*\n                 * document_function\n                 *   : function | URI S*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, value;\n                if (tokenStream.match(Tokens.URI)) {\n                    value = tokenStream.token().value;\n                    this._readWhitespace();\n                } else {\n                    value = this._function();\n                }\n                return value;\n            },\n            _operator: function(inFunction) {\n                /*\n                 * operator (outside function)\n                 *  : '/' S* | ',' S* | /( empty )/\n                 * operator (inside function)\n                 *  : '/' S* | '+' S* | '*' S* | '-' S* /( empty )/\n                 *  ;\n                 */ var tokenStream = this._tokenStream, token = null;\n                if (tokenStream.match([\n                    Tokens.SLASH,\n                    Tokens.COMMA\n                ]) || inFunction && tokenStream.match([\n                    Tokens.PLUS,\n                    Tokens.STAR,\n                    Tokens.MINUS\n                ])) {\n                    token = tokenStream.token();\n                    this._readWhitespace();\n                }\n                return token ? PropertyValuePart.fromToken(token) : null;\n            },\n            _combinator: function() {\n                /*\n                 * combinator\n                 *  : PLUS S* | GREATER S* | TILDE S* | S+\n                 *  ;\n                 */ var tokenStream = this._tokenStream, value = null, token;\n                if (tokenStream.match([\n                    Tokens.PLUS,\n                    Tokens.GREATER,\n                    Tokens.TILDE\n                ])) {\n                    token = tokenStream.token();\n                    value = new Combinator(token.value, token.startLine, token.startCol);\n                    this._readWhitespace();\n                }\n                return value;\n            },\n            _unary_operator: function() {\n                /*\n                 * unary_operator\n                 *  : '-' | '+'\n                 *  ;\n                 */ var tokenStream = this._tokenStream;\n                if (tokenStream.match([\n                    Tokens.MINUS,\n                    Tokens.PLUS\n                ])) {\n                    return tokenStream.token().value;\n                } else {\n                    return null;\n                }\n            },\n            _property: function() {\n                /*\n                 * property\n                 *   : IDENT S*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, value = null, hack = null, tokenValue, token, line, col;\n                //check for star hack - throws error if not allowed\n                if (tokenStream.peek() === Tokens.STAR && this.options.starHack) {\n                    tokenStream.get();\n                    token = tokenStream.token();\n                    hack = token.value;\n                    line = token.startLine;\n                    col = token.startCol;\n                }\n                if (tokenStream.match(Tokens.IDENT)) {\n                    token = tokenStream.token();\n                    tokenValue = token.value;\n                    //check for underscore hack - no error if not allowed because it's valid CSS syntax\n                    if (tokenValue.charAt(0) === \"_\" && this.options.underscoreHack) {\n                        hack = \"_\";\n                        tokenValue = tokenValue.substring(1);\n                    }\n                    value = new PropertyName(tokenValue, hack, line || token.startLine, col || token.startCol);\n                    this._readWhitespace();\n                }\n                return value;\n            },\n            //Augmented with CSS3 Selectors\n            _ruleset: function() {\n                /*\n                 * ruleset\n                 *   : selectors_group\n                 *     '{' S* declaration? [ ';' S* declaration? ]* '}' S*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, tt, selectors;\n                /*\n                 * Error Recovery: If even a single selector fails to parse,\n                 * then the entire ruleset should be thrown away.\n                 */ try {\n                    selectors = this._selectors_group();\n                } catch (ex) {\n                    if (ex instanceof SyntaxError && !this.options.strict) {\n                        //fire error event\n                        this.fire({\n                            type: \"error\",\n                            error: ex,\n                            message: ex.message,\n                            line: ex.line,\n                            col: ex.col\n                        });\n                        //skip over everything until closing brace\n                        tt = tokenStream.advance([\n                            Tokens.RBRACE\n                        ]);\n                        if (tt === Tokens.RBRACE) {\n                        //if there's a right brace, the rule is finished so don't do anything\n                        } else {\n                            //otherwise, rethrow the error because it wasn't handled properly\n                            throw ex;\n                        }\n                    } else {\n                        //not a syntax error, rethrow it\n                        throw ex;\n                    }\n                    //trigger parser to continue\n                    return true;\n                }\n                //if it got here, all selectors parsed\n                if (selectors) {\n                    this.fire({\n                        type: \"startrule\",\n                        selectors: selectors,\n                        line: selectors[0].line,\n                        col: selectors[0].col\n                    });\n                    this._readDeclarations(true);\n                    this.fire({\n                        type: \"endrule\",\n                        selectors: selectors,\n                        line: selectors[0].line,\n                        col: selectors[0].col\n                    });\n                }\n                return selectors;\n            },\n            //CSS3 Selectors\n            _selectors_group: function() {\n                /*\n                 * selectors_group\n                 *   : selector [ COMMA S* selector ]*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, selectors = [], selector;\n                selector = this._selector();\n                if (selector !== null) {\n                    selectors.push(selector);\n                    while(tokenStream.match(Tokens.COMMA)){\n                        this._readWhitespace();\n                        selector = this._selector();\n                        if (selector !== null) {\n                            selectors.push(selector);\n                        } else {\n                            this._unexpectedToken(tokenStream.LT(1));\n                        }\n                    }\n                }\n                return selectors.length ? selectors : null;\n            },\n            //CSS3 Selectors\n            _selector: function() {\n                /*\n                 * selector\n                 *   : simple_selector_sequence [ combinator simple_selector_sequence ]*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, selector = [], nextSelector = null, combinator = null, ws = null;\n                //if there's no simple selector, then there's no selector\n                nextSelector = this._simple_selector_sequence();\n                if (nextSelector === null) {\n                    return null;\n                }\n                selector.push(nextSelector);\n                do {\n                    //look for a combinator\n                    combinator = this._combinator();\n                    if (combinator !== null) {\n                        selector.push(combinator);\n                        nextSelector = this._simple_selector_sequence();\n                        //there must be a next selector\n                        if (nextSelector === null) {\n                            this._unexpectedToken(tokenStream.LT(1));\n                        } else {\n                            //nextSelector is an instance of SelectorPart\n                            selector.push(nextSelector);\n                        }\n                    } else {\n                        //if there's not whitespace, we're done\n                        if (this._readWhitespace()) {\n                            //add whitespace separator\n                            ws = new Combinator(tokenStream.token().value, tokenStream.token().startLine, tokenStream.token().startCol);\n                            //combinator is not required\n                            combinator = this._combinator();\n                            //selector is required if there's a combinator\n                            nextSelector = this._simple_selector_sequence();\n                            if (nextSelector === null) {\n                                if (combinator !== null) {\n                                    this._unexpectedToken(tokenStream.LT(1));\n                                }\n                            } else {\n                                if (combinator !== null) {\n                                    selector.push(combinator);\n                                } else {\n                                    selector.push(ws);\n                                }\n                                selector.push(nextSelector);\n                            }\n                        } else {\n                            break;\n                        }\n                    }\n                }while (true);\n                return new Selector(selector, selector[0].line, selector[0].col);\n            },\n            //CSS3 Selectors\n            _simple_selector_sequence: function() {\n                /*\n                 * simple_selector_sequence\n                 *   : [ type_selector | universal ]\n                 *     [ HASH | class | attrib | pseudo | negation ]*\n                 *   | [ HASH | class | attrib | pseudo | negation ]+\n                 *   ;\n                 */ var tokenStream = this._tokenStream, //parts of a simple selector\n                elementName = null, modifiers = [], //complete selector text\n                selectorText = \"\", //the different parts after the element name to search for\n                components = [\n                    //HASH\n                    function() {\n                        return tokenStream.match(Tokens.HASH) ? new SelectorSubPart(tokenStream.token().value, \"id\", tokenStream.token().startLine, tokenStream.token().startCol) : null;\n                    },\n                    this._class,\n                    this._attrib,\n                    this._pseudo,\n                    this._negation\n                ], i = 0, len = components.length, component = null, line, col;\n                //get starting line and column for the selector\n                line = tokenStream.LT(1).startLine;\n                col = tokenStream.LT(1).startCol;\n                elementName = this._type_selector();\n                if (!elementName) {\n                    elementName = this._universal();\n                }\n                if (elementName !== null) {\n                    selectorText += elementName;\n                }\n                while(true){\n                    //whitespace means we're done\n                    if (tokenStream.peek() === Tokens.S) {\n                        break;\n                    }\n                    //check for each component\n                    while(i < len && component === null){\n                        component = components[i++].call(this);\n                    }\n                    if (component === null) {\n                        //we don't have a selector\n                        if (selectorText === \"\") {\n                            return null;\n                        } else {\n                            break;\n                        }\n                    } else {\n                        i = 0;\n                        modifiers.push(component);\n                        selectorText += component.toString();\n                        component = null;\n                    }\n                }\n                return selectorText !== \"\" ? new SelectorPart(elementName, modifiers, selectorText, line, col) : null;\n            },\n            //CSS3 Selectors\n            _type_selector: function() {\n                /*\n                 * type_selector\n                 *   : [ namespace_prefix ]? element_name\n                 *   ;\n                 */ var tokenStream = this._tokenStream, ns = this._namespace_prefix(), elementName = this._element_name();\n                if (!elementName) {\n                    /*\n                     * Need to back out the namespace that was read due to both\n                     * type_selector and universal reading namespace_prefix\n                     * first. Kind of hacky, but only way I can figure out\n                     * right now how to not change the grammar.\n                     */ if (ns) {\n                        tokenStream.unget();\n                        if (ns.length > 1) {\n                            tokenStream.unget();\n                        }\n                    }\n                    return null;\n                } else {\n                    if (ns) {\n                        elementName.text = ns + elementName.text;\n                        elementName.col -= ns.length;\n                    }\n                    return elementName;\n                }\n            },\n            //CSS3 Selectors\n            _class: function() {\n                /*\n                 * class\n                 *   : '.' IDENT\n                 *   ;\n                 */ var tokenStream = this._tokenStream, token;\n                if (tokenStream.match(Tokens.DOT)) {\n                    tokenStream.mustMatch(Tokens.IDENT);\n                    token = tokenStream.token();\n                    return new SelectorSubPart(\".\" + token.value, \"class\", token.startLine, token.startCol - 1);\n                } else {\n                    return null;\n                }\n            },\n            //CSS3 Selectors\n            _element_name: function() {\n                /*\n                 * element_name\n                 *   : IDENT\n                 *   ;\n                 */ var tokenStream = this._tokenStream, token;\n                if (tokenStream.match(Tokens.IDENT)) {\n                    token = tokenStream.token();\n                    return new SelectorSubPart(token.value, \"elementName\", token.startLine, token.startCol);\n                } else {\n                    return null;\n                }\n            },\n            //CSS3 Selectors\n            _namespace_prefix: function() {\n                /*\n                 * namespace_prefix\n                 *   : [ IDENT | '*' ]? '|'\n                 *   ;\n                 */ var tokenStream = this._tokenStream, value = \"\";\n                //verify that this is a namespace prefix\n                if (tokenStream.LA(1) === Tokens.PIPE || tokenStream.LA(2) === Tokens.PIPE) {\n                    if (tokenStream.match([\n                        Tokens.IDENT,\n                        Tokens.STAR\n                    ])) {\n                        value += tokenStream.token().value;\n                    }\n                    tokenStream.mustMatch(Tokens.PIPE);\n                    value += \"|\";\n                }\n                return value.length ? value : null;\n            },\n            //CSS3 Selectors\n            _universal: function() {\n                /*\n                 * universal\n                 *   : [ namespace_prefix ]? '*'\n                 *   ;\n                 */ var tokenStream = this._tokenStream, value = \"\", ns;\n                ns = this._namespace_prefix();\n                if (ns) {\n                    value += ns;\n                }\n                if (tokenStream.match(Tokens.STAR)) {\n                    value += \"*\";\n                }\n                return value.length ? value : null;\n            },\n            //CSS3 Selectors\n            _attrib: function() {\n                /*\n                 * attrib\n                 *   : '[' S* [ namespace_prefix ]? IDENT S*\n                 *         [ [ PREFIXMATCH |\n                 *             SUFFIXMATCH |\n                 *             SUBSTRINGMATCH |\n                 *             '=' |\n                 *             INCLUDES |\n                 *             DASHMATCH ] S* [ IDENT | STRING ] S*\n                 *         ]? ']'\n                 *   ;\n                 */ var tokenStream = this._tokenStream, value = null, ns, token;\n                if (tokenStream.match(Tokens.LBRACKET)) {\n                    token = tokenStream.token();\n                    value = token.value;\n                    value += this._readWhitespace();\n                    ns = this._namespace_prefix();\n                    if (ns) {\n                        value += ns;\n                    }\n                    tokenStream.mustMatch(Tokens.IDENT);\n                    value += tokenStream.token().value;\n                    value += this._readWhitespace();\n                    if (tokenStream.match([\n                        Tokens.PREFIXMATCH,\n                        Tokens.SUFFIXMATCH,\n                        Tokens.SUBSTRINGMATCH,\n                        Tokens.EQUALS,\n                        Tokens.INCLUDES,\n                        Tokens.DASHMATCH\n                    ])) {\n                        value += tokenStream.token().value;\n                        value += this._readWhitespace();\n                        tokenStream.mustMatch([\n                            Tokens.IDENT,\n                            Tokens.STRING\n                        ]);\n                        value += tokenStream.token().value;\n                        value += this._readWhitespace();\n                    }\n                    tokenStream.mustMatch(Tokens.RBRACKET);\n                    return new SelectorSubPart(value + \"]\", \"attribute\", token.startLine, token.startCol);\n                } else {\n                    return null;\n                }\n            },\n            //CSS3 Selectors\n            _pseudo: function() {\n                /*\n                 * pseudo\n                 *   : ':' ':'? [ IDENT | functional_pseudo ]\n                 *   ;\n                 */ var tokenStream = this._tokenStream, pseudo = null, colons = \":\", line, col;\n                if (tokenStream.match(Tokens.COLON)) {\n                    if (tokenStream.match(Tokens.COLON)) {\n                        colons += \":\";\n                    }\n                    if (tokenStream.match(Tokens.IDENT)) {\n                        pseudo = tokenStream.token().value;\n                        line = tokenStream.token().startLine;\n                        col = tokenStream.token().startCol - colons.length;\n                    } else if (tokenStream.peek() === Tokens.FUNCTION) {\n                        line = tokenStream.LT(1).startLine;\n                        col = tokenStream.LT(1).startCol - colons.length;\n                        pseudo = this._functional_pseudo();\n                    }\n                    if (pseudo) {\n                        pseudo = new SelectorSubPart(colons + pseudo, \"pseudo\", line, col);\n                    }\n                }\n                return pseudo;\n            },\n            //CSS3 Selectors\n            _functional_pseudo: function() {\n                /*\n                 * functional_pseudo\n                 *   : FUNCTION S* expression ')'\n                 *   ;\n                */ var tokenStream = this._tokenStream, value = null;\n                if (tokenStream.match(Tokens.FUNCTION)) {\n                    value = tokenStream.token().value;\n                    value += this._readWhitespace();\n                    value += this._expression();\n                    tokenStream.mustMatch(Tokens.RPAREN);\n                    value += \")\";\n                }\n                return value;\n            },\n            //CSS3 Selectors\n            _expression: function() {\n                /*\n                 * expression\n                 *   : [ [ PLUS | '-' | DIMENSION | NUMBER | STRING | IDENT ] S* ]+\n                 *   ;\n                 */ var tokenStream = this._tokenStream, value = \"\";\n                while(tokenStream.match([\n                    Tokens.PLUS,\n                    Tokens.MINUS,\n                    Tokens.DIMENSION,\n                    Tokens.NUMBER,\n                    Tokens.STRING,\n                    Tokens.IDENT,\n                    Tokens.LENGTH,\n                    Tokens.FREQ,\n                    Tokens.ANGLE,\n                    Tokens.TIME,\n                    Tokens.RESOLUTION,\n                    Tokens.SLASH\n                ])){\n                    value += tokenStream.token().value;\n                    value += this._readWhitespace();\n                }\n                return value.length ? value : null;\n            },\n            //CSS3 Selectors\n            _negation: function() {\n                /*\n                 * negation\n                 *   : NOT S* negation_arg S* ')'\n                 *   ;\n                 */ var tokenStream = this._tokenStream, line, col, value = \"\", arg, subpart = null;\n                if (tokenStream.match(Tokens.NOT)) {\n                    value = tokenStream.token().value;\n                    line = tokenStream.token().startLine;\n                    col = tokenStream.token().startCol;\n                    value += this._readWhitespace();\n                    arg = this._negation_arg();\n                    value += arg;\n                    value += this._readWhitespace();\n                    tokenStream.match(Tokens.RPAREN);\n                    value += tokenStream.token().value;\n                    subpart = new SelectorSubPart(value, \"not\", line, col);\n                    subpart.args.push(arg);\n                }\n                return subpart;\n            },\n            //CSS3 Selectors\n            _negation_arg: function() {\n                /*\n                 * negation_arg\n                 *   : type_selector | universal | HASH | class | attrib | pseudo\n                 *   ;\n                 */ var tokenStream = this._tokenStream, args = [\n                    this._type_selector,\n                    this._universal,\n                    function() {\n                        return tokenStream.match(Tokens.HASH) ? new SelectorSubPart(tokenStream.token().value, \"id\", tokenStream.token().startLine, tokenStream.token().startCol) : null;\n                    },\n                    this._class,\n                    this._attrib,\n                    this._pseudo\n                ], arg = null, i = 0, len = args.length, line, col, part;\n                line = tokenStream.LT(1).startLine;\n                col = tokenStream.LT(1).startCol;\n                while(i < len && arg === null){\n                    arg = args[i].call(this);\n                    i++;\n                }\n                //must be a negation arg\n                if (arg === null) {\n                    this._unexpectedToken(tokenStream.LT(1));\n                }\n                //it's an element name\n                if (arg.type === \"elementName\") {\n                    part = new SelectorPart(arg, [], arg.toString(), line, col);\n                } else {\n                    part = new SelectorPart(null, [\n                        arg\n                    ], arg.toString(), line, col);\n                }\n                return part;\n            },\n            _declaration: function() {\n                /*\n                 * declaration\n                 *   : property ':' S* expr prio?\n                 *   | /( empty )/\n                 *   ;\n                 */ var tokenStream = this._tokenStream, property = null, expr = null, prio = null, invalid = null, propertyName = \"\";\n                property = this._property();\n                if (property !== null) {\n                    tokenStream.mustMatch(Tokens.COLON);\n                    this._readWhitespace();\n                    expr = this._expr();\n                    //if there's no parts for the value, it's an error\n                    if (!expr || expr.length === 0) {\n                        this._unexpectedToken(tokenStream.LT(1));\n                    }\n                    prio = this._prio();\n                    /*\n                     * If hacks should be allowed, then only check the root\n                     * property. If hacks should not be allowed, treat\n                     * _property or *property as invalid properties.\n                     */ propertyName = property.toString();\n                    if (this.options.starHack && property.hack === \"*\" || this.options.underscoreHack && property.hack === \"_\") {\n                        propertyName = property.text;\n                    }\n                    try {\n                        this._validateProperty(propertyName, expr);\n                    } catch (ex) {\n                        invalid = ex;\n                    }\n                    this.fire({\n                        type: \"property\",\n                        property: property,\n                        value: expr,\n                        important: prio,\n                        line: property.line,\n                        col: property.col,\n                        invalid: invalid\n                    });\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n            _prio: function() {\n                /*\n                 * prio\n                 *   : IMPORTANT_SYM S*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, result = tokenStream.match(Tokens.IMPORTANT_SYM);\n                this._readWhitespace();\n                return result;\n            },\n            _expr: function(inFunction) {\n                /*\n                 * expr\n                 *   : term [ operator term ]*\n                 *   ;\n                 */ var values = [], //valueParts\t= [],\n                value = null, operator = null;\n                value = this._term(inFunction);\n                if (value !== null) {\n                    values.push(value);\n                    do {\n                        operator = this._operator(inFunction);\n                        //if there's an operator, keep building up the value parts\n                        if (operator) {\n                            values.push(operator);\n                        } /*else {\n                            //if there's not an operator, you have a full value\n\t\t\t\t\t\t\tvalues.push(new PropertyValue(valueParts, valueParts[0].line, valueParts[0].col));\n\t\t\t\t\t\t\tvalueParts = [];\n\t\t\t\t\t\t}*/ \n                        value = this._term(inFunction);\n                        if (value === null) {\n                            break;\n                        } else {\n                            values.push(value);\n                        }\n                    }while (true);\n                }\n                //cleanup\n                /*if (valueParts.length){\n                    values.push(new PropertyValue(valueParts, valueParts[0].line, valueParts[0].col));\n                }*/ return values.length > 0 ? new PropertyValue(values, values[0].line, values[0].col) : null;\n            },\n            _term: function(inFunction) {\n                /*\n                 * term\n                 *   : unary_operator?\n                 *     [ NUMBER S* | PERCENTAGE S* | LENGTH S* | ANGLE S* |\n                 *       TIME S* | FREQ S* | function | ie_function ]\n                 *   | STRING S* | IDENT S* | URI S* | UNICODERANGE S* | hexcolor\n                 *   ;\n                 */ var tokenStream = this._tokenStream, unary = null, value = null, endChar = null, token, line, col;\n                //returns the operator or null\n                unary = this._unary_operator();\n                if (unary !== null) {\n                    line = tokenStream.token().startLine;\n                    col = tokenStream.token().startCol;\n                }\n                //exception for IE filters\n                if (tokenStream.peek() === Tokens.IE_FUNCTION && this.options.ieFilters) {\n                    value = this._ie_function();\n                    if (unary === null) {\n                        line = tokenStream.token().startLine;\n                        col = tokenStream.token().startCol;\n                    }\n                //see if it's a simple block\n                } else if (inFunction && tokenStream.match([\n                    Tokens.LPAREN,\n                    Tokens.LBRACE,\n                    Tokens.LBRACKET\n                ])) {\n                    token = tokenStream.token();\n                    endChar = token.endChar;\n                    value = token.value + this._expr(inFunction).text;\n                    if (unary === null) {\n                        line = tokenStream.token().startLine;\n                        col = tokenStream.token().startCol;\n                    }\n                    tokenStream.mustMatch(Tokens.type(endChar));\n                    value += endChar;\n                    this._readWhitespace();\n                //see if there's a simple match\n                } else if (tokenStream.match([\n                    Tokens.NUMBER,\n                    Tokens.PERCENTAGE,\n                    Tokens.LENGTH,\n                    Tokens.ANGLE,\n                    Tokens.TIME,\n                    Tokens.FREQ,\n                    Tokens.STRING,\n                    Tokens.IDENT,\n                    Tokens.URI,\n                    Tokens.UNICODE_RANGE\n                ])) {\n                    value = tokenStream.token().value;\n                    if (unary === null) {\n                        line = tokenStream.token().startLine;\n                        col = tokenStream.token().startCol;\n                    }\n                    this._readWhitespace();\n                } else {\n                    //see if it's a color\n                    token = this._hexcolor();\n                    if (token === null) {\n                        //if there's no unary, get the start of the next token for line/col info\n                        if (unary === null) {\n                            line = tokenStream.LT(1).startLine;\n                            col = tokenStream.LT(1).startCol;\n                        }\n                        //has to be a function\n                        if (value === null) {\n                            /*\n                             * This checks for alpha(opacity=0) style of IE\n                             * functions. IE_FUNCTION only presents progid: style.\n                             */ if (tokenStream.LA(3) === Tokens.EQUALS && this.options.ieFilters) {\n                                value = this._ie_function();\n                            } else {\n                                value = this._function();\n                            }\n                        }\n                    /*if (value === null){\n                            return null;\n                            //throw new Error(\"Expected identifier at line \" + tokenStream.token().startLine + \", character \" +  tokenStream.token().startCol + \".\");\n                        }*/ } else {\n                        value = token.value;\n                        if (unary === null) {\n                            line = token.startLine;\n                            col = token.startCol;\n                        }\n                    }\n                }\n                return value !== null ? new PropertyValuePart(unary !== null ? unary + value : value, line, col) : null;\n            },\n            _function: function() {\n                /*\n                 * function\n                 *   : FUNCTION S* expr ')' S*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, functionText = null, expr = null, lt;\n                if (tokenStream.match(Tokens.FUNCTION)) {\n                    functionText = tokenStream.token().value;\n                    this._readWhitespace();\n                    expr = this._expr(true);\n                    functionText += expr;\n                    //START: Horrible hack in case it's an IE filter\n                    if (this.options.ieFilters && tokenStream.peek() === Tokens.EQUALS) {\n                        do {\n                            if (this._readWhitespace()) {\n                                functionText += tokenStream.token().value;\n                            }\n                            //might be second time in the loop\n                            if (tokenStream.LA(0) === Tokens.COMMA) {\n                                functionText += tokenStream.token().value;\n                            }\n                            tokenStream.match(Tokens.IDENT);\n                            functionText += tokenStream.token().value;\n                            tokenStream.match(Tokens.EQUALS);\n                            functionText += tokenStream.token().value;\n                            //functionText += this._term();\n                            lt = tokenStream.peek();\n                            while(lt !== Tokens.COMMA && lt !== Tokens.S && lt !== Tokens.RPAREN){\n                                tokenStream.get();\n                                functionText += tokenStream.token().value;\n                                lt = tokenStream.peek();\n                            }\n                        }while (tokenStream.match([\n                            Tokens.COMMA,\n                            Tokens.S\n                        ]));\n                    }\n                    //END: Horrible Hack\n                    tokenStream.match(Tokens.RPAREN);\n                    functionText += \")\";\n                    this._readWhitespace();\n                }\n                return functionText;\n            },\n            _ie_function: function() {\n                /* (My own extension)\n                 * ie_function\n                 *   : IE_FUNCTION S* IDENT '=' term [S* ','? IDENT '=' term]+ ')' S*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, functionText = null, lt;\n                //IE function can begin like a regular function, too\n                if (tokenStream.match([\n                    Tokens.IE_FUNCTION,\n                    Tokens.FUNCTION\n                ])) {\n                    functionText = tokenStream.token().value;\n                    do {\n                        if (this._readWhitespace()) {\n                            functionText += tokenStream.token().value;\n                        }\n                        //might be second time in the loop\n                        if (tokenStream.LA(0) === Tokens.COMMA) {\n                            functionText += tokenStream.token().value;\n                        }\n                        tokenStream.match(Tokens.IDENT);\n                        functionText += tokenStream.token().value;\n                        tokenStream.match(Tokens.EQUALS);\n                        functionText += tokenStream.token().value;\n                        //functionText += this._term();\n                        lt = tokenStream.peek();\n                        while(lt !== Tokens.COMMA && lt !== Tokens.S && lt !== Tokens.RPAREN){\n                            tokenStream.get();\n                            functionText += tokenStream.token().value;\n                            lt = tokenStream.peek();\n                        }\n                    }while (tokenStream.match([\n                        Tokens.COMMA,\n                        Tokens.S\n                    ]));\n                    tokenStream.match(Tokens.RPAREN);\n                    functionText += \")\";\n                    this._readWhitespace();\n                }\n                return functionText;\n            },\n            _hexcolor: function() {\n                /*\n                 * There is a constraint on the color that it must\n                 * have either 3 or 6 hex-digits (i.e., [0-9a-fA-F])\n                 * after the \"#\"; e.g., \"#000\" is OK, but \"#abcd\" is not.\n                 *\n                 * hexcolor\n                 *   : HASH S*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, token = null, color;\n                if (tokenStream.match(Tokens.HASH)) {\n                    //need to do some validation here\n                    token = tokenStream.token();\n                    color = token.value;\n                    if (!/#[a-f0-9]{3,6}/i.test(color)) {\n                        throw new SyntaxError(\"Expected a hex color but found '\" + color + \"' at line \" + token.startLine + \", col \" + token.startCol + \".\", token.startLine, token.startCol);\n                    }\n                    this._readWhitespace();\n                }\n                return token;\n            },\n            //-----------------------------------------------------------------\n            // Animations methods\n            //-----------------------------------------------------------------\n            _keyframes: function() {\n                /*\n                 * keyframes:\n                 *   : KEYFRAMES_SYM S* keyframe_name S* '{' S* keyframe_rule* '}' {\n                 *   ;\n                 */ var tokenStream = this._tokenStream, token, tt, name, prefix = \"\";\n                tokenStream.mustMatch(Tokens.KEYFRAMES_SYM);\n                token = tokenStream.token();\n                if (/^@\\-([^\\-]+)\\-/.test(token.value)) {\n                    prefix = RegExp.$1;\n                }\n                this._readWhitespace();\n                name = this._keyframe_name();\n                this._readWhitespace();\n                tokenStream.mustMatch(Tokens.LBRACE);\n                this.fire({\n                    type: \"startkeyframes\",\n                    name: name,\n                    prefix: prefix,\n                    line: token.startLine,\n                    col: token.startCol\n                });\n                this._readWhitespace();\n                tt = tokenStream.peek();\n                //check for key\n                while(tt === Tokens.IDENT || tt === Tokens.PERCENTAGE){\n                    this._keyframe_rule();\n                    this._readWhitespace();\n                    tt = tokenStream.peek();\n                }\n                this.fire({\n                    type: \"endkeyframes\",\n                    name: name,\n                    prefix: prefix,\n                    line: token.startLine,\n                    col: token.startCol\n                });\n                this._readWhitespace();\n                tokenStream.mustMatch(Tokens.RBRACE);\n            },\n            _keyframe_name: function() {\n                /*\n                 * keyframe_name:\n                 *   : IDENT\n                 *   | STRING\n                 *   ;\n                 */ var tokenStream = this._tokenStream;\n                tokenStream.mustMatch([\n                    Tokens.IDENT,\n                    Tokens.STRING\n                ]);\n                return SyntaxUnit.fromToken(tokenStream.token());\n            },\n            _keyframe_rule: function() {\n                /*\n                 * keyframe_rule:\n                 *   : key_list S*\n                 *     '{' S* declaration [ ';' S* declaration ]* '}' S*\n                 *   ;\n                 */ var keyList = this._key_list();\n                this.fire({\n                    type: \"startkeyframerule\",\n                    keys: keyList,\n                    line: keyList[0].line,\n                    col: keyList[0].col\n                });\n                this._readDeclarations(true);\n                this.fire({\n                    type: \"endkeyframerule\",\n                    keys: keyList,\n                    line: keyList[0].line,\n                    col: keyList[0].col\n                });\n            },\n            _key_list: function() {\n                /*\n                 * key_list:\n                 *   : key [ S* ',' S* key]*\n                 *   ;\n                 */ var tokenStream = this._tokenStream, keyList = [];\n                //must be least one key\n                keyList.push(this._key());\n                this._readWhitespace();\n                while(tokenStream.match(Tokens.COMMA)){\n                    this._readWhitespace();\n                    keyList.push(this._key());\n                    this._readWhitespace();\n                }\n                return keyList;\n            },\n            _key: function() {\n                /*\n                 * There is a restriction that IDENT can be only \"from\" or \"to\".\n                 *\n                 * key\n                 *   : PERCENTAGE\n                 *   | IDENT\n                 *   ;\n                 */ var tokenStream = this._tokenStream, token;\n                if (tokenStream.match(Tokens.PERCENTAGE)) {\n                    return SyntaxUnit.fromToken(tokenStream.token());\n                } else if (tokenStream.match(Tokens.IDENT)) {\n                    token = tokenStream.token();\n                    if (/from|to/i.test(token.value)) {\n                        return SyntaxUnit.fromToken(token);\n                    }\n                    tokenStream.unget();\n                }\n                //if it gets here, there wasn't a valid token, so time to explode\n                this._unexpectedToken(tokenStream.LT(1));\n            },\n            //-----------------------------------------------------------------\n            // Helper methods\n            //-----------------------------------------------------------------\n            /**\n             * Not part of CSS grammar, but useful for skipping over\n             * combination of white space and HTML-style comments.\n             * @return {void}\n             * @method _skipCruft\n             * @private\n             */ _skipCruft: function() {\n                while(this._tokenStream.match([\n                    Tokens.S,\n                    Tokens.CDO,\n                    Tokens.CDC\n                ])){\n                //noop\n                }\n            },\n            /**\n             * Not part of CSS grammar, but this pattern occurs frequently\n             * in the official CSS grammar. Split out here to eliminate\n             * duplicate code.\n             * @param {Boolean} checkStart Indicates if the rule should check\n             *      for the left brace at the beginning.\n             * @param {Boolean} readMargins Indicates if the rule should check\n             *      for margin patterns.\n             * @return {void}\n             * @method _readDeclarations\n             * @private\n             */ _readDeclarations: function(checkStart, readMargins) {\n                /*\n                 * Reads the pattern\n                 * S* '{' S* declaration [ ';' S* declaration ]* '}' S*\n                 * or\n                 * S* '{' S* [ declaration | margin ]? [ ';' S* [ declaration | margin ]? ]* '}' S*\n                 * Note that this is how it is described in CSS3 Paged Media, but is actually incorrect.\n                 * A semicolon is only necessary following a declaration if there's another declaration\n                 * or margin afterwards.\n                 */ var tokenStream = this._tokenStream, tt;\n                this._readWhitespace();\n                if (checkStart) {\n                    tokenStream.mustMatch(Tokens.LBRACE);\n                }\n                this._readWhitespace();\n                try {\n                    while(true){\n                        if (tokenStream.match(Tokens.SEMICOLON) || readMargins && this._margin()) {\n                        //noop\n                        } else if (this._declaration()) {\n                            if (!tokenStream.match(Tokens.SEMICOLON)) {\n                                break;\n                            }\n                        } else {\n                            break;\n                        }\n                        //if ((!this._margin() && !this._declaration()) || !tokenStream.match(Tokens.SEMICOLON)){\n                        //    break;\n                        //}\n                        this._readWhitespace();\n                    }\n                    tokenStream.mustMatch(Tokens.RBRACE);\n                    this._readWhitespace();\n                } catch (ex) {\n                    if (ex instanceof SyntaxError && !this.options.strict) {\n                        //fire error event\n                        this.fire({\n                            type: \"error\",\n                            error: ex,\n                            message: ex.message,\n                            line: ex.line,\n                            col: ex.col\n                        });\n                        //see if there's another declaration\n                        tt = tokenStream.advance([\n                            Tokens.SEMICOLON,\n                            Tokens.RBRACE\n                        ]);\n                        if (tt === Tokens.SEMICOLON) {\n                            //if there's a semicolon, then there might be another declaration\n                            this._readDeclarations(false, readMargins);\n                        } else if (tt !== Tokens.RBRACE) {\n                            //if there's a right brace, the rule is finished so don't do anything\n                            //otherwise, rethrow the error because it wasn't handled properly\n                            throw ex;\n                        }\n                    } else {\n                        //not a syntax error, rethrow it\n                        throw ex;\n                    }\n                }\n            },\n            /**\n             * In some cases, you can end up with two white space tokens in a\n             * row. Instead of making a change in every function that looks for\n             * white space, this function is used to match as much white space\n             * as necessary.\n             * @method _readWhitespace\n             * @return {String} The white space if found, empty string if not.\n             * @private\n             */ _readWhitespace: function() {\n                var tokenStream = this._tokenStream, ws = \"\";\n                while(tokenStream.match(Tokens.S)){\n                    ws += tokenStream.token().value;\n                }\n                return ws;\n            },\n            /**\n             * Throws an error when an unexpected token is found.\n             * @param {Object} token The token that was found.\n             * @method _unexpectedToken\n             * @return {void}\n             * @private\n             */ _unexpectedToken: function(token) {\n                throw new SyntaxError(\"Unexpected token '\" + token.value + \"' at line \" + token.startLine + \", col \" + token.startCol + \".\", token.startLine, token.startCol);\n            },\n            /**\n             * Helper method used for parsing subparts of a style sheet.\n             * @return {void}\n             * @method _verifyEnd\n             * @private\n             */ _verifyEnd: function() {\n                if (this._tokenStream.LA(1) !== Tokens.EOF) {\n                    this._unexpectedToken(this._tokenStream.LT(1));\n                }\n            },\n            //-----------------------------------------------------------------\n            // Validation methods\n            //-----------------------------------------------------------------\n            _validateProperty: function(property, value) {\n                Validation.validate(property, value);\n            },\n            //-----------------------------------------------------------------\n            // Parsing methods\n            //-----------------------------------------------------------------\n            parse: function(input) {\n                this._tokenStream = new TokenStream(input, Tokens);\n                this._stylesheet();\n            },\n            parseStyleSheet: function(input) {\n                //just passthrough\n                return this.parse(input);\n            },\n            parseMediaQuery: function(input) {\n                this._tokenStream = new TokenStream(input, Tokens);\n                var result = this._media_query();\n                //if there's anything more, then it's an invalid selector\n                this._verifyEnd();\n                //otherwise return result\n                return result;\n            },\n            /**\n             * Parses a property value (everything after the semicolon).\n             * @return {parserlib.css.PropertyValue} The property value.\n             * @throws parserlib.util.SyntaxError If an unexpected token is found.\n             * @method parserPropertyValue\n             */ parsePropertyValue: function(input) {\n                this._tokenStream = new TokenStream(input, Tokens);\n                this._readWhitespace();\n                var result = this._expr();\n                //okay to have a trailing white space\n                this._readWhitespace();\n                //if there's anything more, then it's an invalid selector\n                this._verifyEnd();\n                //otherwise return result\n                return result;\n            },\n            /**\n             * Parses a complete CSS rule, including selectors and\n             * properties.\n             * @param {String} input The text to parser.\n             * @return {Boolean} True if the parse completed successfully, false if not.\n             * @method parseRule\n             */ parseRule: function(input) {\n                this._tokenStream = new TokenStream(input, Tokens);\n                //skip any leading white space\n                this._readWhitespace();\n                var result = this._ruleset();\n                //skip any trailing white space\n                this._readWhitespace();\n                //if there's anything more, then it's an invalid selector\n                this._verifyEnd();\n                //otherwise return result\n                return result;\n            },\n            /**\n             * Parses a single CSS selector (no comma)\n             * @param {String} input The text to parse as a CSS selector.\n             * @return {Selector} An object representing the selector.\n             * @throws parserlib.util.SyntaxError If an unexpected token is found.\n             * @method parseSelector\n             */ parseSelector: function(input) {\n                this._tokenStream = new TokenStream(input, Tokens);\n                //skip any leading white space\n                this._readWhitespace();\n                var result = this._selector();\n                //skip any trailing white space\n                this._readWhitespace();\n                //if there's anything more, then it's an invalid selector\n                this._verifyEnd();\n                //otherwise return result\n                return result;\n            },\n            /**\n             * Parses an HTML style attribute: a set of CSS declarations\n             * separated by semicolons.\n             * @param {String} input The text to parse as a style attribute\n             * @return {void}\n             * @method parseStyleAttribute\n             */ parseStyleAttribute: function(input) {\n                input += \"}\"; // for error recovery in _readDeclarations()\n                this._tokenStream = new TokenStream(input, Tokens);\n                this._readDeclarations();\n            }\n        };\n        //copy over onto prototype\n        for(prop in additions){\n            if (Object.prototype.hasOwnProperty.call(additions, prop)) {\n                proto[prop] = additions[prop];\n            }\n        }\n        return proto;\n    }();\n    /*\nnth\n  : S* [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]? |\n         ['-'|'+']? INTEGER | {O}{D}{D} | {E}{V}{E}{N} ] S*\n  ;\n*/ var Properties = {\n        __proto__: null,\n        //A\n        \"align-items\": \"flex-start | flex-end | center | baseline | stretch\",\n        \"align-content\": \"flex-start | flex-end | center | space-between | space-around | stretch\",\n        \"align-self\": \"auto | flex-start | flex-end | center | baseline | stretch\",\n        \"-webkit-align-items\": \"flex-start | flex-end | center | baseline | stretch\",\n        \"-webkit-align-content\": \"flex-start | flex-end | center | space-between | space-around | stretch\",\n        \"-webkit-align-self\": \"auto | flex-start | flex-end | center | baseline | stretch\",\n        \"alignment-adjust\": \"auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | <percentage> | <length>\",\n        \"alignment-baseline\": \"baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical\",\n        \"animation\": 1,\n        \"animation-delay\": {\n            multi: \"<time>\",\n            comma: true\n        },\n        \"animation-direction\": {\n            multi: \"normal | alternate\",\n            comma: true\n        },\n        \"animation-duration\": {\n            multi: \"<time>\",\n            comma: true\n        },\n        \"animation-fill-mode\": {\n            multi: \"none | forwards | backwards | both\",\n            comma: true\n        },\n        \"animation-iteration-count\": {\n            multi: \"<number> | infinite\",\n            comma: true\n        },\n        \"animation-name\": {\n            multi: \"none | <ident>\",\n            comma: true\n        },\n        \"animation-play-state\": {\n            multi: \"running | paused\",\n            comma: true\n        },\n        \"animation-timing-function\": 1,\n        //vendor prefixed\n        \"-moz-animation-delay\": {\n            multi: \"<time>\",\n            comma: true\n        },\n        \"-moz-animation-direction\": {\n            multi: \"normal | alternate\",\n            comma: true\n        },\n        \"-moz-animation-duration\": {\n            multi: \"<time>\",\n            comma: true\n        },\n        \"-moz-animation-iteration-count\": {\n            multi: \"<number> | infinite\",\n            comma: true\n        },\n        \"-moz-animation-name\": {\n            multi: \"none | <ident>\",\n            comma: true\n        },\n        \"-moz-animation-play-state\": {\n            multi: \"running | paused\",\n            comma: true\n        },\n        \"-ms-animation-delay\": {\n            multi: \"<time>\",\n            comma: true\n        },\n        \"-ms-animation-direction\": {\n            multi: \"normal | alternate\",\n            comma: true\n        },\n        \"-ms-animation-duration\": {\n            multi: \"<time>\",\n            comma: true\n        },\n        \"-ms-animation-iteration-count\": {\n            multi: \"<number> | infinite\",\n            comma: true\n        },\n        \"-ms-animation-name\": {\n            multi: \"none | <ident>\",\n            comma: true\n        },\n        \"-ms-animation-play-state\": {\n            multi: \"running | paused\",\n            comma: true\n        },\n        \"-webkit-animation-delay\": {\n            multi: \"<time>\",\n            comma: true\n        },\n        \"-webkit-animation-direction\": {\n            multi: \"normal | alternate\",\n            comma: true\n        },\n        \"-webkit-animation-duration\": {\n            multi: \"<time>\",\n            comma: true\n        },\n        \"-webkit-animation-fill-mode\": {\n            multi: \"none | forwards | backwards | both\",\n            comma: true\n        },\n        \"-webkit-animation-iteration-count\": {\n            multi: \"<number> | infinite\",\n            comma: true\n        },\n        \"-webkit-animation-name\": {\n            multi: \"none | <ident>\",\n            comma: true\n        },\n        \"-webkit-animation-play-state\": {\n            multi: \"running | paused\",\n            comma: true\n        },\n        \"-o-animation-delay\": {\n            multi: \"<time>\",\n            comma: true\n        },\n        \"-o-animation-direction\": {\n            multi: \"normal | alternate\",\n            comma: true\n        },\n        \"-o-animation-duration\": {\n            multi: \"<time>\",\n            comma: true\n        },\n        \"-o-animation-iteration-count\": {\n            multi: \"<number> | infinite\",\n            comma: true\n        },\n        \"-o-animation-name\": {\n            multi: \"none | <ident>\",\n            comma: true\n        },\n        \"-o-animation-play-state\": {\n            multi: \"running | paused\",\n            comma: true\n        },\n        \"appearance\": \"icon | window | desktop | workspace | document | tooltip | dialog | button | push-button | hyperlink | radio | radio-button | checkbox | menu-item | tab | menu | menubar | pull-down-menu | pop-up-menu | list-menu | radio-group | checkbox-group | outline-tree | range | field | combo-box | signature | password | normal | none | inherit\",\n        \"azimuth\": function(expression) {\n            var simple = \"<angle> | leftwards | rightwards | inherit\", direction = \"left-side | far-left | left | center-left | center | center-right | right | far-right | right-side\", behind = false, valid = false, part;\n            if (!ValidationTypes.isAny(expression, simple)) {\n                if (ValidationTypes.isAny(expression, \"behind\")) {\n                    behind = true;\n                    valid = true;\n                }\n                if (ValidationTypes.isAny(expression, direction)) {\n                    valid = true;\n                    if (!behind) {\n                        ValidationTypes.isAny(expression, \"behind\");\n                    }\n                }\n            }\n            if (expression.hasNext()) {\n                part = expression.next();\n                if (valid) {\n                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n                } else {\n                    throw new ValidationError(\"Expected (<'azimuth'>) but found '\" + part + \"'.\", part.line, part.col);\n                }\n            }\n        },\n        //B\n        \"backface-visibility\": \"visible | hidden\",\n        \"background\": 1,\n        \"background-attachment\": {\n            multi: \"<attachment>\",\n            comma: true\n        },\n        \"background-clip\": {\n            multi: \"<box>\",\n            comma: true\n        },\n        \"background-color\": \"<color> | inherit\",\n        \"background-image\": {\n            multi: \"<bg-image>\",\n            comma: true\n        },\n        \"background-origin\": {\n            multi: \"<box>\",\n            comma: true\n        },\n        \"background-position\": {\n            multi: \"<bg-position>\",\n            comma: true\n        },\n        \"background-repeat\": {\n            multi: \"<repeat-style>\"\n        },\n        \"background-size\": {\n            multi: \"<bg-size>\",\n            comma: true\n        },\n        \"baseline-shift\": \"baseline | sub | super | <percentage> | <length>\",\n        \"behavior\": 1,\n        \"binding\": 1,\n        \"bleed\": \"<length>\",\n        \"bookmark-label\": \"<content> | <attr> | <string>\",\n        \"bookmark-level\": \"none | <integer>\",\n        \"bookmark-state\": \"open | closed\",\n        \"bookmark-target\": \"none | <uri> | <attr>\",\n        \"border\": \"<border-width> || <border-style> || <color>\",\n        \"border-bottom\": \"<border-width> || <border-style> || <color>\",\n        \"border-bottom-color\": \"<color> | inherit\",\n        \"border-bottom-left-radius\": \"<x-one-radius>\",\n        \"border-bottom-right-radius\": \"<x-one-radius>\",\n        \"border-bottom-style\": \"<border-style>\",\n        \"border-bottom-width\": \"<border-width>\",\n        \"border-collapse\": \"collapse | separate | inherit\",\n        \"border-color\": {\n            multi: \"<color> | inherit\",\n            max: 4\n        },\n        \"border-image\": 1,\n        \"border-image-outset\": {\n            multi: \"<length> | <number>\",\n            max: 4\n        },\n        \"border-image-repeat\": {\n            multi: \"stretch | repeat | round\",\n            max: 2\n        },\n        \"border-image-slice\": function(expression) {\n            var valid = false, numeric = \"<number> | <percentage>\", fill = false, count = 0, max = 4, part;\n            if (ValidationTypes.isAny(expression, \"fill\")) {\n                fill = true;\n                valid = true;\n            }\n            while(expression.hasNext() && count < max){\n                valid = ValidationTypes.isAny(expression, numeric);\n                if (!valid) {\n                    break;\n                }\n                count++;\n            }\n            if (!fill) {\n                ValidationTypes.isAny(expression, \"fill\");\n            } else {\n                valid = true;\n            }\n            if (expression.hasNext()) {\n                part = expression.next();\n                if (valid) {\n                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n                } else {\n                    throw new ValidationError(\"Expected ([<number> | <percentage>]{1,4} && fill?) but found '\" + part + \"'.\", part.line, part.col);\n                }\n            }\n        },\n        \"border-image-source\": \"<image> | none\",\n        \"border-image-width\": {\n            multi: \"<length> | <percentage> | <number> | auto\",\n            max: 4\n        },\n        \"border-left\": \"<border-width> || <border-style> || <color>\",\n        \"border-left-color\": \"<color> | inherit\",\n        \"border-left-style\": \"<border-style>\",\n        \"border-left-width\": \"<border-width>\",\n        \"border-radius\": function(expression) {\n            var valid = false, simple = \"<length> | <percentage> | inherit\", slash = false, count = 0, max = 8, part;\n            while(expression.hasNext() && count < max){\n                valid = ValidationTypes.isAny(expression, simple);\n                if (!valid) {\n                    if (String(expression.peek()) === \"/\" && count > 0 && !slash) {\n                        slash = true;\n                        max = count + 5;\n                        expression.next();\n                    } else {\n                        break;\n                    }\n                }\n                count++;\n            }\n            if (expression.hasNext()) {\n                part = expression.next();\n                if (valid) {\n                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n                } else {\n                    throw new ValidationError(\"Expected (<'border-radius'>) but found '\" + part + \"'.\", part.line, part.col);\n                }\n            }\n        },\n        \"border-right\": \"<border-width> || <border-style> || <color>\",\n        \"border-right-color\": \"<color> | inherit\",\n        \"border-right-style\": \"<border-style>\",\n        \"border-right-width\": \"<border-width>\",\n        \"border-spacing\": {\n            multi: \"<length> | inherit\",\n            max: 2\n        },\n        \"border-style\": {\n            multi: \"<border-style>\",\n            max: 4\n        },\n        \"border-top\": \"<border-width> || <border-style> || <color>\",\n        \"border-top-color\": \"<color> | inherit\",\n        \"border-top-left-radius\": \"<x-one-radius>\",\n        \"border-top-right-radius\": \"<x-one-radius>\",\n        \"border-top-style\": \"<border-style>\",\n        \"border-top-width\": \"<border-width>\",\n        \"border-width\": {\n            multi: \"<border-width>\",\n            max: 4\n        },\n        \"bottom\": \"<margin-width> | inherit\",\n        \"-moz-box-align\": \"start | end | center | baseline | stretch\",\n        \"-moz-box-decoration-break\": \"slice |clone\",\n        \"-moz-box-direction\": \"normal | reverse | inherit\",\n        \"-moz-box-flex\": \"<number>\",\n        \"-moz-box-flex-group\": \"<integer>\",\n        \"-moz-box-lines\": \"single | multiple\",\n        \"-moz-box-ordinal-group\": \"<integer>\",\n        \"-moz-box-orient\": \"horizontal | vertical | inline-axis | block-axis | inherit\",\n        \"-moz-box-pack\": \"start | end | center | justify\",\n        \"-o-box-decoration-break\": \"slice | clone\",\n        \"-webkit-box-align\": \"start | end | center | baseline | stretch\",\n        \"-webkit-box-decoration-break\": \"slice |clone\",\n        \"-webkit-box-direction\": \"normal | reverse | inherit\",\n        \"-webkit-box-flex\": \"<number>\",\n        \"-webkit-box-flex-group\": \"<integer>\",\n        \"-webkit-box-lines\": \"single | multiple\",\n        \"-webkit-box-ordinal-group\": \"<integer>\",\n        \"-webkit-box-orient\": \"horizontal | vertical | inline-axis | block-axis | inherit\",\n        \"-webkit-box-pack\": \"start | end | center | justify\",\n        \"box-decoration-break\": \"slice | clone\",\n        \"box-shadow\": function(expression) {\n            var part;\n            if (!ValidationTypes.isAny(expression, \"none\")) {\n                Validation.multiProperty(\"<shadow>\", expression, true, Infinity);\n            } else {\n                if (expression.hasNext()) {\n                    part = expression.next();\n                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n                }\n            }\n        },\n        \"box-sizing\": \"content-box | border-box | inherit\",\n        \"break-after\": \"auto | always | avoid | left | right | page | column | avoid-page | avoid-column\",\n        \"break-before\": \"auto | always | avoid | left | right | page | column | avoid-page | avoid-column\",\n        \"break-inside\": \"auto | avoid | avoid-page | avoid-column\",\n        //C\n        \"caption-side\": \"top | bottom | inherit\",\n        \"clear\": \"none | right | left | both | inherit\",\n        \"clip\": 1,\n        \"color\": \"<color> | inherit\",\n        \"color-profile\": 1,\n        \"column-count\": \"<integer> | auto\",\n        \"column-fill\": \"auto | balance\",\n        \"column-gap\": \"<length> | normal\",\n        \"column-rule\": \"<border-width> || <border-style> || <color>\",\n        \"column-rule-color\": \"<color>\",\n        \"column-rule-style\": \"<border-style>\",\n        \"column-rule-width\": \"<border-width>\",\n        \"column-span\": \"none | all\",\n        \"column-width\": \"<length> | auto\",\n        \"columns\": 1,\n        \"content\": 1,\n        \"counter-increment\": 1,\n        \"counter-reset\": 1,\n        \"crop\": \"<shape> | auto\",\n        \"cue\": \"cue-after | cue-before | inherit\",\n        \"cue-after\": 1,\n        \"cue-before\": 1,\n        \"cursor\": 1,\n        //D\n        \"direction\": \"ltr | rtl | inherit\",\n        \"display\": \"inline | block | list-item | inline-block | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | grid | inline-grid | run-in | ruby | ruby-base | ruby-text | ruby-base-container | ruby-text-container | contents | none | inherit | -moz-box | -moz-inline-block | -moz-inline-box | -moz-inline-grid | -moz-inline-stack | -moz-inline-table | -moz-grid | -moz-grid-group | -moz-grid-line | -moz-groupbox | -moz-deck | -moz-popup | -moz-stack | -moz-marker | -webkit-box | -webkit-inline-box | -ms-flexbox | -ms-inline-flexbox | flex | -webkit-flex | inline-flex | -webkit-inline-flex\",\n        \"dominant-baseline\": 1,\n        \"drop-initial-after-adjust\": \"central | middle | after-edge | text-after-edge | ideographic | alphabetic | mathematical | <percentage> | <length>\",\n        \"drop-initial-after-align\": \"baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical\",\n        \"drop-initial-before-adjust\": \"before-edge | text-before-edge | central | middle | hanging | mathematical | <percentage> | <length>\",\n        \"drop-initial-before-align\": \"caps-height | baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical\",\n        \"drop-initial-size\": \"auto | line | <length> | <percentage>\",\n        \"drop-initial-value\": \"initial | <integer>\",\n        //E\n        \"elevation\": \"<angle> | below | level | above | higher | lower | inherit\",\n        \"empty-cells\": \"show | hide | inherit\",\n        //F\n        \"filter\": 1,\n        \"fit\": \"fill | hidden | meet | slice\",\n        \"fit-position\": 1,\n        \"flex\": \"<flex>\",\n        \"flex-basis\": \"<width>\",\n        \"flex-direction\": \"row | row-reverse | column | column-reverse\",\n        \"flex-flow\": \"<flex-direction> || <flex-wrap>\",\n        \"flex-grow\": \"<number>\",\n        \"flex-shrink\": \"<number>\",\n        \"flex-wrap\": \"nowrap | wrap | wrap-reverse\",\n        \"-webkit-flex\": \"<flex>\",\n        \"-webkit-flex-basis\": \"<width>\",\n        \"-webkit-flex-direction\": \"row | row-reverse | column | column-reverse\",\n        \"-webkit-flex-flow\": \"<flex-direction> || <flex-wrap>\",\n        \"-webkit-flex-grow\": \"<number>\",\n        \"-webkit-flex-shrink\": \"<number>\",\n        \"-webkit-flex-wrap\": \"nowrap | wrap | wrap-reverse\",\n        \"-ms-flex\": \"<flex>\",\n        \"-ms-flex-align\": \"start | end | center | stretch | baseline\",\n        \"-ms-flex-direction\": \"row | row-reverse | column | column-reverse | inherit\",\n        \"-ms-flex-order\": \"<number>\",\n        \"-ms-flex-pack\": \"start | end | center | justify\",\n        \"-ms-flex-wrap\": \"nowrap | wrap | wrap-reverse\",\n        \"float\": \"left | right | none | inherit\",\n        \"float-offset\": 1,\n        \"font\": 1,\n        \"font-family\": 1,\n        \"font-feature-settings\": \"<feature-tag-value> | normal | inherit\",\n        \"font-kerning\": \"auto | normal | none | initial | inherit | unset\",\n        \"font-size\": \"<absolute-size> | <relative-size> | <length> | <percentage> | inherit\",\n        \"font-size-adjust\": \"<number> | none | inherit\",\n        \"font-stretch\": \"normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit\",\n        \"font-style\": \"normal | italic | oblique | inherit\",\n        \"font-variant\": \"normal | small-caps | inherit\",\n        \"font-variant-caps\": \"normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps\",\n        \"font-variant-position\": \"normal | sub | super | inherit | initial | unset\",\n        \"font-weight\": \"normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit\",\n        //G\n        \"grid\": 1,\n        \"grid-area\": 1,\n        \"grid-auto-columns\": 1,\n        \"grid-auto-flow\": 1,\n        \"grid-auto-position\": 1,\n        \"grid-auto-rows\": 1,\n        \"grid-cell-stacking\": \"columns | rows | layer\",\n        \"grid-column\": 1,\n        \"grid-columns\": 1,\n        \"grid-column-align\": \"start | end | center | stretch\",\n        \"grid-column-sizing\": 1,\n        \"grid-column-start\": 1,\n        \"grid-column-end\": 1,\n        \"grid-column-span\": \"<integer>\",\n        \"grid-flow\": \"none | rows | columns\",\n        \"grid-layer\": \"<integer>\",\n        \"grid-row\": 1,\n        \"grid-rows\": 1,\n        \"grid-row-align\": \"start | end | center | stretch\",\n        \"grid-row-start\": 1,\n        \"grid-row-end\": 1,\n        \"grid-row-span\": \"<integer>\",\n        \"grid-row-sizing\": 1,\n        \"grid-template\": 1,\n        \"grid-template-areas\": 1,\n        \"grid-template-columns\": 1,\n        \"grid-template-rows\": 1,\n        //H\n        \"hanging-punctuation\": 1,\n        \"height\": \"<margin-width> | <content-sizing> | inherit\",\n        \"hyphenate-after\": \"<integer> | auto\",\n        \"hyphenate-before\": \"<integer> | auto\",\n        \"hyphenate-character\": \"<string> | auto\",\n        \"hyphenate-lines\": \"no-limit | <integer>\",\n        \"hyphenate-resource\": 1,\n        \"hyphens\": \"none | manual | auto\",\n        //I\n        \"icon\": 1,\n        \"image-orientation\": \"angle | auto\",\n        \"image-rendering\": 1,\n        \"image-resolution\": 1,\n        \"ime-mode\": \"auto | normal | active | inactive | disabled | inherit\",\n        \"inline-box-align\": \"initial | last | <integer>\",\n        //J\n        \"justify-content\": \"flex-start | flex-end | center | space-between | space-around\",\n        \"-webkit-justify-content\": \"flex-start | flex-end | center | space-between | space-around\",\n        //L\n        \"left\": \"<margin-width> | inherit\",\n        \"letter-spacing\": \"<length> | normal | inherit\",\n        \"line-height\": \"<number> | <length> | <percentage> | normal | inherit\",\n        \"line-break\": \"auto | loose | normal | strict\",\n        \"line-stacking\": 1,\n        \"line-stacking-ruby\": \"exclude-ruby | include-ruby\",\n        \"line-stacking-shift\": \"consider-shifts | disregard-shifts\",\n        \"line-stacking-strategy\": \"inline-line-height | block-line-height | max-height | grid-height\",\n        \"list-style\": 1,\n        \"list-style-image\": \"<uri> | none | inherit\",\n        \"list-style-position\": \"inside | outside | inherit\",\n        \"list-style-type\": \"disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none | inherit\",\n        //M\n        \"margin\": {\n            multi: \"<margin-width> | inherit\",\n            max: 4\n        },\n        \"margin-bottom\": \"<margin-width> | inherit\",\n        \"margin-left\": \"<margin-width> | inherit\",\n        \"margin-right\": \"<margin-width> | inherit\",\n        \"margin-top\": \"<margin-width> | inherit\",\n        \"mark\": 1,\n        \"mark-after\": 1,\n        \"mark-before\": 1,\n        \"marks\": 1,\n        \"marquee-direction\": 1,\n        \"marquee-play-count\": 1,\n        \"marquee-speed\": 1,\n        \"marquee-style\": 1,\n        \"max-height\": \"<length> | <percentage> | <content-sizing> | none | inherit\",\n        \"max-width\": \"<length> | <percentage> | <content-sizing> | none | inherit\",\n        \"min-height\": \"<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit\",\n        \"min-width\": \"<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit\",\n        \"move-to\": 1,\n        //N\n        \"nav-down\": 1,\n        \"nav-index\": 1,\n        \"nav-left\": 1,\n        \"nav-right\": 1,\n        \"nav-up\": 1,\n        //O\n        \"object-fit\": \"fill | contain | cover | none | scale-down\",\n        \"object-position\": \"<bg-position>\",\n        \"opacity\": \"<number> | inherit\",\n        \"order\": \"<integer>\",\n        \"-webkit-order\": \"<integer>\",\n        \"orphans\": \"<integer> | inherit\",\n        \"outline\": 1,\n        \"outline-color\": \"<color> | invert | inherit\",\n        \"outline-offset\": 1,\n        \"outline-style\": \"<border-style> | inherit\",\n        \"outline-width\": \"<border-width> | inherit\",\n        \"overflow\": \"visible | hidden | scroll | auto | inherit\",\n        \"overflow-style\": 1,\n        \"overflow-wrap\": \"normal | break-word\",\n        \"overflow-x\": 1,\n        \"overflow-y\": 1,\n        //P\n        \"padding\": {\n            multi: \"<padding-width> | inherit\",\n            max: 4\n        },\n        \"padding-bottom\": \"<padding-width> | inherit\",\n        \"padding-left\": \"<padding-width> | inherit\",\n        \"padding-right\": \"<padding-width> | inherit\",\n        \"padding-top\": \"<padding-width> | inherit\",\n        \"page\": 1,\n        \"page-break-after\": \"auto | always | avoid | left | right | inherit\",\n        \"page-break-before\": \"auto | always | avoid | left | right | inherit\",\n        \"page-break-inside\": \"auto | avoid | inherit\",\n        \"page-policy\": 1,\n        \"pause\": 1,\n        \"pause-after\": 1,\n        \"pause-before\": 1,\n        \"perspective\": 1,\n        \"perspective-origin\": 1,\n        \"phonemes\": 1,\n        \"pitch\": 1,\n        \"pitch-range\": 1,\n        \"play-during\": 1,\n        \"pointer-events\": \"auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit\",\n        \"position\": \"static | relative | absolute | fixed | inherit\",\n        \"presentation-level\": 1,\n        \"punctuation-trim\": 1,\n        //Q\n        \"quotes\": 1,\n        //R\n        \"rendering-intent\": 1,\n        \"resize\": 1,\n        \"rest\": 1,\n        \"rest-after\": 1,\n        \"rest-before\": 1,\n        \"richness\": 1,\n        \"right\": \"<margin-width> | inherit\",\n        \"rotation\": 1,\n        \"rotation-point\": 1,\n        \"ruby-align\": 1,\n        \"ruby-overhang\": 1,\n        \"ruby-position\": 1,\n        \"ruby-span\": 1,\n        //S\n        \"size\": 1,\n        \"speak\": \"normal | none | spell-out | inherit\",\n        \"speak-header\": \"once | always | inherit\",\n        \"speak-numeral\": \"digits | continuous | inherit\",\n        \"speak-punctuation\": \"code | none | inherit\",\n        \"speech-rate\": 1,\n        \"src\": 1,\n        \"stress\": 1,\n        \"string-set\": 1,\n        \"table-layout\": \"auto | fixed | inherit\",\n        \"tab-size\": \"<integer> | <length>\",\n        \"target\": 1,\n        \"target-name\": 1,\n        \"target-new\": 1,\n        \"target-position\": 1,\n        \"text-align\": \"left | right | center | justify | match-parent | start | end | inherit\",\n        \"text-align-last\": 1,\n        \"text-decoration\": 1,\n        \"text-emphasis\": 1,\n        \"text-height\": 1,\n        \"text-indent\": \"<length> | <percentage> | inherit\",\n        \"text-justify\": \"auto | none | inter-word | inter-ideograph | inter-cluster | distribute | kashida\",\n        \"text-outline\": 1,\n        \"text-overflow\": 1,\n        \"text-rendering\": \"auto | optimizeSpeed | optimizeLegibility | geometricPrecision | inherit\",\n        \"text-shadow\": 1,\n        \"text-transform\": \"capitalize | uppercase | lowercase | none | inherit\",\n        \"text-wrap\": \"normal | none | avoid\",\n        \"top\": \"<margin-width> | inherit\",\n        \"-ms-touch-action\": \"auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation\",\n        \"touch-action\": \"auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation\",\n        \"transform\": 1,\n        \"transform-origin\": 1,\n        \"transform-style\": 1,\n        \"transition\": 1,\n        \"transition-delay\": 1,\n        \"transition-duration\": 1,\n        \"transition-property\": 1,\n        \"transition-timing-function\": 1,\n        //U\n        \"unicode-bidi\": \"normal | embed | isolate | bidi-override | isolate-override | plaintext | inherit\",\n        \"user-modify\": \"read-only | read-write | write-only | inherit\",\n        \"user-select\": \"none | text | toggle | element | elements | all | inherit\",\n        //V\n        \"vertical-align\": \"auto | use-script | baseline | sub | super | top | text-top | central | middle | bottom | text-bottom | <percentage> | <length> | inherit\",\n        \"visibility\": \"visible | hidden | collapse | inherit\",\n        \"voice-balance\": 1,\n        \"voice-duration\": 1,\n        \"voice-family\": 1,\n        \"voice-pitch\": 1,\n        \"voice-pitch-range\": 1,\n        \"voice-rate\": 1,\n        \"voice-stress\": 1,\n        \"voice-volume\": 1,\n        \"volume\": 1,\n        //W\n        \"white-space\": \"normal | pre | nowrap | pre-wrap | pre-line | inherit | -pre-wrap | -o-pre-wrap | -moz-pre-wrap | -hp-pre-wrap\",\n        \"white-space-collapse\": 1,\n        \"widows\": \"<integer> | inherit\",\n        \"width\": \"<length> | <percentage> | <content-sizing> | auto | inherit\",\n        \"will-change\": {\n            multi: \"<ident>\",\n            comma: true\n        },\n        \"word-break\": \"normal | keep-all | break-all\",\n        \"word-spacing\": \"<length> | normal | inherit\",\n        \"word-wrap\": \"normal | break-word\",\n        \"writing-mode\": \"horizontal-tb | vertical-rl | vertical-lr | lr-tb | rl-tb | tb-rl | bt-rl | tb-lr | bt-lr | lr-bt | rl-bt | lr | rl | tb | inherit\",\n        //Z\n        \"z-index\": \"<integer> | auto | inherit\",\n        \"zoom\": \"<number> | <percentage> | normal\"\n    };\n    /**\n * Represents a selector combinator (whitespace, +, >).\n * @namespace parserlib.css\n * @class PropertyName\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {String} text The text representation of the unit.\n * @param {String} hack The type of IE hack applied (\"*\", \"_\", or null).\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */ function PropertyName(text, hack, line, col) {\n        SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_NAME_TYPE);\n        /**\n     * The type of IE hack applied (\"*\", \"_\", or null).\n     * @type String\n     * @property hack\n     */ this.hack = hack;\n    }\n    PropertyName.prototype = new SyntaxUnit();\n    PropertyName.prototype.constructor = PropertyName;\n    PropertyName.prototype.toString = function() {\n        return (this.hack ? this.hack : \"\") + this.text;\n    };\n    /**\n * Represents a single part of a CSS property value, meaning that it represents\n * just everything single part between \":\" and \";\". If there are multiple values\n * separated by commas, this type represents just one of the values.\n * @param {String[]} parts An array of value parts making up this value.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n * @namespace parserlib.css\n * @class PropertyValue\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n */ function PropertyValue(parts, line, col) {\n        SyntaxUnit.call(this, parts.join(\" \"), line, col, Parser.PROPERTY_VALUE_TYPE);\n        /**\n     * The parts that make up the selector.\n     * @type Array\n     * @property parts\n     */ this.parts = parts;\n    }\n    PropertyValue.prototype = new SyntaxUnit();\n    PropertyValue.prototype.constructor = PropertyValue;\n    /**\n * A utility class that allows for easy iteration over the various parts of a\n * property value.\n * @param {parserlib.css.PropertyValue} value The property value to iterate over.\n * @namespace parserlib.css\n * @class PropertyValueIterator\n * @constructor\n */ function PropertyValueIterator(value) {\n        /**\n     * Iterator value\n     * @type int\n     * @property _i\n     * @private\n     */ this._i = 0;\n        /**\n     * The parts that make up the value.\n     * @type Array\n     * @property _parts\n     * @private\n     */ this._parts = value.parts;\n        /**\n     * Keeps track of bookmarks along the way.\n     * @type Array\n     * @property _marks\n     * @private\n     */ this._marks = [];\n        /**\n     * Holds the original property value.\n     * @type parserlib.css.PropertyValue\n     * @property value\n     */ this.value = value;\n    }\n    /**\n * Returns the total number of parts in the value.\n * @return {int} The total number of parts in the value.\n * @method count\n */ PropertyValueIterator.prototype.count = function() {\n        return this._parts.length;\n    };\n    /**\n * Indicates if the iterator is positioned at the first item.\n * @return {Boolean} True if positioned at first item, false if not.\n * @method isFirst\n */ PropertyValueIterator.prototype.isFirst = function() {\n        return this._i === 0;\n    };\n    /**\n * Indicates if there are more parts of the property value.\n * @return {Boolean} True if there are more parts, false if not.\n * @method hasNext\n */ PropertyValueIterator.prototype.hasNext = function() {\n        return this._i < this._parts.length;\n    };\n    /**\n * Marks the current spot in the iteration so it can be restored to\n * later on.\n * @return {void}\n * @method mark\n */ PropertyValueIterator.prototype.mark = function() {\n        this._marks.push(this._i);\n    };\n    /**\n * Returns the next part of the property value or null if there is no next\n * part. Does not move the internal counter forward.\n * @return {parserlib.css.PropertyValuePart} The next part of the property value or null if there is no next\n * part.\n * @method peek\n */ PropertyValueIterator.prototype.peek = function(count) {\n        return this.hasNext() ? this._parts[this._i + (count || 0)] : null;\n    };\n    /**\n * Returns the next part of the property value or null if there is no next\n * part.\n * @return {parserlib.css.PropertyValuePart} The next part of the property value or null if there is no next\n * part.\n * @method next\n */ PropertyValueIterator.prototype.next = function() {\n        return this.hasNext() ? this._parts[this._i++] : null;\n    };\n    /**\n * Returns the previous part of the property value or null if there is no\n * previous part.\n * @return {parserlib.css.PropertyValuePart} The previous part of the\n * property value or null if there is no previous part.\n * @method previous\n */ PropertyValueIterator.prototype.previous = function() {\n        return this._i > 0 ? this._parts[--this._i] : null;\n    };\n    /**\n * Restores the last saved bookmark.\n * @return {void}\n * @method restore\n */ PropertyValueIterator.prototype.restore = function() {\n        if (this._marks.length) {\n            this._i = this._marks.pop();\n        }\n    };\n    /**\n * Represents a single part of a CSS property value, meaning that it represents\n * just one part of the data between \":\" and \";\".\n * @param {String} text The text representation of the unit.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n * @namespace parserlib.css\n * @class PropertyValuePart\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n */ function PropertyValuePart(text, line, col) {\n        SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_VALUE_PART_TYPE);\n        /**\n     * Indicates the type of value unit.\n     * @type String\n     * @property type\n     */ this.type = \"unknown\";\n        //figure out what type of data it is\n        var temp;\n        //it is a measurement?\n        if (/^([+\\-]?[\\d\\.]+)([a-z]+)$/i.test(text)) {\n            this.type = \"dimension\";\n            this.value = +RegExp.$1;\n            this.units = RegExp.$2;\n            //try to narrow down\n            switch(this.units.toLowerCase()){\n                case \"em\":\n                case \"rem\":\n                case \"ex\":\n                case \"px\":\n                case \"cm\":\n                case \"mm\":\n                case \"in\":\n                case \"pt\":\n                case \"pc\":\n                case \"ch\":\n                case \"vh\":\n                case \"vw\":\n                case \"vmax\":\n                case \"vmin\":\n                    this.type = \"length\";\n                    break;\n                case \"fr\":\n                    this.type = \"grid\";\n                    break;\n                case \"deg\":\n                case \"rad\":\n                case \"grad\":\n                    this.type = \"angle\";\n                    break;\n                case \"ms\":\n                case \"s\":\n                    this.type = \"time\";\n                    break;\n                case \"hz\":\n                case \"khz\":\n                    this.type = \"frequency\";\n                    break;\n                case \"dpi\":\n                case \"dpcm\":\n                    this.type = \"resolution\";\n                    break;\n            }\n        } else if (/^([+\\-]?[\\d\\.]+)%$/i.test(text)) {\n            this.type = \"percentage\";\n            this.value = +RegExp.$1;\n        } else if (/^([+\\-]?\\d+)$/i.test(text)) {\n            this.type = \"integer\";\n            this.value = +RegExp.$1;\n        } else if (/^([+\\-]?[\\d\\.]+)$/i.test(text)) {\n            this.type = \"number\";\n            this.value = +RegExp.$1;\n        } else if (/^#([a-f0-9]{3,6})/i.test(text)) {\n            this.type = \"color\";\n            temp = RegExp.$1;\n            if (temp.length === 3) {\n                this.red = parseInt(temp.charAt(0) + temp.charAt(0), 16);\n                this.green = parseInt(temp.charAt(1) + temp.charAt(1), 16);\n                this.blue = parseInt(temp.charAt(2) + temp.charAt(2), 16);\n            } else {\n                this.red = parseInt(temp.substring(0, 2), 16);\n                this.green = parseInt(temp.substring(2, 4), 16);\n                this.blue = parseInt(temp.substring(4, 6), 16);\n            }\n        } else if (/^rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/i.test(text)) {\n            this.type = \"color\";\n            this.red = +RegExp.$1;\n            this.green = +RegExp.$2;\n            this.blue = +RegExp.$3;\n        } else if (/^rgb\\(\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*\\)/i.test(text)) {\n            this.type = \"color\";\n            this.red = +RegExp.$1 * 255 / 100;\n            this.green = +RegExp.$2 * 255 / 100;\n            this.blue = +RegExp.$3 * 255 / 100;\n        } else if (/^rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*([\\d\\.]+)\\s*\\)/i.test(text)) {\n            this.type = \"color\";\n            this.red = +RegExp.$1;\n            this.green = +RegExp.$2;\n            this.blue = +RegExp.$3;\n            this.alpha = +RegExp.$4;\n        } else if (/^rgba\\(\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*([\\d\\.]+)\\s*\\)/i.test(text)) {\n            this.type = \"color\";\n            this.red = +RegExp.$1 * 255 / 100;\n            this.green = +RegExp.$2 * 255 / 100;\n            this.blue = +RegExp.$3 * 255 / 100;\n            this.alpha = +RegExp.$4;\n        } else if (/^hsl\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*\\)/i.test(text)) {\n            this.type = \"color\";\n            this.hue = +RegExp.$1;\n            this.saturation = +RegExp.$2 / 100;\n            this.lightness = +RegExp.$3 / 100;\n        } else if (/^hsla\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*,\\s*([\\d\\.]+)\\s*\\)/i.test(text)) {\n            this.type = \"color\";\n            this.hue = +RegExp.$1;\n            this.saturation = +RegExp.$2 / 100;\n            this.lightness = +RegExp.$3 / 100;\n            this.alpha = +RegExp.$4;\n        } else if (/^url\\([\"']?([^\\)\"']+)[\"']?\\)/i.test(text)) {\n            this.type = \"uri\";\n            this.uri = RegExp.$1;\n        } else if (/^([^\\(]+)\\(/i.test(text)) {\n            this.type = \"function\";\n            this.name = RegExp.$1;\n            this.value = text;\n        } else if (/^\"([^\\n\\r\\f\\\\\"]|\\\\\\r\\n|\\\\[^\\r0-9a-f]|\\\\[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?)*\"/i.test(text)) {\n            this.type = \"string\";\n            this.value = PropertyValuePart.parseString(text);\n        } else if (/^'([^\\n\\r\\f\\\\']|\\\\\\r\\n|\\\\[^\\r0-9a-f]|\\\\[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?)*'/i.test(text)) {\n            this.type = \"string\";\n            this.value = PropertyValuePart.parseString(text);\n        } else if (Colors[text.toLowerCase()]) {\n            this.type = \"color\";\n            temp = Colors[text.toLowerCase()].substring(1);\n            this.red = parseInt(temp.substring(0, 2), 16);\n            this.green = parseInt(temp.substring(2, 4), 16);\n            this.blue = parseInt(temp.substring(4, 6), 16);\n        } else if (/^[\\,\\/]$/.test(text)) {\n            this.type = \"operator\";\n            this.value = text;\n        } else if (/^[a-z\\-_\\u0080-\\uFFFF][a-z0-9\\-_\\u0080-\\uFFFF]*$/i.test(text)) {\n            this.type = \"identifier\";\n            this.value = text;\n        }\n    }\n    PropertyValuePart.prototype = new SyntaxUnit();\n    PropertyValuePart.prototype.constructor = PropertyValuePart;\n    /**\n * Helper method to parse a CSS string.\n */ PropertyValuePart.parseString = function(str) {\n        str = str.slice(1, -1); // Strip surrounding single/double quotes\n        var replacer = function(match, esc) {\n            if (/^(\\n|\\r\\n|\\r|\\f)$/.test(esc)) {\n                return \"\";\n            }\n            var m = /^[0-9a-f]{1,6}/i.exec(esc);\n            if (m) {\n                var codePoint = parseInt(m[0], 16);\n                if (String.fromCodePoint) {\n                    return String.fromCodePoint(codePoint);\n                } else {\n                    // XXX No support for surrogates on old JavaScript engines.\n                    return String.fromCharCode(codePoint);\n                }\n            }\n            return esc;\n        };\n        return str.replace(/\\\\(\\r\\n|[^\\r0-9a-f]|[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?)/ig, replacer);\n    };\n    /**\n * Helper method to serialize a CSS string.\n */ PropertyValuePart.serializeString = function(value) {\n        var replacer = function(match, c) {\n            if (c === '\"') {\n                return \"\\\\\" + c;\n            }\n            var cp = String.codePointAt ? String.codePointAt(0) : // We only escape non-surrogate chars, so using charCodeAt\n            // is harmless here.\n            String.charCodeAt(0);\n            return \"\\\\\" + cp.toString(16) + \" \";\n        };\n        return '\"' + value.replace(/[\"\\r\\n\\f]/g, replacer) + '\"';\n    };\n    /**\n * Create a new syntax unit based solely on the given token.\n * Convenience method for creating a new syntax unit when\n * it represents a single token instead of multiple.\n * @param {Object} token The token object to represent.\n * @return {parserlib.css.PropertyValuePart} The object representing the token.\n * @static\n * @method fromToken\n */ PropertyValuePart.fromToken = function(token) {\n        return new PropertyValuePart(token.value, token.startLine, token.startCol);\n    };\n    var Pseudos = {\n        __proto__: null,\n        \":first-letter\": 1,\n        \":first-line\": 1,\n        \":before\": 1,\n        \":after\": 1\n    };\n    Pseudos.ELEMENT = 1;\n    Pseudos.CLASS = 2;\n    Pseudos.isElement = function(pseudo) {\n        return pseudo.indexOf(\"::\") === 0 || Pseudos[pseudo.toLowerCase()] === Pseudos.ELEMENT;\n    };\n    /**\n * Represents an entire single selector, including all parts but not\n * including multiple selectors (those separated by commas).\n * @namespace parserlib.css\n * @class Selector\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {Array} parts Array of selectors parts making up this selector.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */ function Selector(parts, line, col) {\n        SyntaxUnit.call(this, parts.join(\" \"), line, col, Parser.SELECTOR_TYPE);\n        /**\n     * The parts that make up the selector.\n     * @type Array\n     * @property parts\n     */ this.parts = parts;\n        /**\n     * The specificity of the selector.\n     * @type parserlib.css.Specificity\n     * @property specificity\n     */ this.specificity = Specificity.calculate(this);\n    }\n    Selector.prototype = new SyntaxUnit();\n    Selector.prototype.constructor = Selector;\n    /**\n * Represents a single part of a selector string, meaning a single set of\n * element name and modifiers. This does not include combinators such as\n * spaces, +, >, etc.\n * @namespace parserlib.css\n * @class SelectorPart\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {String} elementName The element name in the selector or null\n *      if there is no element name.\n * @param {Array} modifiers Array of individual modifiers for the element.\n *      May be empty if there are none.\n * @param {String} text The text representation of the unit.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */ function SelectorPart(elementName, modifiers, text, line, col) {\n        SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_PART_TYPE);\n        /**\n     * The tag name of the element to which this part\n     * of the selector affects.\n     * @type String\n     * @property elementName\n     */ this.elementName = elementName;\n        /**\n     * The parts that come after the element name, such as class names, IDs,\n     * pseudo classes/elements, etc.\n     * @type Array\n     * @property modifiers\n     */ this.modifiers = modifiers;\n    }\n    SelectorPart.prototype = new SyntaxUnit();\n    SelectorPart.prototype.constructor = SelectorPart;\n    /**\n * Represents a selector modifier string, meaning a class name, element name,\n * element ID, pseudo rule, etc.\n * @namespace parserlib.css\n * @class SelectorSubPart\n * @extends parserlib.util.SyntaxUnit\n * @constructor\n * @param {String} text The text representation of the unit.\n * @param {String} type The type of selector modifier.\n * @param {int} line The line of text on which the unit resides.\n * @param {int} col The column of text on which the unit resides.\n */ function SelectorSubPart(text, type, line, col) {\n        SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_SUB_PART_TYPE);\n        /**\n     * The type of modifier.\n     * @type String\n     * @property type\n     */ this.type = type;\n        /**\n     * Some subparts have arguments, this represents them.\n     * @type Array\n     * @property args\n     */ this.args = [];\n    }\n    SelectorSubPart.prototype = new SyntaxUnit();\n    SelectorSubPart.prototype.constructor = SelectorSubPart;\n    /**\n * Represents a selector's specificity.\n * @namespace parserlib.css\n * @class Specificity\n * @constructor\n * @param {int} a Should be 1 for inline styles, zero for stylesheet styles\n * @param {int} b Number of ID selectors\n * @param {int} c Number of classes and pseudo classes\n * @param {int} d Number of element names and pseudo elements\n */ function Specificity(a, b, c, d) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n    }\n    Specificity.prototype = {\n        constructor: Specificity,\n        /**\n     * Compare this specificity to another.\n     * @param {Specificity} other The other specificity to compare to.\n     * @return {int} -1 if the other specificity is larger, 1 if smaller, 0 if equal.\n     * @method compare\n     */ compare: function(other) {\n            var comps = [\n                \"a\",\n                \"b\",\n                \"c\",\n                \"d\"\n            ], i, len;\n            for(i = 0, len = comps.length; i < len; i++){\n                if (this[comps[i]] < other[comps[i]]) {\n                    return -1;\n                } else if (this[comps[i]] > other[comps[i]]) {\n                    return 1;\n                }\n            }\n            return 0;\n        },\n        /**\n     * Creates a numeric value for the specificity.\n     * @return {int} The numeric value for the specificity.\n     * @method valueOf\n     */ valueOf: function() {\n            return this.a * 1000 + this.b * 100 + this.c * 10 + this.d;\n        },\n        /**\n     * Returns a string representation for specificity.\n     * @return {String} The string representation of specificity.\n     * @method toString\n     */ toString: function() {\n            return this.a + \",\" + this.b + \",\" + this.c + \",\" + this.d;\n        }\n    };\n    /**\n * Calculates the specificity of the given selector.\n * @param {parserlib.css.Selector} The selector to calculate specificity for.\n * @return {parserlib.css.Specificity} The specificity of the selector.\n * @static\n * @method calculate\n */ Specificity.calculate = function(selector) {\n        var i, len, part, b = 0, c = 0, d = 0;\n        function updateValues(part) {\n            var i, j, len, num, elementName = part.elementName ? part.elementName.text : \"\", modifier;\n            if (elementName && elementName.charAt(elementName.length - 1) !== \"*\") {\n                d++;\n            }\n            for(i = 0, len = part.modifiers.length; i < len; i++){\n                modifier = part.modifiers[i];\n                switch(modifier.type){\n                    case \"class\":\n                    case \"attribute\":\n                        c++;\n                        break;\n                    case \"id\":\n                        b++;\n                        break;\n                    case \"pseudo\":\n                        if (Pseudos.isElement(modifier.text)) {\n                            d++;\n                        } else {\n                            c++;\n                        }\n                        break;\n                    case \"not\":\n                        for(j = 0, num = modifier.args.length; j < num; j++){\n                            updateValues(modifier.args[j]);\n                        }\n                }\n            }\n        }\n        for(i = 0, len = selector.parts.length; i < len; i++){\n            part = selector.parts[i];\n            if (part instanceof SelectorPart) {\n                updateValues(part);\n            }\n        }\n        return new Specificity(0, b, c, d);\n    };\n    var h = /^[0-9a-fA-F]$/, //nonascii = /^[\\u0080-\\uFFFF]$/,\n    nl = /\\n|\\r\\n|\\r|\\f/;\n    //-----------------------------------------------------------------------------\n    // Helper functions\n    //-----------------------------------------------------------------------------\n    function isHexDigit(c) {\n        return c !== null && h.test(c);\n    }\n    function isDigit(c) {\n        return c !== null && /\\d/.test(c);\n    }\n    function isWhitespace(c) {\n        return c !== null && /\\s/.test(c);\n    }\n    function isNewLine(c) {\n        return c !== null && nl.test(c);\n    }\n    function isNameStart(c) {\n        return c !== null && /[a-z_\\u0080-\\uFFFF\\\\]/i.test(c);\n    }\n    function isNameChar(c) {\n        return c !== null && (isNameStart(c) || /[0-9\\-\\\\]/.test(c));\n    }\n    function isIdentStart(c) {\n        return c !== null && (isNameStart(c) || /\\-\\\\/.test(c));\n    }\n    function mix(receiver, supplier) {\n        for(var prop in supplier){\n            if (Object.prototype.hasOwnProperty.call(supplier, prop)) {\n                receiver[prop] = supplier[prop];\n            }\n        }\n        return receiver;\n    }\n    //-----------------------------------------------------------------------------\n    // CSS Token Stream\n    //-----------------------------------------------------------------------------\n    /**\n * A token stream that produces CSS tokens.\n * @param {String|Reader} input The source of text to tokenize.\n * @constructor\n * @class TokenStream\n * @namespace parserlib.css\n */ function TokenStream(input) {\n        TokenStreamBase.call(this, input, Tokens);\n    }\n    TokenStream.prototype = mix(new TokenStreamBase(), {\n        /**\n     * Overrides the TokenStreamBase method of the same name\n     * to produce CSS tokens.\n     * @param {variant} channel The name of the channel to use\n     *      for the next token.\n     * @return {Object} A token object representing the next token.\n     * @method _getToken\n     * @private\n     */ _getToken: function(channel) {\n            var c, reader = this._reader, token = null, startLine = reader.getLine(), startCol = reader.getCol();\n            c = reader.read();\n            while(c){\n                switch(c){\n                    /*\n                 * Potential tokens:\n                 * - COMMENT\n                 * - SLASH\n                 * - CHAR\n                 */ case \"/\":\n                        if (reader.peek() === \"*\") {\n                            token = this.commentToken(c, startLine, startCol);\n                        } else {\n                            token = this.charToken(c, startLine, startCol);\n                        }\n                        break;\n                    /*\n                 * Potential tokens:\n                 * - DASHMATCH\n                 * - INCLUDES\n                 * - PREFIXMATCH\n                 * - SUFFIXMATCH\n                 * - SUBSTRINGMATCH\n                 * - CHAR\n                 */ case \"|\":\n                    case \"~\":\n                    case \"^\":\n                    case \"$\":\n                    case \"*\":\n                        if (reader.peek() === \"=\") {\n                            token = this.comparisonToken(c, startLine, startCol);\n                        } else {\n                            token = this.charToken(c, startLine, startCol);\n                        }\n                        break;\n                    /*\n                 * Potential tokens:\n                 * - STRING\n                 * - INVALID\n                 */ case '\"':\n                    case \"'\":\n                        token = this.stringToken(c, startLine, startCol);\n                        break;\n                    /*\n                 * Potential tokens:\n                 * - HASH\n                 * - CHAR\n                 */ case \"#\":\n                        if (isNameChar(reader.peek())) {\n                            token = this.hashToken(c, startLine, startCol);\n                        } else {\n                            token = this.charToken(c, startLine, startCol);\n                        }\n                        break;\n                    /*\n                 * Potential tokens:\n                 * - DOT\n                 * - NUMBER\n                 * - DIMENSION\n                 * - PERCENTAGE\n                 */ case \".\":\n                        if (isDigit(reader.peek())) {\n                            token = this.numberToken(c, startLine, startCol);\n                        } else {\n                            token = this.charToken(c, startLine, startCol);\n                        }\n                        break;\n                    /*\n                 * Potential tokens:\n                 * - CDC\n                 * - MINUS\n                 * - NUMBER\n                 * - DIMENSION\n                 * - PERCENTAGE\n                 */ case \"-\":\n                        if (reader.peek() === \"-\") {\n                            token = this.htmlCommentEndToken(c, startLine, startCol);\n                        } else if (isNameStart(reader.peek())) {\n                            token = this.identOrFunctionToken(c, startLine, startCol);\n                        } else {\n                            token = this.charToken(c, startLine, startCol);\n                        }\n                        break;\n                    /*\n                 * Potential tokens:\n                 * - IMPORTANT_SYM\n                 * - CHAR\n                 */ case \"!\":\n                        token = this.importantToken(c, startLine, startCol);\n                        break;\n                    /*\n                 * Any at-keyword or CHAR\n                 */ case \"@\":\n                        token = this.atRuleToken(c, startLine, startCol);\n                        break;\n                    /*\n                 * Potential tokens:\n                 * - NOT\n                 * - CHAR\n                 */ case \":\":\n                        token = this.notToken(c, startLine, startCol);\n                        break;\n                    /*\n                 * Potential tokens:\n                 * - CDO\n                 * - CHAR\n                 */ case \"<\":\n                        token = this.htmlCommentStartToken(c, startLine, startCol);\n                        break;\n                    /*\n                 * Potential tokens:\n                 * - UNICODE_RANGE\n                 * - URL\n                 * - CHAR\n                 */ case \"U\":\n                    case \"u\":\n                        if (reader.peek() === \"+\") {\n                            token = this.unicodeRangeToken(c, startLine, startCol);\n                            break;\n                        }\n                    /* falls through */ default:\n                        /*\n                     * Potential tokens:\n                     * - NUMBER\n                     * - DIMENSION\n                     * - LENGTH\n                     * - FREQ\n                     * - TIME\n                     * - EMS\n                     * - EXS\n                     * - ANGLE\n                     */ if (isDigit(c)) {\n                            token = this.numberToken(c, startLine, startCol);\n                        } else /*\n                     * Potential tokens:\n                     * - S\n                     */ if (isWhitespace(c)) {\n                            token = this.whitespaceToken(c, startLine, startCol);\n                        } else /*\n                     * Potential tokens:\n                     * - IDENT\n                     */ if (isIdentStart(c)) {\n                            token = this.identOrFunctionToken(c, startLine, startCol);\n                        } else /*\n                     * Potential tokens:\n                     * - CHAR\n                     * - PLUS\n                     */ {\n                            token = this.charToken(c, startLine, startCol);\n                        }\n                }\n                break;\n            }\n            if (!token && c === null) {\n                token = this.createToken(Tokens.EOF, null, startLine, startCol);\n            }\n            return token;\n        },\n        //-------------------------------------------------------------------------\n        // Methods to create tokens\n        //-------------------------------------------------------------------------\n        /**\n     * Produces a token based on available data and the current\n     * reader position information. This method is called by other\n     * private methods to create tokens and is never called directly.\n     * @param {int} tt The token type.\n     * @param {String} value The text value of the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @param {Object} options (Optional) Specifies a channel property\n     *      to indicate that a different channel should be scanned\n     *      and/or a hide property indicating that the token should\n     *      be hidden.\n     * @return {Object} A token object.\n     * @method createToken\n     */ createToken: function(tt, value, startLine, startCol, options) {\n            var reader = this._reader;\n            options = options || {};\n            return {\n                value: value,\n                type: tt,\n                channel: options.channel,\n                endChar: options.endChar,\n                hide: options.hide || false,\n                startLine: startLine,\n                startCol: startCol,\n                endLine: reader.getLine(),\n                endCol: reader.getCol()\n            };\n        },\n        //-------------------------------------------------------------------------\n        // Methods to create specific tokens\n        //-------------------------------------------------------------------------\n        /**\n     * Produces a token for any at-rule. If the at-rule is unknown, then\n     * the token is for a single \"@\" character.\n     * @param {String} first The first character for the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method atRuleToken\n     */ atRuleToken: function(first, startLine, startCol) {\n            var rule = first, reader = this._reader, tt = Tokens.CHAR, ident;\n            /*\n         * First, mark where we are. There are only four @ rules,\n         * so anything else is really just an invalid token.\n         * Basically, if this doesn't match one of the known @\n         * rules, just return '@' as an unknown token and allow\n         * parsing to continue after that point.\n         */ reader.mark();\n            //try to find the at-keyword\n            ident = this.readName();\n            rule = first + ident;\n            tt = Tokens.type(rule.toLowerCase());\n            //if it's not valid, use the first character only and reset the reader\n            if (tt === Tokens.CHAR || tt === Tokens.UNKNOWN) {\n                if (rule.length > 1) {\n                    tt = Tokens.UNKNOWN_SYM;\n                } else {\n                    tt = Tokens.CHAR;\n                    rule = first;\n                    reader.reset();\n                }\n            }\n            return this.createToken(tt, rule, startLine, startCol);\n        },\n        /**\n     * Produces a character token based on the given character\n     * and location in the stream. If there's a special (non-standard)\n     * token name, this is used; otherwise CHAR is used.\n     * @param {String} c The character for the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method charToken\n     */ charToken: function(c, startLine, startCol) {\n            var tt = Tokens.type(c);\n            var opts = {};\n            if (tt === -1) {\n                tt = Tokens.CHAR;\n            } else {\n                opts.endChar = Tokens[tt].endChar;\n            }\n            return this.createToken(tt, c, startLine, startCol, opts);\n        },\n        /**\n     * Produces a character token based on the given character\n     * and location in the stream. If there's a special (non-standard)\n     * token name, this is used; otherwise CHAR is used.\n     * @param {String} first The first character for the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method commentToken\n     */ commentToken: function(first, startLine, startCol) {\n            var comment = this.readComment(first);\n            return this.createToken(Tokens.COMMENT, comment, startLine, startCol);\n        },\n        /**\n     * Produces a comparison token based on the given character\n     * and location in the stream. The next character must be\n     * read and is already known to be an equals sign.\n     * @param {String} c The character for the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method comparisonToken\n     */ comparisonToken: function(c, startLine, startCol) {\n            var reader = this._reader, comparison = c + reader.read(), tt = Tokens.type(comparison) || Tokens.CHAR;\n            return this.createToken(tt, comparison, startLine, startCol);\n        },\n        /**\n     * Produces a hash token based on the specified information. The\n     * first character provided is the pound sign (#) and then this\n     * method reads a name afterward.\n     * @param {String} first The first character (#) in the hash name.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method hashToken\n     */ hashToken: function(first, startLine, startCol) {\n            var name = this.readName(first);\n            return this.createToken(Tokens.HASH, name, startLine, startCol);\n        },\n        /**\n     * Produces a CDO or CHAR token based on the specified information. The\n     * first character is provided and the rest is read by the function to determine\n     * the correct token to create.\n     * @param {String} first The first character in the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method htmlCommentStartToken\n     */ htmlCommentStartToken: function(first, startLine, startCol) {\n            var reader = this._reader, text = first;\n            reader.mark();\n            text += reader.readCount(3);\n            if (text === \"<!--\") {\n                return this.createToken(Tokens.CDO, text, startLine, startCol);\n            } else {\n                reader.reset();\n                return this.charToken(first, startLine, startCol);\n            }\n        },\n        /**\n     * Produces a CDC or CHAR token based on the specified information. The\n     * first character is provided and the rest is read by the function to determine\n     * the correct token to create.\n     * @param {String} first The first character in the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method htmlCommentEndToken\n     */ htmlCommentEndToken: function(first, startLine, startCol) {\n            var reader = this._reader, text = first;\n            reader.mark();\n            text += reader.readCount(2);\n            if (text === \"-->\") {\n                return this.createToken(Tokens.CDC, text, startLine, startCol);\n            } else {\n                reader.reset();\n                return this.charToken(first, startLine, startCol);\n            }\n        },\n        /**\n     * Produces an IDENT or FUNCTION token based on the specified information. The\n     * first character is provided and the rest is read by the function to determine\n     * the correct token to create.\n     * @param {String} first The first character in the identifier.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method identOrFunctionToken\n     */ identOrFunctionToken: function(first, startLine, startCol) {\n            var reader = this._reader, ident = this.readName(first), tt = Tokens.IDENT, uriFns = [\n                \"url(\",\n                \"url-prefix(\",\n                \"domain(\"\n            ];\n            //if there's a left paren immediately after, it's a URI or function\n            if (reader.peek() === \"(\") {\n                ident += reader.read();\n                if (uriFns.indexOf(ident.toLowerCase()) > -1) {\n                    tt = Tokens.URI;\n                    ident = this.readURI(ident);\n                    //didn't find a valid URL or there's no closing paren\n                    if (uriFns.indexOf(ident.toLowerCase()) > -1) {\n                        tt = Tokens.FUNCTION;\n                    }\n                } else {\n                    tt = Tokens.FUNCTION;\n                }\n            } else if (reader.peek() === \":\") {\n                //IE-specific functions always being with progid:\n                if (ident.toLowerCase() === \"progid\") {\n                    ident += reader.readTo(\"(\");\n                    tt = Tokens.IE_FUNCTION;\n                }\n            }\n            return this.createToken(tt, ident, startLine, startCol);\n        },\n        /**\n     * Produces an IMPORTANT_SYM or CHAR token based on the specified information. The\n     * first character is provided and the rest is read by the function to determine\n     * the correct token to create.\n     * @param {String} first The first character in the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method importantToken\n     */ importantToken: function(first, startLine, startCol) {\n            var reader = this._reader, important = first, tt = Tokens.CHAR, temp, c;\n            reader.mark();\n            c = reader.read();\n            while(c){\n                //there can be a comment in here\n                if (c === \"/\") {\n                    //if the next character isn't a star, then this isn't a valid !important token\n                    if (reader.peek() !== \"*\") {\n                        break;\n                    } else {\n                        temp = this.readComment(c);\n                        if (temp === \"\") {\n                            break;\n                        }\n                    }\n                } else if (isWhitespace(c)) {\n                    important += c + this.readWhitespace();\n                } else if (/i/i.test(c)) {\n                    temp = reader.readCount(8);\n                    if (/mportant/i.test(temp)) {\n                        important += c + temp;\n                        tt = Tokens.IMPORTANT_SYM;\n                    }\n                    break; //we're done\n                } else {\n                    break;\n                }\n                c = reader.read();\n            }\n            if (tt === Tokens.CHAR) {\n                reader.reset();\n                return this.charToken(first, startLine, startCol);\n            } else {\n                return this.createToken(tt, important, startLine, startCol);\n            }\n        },\n        /**\n     * Produces a NOT or CHAR token based on the specified information. The\n     * first character is provided and the rest is read by the function to determine\n     * the correct token to create.\n     * @param {String} first The first character in the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method notToken\n     */ notToken: function(first, startLine, startCol) {\n            var reader = this._reader, text = first;\n            reader.mark();\n            text += reader.readCount(4);\n            if (text.toLowerCase() === \":not(\") {\n                return this.createToken(Tokens.NOT, text, startLine, startCol);\n            } else {\n                reader.reset();\n                return this.charToken(first, startLine, startCol);\n            }\n        },\n        /**\n     * Produces a number token based on the given character\n     * and location in the stream. This may return a token of\n     * NUMBER, EMS, EXS, LENGTH, ANGLE, TIME, FREQ, DIMENSION,\n     * or PERCENTAGE.\n     * @param {String} first The first character for the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method numberToken\n     */ numberToken: function(first, startLine, startCol) {\n            var reader = this._reader, value = this.readNumber(first), ident, tt = Tokens.NUMBER, c = reader.peek();\n            if (isIdentStart(c)) {\n                ident = this.readName(reader.read());\n                value += ident;\n                if (/^em$|^ex$|^px$|^gd$|^rem$|^vw$|^vh$|^vmax$|^vmin$|^ch$|^cm$|^mm$|^in$|^pt$|^pc$/i.test(ident)) {\n                    tt = Tokens.LENGTH;\n                } else if (/^deg|^rad$|^grad$/i.test(ident)) {\n                    tt = Tokens.ANGLE;\n                } else if (/^ms$|^s$/i.test(ident)) {\n                    tt = Tokens.TIME;\n                } else if (/^hz$|^khz$/i.test(ident)) {\n                    tt = Tokens.FREQ;\n                } else if (/^dpi$|^dpcm$/i.test(ident)) {\n                    tt = Tokens.RESOLUTION;\n                } else {\n                    tt = Tokens.DIMENSION;\n                }\n            } else if (c === \"%\") {\n                value += reader.read();\n                tt = Tokens.PERCENTAGE;\n            }\n            return this.createToken(tt, value, startLine, startCol);\n        },\n        /**\n     * Produces a string token based on the given character\n     * and location in the stream. Since strings may be indicated\n     * by single or double quotes, a failure to match starting\n     * and ending quotes results in an INVALID token being generated.\n     * The first character in the string is passed in and then\n     * the rest are read up to and including the final quotation mark.\n     * @param {String} first The first character in the string.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method stringToken\n     */ stringToken: function(first, startLine, startCol) {\n            var delim = first, string = first, reader = this._reader, prev = first, tt = Tokens.STRING, c = reader.read();\n            while(c){\n                string += c;\n                //if the delimiter is found with an escapement, we're done.\n                if (c === delim && prev !== \"\\\\\") {\n                    break;\n                }\n                //if there's a newline without an escapement, it's an invalid string\n                if (isNewLine(reader.peek()) && c !== \"\\\\\") {\n                    tt = Tokens.INVALID;\n                    break;\n                }\n                //save previous and get next\n                prev = c;\n                c = reader.read();\n            }\n            //if c is null, that means we're out of input and the string was never closed\n            if (c === null) {\n                tt = Tokens.INVALID;\n            }\n            return this.createToken(tt, string, startLine, startCol);\n        },\n        unicodeRangeToken: function(first, startLine, startCol) {\n            var reader = this._reader, value = first, temp, tt = Tokens.CHAR;\n            //then it should be a unicode range\n            if (reader.peek() === \"+\") {\n                reader.mark();\n                value += reader.read();\n                value += this.readUnicodeRangePart(true);\n                //ensure there's an actual unicode range here\n                if (value.length === 2) {\n                    reader.reset();\n                } else {\n                    tt = Tokens.UNICODE_RANGE;\n                    //if there's a ? in the first part, there can't be a second part\n                    if (value.indexOf(\"?\") === -1) {\n                        if (reader.peek() === \"-\") {\n                            reader.mark();\n                            temp = reader.read();\n                            temp += this.readUnicodeRangePart(false);\n                            //if there's not another value, back up and just take the first\n                            if (temp.length === 1) {\n                                reader.reset();\n                            } else {\n                                value += temp;\n                            }\n                        }\n                    }\n                }\n            }\n            return this.createToken(tt, value, startLine, startCol);\n        },\n        /**\n     * Produces a S token based on the specified information. Since whitespace\n     * may have multiple characters, this consumes all whitespace characters\n     * into a single token.\n     * @param {String} first The first character in the token.\n     * @param {int} startLine The beginning line for the character.\n     * @param {int} startCol The beginning column for the character.\n     * @return {Object} A token object.\n     * @method whitespaceToken\n     */ whitespaceToken: function(first, startLine, startCol) {\n            var value = first + this.readWhitespace();\n            return this.createToken(Tokens.S, value, startLine, startCol);\n        },\n        //-------------------------------------------------------------------------\n        // Methods to read values from the string stream\n        //-------------------------------------------------------------------------\n        readUnicodeRangePart: function(allowQuestionMark) {\n            var reader = this._reader, part = \"\", c = reader.peek();\n            //first read hex digits\n            while(isHexDigit(c) && part.length < 6){\n                reader.read();\n                part += c;\n                c = reader.peek();\n            }\n            //then read question marks if allowed\n            if (allowQuestionMark) {\n                while(c === \"?\" && part.length < 6){\n                    reader.read();\n                    part += c;\n                    c = reader.peek();\n                }\n            }\n            //there can't be any other characters after this point\n            return part;\n        },\n        readWhitespace: function() {\n            var reader = this._reader, whitespace = \"\", c = reader.peek();\n            while(isWhitespace(c)){\n                reader.read();\n                whitespace += c;\n                c = reader.peek();\n            }\n            return whitespace;\n        },\n        readNumber: function(first) {\n            var reader = this._reader, number = first, hasDot = first === \".\", c = reader.peek();\n            while(c){\n                if (isDigit(c)) {\n                    number += reader.read();\n                } else if (c === \".\") {\n                    if (hasDot) {\n                        break;\n                    } else {\n                        hasDot = true;\n                        number += reader.read();\n                    }\n                } else {\n                    break;\n                }\n                c = reader.peek();\n            }\n            return number;\n        },\n        readString: function() {\n            var reader = this._reader, delim = reader.read(), string = delim, prev = delim, c = reader.peek();\n            while(c){\n                c = reader.read();\n                string += c;\n                //if the delimiter is found with an escapement, we're done.\n                if (c === delim && prev !== \"\\\\\") {\n                    break;\n                }\n                //if there's a newline without an escapement, it's an invalid string\n                if (isNewLine(reader.peek()) && c !== \"\\\\\") {\n                    string = \"\";\n                    break;\n                }\n                //save previous and get next\n                prev = c;\n                c = reader.peek();\n            }\n            //if c is null, that means we're out of input and the string was never closed\n            if (c === null) {\n                string = \"\";\n            }\n            return string;\n        },\n        readURI: function(first) {\n            var reader = this._reader, uri = first, inner = \"\", c = reader.peek();\n            reader.mark();\n            //skip whitespace before\n            while(c && isWhitespace(c)){\n                reader.read();\n                c = reader.peek();\n            }\n            //it's a string\n            if (c === \"'\" || c === '\"') {\n                inner = this.readString();\n            } else {\n                inner = this.readURL();\n            }\n            c = reader.peek();\n            //skip whitespace after\n            while(c && isWhitespace(c)){\n                reader.read();\n                c = reader.peek();\n            }\n            //if there was no inner value or the next character isn't closing paren, it's not a URI\n            if (inner === \"\" || c !== \")\") {\n                uri = first;\n                reader.reset();\n            } else {\n                uri += inner + reader.read();\n            }\n            return uri;\n        },\n        readURL: function() {\n            var reader = this._reader, url = \"\", c = reader.peek();\n            //TODO: Check for escape and nonascii\n            while(/^[!#$%&\\\\*-~]$/.test(c)){\n                url += reader.read();\n                c = reader.peek();\n            }\n            return url;\n        },\n        readName: function(first) {\n            var reader = this._reader, ident = first || \"\", c = reader.peek();\n            while(true){\n                if (c === \"\\\\\") {\n                    ident += this.readEscape(reader.read());\n                    c = reader.peek();\n                } else if (c && isNameChar(c)) {\n                    ident += reader.read();\n                    c = reader.peek();\n                } else {\n                    break;\n                }\n            }\n            return ident;\n        },\n        readEscape: function(first) {\n            var reader = this._reader, cssEscape = first || \"\", i = 0, c = reader.peek();\n            if (isHexDigit(c)) {\n                do {\n                    cssEscape += reader.read();\n                    c = reader.peek();\n                }while (c && isHexDigit(c) && ++i < 6);\n            }\n            if (cssEscape.length === 3 && /\\s/.test(c) || cssEscape.length === 7 || cssEscape.length === 1) {\n                reader.read();\n            } else {\n                c = \"\";\n            }\n            return cssEscape + c;\n        },\n        readComment: function(first) {\n            var reader = this._reader, comment = first || \"\", c = reader.read();\n            if (c === \"*\") {\n                while(c){\n                    comment += c;\n                    //look for end of comment\n                    if (comment.length > 2 && c === \"*\" && reader.peek() === \"/\") {\n                        comment += reader.read();\n                        break;\n                    }\n                    c = reader.read();\n                }\n                return comment;\n            } else {\n                return \"\";\n            }\n        }\n    });\n    var Tokens = [\n        /*\n     * The following token names are defined in CSS3 Grammar: http://www.w3.org/TR/css3-syntax/#lexical\n     */ //HTML-style comments\n        {\n            name: \"CDO\"\n        },\n        {\n            name: \"CDC\"\n        },\n        //ignorables\n        {\n            name: \"S\",\n            whitespace: true\n        },\n        {\n            name: \"COMMENT\",\n            comment: true,\n            hide: true,\n            channel: \"comment\"\n        },\n        //attribute equality\n        {\n            name: \"INCLUDES\",\n            text: \"~=\"\n        },\n        {\n            name: \"DASHMATCH\",\n            text: \"|=\"\n        },\n        {\n            name: \"PREFIXMATCH\",\n            text: \"^=\"\n        },\n        {\n            name: \"SUFFIXMATCH\",\n            text: \"$=\"\n        },\n        {\n            name: \"SUBSTRINGMATCH\",\n            text: \"*=\"\n        },\n        //identifier types\n        {\n            name: \"STRING\"\n        },\n        {\n            name: \"IDENT\"\n        },\n        {\n            name: \"HASH\"\n        },\n        //at-keywords\n        {\n            name: \"IMPORT_SYM\",\n            text: \"@import\"\n        },\n        {\n            name: \"PAGE_SYM\",\n            text: \"@page\"\n        },\n        {\n            name: \"MEDIA_SYM\",\n            text: \"@media\"\n        },\n        {\n            name: \"FONT_FACE_SYM\",\n            text: \"@font-face\"\n        },\n        {\n            name: \"CHARSET_SYM\",\n            text: \"@charset\"\n        },\n        {\n            name: \"NAMESPACE_SYM\",\n            text: \"@namespace\"\n        },\n        {\n            name: \"VIEWPORT_SYM\",\n            text: [\n                \"@viewport\",\n                \"@-ms-viewport\",\n                \"@-o-viewport\"\n            ]\n        },\n        {\n            name: \"DOCUMENT_SYM\",\n            text: [\n                \"@document\",\n                \"@-moz-document\"\n            ]\n        },\n        {\n            name: \"UNKNOWN_SYM\"\n        },\n        //{ name: \"ATKEYWORD\"},\n        //CSS3 animations\n        {\n            name: \"KEYFRAMES_SYM\",\n            text: [\n                \"@keyframes\",\n                \"@-webkit-keyframes\",\n                \"@-moz-keyframes\",\n                \"@-o-keyframes\"\n            ]\n        },\n        //important symbol\n        {\n            name: \"IMPORTANT_SYM\"\n        },\n        //measurements\n        {\n            name: \"LENGTH\"\n        },\n        {\n            name: \"ANGLE\"\n        },\n        {\n            name: \"TIME\"\n        },\n        {\n            name: \"FREQ\"\n        },\n        {\n            name: \"DIMENSION\"\n        },\n        {\n            name: \"PERCENTAGE\"\n        },\n        {\n            name: \"NUMBER\"\n        },\n        //functions\n        {\n            name: \"URI\"\n        },\n        {\n            name: \"FUNCTION\"\n        },\n        //Unicode ranges\n        {\n            name: \"UNICODE_RANGE\"\n        },\n        /*\n     * The following token names are defined in CSS3 Selectors: http://www.w3.org/TR/css3-selectors/#selector-syntax\n     */ //invalid string\n        {\n            name: \"INVALID\"\n        },\n        //combinators\n        {\n            name: \"PLUS\",\n            text: \"+\"\n        },\n        {\n            name: \"GREATER\",\n            text: \">\"\n        },\n        {\n            name: \"COMMA\",\n            text: \",\"\n        },\n        {\n            name: \"TILDE\",\n            text: \"~\"\n        },\n        //modifier\n        {\n            name: \"NOT\"\n        },\n        /*\n     * Defined in CSS3 Paged Media\n     */ {\n            name: \"TOPLEFTCORNER_SYM\",\n            text: \"@top-left-corner\"\n        },\n        {\n            name: \"TOPLEFT_SYM\",\n            text: \"@top-left\"\n        },\n        {\n            name: \"TOPCENTER_SYM\",\n            text: \"@top-center\"\n        },\n        {\n            name: \"TOPRIGHT_SYM\",\n            text: \"@top-right\"\n        },\n        {\n            name: \"TOPRIGHTCORNER_SYM\",\n            text: \"@top-right-corner\"\n        },\n        {\n            name: \"BOTTOMLEFTCORNER_SYM\",\n            text: \"@bottom-left-corner\"\n        },\n        {\n            name: \"BOTTOMLEFT_SYM\",\n            text: \"@bottom-left\"\n        },\n        {\n            name: \"BOTTOMCENTER_SYM\",\n            text: \"@bottom-center\"\n        },\n        {\n            name: \"BOTTOMRIGHT_SYM\",\n            text: \"@bottom-right\"\n        },\n        {\n            name: \"BOTTOMRIGHTCORNER_SYM\",\n            text: \"@bottom-right-corner\"\n        },\n        {\n            name: \"LEFTTOP_SYM\",\n            text: \"@left-top\"\n        },\n        {\n            name: \"LEFTMIDDLE_SYM\",\n            text: \"@left-middle\"\n        },\n        {\n            name: \"LEFTBOTTOM_SYM\",\n            text: \"@left-bottom\"\n        },\n        {\n            name: \"RIGHTTOP_SYM\",\n            text: \"@right-top\"\n        },\n        {\n            name: \"RIGHTMIDDLE_SYM\",\n            text: \"@right-middle\"\n        },\n        {\n            name: \"RIGHTBOTTOM_SYM\",\n            text: \"@right-bottom\"\n        },\n        /*\n     * The following token names are defined in CSS3 Media Queries: http://www.w3.org/TR/css3-mediaqueries/#syntax\n     */ /*{ name: \"MEDIA_ONLY\", state: \"media\"},\n    { name: \"MEDIA_NOT\", state: \"media\"},\n    { name: \"MEDIA_AND\", state: \"media\"},*/ {\n            name: \"RESOLUTION\",\n            state: \"media\"\n        },\n        /*\n     * The following token names are not defined in any CSS specification but are used by the lexer.\n     */ //not a real token, but useful for stupid IE filters\n        {\n            name: \"IE_FUNCTION\"\n        },\n        //part of CSS3 grammar but not the Flex code\n        {\n            name: \"CHAR\"\n        },\n        //TODO: Needed?\n        //Not defined as tokens, but might as well be\n        {\n            name: \"PIPE\",\n            text: \"|\"\n        },\n        {\n            name: \"SLASH\",\n            text: \"/\"\n        },\n        {\n            name: \"MINUS\",\n            text: \"-\"\n        },\n        {\n            name: \"STAR\",\n            text: \"*\"\n        },\n        {\n            name: \"LBRACE\",\n            endChar: \"}\",\n            text: \"{\"\n        },\n        {\n            name: \"RBRACE\",\n            text: \"}\"\n        },\n        {\n            name: \"LBRACKET\",\n            endChar: \"]\",\n            text: \"[\"\n        },\n        {\n            name: \"RBRACKET\",\n            text: \"]\"\n        },\n        {\n            name: \"EQUALS\",\n            text: \"=\"\n        },\n        {\n            name: \"COLON\",\n            text: \":\"\n        },\n        {\n            name: \"SEMICOLON\",\n            text: \";\"\n        },\n        {\n            name: \"LPAREN\",\n            endChar: \")\",\n            text: \"(\"\n        },\n        {\n            name: \"RPAREN\",\n            text: \")\"\n        },\n        {\n            name: \"DOT\",\n            text: \".\"\n        }\n    ];\n    (function() {\n        var nameMap = [], typeMap = Object.create(null);\n        Tokens.UNKNOWN = -1;\n        Tokens.unshift({\n            name: \"EOF\"\n        });\n        for(var i = 0, len = Tokens.length; i < len; i++){\n            nameMap.push(Tokens[i].name);\n            Tokens[Tokens[i].name] = i;\n            if (Tokens[i].text) {\n                if (Tokens[i].text instanceof Array) {\n                    for(var j = 0; j < Tokens[i].text.length; j++){\n                        typeMap[Tokens[i].text[j]] = i;\n                    }\n                } else {\n                    typeMap[Tokens[i].text] = i;\n                }\n            }\n        }\n        Tokens.name = function(tt) {\n            return nameMap[tt];\n        };\n        Tokens.type = function(c) {\n            return typeMap[c] || -1;\n        };\n    })();\n    //This file will likely change a lot! Very experimental!\n    var Validation = {\n        validate: function(property, value) {\n            //normalize name\n            var name = property.toString().toLowerCase(), expression = new PropertyValueIterator(value), spec = Properties[name];\n            if (!spec) {\n                if (name.indexOf(\"-\") !== 0) {\n                    throw new ValidationError(\"Unknown property '\" + property + \"'.\", property.line, property.col);\n                }\n            } else if (typeof spec !== \"number\") {\n                //initialization\n                if (typeof spec === \"string\") {\n                    if (spec.indexOf(\"||\") > -1) {\n                        this.groupProperty(spec, expression);\n                    } else {\n                        this.singleProperty(spec, expression, 1);\n                    }\n                } else if (spec.multi) {\n                    this.multiProperty(spec.multi, expression, spec.comma, spec.max || Infinity);\n                } else if (typeof spec === \"function\") {\n                    spec(expression);\n                }\n            }\n        },\n        singleProperty: function(types, expression, max, partial) {\n            var result = false, value = expression.value, count = 0, part;\n            while(expression.hasNext() && count < max){\n                result = ValidationTypes.isAny(expression, types);\n                if (!result) {\n                    break;\n                }\n                count++;\n            }\n            if (!result) {\n                if (expression.hasNext() && !expression.isFirst()) {\n                    part = expression.peek();\n                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n                } else {\n                    throw new ValidationError(\"Expected (\" + types + \") but found '\" + value + \"'.\", value.line, value.col);\n                }\n            } else if (expression.hasNext()) {\n                part = expression.next();\n                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n            }\n        },\n        multiProperty: function(types, expression, comma, max) {\n            var result = false, value = expression.value, count = 0, part;\n            while(expression.hasNext() && !result && count < max){\n                if (ValidationTypes.isAny(expression, types)) {\n                    count++;\n                    if (!expression.hasNext()) {\n                        result = true;\n                    } else if (comma) {\n                        if (String(expression.peek()) === \",\") {\n                            part = expression.next();\n                        } else {\n                            break;\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n            if (!result) {\n                if (expression.hasNext() && !expression.isFirst()) {\n                    part = expression.peek();\n                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n                } else {\n                    part = expression.previous();\n                    if (comma && String(part) === \",\") {\n                        throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n                    } else {\n                        throw new ValidationError(\"Expected (\" + types + \") but found '\" + value + \"'.\", value.line, value.col);\n                    }\n                }\n            } else if (expression.hasNext()) {\n                part = expression.next();\n                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n            }\n        },\n        groupProperty: function(types, expression, comma) {\n            var result = false, value = expression.value, typeCount = types.split(\"||\").length, groups = {\n                count: 0\n            }, partial = false, name, part;\n            while(expression.hasNext() && !result){\n                name = ValidationTypes.isAnyOfGroup(expression, types);\n                if (name) {\n                    //no dupes\n                    if (groups[name]) {\n                        break;\n                    } else {\n                        groups[name] = 1;\n                        groups.count++;\n                        partial = true;\n                        if (groups.count === typeCount || !expression.hasNext()) {\n                            result = true;\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n            if (!result) {\n                if (partial && expression.hasNext()) {\n                    part = expression.peek();\n                    throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n                } else {\n                    throw new ValidationError(\"Expected (\" + types + \") but found '\" + value + \"'.\", value.line, value.col);\n                }\n            } else if (expression.hasNext()) {\n                part = expression.next();\n                throw new ValidationError(\"Expected end of value but found '\" + part + \"'.\", part.line, part.col);\n            }\n        }\n    };\n    /**\n * Type to use when a validation error occurs.\n * @class ValidationError\n * @namespace parserlib.util\n * @constructor\n * @param {String} message The error message.\n * @param {int} line The line at which the error occurred.\n * @param {int} col The column at which the error occurred.\n */ function ValidationError(message, line, col) {\n        /**\n     * The column at which the error occurred.\n     * @type int\n     * @property col\n     */ this.col = col;\n        /**\n     * The line at which the error occurred.\n     * @type int\n     * @property line\n     */ this.line = line;\n        /**\n     * The text representation of the unit.\n     * @type String\n     * @property text\n     */ this.message = message;\n    }\n    //inherit from Error\n    ValidationError.prototype = new Error();\n    //This file will likely change a lot! Very experimental!\n    var ValidationTypes = {\n        isLiteral: function(part, literals) {\n            var text = part.text.toString().toLowerCase(), args = literals.split(\" | \"), i, len, found = false;\n            for(i = 0, len = args.length; i < len && !found; i++){\n                if (text === args[i].toLowerCase()) {\n                    found = true;\n                }\n            }\n            return found;\n        },\n        isSimple: function(type) {\n            return !!this.simple[type];\n        },\n        isComplex: function(type) {\n            return !!this.complex[type];\n        },\n        /**\n     * Determines if the next part(s) of the given expression\n     * are any of the given types.\n     */ isAny: function(expression, types) {\n            var args = types.split(\" | \"), i, len, found = false;\n            for(i = 0, len = args.length; i < len && !found && expression.hasNext(); i++){\n                found = this.isType(expression, args[i]);\n            }\n            return found;\n        },\n        /**\n     * Determines if the next part(s) of the given expression\n     * are one of a group.\n     */ isAnyOfGroup: function(expression, types) {\n            var args = types.split(\" || \"), i, len, found = false;\n            for(i = 0, len = args.length; i < len && !found; i++){\n                found = this.isType(expression, args[i]);\n            }\n            return found ? args[i - 1] : false;\n        },\n        /**\n     * Determines if the next part(s) of the given expression\n     * are of a given type.\n     */ isType: function(expression, type) {\n            var part = expression.peek(), result = false;\n            if (type.charAt(0) !== \"<\") {\n                result = this.isLiteral(part, type);\n                if (result) {\n                    expression.next();\n                }\n            } else if (this.simple[type]) {\n                result = this.simple[type](part);\n                if (result) {\n                    expression.next();\n                }\n            } else {\n                result = this.complex[type](expression);\n            }\n            return result;\n        },\n        simple: {\n            __proto__: null,\n            \"<absolute-size>\": function(part) {\n                return ValidationTypes.isLiteral(part, \"xx-small | x-small | small | medium | large | x-large | xx-large\");\n            },\n            \"<attachment>\": function(part) {\n                return ValidationTypes.isLiteral(part, \"scroll | fixed | local\");\n            },\n            \"<attr>\": function(part) {\n                return part.type === \"function\" && part.name === \"attr\";\n            },\n            \"<bg-image>\": function(part) {\n                return this[\"<image>\"](part) || this[\"<gradient>\"](part) || String(part) === \"none\";\n            },\n            \"<gradient>\": function(part) {\n                return part.type === \"function\" && /^(?:\\-(?:ms|moz|o|webkit)\\-)?(?:repeating\\-)?(?:radial\\-|linear\\-)?gradient/i.test(part);\n            },\n            \"<box>\": function(part) {\n                return ValidationTypes.isLiteral(part, \"padding-box | border-box | content-box\");\n            },\n            \"<content>\": function(part) {\n                return part.type === \"function\" && part.name === \"content\";\n            },\n            \"<relative-size>\": function(part) {\n                return ValidationTypes.isLiteral(part, \"smaller | larger\");\n            },\n            //any identifier\n            \"<ident>\": function(part) {\n                return part.type === \"identifier\";\n            },\n            \"<length>\": function(part) {\n                if (part.type === \"function\" && /^(?:\\-(?:ms|moz|o|webkit)\\-)?calc/i.test(part)) {\n                    return true;\n                } else {\n                    return part.type === \"length\" || part.type === \"number\" || part.type === \"integer\" || String(part) === \"0\";\n                }\n            },\n            \"<color>\": function(part) {\n                return part.type === \"color\" || String(part) === \"transparent\" || String(part) === \"currentColor\";\n            },\n            \"<number>\": function(part) {\n                return part.type === \"number\" || this[\"<integer>\"](part);\n            },\n            \"<integer>\": function(part) {\n                return part.type === \"integer\";\n            },\n            \"<line>\": function(part) {\n                return part.type === \"integer\";\n            },\n            \"<angle>\": function(part) {\n                return part.type === \"angle\";\n            },\n            \"<uri>\": function(part) {\n                return part.type === \"uri\";\n            },\n            \"<image>\": function(part) {\n                return this[\"<uri>\"](part);\n            },\n            \"<percentage>\": function(part) {\n                return part.type === \"percentage\" || String(part) === \"0\";\n            },\n            \"<border-width>\": function(part) {\n                return this[\"<length>\"](part) || ValidationTypes.isLiteral(part, \"thin | medium | thick\");\n            },\n            \"<border-style>\": function(part) {\n                return ValidationTypes.isLiteral(part, \"none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\");\n            },\n            \"<content-sizing>\": function(part) {\n                return ValidationTypes.isLiteral(part, \"fill-available | -moz-available | -webkit-fill-available | max-content | -moz-max-content | -webkit-max-content | min-content | -moz-min-content | -webkit-min-content | fit-content | -moz-fit-content | -webkit-fit-content\");\n            },\n            \"<margin-width>\": function(part) {\n                return this[\"<length>\"](part) || this[\"<percentage>\"](part) || ValidationTypes.isLiteral(part, \"auto\");\n            },\n            \"<padding-width>\": function(part) {\n                return this[\"<length>\"](part) || this[\"<percentage>\"](part);\n            },\n            \"<shape>\": function(part) {\n                return part.type === \"function\" && (part.name === \"rect\" || part.name === \"inset-rect\");\n            },\n            \"<time>\": function(part) {\n                return part.type === \"time\";\n            },\n            \"<flex-grow>\": function(part) {\n                return this[\"<number>\"](part);\n            },\n            \"<flex-shrink>\": function(part) {\n                return this[\"<number>\"](part);\n            },\n            \"<width>\": function(part) {\n                return this[\"<margin-width>\"](part);\n            },\n            \"<flex-basis>\": function(part) {\n                return this[\"<width>\"](part);\n            },\n            \"<flex-direction>\": function(part) {\n                return ValidationTypes.isLiteral(part, \"row | row-reverse | column | column-reverse\");\n            },\n            \"<flex-wrap>\": function(part) {\n                return ValidationTypes.isLiteral(part, \"nowrap | wrap | wrap-reverse\");\n            },\n            \"<feature-tag-value>\": function(part) {\n                return part.type === \"function\" && /^[A-Z0-9]{4}$/i.test(part);\n            }\n        },\n        complex: {\n            __proto__: null,\n            \"<bg-position>\": function(expression) {\n                var result = false, numeric = \"<percentage> | <length>\", xDir = \"left | right\", yDir = \"top | bottom\", count = 0;\n                while(expression.peek(count) && expression.peek(count).text !== \",\"){\n                    count++;\n                }\n                /*\n<position> = [\n  [ left | center | right | top | bottom | <percentage> | <length> ]\n|\n  [ left | center | right | <percentage> | <length> ]\n  [ top | center | bottom | <percentage> | <length> ]\n|\n  [ center | [ left | right ] [ <percentage> | <length> ]? ] &&\n  [ center | [ top | bottom ] [ <percentage> | <length> ]? ]\n]\n*/ if (count < 3) {\n                    if (ValidationTypes.isAny(expression, xDir + \" | center | \" + numeric)) {\n                        result = true;\n                        ValidationTypes.isAny(expression, yDir + \" | center | \" + numeric);\n                    } else if (ValidationTypes.isAny(expression, yDir)) {\n                        result = true;\n                        ValidationTypes.isAny(expression, xDir + \" | center\");\n                    }\n                } else {\n                    if (ValidationTypes.isAny(expression, xDir)) {\n                        if (ValidationTypes.isAny(expression, yDir)) {\n                            result = true;\n                            ValidationTypes.isAny(expression, numeric);\n                        } else if (ValidationTypes.isAny(expression, numeric)) {\n                            if (ValidationTypes.isAny(expression, yDir)) {\n                                result = true;\n                                ValidationTypes.isAny(expression, numeric);\n                            } else if (ValidationTypes.isAny(expression, \"center\")) {\n                                result = true;\n                            }\n                        }\n                    } else if (ValidationTypes.isAny(expression, yDir)) {\n                        if (ValidationTypes.isAny(expression, xDir)) {\n                            result = true;\n                            ValidationTypes.isAny(expression, numeric);\n                        } else if (ValidationTypes.isAny(expression, numeric)) {\n                            if (ValidationTypes.isAny(expression, xDir)) {\n                                result = true;\n                                ValidationTypes.isAny(expression, numeric);\n                            } else if (ValidationTypes.isAny(expression, \"center\")) {\n                                result = true;\n                            }\n                        }\n                    } else if (ValidationTypes.isAny(expression, \"center\")) {\n                        if (ValidationTypes.isAny(expression, xDir + \" | \" + yDir)) {\n                            result = true;\n                            ValidationTypes.isAny(expression, numeric);\n                        }\n                    }\n                }\n                return result;\n            },\n            \"<bg-size>\": function(expression) {\n                //<bg-size> = [ <length> | <percentage> | auto ]{1,2} | cover | contain\n                var result = false, numeric = \"<percentage> | <length> | auto\";\n                if (ValidationTypes.isAny(expression, \"cover | contain\")) {\n                    result = true;\n                } else if (ValidationTypes.isAny(expression, numeric)) {\n                    result = true;\n                    ValidationTypes.isAny(expression, numeric);\n                }\n                return result;\n            },\n            \"<repeat-style>\": function(expression) {\n                //repeat-x | repeat-y | [repeat | space | round | no-repeat]{1,2}\n                var result = false, values = \"repeat | space | round | no-repeat\", part;\n                if (expression.hasNext()) {\n                    part = expression.next();\n                    if (ValidationTypes.isLiteral(part, \"repeat-x | repeat-y\")) {\n                        result = true;\n                    } else if (ValidationTypes.isLiteral(part, values)) {\n                        result = true;\n                        if (expression.hasNext() && ValidationTypes.isLiteral(expression.peek(), values)) {\n                            expression.next();\n                        }\n                    }\n                }\n                return result;\n            },\n            \"<shadow>\": function(expression) {\n                //inset? && [ <length>{2,4} && <color>? ]\n                var result = false, count = 0, inset = false, color = false;\n                if (expression.hasNext()) {\n                    if (ValidationTypes.isAny(expression, \"inset\")) {\n                        inset = true;\n                    }\n                    if (ValidationTypes.isAny(expression, \"<color>\")) {\n                        color = true;\n                    }\n                    while(ValidationTypes.isAny(expression, \"<length>\") && count < 4){\n                        count++;\n                    }\n                    if (expression.hasNext()) {\n                        if (!color) {\n                            ValidationTypes.isAny(expression, \"<color>\");\n                        }\n                        if (!inset) {\n                            ValidationTypes.isAny(expression, \"inset\");\n                        }\n                    }\n                    result = count >= 2 && count <= 4;\n                }\n                return result;\n            },\n            \"<x-one-radius>\": function(expression) {\n                //[ <length> | <percentage> ] [ <length> | <percentage> ]?\n                var result = false, simple = \"<length> | <percentage> | inherit\";\n                if (ValidationTypes.isAny(expression, simple)) {\n                    result = true;\n                    ValidationTypes.isAny(expression, simple);\n                }\n                return result;\n            },\n            \"<flex>\": function(expression) {\n                // http://www.w3.org/TR/2014/WD-css-flexbox-1-20140325/#flex-property\n                // none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]\n                // Valid syntaxes, according to https://developer.mozilla.org/en-US/docs/Web/CSS/flex#Syntax\n                // * none\n                // * <flex-grow>\n                // * <flex-basis>\n                // * <flex-grow> <flex-basis>\n                // * <flex-grow> <flex-shrink>\n                // * <flex-grow> <flex-shrink> <flex-basis>\n                // * inherit\n                var part, result = false;\n                if (ValidationTypes.isAny(expression, \"none | inherit\")) {\n                    result = true;\n                } else {\n                    if (ValidationTypes.isType(expression, \"<flex-grow>\")) {\n                        if (expression.peek()) {\n                            if (ValidationTypes.isType(expression, \"<flex-shrink>\")) {\n                                if (expression.peek()) {\n                                    result = ValidationTypes.isType(expression, \"<flex-basis>\");\n                                } else {\n                                    result = true;\n                                }\n                            } else if (ValidationTypes.isType(expression, \"<flex-basis>\")) {\n                                result = expression.peek() === null;\n                            }\n                        } else {\n                            result = true;\n                        }\n                    } else if (ValidationTypes.isType(expression, \"<flex-basis>\")) {\n                        result = true;\n                    }\n                }\n                if (!result) {\n                    // Generate a more verbose error than \"Expected <flex>...\"\n                    part = expression.peek();\n                    throw new ValidationError(\"Expected (none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]) but found '\" + expression.value.text + \"'.\", part.line, part.col);\n                }\n                return result;\n            }\n        }\n    };\n    parserlib.css = {\n        __proto__: null,\n        Colors: Colors,\n        Combinator: Combinator,\n        Parser: Parser,\n        PropertyName: PropertyName,\n        PropertyValue: PropertyValue,\n        PropertyValuePart: PropertyValuePart,\n        MediaFeature: MediaFeature,\n        MediaQuery: MediaQuery,\n        Selector: Selector,\n        SelectorPart: SelectorPart,\n        SelectorSubPart: SelectorSubPart,\n        Specificity: Specificity,\n        TokenStream: TokenStream,\n        Tokens: Tokens,\n        ValidationError: ValidationError\n    };\n})();\n(function() {\n    /* jshint forin:false */ for(var prop in parserlib){\n        exports[prop] = parserlib[prop];\n    }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/cssparser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/defineElement.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/defineElement.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar attributes = __webpack_require__(/*! ./attributes */ \"(ssr)/./node_modules/@mathpix/domino/lib/attributes.js\");\nvar sloppy = __webpack_require__(/*! ./sloppy */ \"(ssr)/./node_modules/@mathpix/domino/lib/sloppy.js\");\nvar isApiWritable = (__webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@mathpix/domino/lib/config.js\").isApiWritable);\nmodule.exports = function(spec, defaultConstructor, tagList, tagNameToImpl) {\n    var c = spec.ctor;\n    if (c) {\n        var props = spec.props || {};\n        if (spec.attributes) {\n            for(var n in spec.attributes){\n                var attr = spec.attributes[n];\n                if (typeof attr !== \"object\" || Array.isArray(attr)) attr = {\n                    type: attr\n                };\n                if (!attr.name) attr.name = n.toLowerCase();\n                props[n] = attributes.property(attr);\n            }\n        }\n        props.constructor = {\n            value: c,\n            writable: isApiWritable\n        };\n        c.prototype = Object.create((spec.superclass || defaultConstructor).prototype, props);\n        if (spec.events) {\n            addEventHandlers(c, spec.events);\n        }\n        tagList[c.name] = c;\n    } else {\n        c = defaultConstructor;\n    }\n    (spec.tags || spec.tag && [\n        spec.tag\n    ] || []).forEach(function(tag) {\n        tagNameToImpl[tag] = c;\n    });\n    return c;\n};\nfunction EventHandlerBuilder(body, document, form, element) {\n    this.body = body;\n    this.document = document;\n    this.form = form;\n    this.element = element;\n}\nEventHandlerBuilder.prototype.build = sloppy.EventHandlerBuilder_build;\nfunction EventHandlerChangeHandler(elt, name, oldval, newval) {\n    var doc = elt.ownerDocument || Object.create(null);\n    var form = elt.form || Object.create(null);\n    elt[name] = new EventHandlerBuilder(newval, doc, form, elt).build();\n}\nfunction addEventHandlers(c, eventHandlerTypes) {\n    var p = c.prototype;\n    eventHandlerTypes.forEach(function(type) {\n        // Define the event handler registration IDL attribute for this type\n        Object.defineProperty(p, \"on\" + type, {\n            get: function() {\n                return this._getEventHandler(type);\n            },\n            set: function(v) {\n                this._setEventHandler(type, v);\n            }\n        });\n        // Define special behavior for the content attribute as well\n        attributes.registerChangeHandler(c, \"on\" + type, EventHandlerChangeHandler);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9kZWZpbmVFbGVtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDekIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsZ0JBQWdCRix5R0FBaUM7QUFFckRHLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxJQUFJLEVBQUVDLGtCQUFrQixFQUFFQyxPQUFPLEVBQUVDLGFBQWE7SUFDeEUsSUFBSUMsSUFBSUosS0FBS0ssSUFBSTtJQUNqQixJQUFJRCxHQUFHO1FBQ0wsSUFBSUUsUUFBUU4sS0FBS00sS0FBSyxJQUFJLENBQUM7UUFFM0IsSUFBSU4sS0FBS04sVUFBVSxFQUFFO1lBQ25CLElBQUssSUFBSWEsS0FBS1AsS0FBS04sVUFBVSxDQUFFO2dCQUM3QixJQUFJYyxPQUFPUixLQUFLTixVQUFVLENBQUNhLEVBQUU7Z0JBQzdCLElBQUksT0FBT0MsU0FBUyxZQUFZQyxNQUFNQyxPQUFPLENBQUNGLE9BQU9BLE9BQU87b0JBQUNHLE1BQU1IO2dCQUFJO2dCQUN2RSxJQUFJLENBQUNBLEtBQUtJLElBQUksRUFBRUosS0FBS0ksSUFBSSxHQUFHTCxFQUFFTSxXQUFXO2dCQUN6Q1AsS0FBSyxDQUFDQyxFQUFFLEdBQUdiLFdBQVdvQixRQUFRLENBQUNOO1lBQ2pDO1FBQ0Y7UUFFQUYsTUFBTVMsV0FBVyxHQUFHO1lBQUVDLE9BQVFaO1lBQUdhLFVBQVVwQjtRQUFjO1FBQ3pETyxFQUFFYyxTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQyxDQUFDcEIsS0FBS3FCLFVBQVUsSUFBSXBCLGtCQUFpQixFQUFHaUIsU0FBUyxFQUFFWjtRQUMvRSxJQUFJTixLQUFLc0IsTUFBTSxFQUFFO1lBQ2ZDLGlCQUFpQm5CLEdBQUdKLEtBQUtzQixNQUFNO1FBQ2pDO1FBQ0FwQixPQUFPLENBQUNFLEVBQUVRLElBQUksQ0FBQyxHQUFHUjtJQUNwQixPQUNLO1FBQ0hBLElBQUlIO0lBQ047SUFFQ0QsQ0FBQUEsS0FBS3dCLElBQUksSUFBSXhCLEtBQUt5QixHQUFHLElBQUk7UUFBQ3pCLEtBQUt5QixHQUFHO0tBQUMsSUFBSSxFQUFFLEVBQUVDLE9BQU8sQ0FBQyxTQUFTRCxHQUFHO1FBQzlEdEIsYUFBYSxDQUFDc0IsSUFBSSxHQUFHckI7SUFDdkI7SUFFQSxPQUFPQTtBQUNUO0FBRUEsU0FBU3VCLG9CQUFvQkMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsT0FBTztJQUN4RCxJQUFJLENBQUNILElBQUksR0FBR0E7SUFDWixJQUFJLENBQUNDLFFBQVEsR0FBR0E7SUFDaEIsSUFBSSxDQUFDQyxJQUFJLEdBQUdBO0lBQ1osSUFBSSxDQUFDQyxPQUFPLEdBQUdBO0FBQ2pCO0FBRUFKLG9CQUFvQlQsU0FBUyxDQUFDYyxLQUFLLEdBQUdwQyxPQUFPcUMseUJBQXlCO0FBRXRFLFNBQVNDLDBCQUEwQkMsR0FBRyxFQUFFdkIsSUFBSSxFQUFFd0IsTUFBTSxFQUFFQyxNQUFNO0lBQzFELElBQUlDLE1BQU1ILElBQUlJLGFBQWEsSUFBSXBCLE9BQU9DLE1BQU0sQ0FBQztJQUM3QyxJQUFJVSxPQUFPSyxJQUFJTCxJQUFJLElBQUlYLE9BQU9DLE1BQU0sQ0FBQztJQUNyQ2UsR0FBRyxDQUFDdkIsS0FBSyxHQUFHLElBQUllLG9CQUFvQlUsUUFBUUMsS0FBS1IsTUFBTUssS0FBS0gsS0FBSztBQUNuRTtBQUVBLFNBQVNULGlCQUFpQm5CLENBQUMsRUFBRW9DLGlCQUFpQjtJQUM1QyxJQUFJQyxJQUFJckMsRUFBRWMsU0FBUztJQUNuQnNCLGtCQUFrQmQsT0FBTyxDQUFDLFNBQVNmLElBQUk7UUFDckMsb0VBQW9FO1FBQ3BFUSxPQUFPdUIsY0FBYyxDQUFDRCxHQUFHLE9BQU85QixNQUFNO1lBQ3BDZ0MsS0FBSztnQkFDSCxPQUFPLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNqQztZQUMvQjtZQUNBa0MsS0FBSyxTQUFTQyxDQUFDO2dCQUNiLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNwQyxNQUFNbUM7WUFDOUI7UUFDRjtRQUVBLDREQUE0RDtRQUM1RHBELFdBQVdzRCxxQkFBcUIsQ0FBQzVDLEdBQUcsT0FBT08sTUFBTXVCO0lBQ25EO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9kZWZpbmVFbGVtZW50LmpzPzNhZDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi9hdHRyaWJ1dGVzJyk7XG52YXIgc2xvcHB5ID0gcmVxdWlyZSgnLi9zbG9wcHknKTtcbnZhciBpc0FwaVdyaXRhYmxlID0gcmVxdWlyZShcIi4vY29uZmlnXCIpLmlzQXBpV3JpdGFibGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3BlYywgZGVmYXVsdENvbnN0cnVjdG9yLCB0YWdMaXN0LCB0YWdOYW1lVG9JbXBsKSB7XG4gIHZhciBjID0gc3BlYy5jdG9yO1xuICBpZiAoYykge1xuICAgIHZhciBwcm9wcyA9IHNwZWMucHJvcHMgfHwge307XG5cbiAgICBpZiAoc3BlYy5hdHRyaWJ1dGVzKSB7XG4gICAgICBmb3IgKHZhciBuIGluIHNwZWMuYXR0cmlidXRlcykge1xuICAgICAgICB2YXIgYXR0ciA9IHNwZWMuYXR0cmlidXRlc1tuXTtcbiAgICAgICAgaWYgKHR5cGVvZiBhdHRyICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGF0dHIpKSBhdHRyID0ge3R5cGU6IGF0dHJ9O1xuICAgICAgICBpZiAoIWF0dHIubmFtZSkgYXR0ci5uYW1lID0gbi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBwcm9wc1tuXSA9IGF0dHJpYnV0ZXMucHJvcGVydHkoYXR0cik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvcHMuY29uc3RydWN0b3IgPSB7IHZhbHVlIDogYywgd3JpdGFibGU6IGlzQXBpV3JpdGFibGUgfTtcbiAgICBjLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoKHNwZWMuc3VwZXJjbGFzcyB8fCBkZWZhdWx0Q29uc3RydWN0b3IpLnByb3RvdHlwZSwgcHJvcHMpO1xuICAgIGlmIChzcGVjLmV2ZW50cykge1xuICAgICAgYWRkRXZlbnRIYW5kbGVycyhjLCBzcGVjLmV2ZW50cyk7XG4gICAgfVxuICAgIHRhZ0xpc3RbYy5uYW1lXSA9IGM7XG4gIH1cbiAgZWxzZSB7XG4gICAgYyA9IGRlZmF1bHRDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIChzcGVjLnRhZ3MgfHwgc3BlYy50YWcgJiYgW3NwZWMudGFnXSB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbih0YWcpIHtcbiAgICB0YWdOYW1lVG9JbXBsW3RhZ10gPSBjO1xuICB9KTtcblxuICByZXR1cm4gYztcbn07XG5cbmZ1bmN0aW9uIEV2ZW50SGFuZGxlckJ1aWxkZXIoYm9keSwgZG9jdW1lbnQsIGZvcm0sIGVsZW1lbnQpIHtcbiAgdGhpcy5ib2R5ID0gYm9keTtcbiAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICB0aGlzLmZvcm0gPSBmb3JtO1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xufVxuXG5FdmVudEhhbmRsZXJCdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IHNsb3BweS5FdmVudEhhbmRsZXJCdWlsZGVyX2J1aWxkO1xuXG5mdW5jdGlvbiBFdmVudEhhbmRsZXJDaGFuZ2VIYW5kbGVyKGVsdCwgbmFtZSwgb2xkdmFsLCBuZXd2YWwpIHtcbiAgdmFyIGRvYyA9IGVsdC5vd25lckRvY3VtZW50IHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBmb3JtID0gZWx0LmZvcm0gfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZWx0W25hbWVdID0gbmV3IEV2ZW50SGFuZGxlckJ1aWxkZXIobmV3dmFsLCBkb2MsIGZvcm0sIGVsdCkuYnVpbGQoKTtcbn1cblxuZnVuY3Rpb24gYWRkRXZlbnRIYW5kbGVycyhjLCBldmVudEhhbmRsZXJUeXBlcykge1xuICB2YXIgcCA9IGMucHJvdG90eXBlO1xuICBldmVudEhhbmRsZXJUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAvLyBEZWZpbmUgdGhlIGV2ZW50IGhhbmRsZXIgcmVnaXN0cmF0aW9uIElETCBhdHRyaWJ1dGUgZm9yIHRoaXMgdHlwZVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCBcIm9uXCIgKyB0eXBlLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RXZlbnRIYW5kbGVyKHR5cGUpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odikge1xuICAgICAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIodHlwZSwgdik7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gRGVmaW5lIHNwZWNpYWwgYmVoYXZpb3IgZm9yIHRoZSBjb250ZW50IGF0dHJpYnV0ZSBhcyB3ZWxsXG4gICAgYXR0cmlidXRlcy5yZWdpc3RlckNoYW5nZUhhbmRsZXIoYywgXCJvblwiICsgdHlwZSwgRXZlbnRIYW5kbGVyQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbImF0dHJpYnV0ZXMiLCJyZXF1aXJlIiwic2xvcHB5IiwiaXNBcGlXcml0YWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzcGVjIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwidGFnTGlzdCIsInRhZ05hbWVUb0ltcGwiLCJjIiwiY3RvciIsInByb3BzIiwibiIsImF0dHIiLCJBcnJheSIsImlzQXJyYXkiLCJ0eXBlIiwibmFtZSIsInRvTG93ZXJDYXNlIiwicHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwid3JpdGFibGUiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJzdXBlcmNsYXNzIiwiZXZlbnRzIiwiYWRkRXZlbnRIYW5kbGVycyIsInRhZ3MiLCJ0YWciLCJmb3JFYWNoIiwiRXZlbnRIYW5kbGVyQnVpbGRlciIsImJvZHkiLCJkb2N1bWVudCIsImZvcm0iLCJlbGVtZW50IiwiYnVpbGQiLCJFdmVudEhhbmRsZXJCdWlsZGVyX2J1aWxkIiwiRXZlbnRIYW5kbGVyQ2hhbmdlSGFuZGxlciIsImVsdCIsIm9sZHZhbCIsIm5ld3ZhbCIsImRvYyIsIm93bmVyRG9jdW1lbnQiLCJldmVudEhhbmRsZXJUeXBlcyIsInAiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIl9nZXRFdmVudEhhbmRsZXIiLCJzZXQiLCJ2IiwiX3NldEV2ZW50SGFuZGxlciIsInJlZ2lzdGVyQ2hhbmdlSGFuZGxlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/defineElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/events.js":
/*!****************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/events.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = {\n    Event: __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/@mathpix/domino/lib/Event.js\"),\n    UIEvent: __webpack_require__(/*! ./UIEvent */ \"(ssr)/./node_modules/@mathpix/domino/lib/UIEvent.js\"),\n    MouseEvent: __webpack_require__(/*! ./MouseEvent */ \"(ssr)/./node_modules/@mathpix/domino/lib/MouseEvent.js\"),\n    CustomEvent: __webpack_require__(/*! ./CustomEvent */ \"(ssr)/./node_modules/@mathpix/domino/lib/CustomEvent.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9ldmVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLE9BQU9DLG1CQUFPQSxDQUFDO0lBQ2ZDLFNBQVNELG1CQUFPQSxDQUFDO0lBQ2pCRSxZQUFZRixtQkFBT0EsQ0FBQztJQUNwQkcsYUFBYUgsbUJBQU9BLENBQUM7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9ldmVudHMuanM/YjYzYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBFdmVudDogcmVxdWlyZSgnLi9FdmVudCcpLFxuICBVSUV2ZW50OiByZXF1aXJlKCcuL1VJRXZlbnQnKSxcbiAgTW91c2VFdmVudDogcmVxdWlyZSgnLi9Nb3VzZUV2ZW50JyksXG4gIEN1c3RvbUV2ZW50OiByZXF1aXJlKCcuL0N1c3RvbUV2ZW50Jylcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkV2ZW50IiwicmVxdWlyZSIsIlVJRXZlbnQiLCJNb3VzZUV2ZW50IiwiQ3VzdG9tRXZlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/htmlelts.js":
/*!******************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/htmlelts.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\");\nvar Element = __webpack_require__(/*! ./Element */ \"(ssr)/./node_modules/@mathpix/domino/lib/Element.js\");\nvar CSSStyleDeclaration = __webpack_require__(/*! ./CSSStyleDeclaration */ \"(ssr)/./node_modules/@mathpix/domino/lib/CSSStyleDeclaration.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar URLUtils = __webpack_require__(/*! ./URLUtils */ \"(ssr)/./node_modules/@mathpix/domino/lib/URLUtils.js\");\nvar defineElement = __webpack_require__(/*! ./defineElement */ \"(ssr)/./node_modules/@mathpix/domino/lib/defineElement.js\");\nvar htmlElements = exports.elements = {};\nvar htmlNameToImpl = Object.create(null);\nexports.createElement = function(doc, localName, prefix) {\n    var impl = htmlNameToImpl[localName] || HTMLUnknownElement;\n    return new impl(doc, localName, prefix);\n};\nfunction define(spec) {\n    return defineElement(spec, HTMLElement, htmlElements, htmlNameToImpl);\n}\nfunction URL(attr) {\n    return {\n        get: function() {\n            var v = this._getattr(attr);\n            if (v === null) {\n                return \"\";\n            }\n            var url = this.doc._resolve(v);\n            return url === null ? v : url;\n        },\n        set: function(value) {\n            this._setattr(attr, value);\n        }\n    };\n}\nfunction CORS(attr) {\n    return {\n        get: function() {\n            var v = this._getattr(attr);\n            if (v === null) {\n                return null;\n            }\n            if (v.toLowerCase() === \"use-credentials\") {\n                return \"use-credentials\";\n            }\n            return \"anonymous\";\n        },\n        set: function(value) {\n            if (value === null || value === undefined) {\n                this.removeAttribute(attr);\n            } else {\n                this._setattr(attr, value);\n            }\n        }\n    };\n}\nvar REFERRER = {\n    type: [\n        \"\",\n        \"no-referrer\",\n        \"no-referrer-when-downgrade\",\n        \"same-origin\",\n        \"origin\",\n        \"strict-origin\",\n        \"origin-when-cross-origin\",\n        \"strict-origin-when-cross-origin\",\n        \"unsafe-url\"\n    ],\n    missing: \"\"\n};\n// XXX: the default value for tabIndex should be 0 if the element is\n// focusable and -1 if it is not.  But the full definition of focusable\n// is actually hard to compute, so for now, I'll follow Firefox and\n// just base the default value on the type of the element.\nvar focusableElements = {\n    \"A\": true,\n    \"LINK\": true,\n    \"BUTTON\": true,\n    \"INPUT\": true,\n    \"SELECT\": true,\n    \"TEXTAREA\": true,\n    \"COMMAND\": true\n};\nvar HTMLFormElement = function(doc, localName, prefix) {\n    HTMLElement.call(this, doc, localName, prefix);\n    this._form = null; // Prevent later deoptimization\n};\nvar HTMLElement = exports.HTMLElement = define({\n    superclass: Element,\n    ctor: function HTMLElement(doc, localName, prefix) {\n        Element.call(this, doc, localName, utils.NAMESPACE.HTML, prefix);\n    },\n    props: {\n        innerHTML: {\n            get: function() {\n                return this.serialize();\n            },\n            set: function(v) {\n                var parser = this.ownerDocument.implementation.mozHTMLParser(this.ownerDocument._address, this);\n                parser.parse(v === null ? \"\" : String(v), true);\n                // Remove any existing children of this node\n                var target = this instanceof htmlNameToImpl.template ? this.content : this;\n                while(target.hasChildNodes())target.removeChild(target.firstChild);\n                // Now copy newly parsed children to this node\n                target.appendChild(parser._asDocumentFragment());\n            }\n        },\n        style: {\n            get: function() {\n                if (!this._style) this._style = new CSSStyleDeclaration(this);\n                return this._style;\n            },\n            set: function(v) {\n                if (v === null || v === undefined) {\n                    v = \"\";\n                }\n                this._setattr(\"style\", String(v));\n            }\n        },\n        // These can't really be implemented server-side in a reasonable way.\n        blur: {\n            value: function() {}\n        },\n        focus: {\n            value: function() {}\n        },\n        forceSpellCheck: {\n            value: function() {}\n        },\n        click: {\n            value: function() {\n                if (this._click_in_progress) return;\n                this._click_in_progress = true;\n                try {\n                    if (this._pre_click_activation_steps) this._pre_click_activation_steps();\n                    var event = this.ownerDocument.createEvent(\"MouseEvent\");\n                    event.initMouseEvent(\"click\", true, true, this.ownerDocument.defaultView, 1, 0, 0, 0, 0, // These 4 should be initialized with\n                    // the actually current keyboard state\n                    // somehow...\n                    false, false, false, false, 0, null);\n                    // Dispatch this as an untrusted event since it is synthetic\n                    var success = this.dispatchEvent(event);\n                    if (success) {\n                        if (this._post_click_activation_steps) this._post_click_activation_steps(event);\n                    } else {\n                        if (this._cancelled_activation_steps) this._cancelled_activation_steps();\n                    }\n                } finally{\n                    this._click_in_progress = false;\n                }\n            }\n        },\n        submit: {\n            value: utils.nyi\n        }\n    },\n    attributes: {\n        title: String,\n        lang: String,\n        dir: {\n            type: [\n                \"ltr\",\n                \"rtl\",\n                \"auto\"\n            ],\n            missing: \"\"\n        },\n        accessKey: String,\n        hidden: Boolean,\n        tabIndex: {\n            type: \"long\",\n            default: function() {\n                if (this.tagName in focusableElements || this.contentEditable) return 0;\n                else return -1;\n            }\n        }\n    },\n    events: [\n        \"abort\",\n        \"canplay\",\n        \"canplaythrough\",\n        \"change\",\n        \"click\",\n        \"contextmenu\",\n        \"cuechange\",\n        \"dblclick\",\n        \"drag\",\n        \"dragend\",\n        \"dragenter\",\n        \"dragleave\",\n        \"dragover\",\n        \"dragstart\",\n        \"drop\",\n        \"durationchange\",\n        \"emptied\",\n        \"ended\",\n        \"input\",\n        \"invalid\",\n        \"keydown\",\n        \"keypress\",\n        \"keyup\",\n        \"loadeddata\",\n        \"loadedmetadata\",\n        \"loadstart\",\n        \"mousedown\",\n        \"mousemove\",\n        \"mouseout\",\n        \"mouseover\",\n        \"mouseup\",\n        \"mousewheel\",\n        \"pause\",\n        \"play\",\n        \"playing\",\n        \"progress\",\n        \"ratechange\",\n        \"readystatechange\",\n        \"reset\",\n        \"seeked\",\n        \"seeking\",\n        \"select\",\n        \"show\",\n        \"stalled\",\n        \"submit\",\n        \"suspend\",\n        \"timeupdate\",\n        \"volumechange\",\n        \"waiting\",\n        // These last 5 event types will be overriden by HTMLBodyElement\n        \"blur\",\n        \"error\",\n        \"focus\",\n        \"load\",\n        \"scroll\"\n    ]\n});\n// XXX: reflect contextmenu as contextMenu, with element type\n// style: the spec doesn't call this a reflected attribute.\n//   may want to handle it manually.\n// contentEditable: enumerated, not clear if it is actually\n// reflected or requires custom getter/setter. Not listed as\n// \"limited to known values\".  Raises syntax_err on bad setting,\n// so I think this is custom.\n// contextmenu: content is element id, idl type is an element\n// draggable: boolean, but not a reflected attribute\n// dropzone: reflected SettableTokenList, experimental, so don't\n//   implement it right away.\n// data-* attributes: need special handling in setAttribute?\n// Or maybe that isn't necessary. Can I just scan the attribute list\n// when building the dataset?  Liveness and caching issues?\n// microdata attributes: many are simple reflected attributes, but\n// I'm not going to implement this now.\nvar HTMLUnknownElement = define({\n    ctor: function HTMLUnknownElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    }\n});\nvar formAssociatedProps = {\n    // See http://www.w3.org/TR/html5/association-of-controls-and-forms.html#form-owner\n    form: {\n        get: function() {\n            return this._form;\n        }\n    }\n};\ndefine({\n    tag: \"a\",\n    ctor: function HTMLAnchorElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        _post_click_activation_steps: {\n            value: function(e) {\n                if (this.href) {\n                    // Follow the link\n                    // XXX: this is just a quick hack\n                    // XXX: the HTML spec probably requires more than this\n                    this.ownerDocument.defaultView.location = this.href;\n                }\n            }\n        }\n    },\n    attributes: {\n        href: URL,\n        ping: String,\n        download: String,\n        target: String,\n        rel: String,\n        media: String,\n        hreflang: String,\n        type: String,\n        referrerPolicy: REFERRER,\n        // Obsolete\n        coords: String,\n        charset: String,\n        name: String,\n        rev: String,\n        shape: String\n    }\n});\n// Latest WhatWG spec says these methods come via HTMLHyperlinkElementUtils\nURLUtils._inherit(htmlNameToImpl.a.prototype);\ndefine({\n    tag: \"area\",\n    ctor: function HTMLAreaElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        alt: String,\n        target: String,\n        download: String,\n        rel: String,\n        media: String,\n        href: URL,\n        hreflang: String,\n        type: String,\n        shape: String,\n        coords: String,\n        ping: String,\n        // XXX: also reflect relList\n        referrerPolicy: REFERRER,\n        // Obsolete\n        noHref: Boolean\n    }\n});\n// Latest WhatWG spec says these methods come via HTMLHyperlinkElementUtils\nURLUtils._inherit(htmlNameToImpl.area.prototype);\ndefine({\n    tag: \"br\",\n    ctor: function HTMLBRElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // Obsolete\n        clear: String\n    }\n});\ndefine({\n    tag: \"base\",\n    ctor: function HTMLBaseElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        \"target\": String\n    }\n});\ndefine({\n    tag: \"body\",\n    ctor: function HTMLBodyElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    // Certain event handler attributes on a <body> tag actually set\n    // handlers for the window rather than just that element.  Define\n    // getters and setters for those here.  Note that some of these override\n    // properties on HTMLElement.prototype.\n    // XXX: If I add support for <frameset>, these have to go there, too\n    // XXX\n    // When the Window object is implemented, these attribute will have\n    // to work with the same-named attributes on the Window.\n    events: [\n        \"afterprint\",\n        \"beforeprint\",\n        \"beforeunload\",\n        \"blur\",\n        \"error\",\n        \"focus\",\n        \"hashchange\",\n        \"load\",\n        \"message\",\n        \"offline\",\n        \"online\",\n        \"pagehide\",\n        \"pageshow\",\n        \"popstate\",\n        \"resize\",\n        \"scroll\",\n        \"storage\",\n        \"unload\"\n    ],\n    attributes: {\n        // Obsolete\n        text: {\n            type: String,\n            treatNullAsEmptyString: true\n        },\n        link: {\n            type: String,\n            treatNullAsEmptyString: true\n        },\n        vLink: {\n            type: String,\n            treatNullAsEmptyString: true\n        },\n        aLink: {\n            type: String,\n            treatNullAsEmptyString: true\n        },\n        bgColor: {\n            type: String,\n            treatNullAsEmptyString: true\n        },\n        background: String\n    }\n});\ndefine({\n    tag: \"button\",\n    ctor: function HTMLButtonElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: formAssociatedProps,\n    attributes: {\n        name: String,\n        value: String,\n        disabled: Boolean,\n        autofocus: Boolean,\n        type: {\n            type: [\n                \"submit\",\n                \"reset\",\n                \"button\",\n                \"menu\"\n            ],\n            missing: \"submit\"\n        },\n        formTarget: String,\n        formNoValidate: Boolean,\n        formMethod: {\n            type: [\n                \"get\",\n                \"post\",\n                \"dialog\"\n            ],\n            invalid: \"get\",\n            missing: \"\"\n        },\n        formEnctype: {\n            type: [\n                \"application/x-www-form-urlencoded\",\n                \"multipart/form-data\",\n                \"text/plain\"\n            ],\n            invalid: \"application/x-www-form-urlencoded\",\n            missing: \"\"\n        }\n    }\n});\ndefine({\n    tag: \"dl\",\n    ctor: function HTMLDListElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // Obsolete\n        compact: Boolean\n    }\n});\ndefine({\n    tag: \"data\",\n    ctor: function HTMLDataElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        value: String\n    }\n});\ndefine({\n    tag: \"datalist\",\n    ctor: function HTMLDataListElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    }\n});\ndefine({\n    tag: \"details\",\n    ctor: function HTMLDetailsElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        \"open\": Boolean\n    }\n});\ndefine({\n    tag: \"div\",\n    ctor: function HTMLDivElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // Obsolete\n        align: String\n    }\n});\ndefine({\n    tag: \"embed\",\n    ctor: function HTMLEmbedElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        src: URL,\n        type: String,\n        width: String,\n        height: String,\n        // Obsolete\n        align: String,\n        name: String\n    }\n});\ndefine({\n    tag: \"fieldset\",\n    ctor: function HTMLFieldSetElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: formAssociatedProps,\n    attributes: {\n        disabled: Boolean,\n        name: String\n    }\n});\ndefine({\n    tag: \"form\",\n    ctor: function HTMLFormElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        action: String,\n        autocomplete: {\n            type: [\n                \"on\",\n                \"off\"\n            ],\n            missing: \"on\"\n        },\n        name: String,\n        acceptCharset: {\n            name: \"accept-charset\"\n        },\n        target: String,\n        noValidate: Boolean,\n        method: {\n            type: [\n                \"get\",\n                \"post\",\n                \"dialog\"\n            ],\n            invalid: \"get\",\n            missing: \"get\"\n        },\n        // Both enctype and encoding reflect the enctype content attribute\n        enctype: {\n            type: [\n                \"application/x-www-form-urlencoded\",\n                \"multipart/form-data\",\n                \"text/plain\"\n            ],\n            invalid: \"application/x-www-form-urlencoded\",\n            missing: \"application/x-www-form-urlencoded\"\n        },\n        encoding: {\n            name: \"enctype\",\n            type: [\n                \"application/x-www-form-urlencoded\",\n                \"multipart/form-data\",\n                \"text/plain\"\n            ],\n            invalid: \"application/x-www-form-urlencoded\",\n            missing: \"application/x-www-form-urlencoded\"\n        }\n    }\n});\ndefine({\n    tag: \"hr\",\n    ctor: function HTMLHRElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // Obsolete\n        align: String,\n        color: String,\n        noShade: Boolean,\n        size: String,\n        width: String\n    }\n});\ndefine({\n    tag: \"head\",\n    ctor: function HTMLHeadElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    }\n});\ndefine({\n    tags: [\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\"\n    ],\n    ctor: function HTMLHeadingElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // Obsolete\n        align: String\n    }\n});\ndefine({\n    tag: \"html\",\n    ctor: function HTMLHtmlElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // Obsolete\n        version: String\n    }\n});\ndefine({\n    tag: \"iframe\",\n    ctor: function HTMLIFrameElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n        var Window = __webpack_require__(/*! ./Window */ \"(ssr)/./node_modules/@mathpix/domino/lib/Window.js\"); // Avoid circular dependencies.\n        this._contentWindow = new Window();\n    },\n    props: {\n        contentWindow: {\n            get: function() {\n                return this._contentWindow;\n            }\n        },\n        contentDocument: {\n            get: function() {\n                return this.contentWindow.document;\n            }\n        }\n    },\n    attributes: {\n        src: URL,\n        srcdoc: String,\n        name: String,\n        width: String,\n        height: String,\n        // XXX: sandbox is a reflected settable token list\n        seamless: Boolean,\n        allowFullscreen: Boolean,\n        allowUserMedia: Boolean,\n        allowPaymentRequest: Boolean,\n        referrerPolicy: REFERRER,\n        // Obsolete\n        align: String,\n        scrolling: String,\n        frameBorder: String,\n        longDesc: URL,\n        marginHeight: {\n            type: String,\n            treatNullAsEmptyString: true\n        },\n        marginWidth: {\n            type: String,\n            treatNullAsEmptyString: true\n        }\n    }\n});\ndefine({\n    tag: \"img\",\n    ctor: function HTMLImageElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        alt: String,\n        src: URL,\n        srcset: String,\n        crossOrigin: CORS,\n        useMap: String,\n        isMap: Boolean,\n        height: {\n            type: \"unsigned long\",\n            default: 0\n        },\n        width: {\n            type: \"unsigned long\",\n            default: 0\n        },\n        referrerPolicy: REFERRER,\n        // Obsolete:\n        name: String,\n        lowsrc: URL,\n        align: String,\n        hspace: {\n            type: \"unsigned long\",\n            default: 0\n        },\n        vspace: {\n            type: \"unsigned long\",\n            default: 0\n        },\n        longDesc: URL,\n        border: {\n            type: String,\n            treatNullAsEmptyString: true\n        }\n    }\n});\ndefine({\n    tag: \"input\",\n    ctor: function HTMLInputElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        form: formAssociatedProps.form,\n        _post_click_activation_steps: {\n            value: function(e) {\n                if (this.type === \"checkbox\") {\n                    this.checked = !this.checked;\n                } else if (this.type === \"radio\") {\n                    var group = this.form.getElementsByName(this.name);\n                    for(var i = group.length - 1; i >= 0; i--){\n                        var el = group[i];\n                        el.checked = el === this;\n                    }\n                }\n            }\n        }\n    },\n    attributes: {\n        name: String,\n        disabled: Boolean,\n        autofocus: Boolean,\n        accept: String,\n        alt: String,\n        max: String,\n        min: String,\n        pattern: String,\n        placeholder: String,\n        step: String,\n        dirName: String,\n        defaultValue: {\n            name: \"value\"\n        },\n        multiple: Boolean,\n        required: Boolean,\n        readOnly: Boolean,\n        checked: Boolean,\n        value: String,\n        src: URL,\n        defaultChecked: {\n            name: \"checked\",\n            type: Boolean\n        },\n        size: {\n            type: \"unsigned long\",\n            default: 20,\n            min: 1,\n            setmin: 1\n        },\n        width: {\n            type: \"unsigned long\",\n            min: 0,\n            setmin: 0,\n            default: 0\n        },\n        height: {\n            type: \"unsigned long\",\n            min: 0,\n            setmin: 0,\n            default: 0\n        },\n        minLength: {\n            type: \"unsigned long\",\n            min: 0,\n            setmin: 0,\n            default: -1\n        },\n        maxLength: {\n            type: \"unsigned long\",\n            min: 0,\n            setmin: 0,\n            default: -1\n        },\n        autocomplete: String,\n        type: {\n            type: [\n                \"text\",\n                \"hidden\",\n                \"search\",\n                \"tel\",\n                \"url\",\n                \"email\",\n                \"password\",\n                \"datetime\",\n                \"date\",\n                \"month\",\n                \"week\",\n                \"time\",\n                \"datetime-local\",\n                \"number\",\n                \"range\",\n                \"color\",\n                \"checkbox\",\n                \"radio\",\n                \"file\",\n                \"submit\",\n                \"image\",\n                \"reset\",\n                \"button\"\n            ],\n            missing: \"text\"\n        },\n        formTarget: String,\n        formNoValidate: Boolean,\n        formMethod: {\n            type: [\n                \"get\",\n                \"post\"\n            ],\n            invalid: \"get\",\n            missing: \"\"\n        },\n        formEnctype: {\n            type: [\n                \"application/x-www-form-urlencoded\",\n                \"multipart/form-data\",\n                \"text/plain\"\n            ],\n            invalid: \"application/x-www-form-urlencoded\",\n            missing: \"\"\n        },\n        inputMode: {\n            type: [\n                \"verbatim\",\n                \"latin\",\n                \"latin-name\",\n                \"latin-prose\",\n                \"full-width-latin\",\n                \"kana\",\n                \"kana-name\",\n                \"katakana\",\n                \"numeric\",\n                \"tel\",\n                \"email\",\n                \"url\"\n            ],\n            missing: \"\"\n        },\n        // Obsolete\n        align: String,\n        useMap: String\n    }\n});\ndefine({\n    tag: \"keygen\",\n    ctor: function HTMLKeygenElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: formAssociatedProps,\n    attributes: {\n        name: String,\n        disabled: Boolean,\n        autofocus: Boolean,\n        challenge: String,\n        keytype: {\n            type: [\n                \"rsa\"\n            ],\n            missing: \"\"\n        }\n    }\n});\ndefine({\n    tag: \"li\",\n    ctor: function HTMLLIElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        value: {\n            type: \"long\",\n            default: 0\n        },\n        // Obsolete\n        type: String\n    }\n});\ndefine({\n    tag: \"label\",\n    ctor: function HTMLLabelElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: formAssociatedProps,\n    attributes: {\n        htmlFor: {\n            name: \"for\",\n            type: String\n        }\n    }\n});\ndefine({\n    tag: \"legend\",\n    ctor: function HTMLLegendElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // Obsolete\n        align: String\n    }\n});\ndefine({\n    tag: \"link\",\n    ctor: function HTMLLinkElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // XXX Reflect DOMSettableTokenList sizes also DOMTokenList relList\n        href: URL,\n        rel: String,\n        media: String,\n        hreflang: String,\n        type: String,\n        crossOrigin: CORS,\n        nonce: String,\n        integrity: String,\n        referrerPolicy: REFERRER,\n        // Obsolete\n        charset: String,\n        rev: String,\n        target: String\n    }\n});\ndefine({\n    tag: \"map\",\n    ctor: function HTMLMapElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        name: String\n    }\n});\ndefine({\n    tag: \"menu\",\n    ctor: function HTMLMenuElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // XXX: not quite right, default should be popup if parent element is\n        // popup.\n        type: {\n            type: [\n                \"context\",\n                \"popup\",\n                \"toolbar\"\n            ],\n            missing: \"toolbar\"\n        },\n        label: String,\n        // Obsolete\n        compact: Boolean\n    }\n});\ndefine({\n    tag: \"meta\",\n    ctor: function HTMLMetaElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        name: String,\n        content: String,\n        httpEquiv: {\n            name: \"http-equiv\",\n            type: String\n        },\n        // Obsolete\n        scheme: String\n    }\n});\ndefine({\n    tag: \"meter\",\n    ctor: function HTMLMeterElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: formAssociatedProps\n});\ndefine({\n    tags: [\n        \"ins\",\n        \"del\"\n    ],\n    ctor: function HTMLModElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        cite: URL,\n        dateTime: String\n    }\n});\ndefine({\n    tag: \"ol\",\n    ctor: function HTMLOListElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        // Utility function (see the start attribute default value). Returns\n        // the number of <li> children of this element\n        _numitems: {\n            get: function() {\n                var items = 0;\n                this.childNodes.forEach(function(n) {\n                    if (n.nodeType === Node.ELEMENT_NODE && n.tagName === \"LI\") items++;\n                });\n                return items;\n            }\n        }\n    },\n    attributes: {\n        type: String,\n        reversed: Boolean,\n        start: {\n            type: \"long\",\n            default: function() {\n                // The default value of the start attribute is 1 unless the list is\n                // reversed. Then it is the # of li children\n                if (this.reversed) return this._numitems;\n                else return 1;\n            }\n        },\n        // Obsolete\n        compact: Boolean\n    }\n});\ndefine({\n    tag: \"object\",\n    ctor: function HTMLObjectElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: formAssociatedProps,\n    attributes: {\n        data: URL,\n        type: String,\n        name: String,\n        useMap: String,\n        typeMustMatch: Boolean,\n        width: String,\n        height: String,\n        // Obsolete\n        align: String,\n        archive: String,\n        code: String,\n        declare: Boolean,\n        hspace: {\n            type: \"unsigned long\",\n            default: 0\n        },\n        standby: String,\n        vspace: {\n            type: \"unsigned long\",\n            default: 0\n        },\n        codeBase: URL,\n        codeType: String,\n        border: {\n            type: String,\n            treatNullAsEmptyString: true\n        }\n    }\n});\ndefine({\n    tag: \"optgroup\",\n    ctor: function HTMLOptGroupElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        disabled: Boolean,\n        label: String\n    }\n});\ndefine({\n    tag: \"option\",\n    ctor: function HTMLOptionElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        form: {\n            get: function() {\n                var p = this.parentNode;\n                while(p && p.nodeType === Node.ELEMENT_NODE){\n                    if (p.localName === \"select\") return p.form;\n                    p = p.parentNode;\n                }\n            }\n        },\n        value: {\n            get: function() {\n                return this._getattr(\"value\") || this.text;\n            },\n            set: function(v) {\n                this._setattr(\"value\", v);\n            }\n        },\n        text: {\n            get: function() {\n                // Strip and collapse whitespace\n                return this.textContent.replace(/[ \\t\\n\\f\\r]+/g, \" \").trim();\n            },\n            set: function(v) {\n                this.textContent = v;\n            }\n        }\n    },\n    attributes: {\n        disabled: Boolean,\n        defaultSelected: {\n            name: \"selected\",\n            type: Boolean\n        },\n        label: String\n    }\n});\ndefine({\n    tag: \"output\",\n    ctor: function HTMLOutputElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: formAssociatedProps,\n    attributes: {\n        // XXX Reflect for/htmlFor as a settable token list\n        name: String\n    }\n});\ndefine({\n    tag: \"p\",\n    ctor: function HTMLParagraphElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // Obsolete\n        align: String\n    }\n});\ndefine({\n    tag: \"param\",\n    ctor: function HTMLParamElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        name: String,\n        value: String,\n        // Obsolete\n        type: String,\n        valueType: String\n    }\n});\ndefine({\n    tags: [\n        \"pre\",\n        /*legacy elements:*/ \"listing\",\n        \"xmp\"\n    ],\n    ctor: function HTMLPreElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // Obsolete\n        width: {\n            type: \"long\",\n            default: 0\n        }\n    }\n});\ndefine({\n    tag: \"progress\",\n    ctor: function HTMLProgressElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: formAssociatedProps,\n    attributes: {\n        max: {\n            type: Number,\n            float: true,\n            default: 1.0,\n            min: 0\n        }\n    }\n});\ndefine({\n    tags: [\n        \"q\",\n        \"blockquote\"\n    ],\n    ctor: function HTMLQuoteElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        cite: URL\n    }\n});\ndefine({\n    tag: \"script\",\n    ctor: function HTMLScriptElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        text: {\n            get: function() {\n                var s = \"\";\n                for(var i = 0, n = this.childNodes.length; i < n; i++){\n                    var child = this.childNodes[i];\n                    if (child.nodeType === Node.TEXT_NODE) s += child._data;\n                }\n                return s;\n            },\n            set: function(value) {\n                this.removeChildren();\n                if (value !== null && value !== \"\") {\n                    this.appendChild(this.ownerDocument.createTextNode(value));\n                }\n            }\n        }\n    },\n    attributes: {\n        src: URL,\n        type: String,\n        charset: String,\n        defer: Boolean,\n        async: Boolean,\n        crossOrigin: CORS,\n        nonce: String,\n        integrity: String\n    }\n});\ndefine({\n    tag: \"select\",\n    ctor: function HTMLSelectElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        form: formAssociatedProps.form,\n        options: {\n            get: function() {\n                return this.getElementsByTagName(\"option\");\n            }\n        }\n    },\n    attributes: {\n        autocomplete: String,\n        name: String,\n        disabled: Boolean,\n        autofocus: Boolean,\n        multiple: Boolean,\n        required: Boolean,\n        size: {\n            type: \"unsigned long\",\n            default: 0\n        }\n    }\n});\ndefine({\n    tag: \"source\",\n    ctor: function HTMLSourceElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        src: URL,\n        type: String,\n        media: String\n    }\n});\ndefine({\n    tag: \"span\",\n    ctor: function HTMLSpanElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    }\n});\ndefine({\n    tag: \"style\",\n    ctor: function HTMLStyleElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        media: String,\n        type: String,\n        scoped: Boolean\n    }\n});\ndefine({\n    tag: \"caption\",\n    ctor: function HTMLTableCaptionElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        // Obsolete\n        align: String\n    }\n});\ndefine({\n    ctor: function HTMLTableCellElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        colSpan: {\n            type: \"unsigned long\",\n            default: 1\n        },\n        rowSpan: {\n            type: \"unsigned long\",\n            default: 1\n        },\n        //XXX Also reflect settable token list headers\n        scope: {\n            type: [\n                \"row\",\n                \"col\",\n                \"rowgroup\",\n                \"colgroup\"\n            ],\n            missing: \"\"\n        },\n        abbr: String,\n        // Obsolete\n        align: String,\n        axis: String,\n        height: String,\n        width: String,\n        ch: {\n            name: \"char\",\n            type: String\n        },\n        chOff: {\n            name: \"charoff\",\n            type: String\n        },\n        noWrap: Boolean,\n        vAlign: String,\n        bgColor: {\n            type: String,\n            treatNullAsEmptyString: true\n        }\n    }\n});\ndefine({\n    tags: [\n        \"col\",\n        \"colgroup\"\n    ],\n    ctor: function HTMLTableColElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        span: {\n            type: \"limited unsigned long with fallback\",\n            default: 1,\n            min: 1\n        },\n        // Obsolete\n        align: String,\n        ch: {\n            name: \"char\",\n            type: String\n        },\n        chOff: {\n            name: \"charoff\",\n            type: String\n        },\n        vAlign: String,\n        width: String\n    }\n});\ndefine({\n    tag: \"table\",\n    ctor: function HTMLTableElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        rows: {\n            get: function() {\n                return this.getElementsByTagName(\"tr\");\n            }\n        }\n    },\n    attributes: {\n        // Obsolete\n        align: String,\n        border: String,\n        frame: String,\n        rules: String,\n        summary: String,\n        width: String,\n        bgColor: {\n            type: String,\n            treatNullAsEmptyString: true\n        },\n        cellPadding: {\n            type: String,\n            treatNullAsEmptyString: true\n        },\n        cellSpacing: {\n            type: String,\n            treatNullAsEmptyString: true\n        }\n    }\n});\ndefine({\n    tag: \"template\",\n    ctor: function HTMLTemplateElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n        this._contentFragment = doc._templateDoc.createDocumentFragment();\n    },\n    props: {\n        content: {\n            get: function() {\n                return this._contentFragment;\n            }\n        },\n        serialize: {\n            value: function() {\n                return this.content.serialize();\n            }\n        }\n    }\n});\ndefine({\n    tag: \"tr\",\n    ctor: function HTMLTableRowElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        cells: {\n            get: function() {\n                return this.querySelectorAll(\"td,th\");\n            }\n        }\n    },\n    attributes: {\n        // Obsolete\n        align: String,\n        ch: {\n            name: \"char\",\n            type: String\n        },\n        chOff: {\n            name: \"charoff\",\n            type: String\n        },\n        vAlign: String,\n        bgColor: {\n            type: String,\n            treatNullAsEmptyString: true\n        }\n    }\n});\ndefine({\n    tags: [\n        \"thead\",\n        \"tfoot\",\n        \"tbody\"\n    ],\n    ctor: function HTMLTableSectionElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        rows: {\n            get: function() {\n                return this.getElementsByTagName(\"tr\");\n            }\n        }\n    },\n    attributes: {\n        // Obsolete\n        align: String,\n        ch: {\n            name: \"char\",\n            type: String\n        },\n        chOff: {\n            name: \"charoff\",\n            type: String\n        },\n        vAlign: String\n    }\n});\ndefine({\n    tag: \"textarea\",\n    ctor: function HTMLTextAreaElement(doc, localName, prefix) {\n        HTMLFormElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        form: formAssociatedProps.form,\n        type: {\n            get: function() {\n                return \"textarea\";\n            }\n        },\n        defaultValue: {\n            get: function() {\n                return this.textContent;\n            },\n            set: function(v) {\n                this.textContent = v;\n            }\n        },\n        value: {\n            get: function() {\n                return this.defaultValue; /* never dirty */ \n            },\n            set: function(v) {\n                // This isn't completely correct: according to the spec, this\n                // should \"dirty\" the API value, and result in\n                // `this.value !== this.defaultValue`.  But for most of what\n                // folks want to do, this implementation should be fine:\n                this.defaultValue = v;\n            }\n        },\n        textLength: {\n            get: function() {\n                return this.value.length;\n            }\n        }\n    },\n    attributes: {\n        autocomplete: String,\n        name: String,\n        disabled: Boolean,\n        autofocus: Boolean,\n        placeholder: String,\n        wrap: String,\n        dirName: String,\n        required: Boolean,\n        readOnly: Boolean,\n        rows: {\n            type: \"limited unsigned long with fallback\",\n            default: 2\n        },\n        cols: {\n            type: \"limited unsigned long with fallback\",\n            default: 20\n        },\n        maxLength: {\n            type: \"unsigned long\",\n            min: 0,\n            setmin: 0,\n            default: -1\n        },\n        minLength: {\n            type: \"unsigned long\",\n            min: 0,\n            setmin: 0,\n            default: -1\n        },\n        inputMode: {\n            type: [\n                \"verbatim\",\n                \"latin\",\n                \"latin-name\",\n                \"latin-prose\",\n                \"full-width-latin\",\n                \"kana\",\n                \"kana-name\",\n                \"katakana\",\n                \"numeric\",\n                \"tel\",\n                \"email\",\n                \"url\"\n            ],\n            missing: \"\"\n        }\n    }\n});\ndefine({\n    tag: \"time\",\n    ctor: function HTMLTimeElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        dateTime: String,\n        pubDate: Boolean\n    }\n});\ndefine({\n    tag: \"title\",\n    ctor: function HTMLTitleElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        text: {\n            get: function() {\n                return this.textContent;\n            }\n        }\n    }\n});\ndefine({\n    tag: \"ul\",\n    ctor: function HTMLUListElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        type: String,\n        // Obsolete\n        compact: Boolean\n    }\n});\ndefine({\n    ctor: function HTMLMediaElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        src: URL,\n        crossOrigin: CORS,\n        preload: {\n            type: [\n                \"metadata\",\n                \"none\",\n                \"auto\",\n                {\n                    value: \"\",\n                    alias: \"auto\"\n                }\n            ],\n            missing: \"auto\"\n        },\n        loop: Boolean,\n        autoplay: Boolean,\n        mediaGroup: String,\n        controls: Boolean,\n        defaultMuted: {\n            name: \"muted\",\n            type: Boolean\n        }\n    }\n});\ndefine({\n    tag: \"audio\",\n    superclass: htmlElements.HTMLMediaElement,\n    ctor: function HTMLAudioElement(doc, localName, prefix) {\n        htmlElements.HTMLMediaElement.call(this, doc, localName, prefix);\n    }\n});\ndefine({\n    tag: \"video\",\n    superclass: htmlElements.HTMLMediaElement,\n    ctor: function HTMLVideoElement(doc, localName, prefix) {\n        htmlElements.HTMLMediaElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        poster: URL,\n        width: {\n            type: \"unsigned long\",\n            min: 0,\n            default: 0\n        },\n        height: {\n            type: \"unsigned long\",\n            min: 0,\n            default: 0\n        }\n    }\n});\ndefine({\n    tag: \"td\",\n    superclass: htmlElements.HTMLTableCellElement,\n    ctor: function HTMLTableDataCellElement(doc, localName, prefix) {\n        htmlElements.HTMLTableCellElement.call(this, doc, localName, prefix);\n    }\n});\ndefine({\n    tag: \"th\",\n    superclass: htmlElements.HTMLTableCellElement,\n    ctor: function HTMLTableHeaderCellElement(doc, localName, prefix) {\n        htmlElements.HTMLTableCellElement.call(this, doc, localName, prefix);\n    }\n});\ndefine({\n    tag: \"frameset\",\n    ctor: function HTMLFrameSetElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    }\n});\ndefine({\n    tag: \"frame\",\n    ctor: function HTMLFrameElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    }\n});\ndefine({\n    tag: \"canvas\",\n    ctor: function HTMLCanvasElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        getContext: {\n            value: utils.nyi\n        },\n        probablySupportsContext: {\n            value: utils.nyi\n        },\n        setContext: {\n            value: utils.nyi\n        },\n        transferControlToProxy: {\n            value: utils.nyi\n        },\n        toDataURL: {\n            value: utils.nyi\n        },\n        toBlob: {\n            value: utils.nyi\n        }\n    },\n    attributes: {\n        width: {\n            type: \"unsigned long\",\n            default: 300\n        },\n        height: {\n            type: \"unsigned long\",\n            default: 150\n        }\n    }\n});\ndefine({\n    tag: \"dialog\",\n    ctor: function HTMLDialogElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        show: {\n            value: utils.nyi\n        },\n        showModal: {\n            value: utils.nyi\n        },\n        close: {\n            value: utils.nyi\n        }\n    },\n    attributes: {\n        open: Boolean,\n        returnValue: String\n    }\n});\ndefine({\n    tag: \"menuitem\",\n    ctor: function HTMLMenuItemElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    props: {\n        // The menuitem's label\n        _label: {\n            get: function() {\n                var val = this._getattr(\"label\");\n                if (val !== null && val !== \"\") {\n                    return val;\n                }\n                val = this.textContent;\n                // Strip and collapse whitespace\n                return val.replace(/[ \\t\\n\\f\\r]+/g, \" \").trim();\n            }\n        },\n        // The menuitem label IDL attribute\n        label: {\n            get: function() {\n                var val = this._getattr(\"label\");\n                if (val !== null) {\n                    return val;\n                }\n                return this._label;\n            },\n            set: function(v) {\n                this._setattr(\"label\", v);\n            }\n        }\n    },\n    attributes: {\n        type: {\n            type: [\n                \"command\",\n                \"checkbox\",\n                \"radio\"\n            ],\n            missing: \"command\"\n        },\n        icon: URL,\n        disabled: Boolean,\n        checked: Boolean,\n        radiogroup: String,\n        default: Boolean\n    }\n});\ndefine({\n    tag: \"source\",\n    ctor: function HTMLSourceElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        srcset: String,\n        sizes: String,\n        media: String,\n        src: URL,\n        type: String\n    }\n});\ndefine({\n    tag: \"track\",\n    ctor: function HTMLTrackElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        src: URL,\n        srclang: String,\n        label: String,\n        default: Boolean,\n        kind: {\n            type: [\n                \"subtitles\",\n                \"captions\",\n                \"descriptions\",\n                \"chapters\",\n                \"metadata\"\n            ],\n            missing: \"subtitles\",\n            invalid: \"metadata\"\n        }\n    },\n    props: {\n        NONE: {\n            get: function() {\n                return 0;\n            }\n        },\n        LOADING: {\n            get: function() {\n                return 1;\n            }\n        },\n        LOADED: {\n            get: function() {\n                return 2;\n            }\n        },\n        ERROR: {\n            get: function() {\n                return 3;\n            }\n        },\n        readyState: {\n            get: utils.nyi\n        },\n        track: {\n            get: utils.nyi\n        }\n    }\n});\ndefine({\n    // obsolete\n    tag: \"font\",\n    ctor: function HTMLFontElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        color: {\n            type: String,\n            treatNullAsEmptyString: true\n        },\n        face: {\n            type: String\n        },\n        size: {\n            type: String\n        }\n    }\n});\ndefine({\n    // obsolete\n    tag: \"dir\",\n    ctor: function HTMLDirectoryElement(doc, localName, prefix) {\n        HTMLElement.call(this, doc, localName, prefix);\n    },\n    attributes: {\n        compact: Boolean\n    }\n});\ndefine({\n    tags: [\n        \"abbr\",\n        \"address\",\n        \"article\",\n        \"aside\",\n        \"b\",\n        \"bdi\",\n        \"bdo\",\n        \"cite\",\n        \"code\",\n        \"dd\",\n        \"dfn\",\n        \"dt\",\n        \"em\",\n        \"figcaption\",\n        \"figure\",\n        \"footer\",\n        \"header\",\n        \"hgroup\",\n        \"i\",\n        \"kbd\",\n        \"main\",\n        \"mark\",\n        \"nav\",\n        \"noscript\",\n        \"rb\",\n        \"rp\",\n        \"rt\",\n        \"rtc\",\n        \"ruby\",\n        \"s\",\n        \"samp\",\n        \"section\",\n        \"small\",\n        \"strong\",\n        \"sub\",\n        \"summary\",\n        \"sup\",\n        \"u\",\n        \"var\",\n        \"wbr\",\n        // Legacy elements\n        \"acronym\",\n        \"basefont\",\n        \"big\",\n        \"center\",\n        \"nobr\",\n        \"noembed\",\n        \"noframes\",\n        \"plaintext\",\n        \"strike\",\n        \"tt\"\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/htmlelts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/impl.js":
/*!**************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/impl.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nexports = module.exports = {\n    CSSStyleDeclaration: __webpack_require__(/*! ./CSSStyleDeclaration */ \"(ssr)/./node_modules/@mathpix/domino/lib/CSSStyleDeclaration.js\"),\n    CharacterData: __webpack_require__(/*! ./CharacterData */ \"(ssr)/./node_modules/@mathpix/domino/lib/CharacterData.js\"),\n    Comment: __webpack_require__(/*! ./Comment */ \"(ssr)/./node_modules/@mathpix/domino/lib/Comment.js\"),\n    DOMException: __webpack_require__(/*! ./DOMException */ \"(ssr)/./node_modules/@mathpix/domino/lib/DOMException.js\"),\n    DOMImplementation: __webpack_require__(/*! ./DOMImplementation */ \"(ssr)/./node_modules/@mathpix/domino/lib/DOMImplementation.js\"),\n    DOMTokenList: __webpack_require__(/*! ./DOMTokenList */ \"(ssr)/./node_modules/@mathpix/domino/lib/DOMTokenList.js\"),\n    Document: __webpack_require__(/*! ./Document */ \"(ssr)/./node_modules/@mathpix/domino/lib/Document.js\"),\n    DocumentFragment: __webpack_require__(/*! ./DocumentFragment */ \"(ssr)/./node_modules/@mathpix/domino/lib/DocumentFragment.js\"),\n    DocumentType: __webpack_require__(/*! ./DocumentType */ \"(ssr)/./node_modules/@mathpix/domino/lib/DocumentType.js\"),\n    Element: __webpack_require__(/*! ./Element */ \"(ssr)/./node_modules/@mathpix/domino/lib/Element.js\"),\n    HTMLParser: __webpack_require__(/*! ./HTMLParser */ \"(ssr)/./node_modules/@mathpix/domino/lib/HTMLParser.js\"),\n    NamedNodeMap: __webpack_require__(/*! ./NamedNodeMap */ \"(ssr)/./node_modules/@mathpix/domino/lib/NamedNodeMap.js\"),\n    Node: __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mathpix/domino/lib/Node.js\"),\n    NodeList: __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeList.js\"),\n    NodeFilter: __webpack_require__(/*! ./NodeFilter */ \"(ssr)/./node_modules/@mathpix/domino/lib/NodeFilter.js\"),\n    ProcessingInstruction: __webpack_require__(/*! ./ProcessingInstruction */ \"(ssr)/./node_modules/@mathpix/domino/lib/ProcessingInstruction.js\"),\n    Text: __webpack_require__(/*! ./Text */ \"(ssr)/./node_modules/@mathpix/domino/lib/Text.js\"),\n    Window: __webpack_require__(/*! ./Window */ \"(ssr)/./node_modules/@mathpix/domino/lib/Window.js\")\n};\nutils.merge(exports, __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@mathpix/domino/lib/events.js\"));\nutils.merge(exports, (__webpack_require__(/*! ./htmlelts */ \"(ssr)/./node_modules/@mathpix/domino/lib/htmlelts.js\").elements));\nutils.merge(exports, (__webpack_require__(/*! ./svg */ \"(ssr)/./node_modules/@mathpix/domino/lib/svg.js\").elements));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9pbXBsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEJDLFVBQVVDLE9BQU9ELE9BQU8sR0FBRztJQUN6QkUscUJBQXFCSCxtQkFBT0EsQ0FBQztJQUM3QkksZUFBZUosbUJBQU9BLENBQUM7SUFDdkJLLFNBQVNMLG1CQUFPQSxDQUFDO0lBQ2pCTSxjQUFjTixtQkFBT0EsQ0FBQztJQUN0Qk8sbUJBQW1CUCxtQkFBT0EsQ0FBQztJQUMzQlEsY0FBY1IsbUJBQU9BLENBQUM7SUFDdEJTLFVBQVVULG1CQUFPQSxDQUFDO0lBQ2xCVSxrQkFBa0JWLG1CQUFPQSxDQUFDO0lBQzFCVyxjQUFjWCxtQkFBT0EsQ0FBQztJQUN0QlksU0FBU1osbUJBQU9BLENBQUM7SUFDakJhLFlBQVliLG1CQUFPQSxDQUFDO0lBQ3BCYyxjQUFjZCxtQkFBT0EsQ0FBQztJQUN0QmUsTUFBTWYsbUJBQU9BLENBQUM7SUFDZGdCLFVBQVVoQixtQkFBT0EsQ0FBQztJQUNsQmlCLFlBQVlqQixtQkFBT0EsQ0FBQztJQUNwQmtCLHVCQUF1QmxCLG1CQUFPQSxDQUFDO0lBQy9CbUIsTUFBTW5CLG1CQUFPQSxDQUFDO0lBQ2RvQixRQUFRcEIsbUJBQU9BLENBQUM7QUFDbEI7QUFFQUQsTUFBTXNCLEtBQUssQ0FBQ3BCLFNBQVNELG1CQUFPQSxDQUFDO0FBQzdCRCxNQUFNc0IsS0FBSyxDQUFDcEIsU0FBU0Qsd0dBQThCO0FBQ25ERCxNQUFNc0IsS0FBSyxDQUFDcEIsU0FBU0QsOEZBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BtYXRocGl4L2RvbWluby9saWIvaW1wbC5qcz82NzBiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1N0eWxlRGVjbGFyYXRpb246IHJlcXVpcmUoJy4vQ1NTU3R5bGVEZWNsYXJhdGlvbicpLFxuICBDaGFyYWN0ZXJEYXRhOiByZXF1aXJlKCcuL0NoYXJhY3RlckRhdGEnKSxcbiAgQ29tbWVudDogcmVxdWlyZSgnLi9Db21tZW50JyksXG4gIERPTUV4Y2VwdGlvbjogcmVxdWlyZSgnLi9ET01FeGNlcHRpb24nKSxcbiAgRE9NSW1wbGVtZW50YXRpb246IHJlcXVpcmUoJy4vRE9NSW1wbGVtZW50YXRpb24nKSxcbiAgRE9NVG9rZW5MaXN0OiByZXF1aXJlKCcuL0RPTVRva2VuTGlzdCcpLFxuICBEb2N1bWVudDogcmVxdWlyZSgnLi9Eb2N1bWVudCcpLFxuICBEb2N1bWVudEZyYWdtZW50OiByZXF1aXJlKCcuL0RvY3VtZW50RnJhZ21lbnQnKSxcbiAgRG9jdW1lbnRUeXBlOiByZXF1aXJlKCcuL0RvY3VtZW50VHlwZScpLFxuICBFbGVtZW50OiByZXF1aXJlKCcuL0VsZW1lbnQnKSxcbiAgSFRNTFBhcnNlcjogcmVxdWlyZSgnLi9IVE1MUGFyc2VyJyksXG4gIE5hbWVkTm9kZU1hcDogcmVxdWlyZSgnLi9OYW1lZE5vZGVNYXAnKSxcbiAgTm9kZTogcmVxdWlyZSgnLi9Ob2RlJyksXG4gIE5vZGVMaXN0OiByZXF1aXJlKCcuL05vZGVMaXN0JyksXG4gIE5vZGVGaWx0ZXI6IHJlcXVpcmUoJy4vTm9kZUZpbHRlcicpLFxuICBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb246IHJlcXVpcmUoJy4vUHJvY2Vzc2luZ0luc3RydWN0aW9uJyksXG4gIFRleHQ6IHJlcXVpcmUoJy4vVGV4dCcpLFxuICBXaW5kb3c6IHJlcXVpcmUoJy4vV2luZG93Jylcbn07XG5cbnV0aWxzLm1lcmdlKGV4cG9ydHMsIHJlcXVpcmUoJy4vZXZlbnRzJykpO1xudXRpbHMubWVyZ2UoZXhwb3J0cywgcmVxdWlyZSgnLi9odG1sZWx0cycpLmVsZW1lbnRzKTtcbnV0aWxzLm1lcmdlKGV4cG9ydHMsIHJlcXVpcmUoJy4vc3ZnJykuZWxlbWVudHMpO1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ2hhcmFjdGVyRGF0YSIsIkNvbW1lbnQiLCJET01FeGNlcHRpb24iLCJET01JbXBsZW1lbnRhdGlvbiIsIkRPTVRva2VuTGlzdCIsIkRvY3VtZW50IiwiRG9jdW1lbnRGcmFnbWVudCIsIkRvY3VtZW50VHlwZSIsIkVsZW1lbnQiLCJIVE1MUGFyc2VyIiwiTmFtZWROb2RlTWFwIiwiTm9kZSIsIk5vZGVMaXN0IiwiTm9kZUZpbHRlciIsIlByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsIlRleHQiLCJXaW5kb3ciLCJtZXJnZSIsImVsZW1lbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar DOMImplementation = __webpack_require__(/*! ./DOMImplementation */ \"(ssr)/./node_modules/@mathpix/domino/lib/DOMImplementation.js\");\nvar HTMLParser = __webpack_require__(/*! ./HTMLParser */ \"(ssr)/./node_modules/@mathpix/domino/lib/HTMLParser.js\");\nvar Window = __webpack_require__(/*! ./Window */ \"(ssr)/./node_modules/@mathpix/domino/lib/Window.js\");\nexports.createDOMImplementation = function() {\n    return new DOMImplementation(null);\n};\nexports.createDocument = function(html, force) {\n    // Previous API couldn't let you pass '' as a document, and that\n    // yields a slightly different document than createHTMLDocument('')\n    // does.  The new `force` parameter lets you pass '' if you want to.\n    if (html || force) {\n        var parser = new HTMLParser();\n        parser.parse(html || \"\", true);\n        return parser.document();\n    }\n    return new DOMImplementation(null).createHTMLDocument(\"\");\n};\nexports.createIncrementalHTMLParser = function() {\n    var parser = new HTMLParser();\n    /** API for incremental parser. */ return {\n        /** Provide an additional chunk of text to be parsed. */ write: function(s) {\n            if (s.length > 0) {\n                parser.parse(s, false, function() {\n                    return true;\n                });\n            }\n        },\n        /**\n         * Signal that we are done providing input text, optionally\n         * providing one last chunk as a parameter.\n         */ end: function(s) {\n            parser.parse(s || \"\", true, function() {\n                return true;\n            });\n        },\n        /**\n         * Performs a chunk of parsing work, returning at the end of\n         * the next token as soon as shouldPauseFunc() returns true.\n         * Returns true iff there is more work to do.\n         *\n         * For example:\n         * ```\n         *  var incrParser = domino.createIncrementalHTMLParser();\n         *  incrParser.end('...long html document...');\n         *  while (true) {\n         *    // Pause every 10ms\n         *    var start = Date.now();\n         *    var pauseIn10 = function() { return (Date.now() - start) >= 10; };\n         *    if (!incrParser.process(pauseIn10)) {\n         *      break;\n         *    }\n         *    ...yield to other tasks, do other housekeeping, etc...\n         *  }\n         * ```\n         */ process: function(shouldPauseFunc) {\n            return parser.parse(\"\", false, shouldPauseFunc);\n        },\n        /**\n         * Returns the result of the incremental parse.  Valid after\n         * `this.end()` has been called and `this.process()` has returned\n         * false.\n         */ document: function() {\n            return parser.document();\n        }\n    };\n};\nexports.createWindow = function(html, address) {\n    var document = exports.createDocument(html);\n    if (address !== undefined) {\n        document._address = address;\n    }\n    return new Window(document);\n};\nexports.impl = __webpack_require__(/*! ./impl */ \"(ssr)/./node_modules/@mathpix/domino/lib/impl.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLG9CQUFvQkMsbUJBQU9BLENBQUM7QUFDaEMsSUFBSUMsYUFBYUQsbUJBQU9BLENBQUM7QUFDekIsSUFBSUUsU0FBU0YsbUJBQU9BLENBQUM7QUFFckJHLCtCQUErQixHQUFHO0lBQ2hDLE9BQU8sSUFBSUosa0JBQWtCO0FBQy9CO0FBRUFJLHNCQUFzQixHQUFHLFNBQVNHLElBQUksRUFBRUMsS0FBSztJQUMzQyxnRUFBZ0U7SUFDaEUsbUVBQW1FO0lBQ25FLG9FQUFvRTtJQUNwRSxJQUFJRCxRQUFRQyxPQUFPO1FBQ2pCLElBQUlDLFNBQVMsSUFBSVA7UUFDakJPLE9BQU9DLEtBQUssQ0FBQ0gsUUFBUSxJQUFJO1FBQ3pCLE9BQU9FLE9BQU9FLFFBQVE7SUFDeEI7SUFDQSxPQUFPLElBQUlYLGtCQUFrQixNQUFNWSxrQkFBa0IsQ0FBQztBQUN4RDtBQUVBUixtQ0FBbUMsR0FBRztJQUNsQyxJQUFJSyxTQUFTLElBQUlQO0lBQ2pCLGdDQUFnQyxHQUNoQyxPQUFPO1FBQ0gsc0RBQXNELEdBQ3REWSxPQUFPLFNBQVNDLENBQUM7WUFDZixJQUFJQSxFQUFFQyxNQUFNLEdBQUcsR0FBRztnQkFDaEJQLE9BQU9DLEtBQUssQ0FBQ0ssR0FBRyxPQUFPO29CQUFhLE9BQU87Z0JBQU07WUFDbkQ7UUFDRjtRQUNBOzs7U0FHQyxHQUNERSxLQUFLLFNBQVNGLENBQUM7WUFDYk4sT0FBT0MsS0FBSyxDQUFDSyxLQUFLLElBQUksTUFBTTtnQkFBYSxPQUFPO1lBQU07UUFDeEQ7UUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQW1CQyxHQUNERyxTQUFTLFNBQVNDLGVBQWU7WUFDL0IsT0FBT1YsT0FBT0MsS0FBSyxDQUFDLElBQUksT0FBT1M7UUFDakM7UUFDQTs7OztTQUlDLEdBQ0RSLFVBQVU7WUFDUixPQUFPRixPQUFPRSxRQUFRO1FBQ3hCO0lBQ0o7QUFDSjtBQUVBUCxvQkFBb0IsR0FBRyxTQUFTRyxJQUFJLEVBQUVjLE9BQU87SUFDM0MsSUFBSVYsV0FBV1AsUUFBUUUsY0FBYyxDQUFDQztJQUN0QyxJQUFJYyxZQUFZQyxXQUFXO1FBQUVYLFNBQVNZLFFBQVEsR0FBR0Y7SUFBUztJQUMxRCxPQUFPLElBQUlsQixPQUFPUTtBQUNwQjtBQUVBUCxvR0FBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9pbmRleC5qcz85ZjIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIERPTUltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9ET01JbXBsZW1lbnRhdGlvbicpO1xudmFyIEhUTUxQYXJzZXIgPSByZXF1aXJlKCcuL0hUTUxQYXJzZXInKTtcbnZhciBXaW5kb3cgPSByZXF1aXJlKCcuL1dpbmRvdycpO1xuXG5leHBvcnRzLmNyZWF0ZURPTUltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgRE9NSW1wbGVtZW50YXRpb24obnVsbCk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZURvY3VtZW50ID0gZnVuY3Rpb24oaHRtbCwgZm9yY2UpIHtcbiAgLy8gUHJldmlvdXMgQVBJIGNvdWxkbid0IGxldCB5b3UgcGFzcyAnJyBhcyBhIGRvY3VtZW50LCBhbmQgdGhhdFxuICAvLyB5aWVsZHMgYSBzbGlnaHRseSBkaWZmZXJlbnQgZG9jdW1lbnQgdGhhbiBjcmVhdGVIVE1MRG9jdW1lbnQoJycpXG4gIC8vIGRvZXMuICBUaGUgbmV3IGBmb3JjZWAgcGFyYW1ldGVyIGxldHMgeW91IHBhc3MgJycgaWYgeW91IHdhbnQgdG8uXG4gIGlmIChodG1sIHx8IGZvcmNlKSB7XG4gICAgdmFyIHBhcnNlciA9IG5ldyBIVE1MUGFyc2VyKCk7XG4gICAgcGFyc2VyLnBhcnNlKGh0bWwgfHwgJycsIHRydWUpO1xuICAgIHJldHVybiBwYXJzZXIuZG9jdW1lbnQoKTtcbiAgfVxuICByZXR1cm4gbmV3IERPTUltcGxlbWVudGF0aW9uKG51bGwpLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlSW5jcmVtZW50YWxIVE1MUGFyc2VyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcnNlciA9IG5ldyBIVE1MUGFyc2VyKCk7XG4gICAgLyoqIEFQSSBmb3IgaW5jcmVtZW50YWwgcGFyc2VyLiAqL1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKiBQcm92aWRlIGFuIGFkZGl0aW9uYWwgY2h1bmsgb2YgdGV4dCB0byBiZSBwYXJzZWQuICovXG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbihzKSB7XG4gICAgICAgICAgaWYgKHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcGFyc2VyLnBhcnNlKHMsIGZhbHNlLCBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpZ25hbCB0aGF0IHdlIGFyZSBkb25lIHByb3ZpZGluZyBpbnB1dCB0ZXh0LCBvcHRpb25hbGx5XG4gICAgICAgICAqIHByb3ZpZGluZyBvbmUgbGFzdCBjaHVuayBhcyBhIHBhcmFtZXRlci5cbiAgICAgICAgICovXG4gICAgICAgIGVuZDogZnVuY3Rpb24ocykge1xuICAgICAgICAgIHBhcnNlci5wYXJzZShzIHx8ICcnLCB0cnVlLCBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogUGVyZm9ybXMgYSBjaHVuayBvZiBwYXJzaW5nIHdvcmssIHJldHVybmluZyBhdCB0aGUgZW5kIG9mXG4gICAgICAgICAqIHRoZSBuZXh0IHRva2VuIGFzIHNvb24gYXMgc2hvdWxkUGF1c2VGdW5jKCkgcmV0dXJucyB0cnVlLlxuICAgICAgICAgKiBSZXR1cm5zIHRydWUgaWZmIHRoZXJlIGlzIG1vcmUgd29yayB0byBkby5cbiAgICAgICAgICpcbiAgICAgICAgICogRm9yIGV4YW1wbGU6XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiAgdmFyIGluY3JQYXJzZXIgPSBkb21pbm8uY3JlYXRlSW5jcmVtZW50YWxIVE1MUGFyc2VyKCk7XG4gICAgICAgICAqICBpbmNyUGFyc2VyLmVuZCgnLi4ubG9uZyBodG1sIGRvY3VtZW50Li4uJyk7XG4gICAgICAgICAqICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgKiAgICAvLyBQYXVzZSBldmVyeSAxMG1zXG4gICAgICAgICAqICAgIHZhciBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgICAqICAgIHZhciBwYXVzZUluMTAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIChEYXRlLm5vdygpIC0gc3RhcnQpID49IDEwOyB9O1xuICAgICAgICAgKiAgICBpZiAoIWluY3JQYXJzZXIucHJvY2VzcyhwYXVzZUluMTApKSB7XG4gICAgICAgICAqICAgICAgYnJlYWs7XG4gICAgICAgICAqICAgIH1cbiAgICAgICAgICogICAgLi4ueWllbGQgdG8gb3RoZXIgdGFza3MsIGRvIG90aGVyIGhvdXNla2VlcGluZywgZXRjLi4uXG4gICAgICAgICAqICB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgcHJvY2VzczogZnVuY3Rpb24oc2hvdWxkUGF1c2VGdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5wYXJzZSgnJywgZmFsc2UsIHNob3VsZFBhdXNlRnVuYyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGluY3JlbWVudGFsIHBhcnNlLiAgVmFsaWQgYWZ0ZXJcbiAgICAgICAgICogYHRoaXMuZW5kKClgIGhhcyBiZWVuIGNhbGxlZCBhbmQgYHRoaXMucHJvY2VzcygpYCBoYXMgcmV0dXJuZWRcbiAgICAgICAgICogZmFsc2UuXG4gICAgICAgICAqL1xuICAgICAgICBkb2N1bWVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5kb2N1bWVudCgpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG5leHBvcnRzLmNyZWF0ZVdpbmRvdyA9IGZ1bmN0aW9uKGh0bWwsIGFkZHJlc3MpIHtcbiAgdmFyIGRvY3VtZW50ID0gZXhwb3J0cy5jcmVhdGVEb2N1bWVudChodG1sKTtcbiAgaWYgKGFkZHJlc3MgIT09IHVuZGVmaW5lZCkgeyBkb2N1bWVudC5fYWRkcmVzcyA9IGFkZHJlc3M7IH1cbiAgcmV0dXJuIG5ldyBXaW5kb3coZG9jdW1lbnQpO1xufTtcblxuZXhwb3J0cy5pbXBsID0gcmVxdWlyZSgnLi9pbXBsJyk7XG4iXSwibmFtZXMiOlsiRE9NSW1wbGVtZW50YXRpb24iLCJyZXF1aXJlIiwiSFRNTFBhcnNlciIsIldpbmRvdyIsImV4cG9ydHMiLCJjcmVhdGVET01JbXBsZW1lbnRhdGlvbiIsImNyZWF0ZURvY3VtZW50IiwiaHRtbCIsImZvcmNlIiwicGFyc2VyIiwicGFyc2UiLCJkb2N1bWVudCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImNyZWF0ZUluY3JlbWVudGFsSFRNTFBhcnNlciIsIndyaXRlIiwicyIsImxlbmd0aCIsImVuZCIsInByb2Nlc3MiLCJzaG91bGRQYXVzZUZ1bmMiLCJjcmVhdGVXaW5kb3ciLCJhZGRyZXNzIiwidW5kZWZpbmVkIiwiX2FkZHJlc3MiLCJpbXBsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/select.js":
/*!****************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/select.js ***!
  \****************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n/* jshint eqnull: true */ /**\n * Zest (https://github.com/chjj/zest)\n * A css selector engine.\n * Copyright (c) 2011-2012, Christopher Jeffrey. (MIT Licensed)\n * Domino version based on Zest v0.1.3 with bugfixes applied.\n */ /**\n * Helpers\n */ var window = Object.create(null, {\n    location: {\n        get: function() {\n            throw new Error(\"window.location is not supported.\");\n        }\n    }\n});\nvar compareDocumentPosition = function(a, b) {\n    return a.compareDocumentPosition(b);\n};\nvar order = function(a, b) {\n    /* jshint bitwise: false */ return compareDocumentPosition(a, b) & 2 ? 1 : -1;\n};\nvar next = function(el) {\n    while((el = el.nextSibling) && el.nodeType !== 1);\n    return el;\n};\nvar prev = function(el) {\n    while((el = el.previousSibling) && el.nodeType !== 1);\n    return el;\n};\nvar child = function(el) {\n    /*jshint -W084 */ if (el = el.firstChild) {\n        while(el.nodeType !== 1 && (el = el.nextSibling));\n    }\n    return el;\n};\nvar lastChild = function(el) {\n    /*jshint -W084 */ if (el = el.lastChild) {\n        while(el.nodeType !== 1 && (el = el.previousSibling));\n    }\n    return el;\n};\nvar parentIsElement = function(n) {\n    if (!n.parentNode) {\n        return false;\n    }\n    var nodeType = n.parentNode.nodeType;\n    // The root `html` element can be a first- or last-child, too.\n    return nodeType === 1 || nodeType === 9;\n};\nvar unquote = function(str) {\n    if (!str) return str;\n    var ch = str[0];\n    if (ch === '\"' || ch === \"'\") {\n        if (str[str.length - 1] === ch) {\n            str = str.slice(1, -1);\n        } else {\n            // bad string.\n            str = str.slice(1);\n        }\n        return str.replace(rules.str_escape, function(s) {\n            var m = /^\\\\(?:([0-9A-Fa-f]+)|([\\r\\n\\f]+))/.exec(s);\n            if (!m) {\n                return s.slice(1);\n            }\n            if (m[2]) {\n                return \"\"; /* escaped newlines are ignored in strings. */ \n            }\n            var cp = parseInt(m[1], 16);\n            return String.fromCodePoint ? String.fromCodePoint(cp) : // Not all JavaScript implementations have String.fromCodePoint yet.\n            String.fromCharCode(cp);\n        });\n    } else if (rules.ident.test(str)) {\n        return decodeid(str);\n    } else {\n        // NUMBER, PERCENTAGE, DIMENSION, etc\n        return str;\n    }\n};\nvar decodeid = function(str) {\n    return str.replace(rules.escape, function(s) {\n        var m = /^\\\\([0-9A-Fa-f]+)/.exec(s);\n        if (!m) {\n            return s[1];\n        }\n        var cp = parseInt(m[1], 16);\n        return String.fromCodePoint ? String.fromCodePoint(cp) : // Not all JavaScript implementations have String.fromCodePoint yet.\n        String.fromCharCode(cp);\n    });\n};\nvar indexOf = function() {\n    if (Array.prototype.indexOf) {\n        return Array.prototype.indexOf;\n    }\n    return function(obj, item) {\n        var i = this.length;\n        while(i--){\n            if (this[i] === item) return i;\n        }\n        return -1;\n    };\n}();\nvar makeInside = function(start, end) {\n    var regex = rules.inside.source.replace(/</g, start).replace(/>/g, end);\n    return new RegExp(regex);\n};\nvar replace = function(regex, name, val) {\n    regex = regex.source;\n    regex = regex.replace(name, val.source || val);\n    return new RegExp(regex);\n};\nvar truncateUrl = function(url, num) {\n    return url.replace(/^(?:\\w+:\\/\\/|\\/+)/, \"\").replace(/(?:\\/+|\\/*#.*?)$/, \"\").split(\"/\", num).join(\"/\");\n};\n/**\n * Handle `nth` Selectors\n */ var parseNth = function(param_, test) {\n    var param = param_.replace(/\\s+/g, \"\"), cap;\n    if (param === \"even\") {\n        param = \"2n+0\";\n    } else if (param === \"odd\") {\n        param = \"2n+1\";\n    } else if (param.indexOf(\"n\") === -1) {\n        param = \"0n\" + param;\n    }\n    cap = /^([+-])?(\\d+)?n([+-])?(\\d+)?$/.exec(param);\n    return {\n        group: cap[1] === \"-\" ? -(cap[2] || 1) : +(cap[2] || 1),\n        offset: cap[4] ? cap[3] === \"-\" ? -cap[4] : +cap[4] : 0\n    };\n};\nvar nth = function(param_, test, last) {\n    var param = parseNth(param_), group = param.group, offset = param.offset, find = !last ? child : lastChild, advance = !last ? next : prev;\n    return function(el) {\n        if (!parentIsElement(el)) return;\n        var rel = find(el.parentNode), pos = 0;\n        while(rel){\n            if (test(rel, el)) pos++;\n            if (rel === el) {\n                pos -= offset;\n                return group && pos ? pos % group === 0 && pos < 0 === group < 0 : !pos;\n            }\n            rel = advance(rel);\n        }\n    };\n};\n/**\n * Simple Selectors\n */ var selectors = {\n    \"*\": function() {\n        if (false) {}\n        return function() {\n            return true;\n        };\n    }(),\n    \"type\": function(type) {\n        type = type.toLowerCase();\n        return function(el) {\n            return el.nodeName.toLowerCase() === type;\n        };\n    },\n    \"attr\": function(key, op, val, i) {\n        op = operators[op];\n        return function(el) {\n            var attr;\n            switch(key){\n                case \"for\":\n                    attr = el.htmlFor;\n                    break;\n                case \"class\":\n                    // className is '' when non-existent\n                    // getAttribute('class') is null\n                    attr = el.className;\n                    if (attr === \"\" && el.getAttribute(\"class\") == null) {\n                        attr = null;\n                    }\n                    break;\n                case \"href\":\n                case \"src\":\n                    attr = el.getAttribute(key, 2);\n                    break;\n                case \"title\":\n                    // getAttribute('title') can be '' when non-existent sometimes?\n                    attr = el.getAttribute(\"title\") || null;\n                    break;\n                // careful with attributes with special getter functions\n                case \"id\":\n                case \"lang\":\n                case \"dir\":\n                case \"accessKey\":\n                case \"hidden\":\n                case \"tabIndex\":\n                case \"style\":\n                    if (el.getAttribute) {\n                        attr = el.getAttribute(key);\n                        break;\n                    }\n                /* falls through */ default:\n                    if (el.hasAttribute && !el.hasAttribute(key)) {\n                        break;\n                    }\n                    attr = el[key] != null ? el[key] : el.getAttribute && el.getAttribute(key);\n                    break;\n            }\n            if (attr == null) return;\n            attr = attr + \"\";\n            if (i) {\n                attr = attr.toLowerCase();\n                val = val.toLowerCase();\n            }\n            return op(attr, val);\n        };\n    },\n    \":first-child\": function(el) {\n        return !prev(el) && parentIsElement(el);\n    },\n    \":last-child\": function(el) {\n        return !next(el) && parentIsElement(el);\n    },\n    \":only-child\": function(el) {\n        return !prev(el) && !next(el) && parentIsElement(el);\n    },\n    \":nth-child\": function(param, last) {\n        return nth(param, function() {\n            return true;\n        }, last);\n    },\n    \":nth-last-child\": function(param) {\n        return selectors[\":nth-child\"](param, true);\n    },\n    \":root\": function(el) {\n        return el.ownerDocument.documentElement === el;\n    },\n    \":empty\": function(el) {\n        return !el.firstChild;\n    },\n    \":not\": function(sel) {\n        var test = compileGroup(sel);\n        return function(el) {\n            return !test(el);\n        };\n    },\n    \":first-of-type\": function(el) {\n        if (!parentIsElement(el)) return;\n        var type = el.nodeName;\n        /*jshint -W084 */ while(el = prev(el)){\n            if (el.nodeName === type) return;\n        }\n        return true;\n    },\n    \":last-of-type\": function(el) {\n        if (!parentIsElement(el)) return;\n        var type = el.nodeName;\n        /*jshint -W084 */ while(el = next(el)){\n            if (el.nodeName === type) return;\n        }\n        return true;\n    },\n    \":only-of-type\": function(el) {\n        return selectors[\":first-of-type\"](el) && selectors[\":last-of-type\"](el);\n    },\n    \":nth-of-type\": function(param, last) {\n        return nth(param, function(rel, el) {\n            return rel.nodeName === el.nodeName;\n        }, last);\n    },\n    \":nth-last-of-type\": function(param) {\n        return selectors[\":nth-of-type\"](param, true);\n    },\n    \":checked\": function(el) {\n        return !!(el.checked || el.selected);\n    },\n    \":indeterminate\": function(el) {\n        return !selectors[\":checked\"](el);\n    },\n    \":enabled\": function(el) {\n        return !el.disabled && el.type !== \"hidden\";\n    },\n    \":disabled\": function(el) {\n        return !!el.disabled;\n    },\n    \":target\": function(el) {\n        return el.id === window.location.hash.substring(1);\n    },\n    \":focus\": function(el) {\n        return el === el.ownerDocument.activeElement;\n    },\n    \":is\": function(sel) {\n        return compileGroup(sel);\n    },\n    // :matches is an older name for :is; see\n    // https://github.com/w3c/csswg-drafts/issues/3258\n    \":matches\": function(sel) {\n        return selectors[\":is\"](sel);\n    },\n    \":nth-match\": function(param, last) {\n        var args = param.split(/\\s*,\\s*/), arg = args.shift(), test = compileGroup(args.join(\",\"));\n        return nth(arg, test, last);\n    },\n    \":nth-last-match\": function(param) {\n        return selectors[\":nth-match\"](param, true);\n    },\n    \":links-here\": function(el) {\n        return el + \"\" === window.location + \"\";\n    },\n    \":lang\": function(param) {\n        return function(el) {\n            while(el){\n                if (el.lang) return el.lang.indexOf(param) === 0;\n                el = el.parentNode;\n            }\n        };\n    },\n    \":dir\": function(param) {\n        return function(el) {\n            while(el){\n                if (el.dir) return el.dir === param;\n                el = el.parentNode;\n            }\n        };\n    },\n    \":scope\": function(el, con) {\n        var context = con || el.ownerDocument;\n        if (context.nodeType === 9) {\n            return el === context.documentElement;\n        }\n        return el === context;\n    },\n    \":any-link\": function(el) {\n        return typeof el.href === \"string\";\n    },\n    \":local-link\": function(el) {\n        if (el.nodeName) {\n            return el.href && el.host === window.location.host;\n        }\n        var param = +el + 1;\n        return function(el) {\n            if (!el.href) return;\n            var url = window.location + \"\", href = el + \"\";\n            return truncateUrl(url, param) === truncateUrl(href, param);\n        };\n    },\n    \":default\": function(el) {\n        return !!el.defaultSelected;\n    },\n    \":valid\": function(el) {\n        return el.willValidate || el.validity && el.validity.valid;\n    },\n    \":invalid\": function(el) {\n        return !selectors[\":valid\"](el);\n    },\n    \":in-range\": function(el) {\n        return el.value > el.min && el.value <= el.max;\n    },\n    \":out-of-range\": function(el) {\n        return !selectors[\":in-range\"](el);\n    },\n    \":required\": function(el) {\n        return !!el.required;\n    },\n    \":optional\": function(el) {\n        return !el.required;\n    },\n    \":read-only\": function(el) {\n        if (el.readOnly) return true;\n        var attr = el.getAttribute(\"contenteditable\"), prop = el.contentEditable, name = el.nodeName.toLowerCase();\n        name = name !== \"input\" && name !== \"textarea\";\n        return (name || el.disabled) && attr == null && prop !== \"true\";\n    },\n    \":read-write\": function(el) {\n        return !selectors[\":read-only\"](el);\n    },\n    \":hover\": function() {\n        throw new Error(\":hover is not supported.\");\n    },\n    \":active\": function() {\n        throw new Error(\":active is not supported.\");\n    },\n    \":link\": function() {\n        throw new Error(\":link is not supported.\");\n    },\n    \":visited\": function() {\n        throw new Error(\":visited is not supported.\");\n    },\n    \":column\": function() {\n        throw new Error(\":column is not supported.\");\n    },\n    \":nth-column\": function() {\n        throw new Error(\":nth-column is not supported.\");\n    },\n    \":nth-last-column\": function() {\n        throw new Error(\":nth-last-column is not supported.\");\n    },\n    \":current\": function() {\n        throw new Error(\":current is not supported.\");\n    },\n    \":past\": function() {\n        throw new Error(\":past is not supported.\");\n    },\n    \":future\": function() {\n        throw new Error(\":future is not supported.\");\n    },\n    // Non-standard, for compatibility purposes.\n    \":contains\": function(param) {\n        return function(el) {\n            var text = el.innerText || el.textContent || el.value || \"\";\n            return text.indexOf(param) !== -1;\n        };\n    },\n    \":has\": function(param) {\n        return function(el) {\n            return find(param, el).length > 0;\n        };\n    }\n};\n/**\n * Attribute Operators\n */ var operators = {\n    \"-\": function() {\n        return true;\n    },\n    \"=\": function(attr, val) {\n        return attr === val;\n    },\n    \"*=\": function(attr, val) {\n        return attr.indexOf(val) !== -1;\n    },\n    \"~=\": function(attr, val) {\n        var i, s, f, l;\n        for(s = 0; true; s = i + 1){\n            i = attr.indexOf(val, s);\n            if (i === -1) return false;\n            f = attr[i - 1];\n            l = attr[i + val.length];\n            if ((!f || f === \" \") && (!l || l === \" \")) return true;\n        }\n    },\n    \"|=\": function(attr, val) {\n        var i = attr.indexOf(val), l;\n        if (i !== 0) return;\n        l = attr[i + val.length];\n        return l === \"-\" || !l;\n    },\n    \"^=\": function(attr, val) {\n        return attr.indexOf(val) === 0;\n    },\n    \"$=\": function(attr, val) {\n        var i = attr.lastIndexOf(val);\n        return i !== -1 && i + val.length === attr.length;\n    },\n    // non-standard\n    \"!=\": function(attr, val) {\n        return attr !== val;\n    }\n};\n/**\n * Combinator Logic\n */ var combinators = {\n    \" \": function(test) {\n        return function(el) {\n            /*jshint -W084 */ while(el = el.parentNode){\n                if (test(el)) return el;\n            }\n        };\n    },\n    \">\": function(test) {\n        return function(el) {\n            /*jshint -W084 */ if (el = el.parentNode) {\n                return test(el) && el;\n            }\n        };\n    },\n    \"+\": function(test) {\n        return function(el) {\n            /*jshint -W084 */ if (el = prev(el)) {\n                return test(el) && el;\n            }\n        };\n    },\n    \"~\": function(test) {\n        return function(el) {\n            /*jshint -W084 */ while(el = prev(el)){\n                if (test(el)) return el;\n            }\n        };\n    },\n    \"noop\": function(test) {\n        return function(el) {\n            return test(el) && el;\n        };\n    },\n    \"ref\": function(test, name) {\n        var node;\n        function ref(el) {\n            var doc = el.ownerDocument, nodes = doc.getElementsByTagName(\"*\"), i = nodes.length;\n            while(i--){\n                node = nodes[i];\n                if (ref.test(el)) {\n                    node = null;\n                    return true;\n                }\n            }\n            node = null;\n        }\n        ref.combinator = function(el) {\n            if (!node || !node.getAttribute) return;\n            var attr = node.getAttribute(name) || \"\";\n            if (attr[0] === \"#\") attr = attr.substring(1);\n            if (attr === el.id && test(node)) {\n                return node;\n            }\n        };\n        return ref;\n    }\n};\n/**\n * Grammar\n */ var rules = {\n    escape: /\\\\(?:[^0-9A-Fa-f\\r\\n]|[0-9A-Fa-f]{1,6}[\\r\\n\\t ]?)/g,\n    str_escape: /(escape)|\\\\(\\n|\\r\\n?|\\f)/g,\n    nonascii: /[\\u00A0-\\uFFFF]/,\n    cssid: /(?:(?!-?[0-9])(?:escape|nonascii|[-_a-zA-Z0-9])+)/,\n    qname: /^ *(cssid|\\*)/,\n    simple: /^(?:([.#]cssid)|pseudo|attr)/,\n    ref: /^ *\\/(cssid)\\/ */,\n    combinator: /^(?: +([^ \\w*.#\\\\]) +|( )+|([^ \\w*.#\\\\]))(?! *$)/,\n    attr: /^\\[(cssid)(?:([^\\w]?=)(inside))?\\]/,\n    pseudo: /^(:cssid)(?:\\((inside)\\))?/,\n    inside: /(?:\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|<[^\"'>]*>|\\\\[\"'>]|[^\"'>])*/,\n    ident: /^(cssid)$/\n};\nrules.cssid = replace(rules.cssid, \"nonascii\", rules.nonascii);\nrules.cssid = replace(rules.cssid, \"escape\", rules.escape);\nrules.qname = replace(rules.qname, \"cssid\", rules.cssid);\nrules.simple = replace(rules.simple, \"cssid\", rules.cssid);\nrules.ref = replace(rules.ref, \"cssid\", rules.cssid);\nrules.attr = replace(rules.attr, \"cssid\", rules.cssid);\nrules.pseudo = replace(rules.pseudo, \"cssid\", rules.cssid);\nrules.inside = replace(rules.inside, \"[^\\\"'>]*\", rules.inside);\nrules.attr = replace(rules.attr, \"inside\", makeInside(\"\\\\[\", \"\\\\]\"));\nrules.pseudo = replace(rules.pseudo, \"inside\", makeInside(\"\\\\(\", \"\\\\)\"));\nrules.simple = replace(rules.simple, \"pseudo\", rules.pseudo);\nrules.simple = replace(rules.simple, \"attr\", rules.attr);\nrules.ident = replace(rules.ident, \"cssid\", rules.cssid);\nrules.str_escape = replace(rules.str_escape, \"escape\", rules.escape);\n/**\n * Compiling\n */ var compile = function(sel_) {\n    var sel = sel_.replace(/^\\s+|\\s+$/g, \"\"), test, filter = [], buff = [], subject, qname, cap, op, ref;\n    /*jshint -W084 */ while(sel){\n        if (cap = rules.qname.exec(sel)) {\n            sel = sel.substring(cap[0].length);\n            qname = decodeid(cap[1]);\n            buff.push(tok(qname, true));\n        } else if (cap = rules.simple.exec(sel)) {\n            sel = sel.substring(cap[0].length);\n            qname = \"*\";\n            buff.push(tok(qname, true));\n            buff.push(tok(cap));\n        } else {\n            throw new SyntaxError(\"Invalid selector.\");\n        }\n        while(cap = rules.simple.exec(sel)){\n            sel = sel.substring(cap[0].length);\n            buff.push(tok(cap));\n        }\n        if (sel[0] === \"!\") {\n            sel = sel.substring(1);\n            subject = makeSubject();\n            subject.qname = qname;\n            buff.push(subject.simple);\n        }\n        if (cap = rules.ref.exec(sel)) {\n            sel = sel.substring(cap[0].length);\n            ref = combinators.ref(makeSimple(buff), decodeid(cap[1]));\n            filter.push(ref.combinator);\n            buff = [];\n            continue;\n        }\n        if (cap = rules.combinator.exec(sel)) {\n            sel = sel.substring(cap[0].length);\n            op = cap[1] || cap[2] || cap[3];\n            if (op === \",\") {\n                filter.push(combinators.noop(makeSimple(buff)));\n                break;\n            }\n        } else {\n            op = \"noop\";\n        }\n        if (!combinators[op]) {\n            throw new SyntaxError(\"Bad combinator.\");\n        }\n        filter.push(combinators[op](makeSimple(buff)));\n        buff = [];\n    }\n    test = makeTest(filter);\n    test.qname = qname;\n    test.sel = sel;\n    if (subject) {\n        subject.lname = test.qname;\n        subject.test = test;\n        subject.qname = subject.qname;\n        subject.sel = test.sel;\n        test = subject;\n    }\n    if (ref) {\n        ref.test = test;\n        ref.qname = test.qname;\n        ref.sel = test.sel;\n        test = ref;\n    }\n    return test;\n};\nvar tok = function(cap, qname) {\n    // qname\n    if (qname) {\n        return cap === \"*\" ? selectors[\"*\"] : selectors.type(cap);\n    }\n    // class/id\n    if (cap[1]) {\n        return cap[1][0] === \".\" ? selectors.attr(\"class\", \"~=\", decodeid(cap[1].substring(1)), false) : selectors.attr(\"id\", \"=\", decodeid(cap[1].substring(1)), false);\n    }\n    // pseudo-name\n    // inside-pseudo\n    if (cap[2]) {\n        return cap[3] ? selectors[decodeid(cap[2])](unquote(cap[3])) : selectors[decodeid(cap[2])];\n    }\n    // attr name\n    // attr op\n    // attr value\n    if (cap[4]) {\n        var value = cap[6];\n        var i = /[\"'\\s]\\s*I$/i.test(value);\n        if (i) {\n            value = value.replace(/\\s*I$/i, \"\");\n        }\n        return selectors.attr(decodeid(cap[4]), cap[5] || \"-\", unquote(value), i);\n    }\n    throw new SyntaxError(\"Unknown Selector.\");\n};\nvar makeSimple = function(func) {\n    var l = func.length, i;\n    // Potentially make sure\n    // `el` is truthy.\n    if (l < 2) return func[0];\n    return function(el) {\n        if (!el) return;\n        for(i = 0; i < l; i++){\n            if (!func[i](el)) return;\n        }\n        return true;\n    };\n};\nvar makeTest = function(func) {\n    if (func.length < 2) {\n        return function(el) {\n            return !!func[0](el);\n        };\n    }\n    return function(el) {\n        var i = func.length;\n        while(i--){\n            if (!(el = func[i](el))) return;\n        }\n        return true;\n    };\n};\nvar makeSubject = function() {\n    var target;\n    function subject(el) {\n        var node = el.ownerDocument, scope = node.getElementsByTagName(subject.lname), i = scope.length;\n        while(i--){\n            if (subject.test(scope[i]) && target === el) {\n                target = null;\n                return true;\n            }\n        }\n        target = null;\n    }\n    subject.simple = function(el) {\n        target = el;\n        return true;\n    };\n    return subject;\n};\nvar compileGroup = function(sel) {\n    var test = compile(sel), tests = [\n        test\n    ];\n    while(test.sel){\n        test = compile(test.sel);\n        tests.push(test);\n    }\n    if (tests.length < 2) return test;\n    return function(el) {\n        var l = tests.length, i = 0;\n        for(; i < l; i++){\n            if (tests[i](el)) return true;\n        }\n    };\n};\n/**\n * Selection\n */ var find = function(sel, node) {\n    var results = [], test = compile(sel), scope = node.getElementsByTagName(test.qname), i = 0, el;\n    /*jshint -W084 */ while(el = scope[i++]){\n        if (test(el)) results.push(el);\n    }\n    if (test.sel) {\n        while(test.sel){\n            test = compile(test.sel);\n            scope = node.getElementsByTagName(test.qname);\n            i = 0;\n            /*jshint -W084 */ while(el = scope[i++]){\n                if (test(el) && indexOf.call(results, el) === -1) {\n                    results.push(el);\n                }\n            }\n        }\n        results.sort(order);\n    }\n    return results;\n};\n/**\n * Expose\n */ module.exports = exports = function(sel, context) {\n    /* when context isn't a DocumentFragment and the selector is simple: */ var id, r;\n    if (context.nodeType !== 11 && sel.indexOf(\" \") === -1) {\n        if (sel[0] === \"#\" && context.rooted && /^#[A-Z_][-A-Z0-9_]*$/i.test(sel)) {\n            if (context.doc._hasMultipleElementsWithId) {\n                id = sel.substring(1);\n                if (!context.doc._hasMultipleElementsWithId(id)) {\n                    r = context.doc.getElementById(id);\n                    return r ? [\n                        r\n                    ] : [];\n                }\n            }\n        }\n        if (sel[0] === \".\" && /^\\.\\w+$/.test(sel)) {\n            return context.getElementsByClassName(sel.substring(1));\n        }\n        if (/^\\w+$/.test(sel)) {\n            return context.getElementsByTagName(sel);\n        }\n    }\n    /* do things the hard/slow way */ return find(sel, context);\n};\nexports.selectors = selectors;\nexports.operators = operators;\nexports.combinators = combinators;\nexports.matches = function(el, sel) {\n    var test = {\n        sel: sel\n    };\n    do {\n        test = compile(test.sel);\n        if (test(el)) {\n            return true;\n        }\n    }while (test.sel);\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9zZWxlY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYix1QkFBdUIsR0FDdkI7Ozs7O0NBS0MsR0FFRDs7Q0FFQyxHQUVELElBQUlBLFNBQVNDLE9BQU9DLE1BQU0sQ0FBQyxNQUFNO0lBQy9CQyxVQUFVO1FBQUVDLEtBQUs7WUFDZixNQUFNLElBQUlDLE1BQU07UUFDbEI7SUFBRTtBQUNKO0FBRUEsSUFBSUMsMEJBQTBCLFNBQVNDLENBQUMsRUFBRUMsQ0FBQztJQUNyQyxPQUFPRCxFQUFFRCx1QkFBdUIsQ0FBQ0U7QUFDdkM7QUFFQSxJQUFJQyxRQUFRLFNBQVNGLENBQUMsRUFBRUMsQ0FBQztJQUN2Qix5QkFBeUIsR0FDekIsT0FBT0Ysd0JBQXdCQyxHQUFHQyxLQUFLLElBQUksSUFBSSxDQUFDO0FBQ2xEO0FBRUEsSUFBSUUsT0FBTyxTQUFTQyxFQUFFO0lBQ3BCLE1BQU8sQ0FBQ0EsS0FBS0EsR0FBR0MsV0FBVyxLQUNqQkQsR0FBR0UsUUFBUSxLQUFLO0lBQzFCLE9BQU9GO0FBQ1Q7QUFFQSxJQUFJRyxPQUFPLFNBQVNILEVBQUU7SUFDcEIsTUFBTyxDQUFDQSxLQUFLQSxHQUFHSSxlQUFlLEtBQ3JCSixHQUFHRSxRQUFRLEtBQUs7SUFDMUIsT0FBT0Y7QUFDVDtBQUVBLElBQUlLLFFBQVEsU0FBU0wsRUFBRTtJQUNyQixlQUFlLEdBQ2YsSUFBSUEsS0FBS0EsR0FBR00sVUFBVSxFQUFFO1FBQ3RCLE1BQU9OLEdBQUdFLFFBQVEsS0FBSyxLQUNaRixDQUFBQSxLQUFLQSxHQUFHQyxXQUFXO0lBQ2hDO0lBQ0EsT0FBT0Q7QUFDVDtBQUVBLElBQUlPLFlBQVksU0FBU1AsRUFBRTtJQUN6QixlQUFlLEdBQ2YsSUFBSUEsS0FBS0EsR0FBR08sU0FBUyxFQUFFO1FBQ3JCLE1BQU9QLEdBQUdFLFFBQVEsS0FBSyxLQUNaRixDQUFBQSxLQUFLQSxHQUFHSSxlQUFlO0lBQ3BDO0lBQ0EsT0FBT0o7QUFDVDtBQUVBLElBQUlRLGtCQUFrQixTQUFTQyxDQUFDO0lBQzlCLElBQUksQ0FBQ0EsRUFBRUMsVUFBVSxFQUFFO1FBQUUsT0FBTztJQUFPO0lBQ25DLElBQUlSLFdBQVdPLEVBQUVDLFVBQVUsQ0FBQ1IsUUFBUTtJQUNwQyw4REFBOEQ7SUFDOUQsT0FBT0EsYUFBYSxLQUFLQSxhQUFhO0FBQ3hDO0FBRUEsSUFBSVMsVUFBVSxTQUFTQyxHQUFHO0lBQ3hCLElBQUksQ0FBQ0EsS0FBSyxPQUFPQTtJQUNqQixJQUFJQyxLQUFLRCxHQUFHLENBQUMsRUFBRTtJQUNmLElBQUlDLE9BQU8sT0FBT0EsT0FBTyxLQUFNO1FBQzdCLElBQUlELEdBQUcsQ0FBQ0EsSUFBSUUsTUFBTSxHQUFDLEVBQUUsS0FBS0QsSUFBSTtZQUM1QkQsTUFBTUEsSUFBSUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN0QixPQUFPO1lBQ0wsY0FBYztZQUNkSCxNQUFNQSxJQUFJRyxLQUFLLENBQUM7UUFDbEI7UUFDQSxPQUFPSCxJQUFJSSxPQUFPLENBQUNDLE1BQU1DLFVBQVUsRUFBRSxTQUFTQyxDQUFDO1lBQzdDLElBQUlDLElBQUksb0NBQW9DQyxJQUFJLENBQUNGO1lBQ2pELElBQUksQ0FBQ0MsR0FBRztnQkFBRSxPQUFPRCxFQUFFSixLQUFLLENBQUM7WUFBSTtZQUM3QixJQUFJSyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUFFLE9BQU8sSUFBSSw0Q0FBNEM7WUFBRztZQUN0RSxJQUFJRSxLQUFLQyxTQUFTSCxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3hCLE9BQU9JLE9BQU9DLGFBQWEsR0FBR0QsT0FBT0MsYUFBYSxDQUFDSCxNQUNqRCxvRUFBb0U7WUFDcEVFLE9BQU9FLFlBQVksQ0FBQ0o7UUFDeEI7SUFDRixPQUFPLElBQUlMLE1BQU1VLEtBQUssQ0FBQ0MsSUFBSSxDQUFDaEIsTUFBTTtRQUNoQyxPQUFPaUIsU0FBU2pCO0lBQ2xCLE9BQU87UUFDTCxxQ0FBcUM7UUFDckMsT0FBT0E7SUFDVDtBQUNGO0FBRUEsSUFBSWlCLFdBQVcsU0FBU2pCLEdBQUc7SUFDekIsT0FBT0EsSUFBSUksT0FBTyxDQUFDQyxNQUFNYSxNQUFNLEVBQUUsU0FBU1gsQ0FBQztRQUN6QyxJQUFJQyxJQUFJLG9CQUFvQkMsSUFBSSxDQUFDRjtRQUNqQyxJQUFJLENBQUNDLEdBQUc7WUFBRSxPQUFPRCxDQUFDLENBQUMsRUFBRTtRQUFFO1FBQ3ZCLElBQUlHLEtBQUtDLFNBQVNILENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDeEIsT0FBT0ksT0FBT0MsYUFBYSxHQUFHRCxPQUFPQyxhQUFhLENBQUNILE1BQ2pELG9FQUFvRTtRQUNwRUUsT0FBT0UsWUFBWSxDQUFDSjtJQUN4QjtBQUNGO0FBRUEsSUFBSVMsVUFBVTtJQUNaLElBQUlDLE1BQU1DLFNBQVMsQ0FBQ0YsT0FBTyxFQUFFO1FBQzNCLE9BQU9DLE1BQU1DLFNBQVMsQ0FBQ0YsT0FBTztJQUNoQztJQUNBLE9BQU8sU0FBU0csR0FBRyxFQUFFQyxJQUFJO1FBQ3ZCLElBQUlDLElBQUksSUFBSSxDQUFDdEIsTUFBTTtRQUNuQixNQUFPc0IsSUFBSztZQUNWLElBQUksSUFBSSxDQUFDQSxFQUFFLEtBQUtELE1BQU0sT0FBT0M7UUFDL0I7UUFDQSxPQUFPLENBQUM7SUFDVjtBQUNGO0FBRUEsSUFBSUMsYUFBYSxTQUFTQyxLQUFLLEVBQUVDLEdBQUc7SUFDbEMsSUFBSUMsUUFBUXZCLE1BQU13QixNQUFNLENBQUNDLE1BQU0sQ0FDNUIxQixPQUFPLENBQUMsTUFBTXNCLE9BQ2R0QixPQUFPLENBQUMsTUFBTXVCO0lBRWpCLE9BQU8sSUFBSUksT0FBT0g7QUFDcEI7QUFFQSxJQUFJeEIsVUFBVSxTQUFTd0IsS0FBSyxFQUFFSSxJQUFJLEVBQUVDLEdBQUc7SUFDckNMLFFBQVFBLE1BQU1FLE1BQU07SUFDcEJGLFFBQVFBLE1BQU14QixPQUFPLENBQUM0QixNQUFNQyxJQUFJSCxNQUFNLElBQUlHO0lBQzFDLE9BQU8sSUFBSUYsT0FBT0g7QUFDcEI7QUFFQSxJQUFJTSxjQUFjLFNBQVNDLEdBQUcsRUFBRUMsR0FBRztJQUNqQyxPQUFPRCxJQUNKL0IsT0FBTyxDQUFDLHFCQUFxQixJQUM3QkEsT0FBTyxDQUFDLG9CQUFvQixJQUM1QmlDLEtBQUssQ0FBQyxLQUFLRCxLQUNYRSxJQUFJLENBQUM7QUFDVjtBQUVBOztDQUVDLEdBRUQsSUFBSUMsV0FBVyxTQUFTQyxNQUFNLEVBQUV4QixJQUFJO0lBQ2xDLElBQUl5QixRQUFRRCxPQUFPcEMsT0FBTyxDQUFDLFFBQVEsS0FDL0JzQztJQUVKLElBQUlELFVBQVUsUUFBUTtRQUNwQkEsUUFBUTtJQUNWLE9BQU8sSUFBSUEsVUFBVSxPQUFPO1FBQzFCQSxRQUFRO0lBQ1YsT0FBTyxJQUFJQSxNQUFNdEIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHO1FBQ3BDc0IsUUFBUSxPQUFPQTtJQUNqQjtJQUVBQyxNQUFNLGdDQUFnQ2pDLElBQUksQ0FBQ2dDO0lBRTNDLE9BQU87UUFDTEUsT0FBT0QsR0FBRyxDQUFDLEVBQUUsS0FBSyxNQUNkLENBQUVBLENBQUFBLEdBQUcsQ0FBQyxFQUFFLElBQUksS0FDWixDQUFFQSxDQUFBQSxHQUFHLENBQUMsRUFBRSxJQUFJO1FBQ2hCRSxRQUFRRixHQUFHLENBQUMsRUFBRSxHQUNUQSxHQUFHLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQ0EsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDQSxHQUFHLENBQUMsRUFBRSxHQUNuQztJQUNOO0FBQ0Y7QUFFQSxJQUFJRyxNQUFNLFNBQVNMLE1BQU0sRUFBRXhCLElBQUksRUFBRThCLElBQUk7SUFDbkMsSUFBSUwsUUFBUUYsU0FBU0MsU0FDakJHLFFBQVFGLE1BQU1FLEtBQUssRUFDbkJDLFNBQVNILE1BQU1HLE1BQU0sRUFDckJHLE9BQU8sQ0FBQ0QsT0FBT3JELFFBQVFFLFdBQ3ZCcUQsVUFBVSxDQUFDRixPQUFPM0QsT0FBT0k7SUFFN0IsT0FBTyxTQUFTSCxFQUFFO1FBQ2hCLElBQUksQ0FBQ1EsZ0JBQWdCUixLQUFLO1FBRTFCLElBQUk2RCxNQUFNRixLQUFLM0QsR0FBR1UsVUFBVSxHQUN4Qm9ELE1BQU07UUFFVixNQUFPRCxJQUFLO1lBQ1YsSUFBSWpDLEtBQUtpQyxLQUFLN0QsS0FBSzhEO1lBQ25CLElBQUlELFFBQVE3RCxJQUFJO2dCQUNkOEQsT0FBT047Z0JBQ1AsT0FBT0QsU0FBU08sTUFDWixNQUFPUCxVQUFXLEtBQU1PLE1BQU0sTUFBTVAsUUFBUSxJQUM1QyxDQUFDTztZQUNQO1lBQ0FELE1BQU1ELFFBQVFDO1FBQ2hCO0lBQ0Y7QUFDRjtBQUVBOztDQUVDLEdBRUQsSUFBSUUsWUFBWTtJQUNkLEtBQUs7UUFDSCxJQUFJLEtBQUssRUFJRixFQUlOO1FBQ0QsT0FBTztZQUNMLE9BQU87UUFDVDtJQUNGO0lBQ0EsUUFBUSxTQUFTQyxJQUFJO1FBQ25CQSxPQUFPQSxLQUFLQyxXQUFXO1FBQ3ZCLE9BQU8sU0FBU2pFLEVBQUU7WUFDaEIsT0FBT0EsR0FBR2tFLFFBQVEsQ0FBQ0QsV0FBVyxPQUFPRDtRQUN2QztJQUNGO0lBQ0EsUUFBUSxTQUFTRyxHQUFHLEVBQUVDLEVBQUUsRUFBRXZCLEdBQUcsRUFBRVQsQ0FBQztRQUM5QmdDLEtBQUtDLFNBQVMsQ0FBQ0QsR0FBRztRQUNsQixPQUFPLFNBQVNwRSxFQUFFO1lBQ2hCLElBQUlzRTtZQUNKLE9BQVFIO2dCQUNOLEtBQUs7b0JBQ0hHLE9BQU90RSxHQUFHdUUsT0FBTztvQkFDakI7Z0JBQ0YsS0FBSztvQkFDSCxvQ0FBb0M7b0JBQ3BDLGdDQUFnQztvQkFDaENELE9BQU90RSxHQUFHd0UsU0FBUztvQkFDbkIsSUFBSUYsU0FBUyxNQUFNdEUsR0FBR3lFLFlBQVksQ0FBQyxZQUFZLE1BQU07d0JBQ25ESCxPQUFPO29CQUNUO29CQUNBO2dCQUNGLEtBQUs7Z0JBQ0wsS0FBSztvQkFDSEEsT0FBT3RFLEdBQUd5RSxZQUFZLENBQUNOLEtBQUs7b0JBQzVCO2dCQUNGLEtBQUs7b0JBQ0gsK0RBQStEO29CQUMvREcsT0FBT3RFLEdBQUd5RSxZQUFZLENBQUMsWUFBWTtvQkFDbkM7Z0JBQ0Ysd0RBQXdEO2dCQUN4RCxLQUFLO2dCQUNMLEtBQUs7Z0JBQ0wsS0FBSztnQkFDTCxLQUFLO2dCQUNMLEtBQUs7Z0JBQ0wsS0FBSztnQkFDTCxLQUFLO29CQUNILElBQUl6RSxHQUFHeUUsWUFBWSxFQUFFO3dCQUNuQkgsT0FBT3RFLEdBQUd5RSxZQUFZLENBQUNOO3dCQUN2QjtvQkFDRjtnQkFDRixpQkFBaUIsR0FDakI7b0JBQ0UsSUFBSW5FLEdBQUcwRSxZQUFZLElBQUksQ0FBQzFFLEdBQUcwRSxZQUFZLENBQUNQLE1BQU07d0JBQzVDO29CQUNGO29CQUNBRyxPQUFPdEUsRUFBRSxDQUFDbUUsSUFBSSxJQUFJLE9BQ2RuRSxFQUFFLENBQUNtRSxJQUFJLEdBQ1BuRSxHQUFHeUUsWUFBWSxJQUFJekUsR0FBR3lFLFlBQVksQ0FBQ047b0JBQ3ZDO1lBQ0o7WUFDQSxJQUFJRyxRQUFRLE1BQU07WUFDbEJBLE9BQU9BLE9BQU87WUFDZCxJQUFJbEMsR0FBRztnQkFDTGtDLE9BQU9BLEtBQUtMLFdBQVc7Z0JBQ3ZCcEIsTUFBTUEsSUFBSW9CLFdBQVc7WUFDdkI7WUFDQSxPQUFPRyxHQUFHRSxNQUFNekI7UUFDbEI7SUFDRjtJQUNBLGdCQUFnQixTQUFTN0MsRUFBRTtRQUN6QixPQUFPLENBQUNHLEtBQUtILE9BQU9RLGdCQUFnQlI7SUFDdEM7SUFDQSxlQUFlLFNBQVNBLEVBQUU7UUFDeEIsT0FBTyxDQUFDRCxLQUFLQyxPQUFPUSxnQkFBZ0JSO0lBQ3RDO0lBQ0EsZUFBZSxTQUFTQSxFQUFFO1FBQ3hCLE9BQU8sQ0FBQ0csS0FBS0gsT0FBTyxDQUFDRCxLQUFLQyxPQUFPUSxnQkFBZ0JSO0lBQ25EO0lBQ0EsY0FBYyxTQUFTcUQsS0FBSyxFQUFFSyxJQUFJO1FBQ2hDLE9BQU9ELElBQUlKLE9BQU87WUFDaEIsT0FBTztRQUNULEdBQUdLO0lBQ0w7SUFDQSxtQkFBbUIsU0FBU0wsS0FBSztRQUMvQixPQUFPVSxTQUFTLENBQUMsYUFBYSxDQUFDVixPQUFPO0lBQ3hDO0lBQ0EsU0FBUyxTQUFTckQsRUFBRTtRQUNsQixPQUFPQSxHQUFHMkUsYUFBYSxDQUFDQyxlQUFlLEtBQUs1RTtJQUM5QztJQUNBLFVBQVUsU0FBU0EsRUFBRTtRQUNuQixPQUFPLENBQUNBLEdBQUdNLFVBQVU7SUFDdkI7SUFDQSxRQUFRLFNBQVN1RSxHQUFHO1FBQ2xCLElBQUlqRCxPQUFPa0QsYUFBYUQ7UUFDeEIsT0FBTyxTQUFTN0UsRUFBRTtZQUNoQixPQUFPLENBQUM0QixLQUFLNUI7UUFDZjtJQUNGO0lBQ0Esa0JBQWtCLFNBQVNBLEVBQUU7UUFDM0IsSUFBSSxDQUFDUSxnQkFBZ0JSLEtBQUs7UUFDMUIsSUFBSWdFLE9BQU9oRSxHQUFHa0UsUUFBUTtRQUN0QixlQUFlLEdBQ2YsTUFBT2xFLEtBQUtHLEtBQUtILElBQUs7WUFDcEIsSUFBSUEsR0FBR2tFLFFBQVEsS0FBS0YsTUFBTTtRQUM1QjtRQUNBLE9BQU87SUFDVDtJQUNBLGlCQUFpQixTQUFTaEUsRUFBRTtRQUMxQixJQUFJLENBQUNRLGdCQUFnQlIsS0FBSztRQUMxQixJQUFJZ0UsT0FBT2hFLEdBQUdrRSxRQUFRO1FBQ3RCLGVBQWUsR0FDZixNQUFPbEUsS0FBS0QsS0FBS0MsSUFBSztZQUNwQixJQUFJQSxHQUFHa0UsUUFBUSxLQUFLRixNQUFNO1FBQzVCO1FBQ0EsT0FBTztJQUNUO0lBQ0EsaUJBQWlCLFNBQVNoRSxFQUFFO1FBQzFCLE9BQU8rRCxTQUFTLENBQUMsaUJBQWlCLENBQUMvRCxPQUM1QitELFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQy9EO0lBQ3BDO0lBQ0EsZ0JBQWdCLFNBQVNxRCxLQUFLLEVBQUVLLElBQUk7UUFDbEMsT0FBT0QsSUFBSUosT0FBTyxTQUFTUSxHQUFHLEVBQUU3RCxFQUFFO1lBQ2hDLE9BQU82RCxJQUFJSyxRQUFRLEtBQUtsRSxHQUFHa0UsUUFBUTtRQUNyQyxHQUFHUjtJQUNMO0lBQ0EscUJBQXFCLFNBQVNMLEtBQUs7UUFDakMsT0FBT1UsU0FBUyxDQUFDLGVBQWUsQ0FBQ1YsT0FBTztJQUMxQztJQUNBLFlBQVksU0FBU3JELEVBQUU7UUFDckIsT0FBTyxDQUFDLENBQUVBLENBQUFBLEdBQUcrRSxPQUFPLElBQUkvRSxHQUFHZ0YsUUFBUTtJQUNyQztJQUNBLGtCQUFrQixTQUFTaEYsRUFBRTtRQUMzQixPQUFPLENBQUMrRCxTQUFTLENBQUMsV0FBVyxDQUFDL0Q7SUFDaEM7SUFDQSxZQUFZLFNBQVNBLEVBQUU7UUFDckIsT0FBTyxDQUFDQSxHQUFHaUYsUUFBUSxJQUFJakYsR0FBR2dFLElBQUksS0FBSztJQUNyQztJQUNBLGFBQWEsU0FBU2hFLEVBQUU7UUFDdEIsT0FBTyxDQUFDLENBQUNBLEdBQUdpRixRQUFRO0lBQ3RCO0lBQ0EsV0FBVyxTQUFTakYsRUFBRTtRQUNwQixPQUFPQSxHQUFHa0YsRUFBRSxLQUFLN0YsT0FBT0csUUFBUSxDQUFDMkYsSUFBSSxDQUFDQyxTQUFTLENBQUM7SUFDbEQ7SUFDQSxVQUFVLFNBQVNwRixFQUFFO1FBQ25CLE9BQU9BLE9BQU9BLEdBQUcyRSxhQUFhLENBQUNVLGFBQWE7SUFDOUM7SUFDQSxPQUFPLFNBQVNSLEdBQUc7UUFDakIsT0FBT0MsYUFBYUQ7SUFDdEI7SUFDQSx5Q0FBeUM7SUFDekMsa0RBQWtEO0lBQ2xELFlBQVksU0FBU0EsR0FBRztRQUN0QixPQUFPZCxTQUFTLENBQUMsTUFBTSxDQUFDYztJQUMxQjtJQUNBLGNBQWMsU0FBU3hCLEtBQUssRUFBRUssSUFBSTtRQUNoQyxJQUFJNEIsT0FBT2pDLE1BQU1KLEtBQUssQ0FBQyxZQUNuQnNDLE1BQU1ELEtBQUtFLEtBQUssSUFDaEI1RCxPQUFPa0QsYUFBYVEsS0FBS3BDLElBQUksQ0FBQztRQUVsQyxPQUFPTyxJQUFJOEIsS0FBSzNELE1BQU04QjtJQUN4QjtJQUNBLG1CQUFtQixTQUFTTCxLQUFLO1FBQy9CLE9BQU9VLFNBQVMsQ0FBQyxhQUFhLENBQUNWLE9BQU87SUFDeEM7SUFDQSxlQUFlLFNBQVNyRCxFQUFFO1FBQ3hCLE9BQU9BLEtBQUssT0FBT1gsT0FBT0csUUFBUSxHQUFHO0lBQ3ZDO0lBQ0EsU0FBUyxTQUFTNkQsS0FBSztRQUNyQixPQUFPLFNBQVNyRCxFQUFFO1lBQ2hCLE1BQU9BLEdBQUk7Z0JBQ1QsSUFBSUEsR0FBR3lGLElBQUksRUFBRSxPQUFPekYsR0FBR3lGLElBQUksQ0FBQzFELE9BQU8sQ0FBQ3NCLFdBQVc7Z0JBQy9DckQsS0FBS0EsR0FBR1UsVUFBVTtZQUNwQjtRQUNGO0lBQ0Y7SUFDQSxRQUFRLFNBQVMyQyxLQUFLO1FBQ3BCLE9BQU8sU0FBU3JELEVBQUU7WUFDaEIsTUFBT0EsR0FBSTtnQkFDVCxJQUFJQSxHQUFHMEYsR0FBRyxFQUFFLE9BQU8xRixHQUFHMEYsR0FBRyxLQUFLckM7Z0JBQzlCckQsS0FBS0EsR0FBR1UsVUFBVTtZQUNwQjtRQUNGO0lBQ0Y7SUFDQSxVQUFVLFNBQVNWLEVBQUUsRUFBRTJGLEdBQUc7UUFDeEIsSUFBSUMsVUFBVUQsT0FBTzNGLEdBQUcyRSxhQUFhO1FBQ3JDLElBQUlpQixRQUFRMUYsUUFBUSxLQUFLLEdBQUc7WUFDMUIsT0FBT0YsT0FBTzRGLFFBQVFoQixlQUFlO1FBQ3ZDO1FBQ0EsT0FBTzVFLE9BQU80RjtJQUNoQjtJQUNBLGFBQWEsU0FBUzVGLEVBQUU7UUFDdEIsT0FBTyxPQUFPQSxHQUFHNkYsSUFBSSxLQUFLO0lBQzVCO0lBQ0EsZUFBZSxTQUFTN0YsRUFBRTtRQUN4QixJQUFJQSxHQUFHa0UsUUFBUSxFQUFFO1lBQ2YsT0FBT2xFLEdBQUc2RixJQUFJLElBQUk3RixHQUFHOEYsSUFBSSxLQUFLekcsT0FBT0csUUFBUSxDQUFDc0csSUFBSTtRQUNwRDtRQUNBLElBQUl6QyxRQUFRLENBQUNyRCxLQUFLO1FBQ2xCLE9BQU8sU0FBU0EsRUFBRTtZQUNoQixJQUFJLENBQUNBLEdBQUc2RixJQUFJLEVBQUU7WUFFZCxJQUFJOUMsTUFBTTFELE9BQU9HLFFBQVEsR0FBRyxJQUN4QnFHLE9BQU83RixLQUFLO1lBRWhCLE9BQU84QyxZQUFZQyxLQUFLTSxXQUFXUCxZQUFZK0MsTUFBTXhDO1FBQ3ZEO0lBQ0Y7SUFDQSxZQUFZLFNBQVNyRCxFQUFFO1FBQ3JCLE9BQU8sQ0FBQyxDQUFDQSxHQUFHK0YsZUFBZTtJQUM3QjtJQUNBLFVBQVUsU0FBUy9GLEVBQUU7UUFDbkIsT0FBT0EsR0FBR2dHLFlBQVksSUFBS2hHLEdBQUdpRyxRQUFRLElBQUlqRyxHQUFHaUcsUUFBUSxDQUFDQyxLQUFLO0lBQzdEO0lBQ0EsWUFBWSxTQUFTbEcsRUFBRTtRQUNyQixPQUFPLENBQUMrRCxTQUFTLENBQUMsU0FBUyxDQUFDL0Q7SUFDOUI7SUFDQSxhQUFhLFNBQVNBLEVBQUU7UUFDdEIsT0FBT0EsR0FBR21HLEtBQUssR0FBR25HLEdBQUdvRyxHQUFHLElBQUlwRyxHQUFHbUcsS0FBSyxJQUFJbkcsR0FBR3FHLEdBQUc7SUFDaEQ7SUFDQSxpQkFBaUIsU0FBU3JHLEVBQUU7UUFDMUIsT0FBTyxDQUFDK0QsU0FBUyxDQUFDLFlBQVksQ0FBQy9EO0lBQ2pDO0lBQ0EsYUFBYSxTQUFTQSxFQUFFO1FBQ3RCLE9BQU8sQ0FBQyxDQUFDQSxHQUFHc0csUUFBUTtJQUN0QjtJQUNBLGFBQWEsU0FBU3RHLEVBQUU7UUFDdEIsT0FBTyxDQUFDQSxHQUFHc0csUUFBUTtJQUNyQjtJQUNBLGNBQWMsU0FBU3RHLEVBQUU7UUFDdkIsSUFBSUEsR0FBR3VHLFFBQVEsRUFBRSxPQUFPO1FBRXhCLElBQUlqQyxPQUFPdEUsR0FBR3lFLFlBQVksQ0FBQyxvQkFDdkIrQixPQUFPeEcsR0FBR3lHLGVBQWUsRUFDekI3RCxPQUFPNUMsR0FBR2tFLFFBQVEsQ0FBQ0QsV0FBVztRQUVsQ3JCLE9BQU9BLFNBQVMsV0FBV0EsU0FBUztRQUVwQyxPQUFPLENBQUNBLFFBQVE1QyxHQUFHaUYsUUFBUSxLQUFLWCxRQUFRLFFBQVFrQyxTQUFTO0lBQzNEO0lBQ0EsZUFBZSxTQUFTeEcsRUFBRTtRQUN4QixPQUFPLENBQUMrRCxTQUFTLENBQUMsYUFBYSxDQUFDL0Q7SUFDbEM7SUFDQSxVQUFVO1FBQ1IsTUFBTSxJQUFJTixNQUFNO0lBQ2xCO0lBQ0EsV0FBVztRQUNULE1BQU0sSUFBSUEsTUFBTTtJQUNsQjtJQUNBLFNBQVM7UUFDUCxNQUFNLElBQUlBLE1BQU07SUFDbEI7SUFDQSxZQUFZO1FBQ1YsTUFBTSxJQUFJQSxNQUFNO0lBQ2xCO0lBQ0EsV0FBVztRQUNULE1BQU0sSUFBSUEsTUFBTTtJQUNsQjtJQUNBLGVBQWU7UUFDYixNQUFNLElBQUlBLE1BQU07SUFDbEI7SUFDQSxvQkFBb0I7UUFDbEIsTUFBTSxJQUFJQSxNQUFNO0lBQ2xCO0lBQ0EsWUFBWTtRQUNWLE1BQU0sSUFBSUEsTUFBTTtJQUNsQjtJQUNBLFNBQVM7UUFDUCxNQUFNLElBQUlBLE1BQU07SUFDbEI7SUFDQSxXQUFXO1FBQ1QsTUFBTSxJQUFJQSxNQUFNO0lBQ2xCO0lBQ0EsNENBQTRDO0lBQzVDLGFBQWEsU0FBUzJELEtBQUs7UUFDekIsT0FBTyxTQUFTckQsRUFBRTtZQUNoQixJQUFJMEcsT0FBTzFHLEdBQUcyRyxTQUFTLElBQUkzRyxHQUFHNEcsV0FBVyxJQUFJNUcsR0FBR21HLEtBQUssSUFBSTtZQUN6RCxPQUFPTyxLQUFLM0UsT0FBTyxDQUFDc0IsV0FBVyxDQUFDO1FBQ2xDO0lBQ0Y7SUFDQSxRQUFRLFNBQVNBLEtBQUs7UUFDcEIsT0FBTyxTQUFTckQsRUFBRTtZQUNoQixPQUFPMkQsS0FBS04sT0FBT3JELElBQUljLE1BQU0sR0FBRztRQUNsQztJQUNGO0FBSUY7QUFFQTs7Q0FFQyxHQUVELElBQUl1RCxZQUFZO0lBQ2QsS0FBSztRQUNILE9BQU87SUFDVDtJQUNBLEtBQUssU0FBU0MsSUFBSSxFQUFFekIsR0FBRztRQUNyQixPQUFPeUIsU0FBU3pCO0lBQ2xCO0lBQ0EsTUFBTSxTQUFTeUIsSUFBSSxFQUFFekIsR0FBRztRQUN0QixPQUFPeUIsS0FBS3ZDLE9BQU8sQ0FBQ2MsU0FBUyxDQUFDO0lBQ2hDO0lBQ0EsTUFBTSxTQUFTeUIsSUFBSSxFQUFFekIsR0FBRztRQUN0QixJQUFJVCxHQUNBakIsR0FDQTBGLEdBQ0FDO1FBRUosSUFBSzNGLElBQUksR0FBRyxNQUFNQSxJQUFJaUIsSUFBSSxFQUFHO1lBQzNCQSxJQUFJa0MsS0FBS3ZDLE9BQU8sQ0FBQ2MsS0FBSzFCO1lBQ3RCLElBQUlpQixNQUFNLENBQUMsR0FBRyxPQUFPO1lBQ3JCeUUsSUFBSXZDLElBQUksQ0FBQ2xDLElBQUksRUFBRTtZQUNmMEUsSUFBSXhDLElBQUksQ0FBQ2xDLElBQUlTLElBQUkvQixNQUFNLENBQUM7WUFDeEIsSUFBSSxDQUFDLENBQUMrRixLQUFLQSxNQUFNLEdBQUUsS0FBTyxFQUFDQyxLQUFLQSxNQUFNLEdBQUUsR0FBSSxPQUFPO1FBQ3JEO0lBQ0Y7SUFDQSxNQUFNLFNBQVN4QyxJQUFJLEVBQUV6QixHQUFHO1FBQ3RCLElBQUlULElBQUlrQyxLQUFLdkMsT0FBTyxDQUFDYyxNQUNqQmlFO1FBRUosSUFBSTFFLE1BQU0sR0FBRztRQUNiMEUsSUFBSXhDLElBQUksQ0FBQ2xDLElBQUlTLElBQUkvQixNQUFNLENBQUM7UUFFeEIsT0FBT2dHLE1BQU0sT0FBTyxDQUFDQTtJQUN2QjtJQUNBLE1BQU0sU0FBU3hDLElBQUksRUFBRXpCLEdBQUc7UUFDdEIsT0FBT3lCLEtBQUt2QyxPQUFPLENBQUNjLFNBQVM7SUFDL0I7SUFDQSxNQUFNLFNBQVN5QixJQUFJLEVBQUV6QixHQUFHO1FBQ3RCLElBQUlULElBQUlrQyxLQUFLeUMsV0FBVyxDQUFDbEU7UUFDekIsT0FBT1QsTUFBTSxDQUFDLEtBQUtBLElBQUlTLElBQUkvQixNQUFNLEtBQUt3RCxLQUFLeEQsTUFBTTtJQUNuRDtJQUNBLGVBQWU7SUFDZixNQUFNLFNBQVN3RCxJQUFJLEVBQUV6QixHQUFHO1FBQ3RCLE9BQU95QixTQUFTekI7SUFDbEI7QUFDRjtBQUVBOztDQUVDLEdBRUQsSUFBSW1FLGNBQWM7SUFDaEIsS0FBSyxTQUFTcEYsSUFBSTtRQUNoQixPQUFPLFNBQVM1QixFQUFFO1lBQ2hCLGVBQWUsR0FDZixNQUFPQSxLQUFLQSxHQUFHVSxVQUFVLENBQUU7Z0JBQ3pCLElBQUlrQixLQUFLNUIsS0FBSyxPQUFPQTtZQUN2QjtRQUNGO0lBQ0Y7SUFDQSxLQUFLLFNBQVM0QixJQUFJO1FBQ2hCLE9BQU8sU0FBUzVCLEVBQUU7WUFDaEIsZUFBZSxHQUNmLElBQUlBLEtBQUtBLEdBQUdVLFVBQVUsRUFBRTtnQkFDdEIsT0FBT2tCLEtBQUs1QixPQUFPQTtZQUNyQjtRQUNGO0lBQ0Y7SUFDQSxLQUFLLFNBQVM0QixJQUFJO1FBQ2hCLE9BQU8sU0FBUzVCLEVBQUU7WUFDaEIsZUFBZSxHQUNmLElBQUlBLEtBQUtHLEtBQUtILEtBQUs7Z0JBQ2pCLE9BQU80QixLQUFLNUIsT0FBT0E7WUFDckI7UUFDRjtJQUNGO0lBQ0EsS0FBSyxTQUFTNEIsSUFBSTtRQUNoQixPQUFPLFNBQVM1QixFQUFFO1lBQ2hCLGVBQWUsR0FDZixNQUFPQSxLQUFLRyxLQUFLSCxJQUFLO2dCQUNwQixJQUFJNEIsS0FBSzVCLEtBQUssT0FBT0E7WUFDdkI7UUFDRjtJQUNGO0lBQ0EsUUFBUSxTQUFTNEIsSUFBSTtRQUNuQixPQUFPLFNBQVM1QixFQUFFO1lBQ2hCLE9BQU80QixLQUFLNUIsT0FBT0E7UUFDckI7SUFDRjtJQUNBLE9BQU8sU0FBUzRCLElBQUksRUFBRWdCLElBQUk7UUFDeEIsSUFBSXFFO1FBRUosU0FBU0MsSUFBSWxILEVBQUU7WUFDYixJQUFJbUgsTUFBTW5ILEdBQUcyRSxhQUFhLEVBQ3RCeUMsUUFBUUQsSUFBSUUsb0JBQW9CLENBQUMsTUFDakNqRixJQUFJZ0YsTUFBTXRHLE1BQU07WUFFcEIsTUFBT3NCLElBQUs7Z0JBQ1Y2RSxPQUFPRyxLQUFLLENBQUNoRixFQUFFO2dCQUNmLElBQUk4RSxJQUFJdEYsSUFBSSxDQUFDNUIsS0FBSztvQkFDaEJpSCxPQUFPO29CQUNQLE9BQU87Z0JBQ1Q7WUFDRjtZQUVBQSxPQUFPO1FBQ1Q7UUFFQUMsSUFBSUksVUFBVSxHQUFHLFNBQVN0SCxFQUFFO1lBQzFCLElBQUksQ0FBQ2lILFFBQVEsQ0FBQ0EsS0FBS3hDLFlBQVksRUFBRTtZQUVqQyxJQUFJSCxPQUFPMkMsS0FBS3hDLFlBQVksQ0FBQzdCLFNBQVM7WUFDdEMsSUFBSTBCLElBQUksQ0FBQyxFQUFFLEtBQUssS0FBS0EsT0FBT0EsS0FBS2MsU0FBUyxDQUFDO1lBRTNDLElBQUlkLFNBQVN0RSxHQUFHa0YsRUFBRSxJQUFJdEQsS0FBS3FGLE9BQU87Z0JBQ2hDLE9BQU9BO1lBQ1Q7UUFDRjtRQUVBLE9BQU9DO0lBQ1Q7QUFDRjtBQUVBOztDQUVDLEdBRUQsSUFBSWpHLFFBQVE7SUFDVmEsUUFBUTtJQUNSWixZQUFZO0lBQ1pxRyxVQUFVO0lBQ1ZDLE9BQU87SUFDUEMsT0FBTztJQUNQQyxRQUFRO0lBQ1JSLEtBQUs7SUFDTEksWUFBWTtJQUNaaEQsTUFBTTtJQUNOcUQsUUFBUTtJQUNSbEYsUUFBUTtJQUNSZCxPQUFPO0FBQ1Q7QUFFQVYsTUFBTXVHLEtBQUssR0FBR3hHLFFBQVFDLE1BQU11RyxLQUFLLEVBQUUsWUFBWXZHLE1BQU1zRyxRQUFRO0FBQzdEdEcsTUFBTXVHLEtBQUssR0FBR3hHLFFBQVFDLE1BQU11RyxLQUFLLEVBQUUsVUFBVXZHLE1BQU1hLE1BQU07QUFDekRiLE1BQU13RyxLQUFLLEdBQUd6RyxRQUFRQyxNQUFNd0csS0FBSyxFQUFFLFNBQVN4RyxNQUFNdUcsS0FBSztBQUN2RHZHLE1BQU15RyxNQUFNLEdBQUcxRyxRQUFRQyxNQUFNeUcsTUFBTSxFQUFFLFNBQVN6RyxNQUFNdUcsS0FBSztBQUN6RHZHLE1BQU1pRyxHQUFHLEdBQUdsRyxRQUFRQyxNQUFNaUcsR0FBRyxFQUFFLFNBQVNqRyxNQUFNdUcsS0FBSztBQUNuRHZHLE1BQU1xRCxJQUFJLEdBQUd0RCxRQUFRQyxNQUFNcUQsSUFBSSxFQUFFLFNBQVNyRCxNQUFNdUcsS0FBSztBQUNyRHZHLE1BQU0wRyxNQUFNLEdBQUczRyxRQUFRQyxNQUFNMEcsTUFBTSxFQUFFLFNBQVMxRyxNQUFNdUcsS0FBSztBQUN6RHZHLE1BQU13QixNQUFNLEdBQUd6QixRQUFRQyxNQUFNd0IsTUFBTSxFQUFFLFlBQVl4QixNQUFNd0IsTUFBTTtBQUM3RHhCLE1BQU1xRCxJQUFJLEdBQUd0RCxRQUFRQyxNQUFNcUQsSUFBSSxFQUFFLFVBQVVqQyxXQUFXLE9BQU87QUFDN0RwQixNQUFNMEcsTUFBTSxHQUFHM0csUUFBUUMsTUFBTTBHLE1BQU0sRUFBRSxVQUFVdEYsV0FBVyxPQUFPO0FBQ2pFcEIsTUFBTXlHLE1BQU0sR0FBRzFHLFFBQVFDLE1BQU15RyxNQUFNLEVBQUUsVUFBVXpHLE1BQU0wRyxNQUFNO0FBQzNEMUcsTUFBTXlHLE1BQU0sR0FBRzFHLFFBQVFDLE1BQU15RyxNQUFNLEVBQUUsUUFBUXpHLE1BQU1xRCxJQUFJO0FBQ3ZEckQsTUFBTVUsS0FBSyxHQUFHWCxRQUFRQyxNQUFNVSxLQUFLLEVBQUUsU0FBU1YsTUFBTXVHLEtBQUs7QUFDdkR2RyxNQUFNQyxVQUFVLEdBQUdGLFFBQVFDLE1BQU1DLFVBQVUsRUFBRSxVQUFVRCxNQUFNYSxNQUFNO0FBRW5FOztDQUVDLEdBRUQsSUFBSThGLFVBQVUsU0FBU0MsSUFBSTtJQUN6QixJQUFJaEQsTUFBTWdELEtBQUs3RyxPQUFPLENBQUMsY0FBYyxLQUNqQ1ksTUFDQWtHLFNBQVMsRUFBRSxFQUNYQyxPQUFPLEVBQUUsRUFDVEMsU0FDQVAsT0FDQW5FLEtBQ0FjLElBQ0E4QztJQUVKLGVBQWUsR0FDZixNQUFPckMsSUFBSztRQUNWLElBQUl2QixNQUFNckMsTUFBTXdHLEtBQUssQ0FBQ3BHLElBQUksQ0FBQ3dELE1BQU07WUFDL0JBLE1BQU1BLElBQUlPLFNBQVMsQ0FBQzlCLEdBQUcsQ0FBQyxFQUFFLENBQUN4QyxNQUFNO1lBQ2pDMkcsUUFBUTVGLFNBQVN5QixHQUFHLENBQUMsRUFBRTtZQUN2QnlFLEtBQUtFLElBQUksQ0FBQ0MsSUFBSVQsT0FBTztRQUN2QixPQUFPLElBQUluRSxNQUFNckMsTUFBTXlHLE1BQU0sQ0FBQ3JHLElBQUksQ0FBQ3dELE1BQU07WUFDdkNBLE1BQU1BLElBQUlPLFNBQVMsQ0FBQzlCLEdBQUcsQ0FBQyxFQUFFLENBQUN4QyxNQUFNO1lBQ2pDMkcsUUFBUTtZQUNSTSxLQUFLRSxJQUFJLENBQUNDLElBQUlULE9BQU87WUFDckJNLEtBQUtFLElBQUksQ0FBQ0MsSUFBSTVFO1FBQ2hCLE9BQU87WUFDTCxNQUFNLElBQUk2RSxZQUFZO1FBQ3hCO1FBRUEsTUFBTzdFLE1BQU1yQyxNQUFNeUcsTUFBTSxDQUFDckcsSUFBSSxDQUFDd0QsS0FBTTtZQUNuQ0EsTUFBTUEsSUFBSU8sU0FBUyxDQUFDOUIsR0FBRyxDQUFDLEVBQUUsQ0FBQ3hDLE1BQU07WUFDakNpSCxLQUFLRSxJQUFJLENBQUNDLElBQUk1RTtRQUNoQjtRQUVBLElBQUl1QixHQUFHLENBQUMsRUFBRSxLQUFLLEtBQUs7WUFDbEJBLE1BQU1BLElBQUlPLFNBQVMsQ0FBQztZQUNwQjRDLFVBQVVJO1lBQ1ZKLFFBQVFQLEtBQUssR0FBR0E7WUFDaEJNLEtBQUtFLElBQUksQ0FBQ0QsUUFBUU4sTUFBTTtRQUMxQjtRQUVBLElBQUlwRSxNQUFNckMsTUFBTWlHLEdBQUcsQ0FBQzdGLElBQUksQ0FBQ3dELE1BQU07WUFDN0JBLE1BQU1BLElBQUlPLFNBQVMsQ0FBQzlCLEdBQUcsQ0FBQyxFQUFFLENBQUN4QyxNQUFNO1lBQ2pDb0csTUFBTUYsWUFBWUUsR0FBRyxDQUFDbUIsV0FBV04sT0FBT2xHLFNBQVN5QixHQUFHLENBQUMsRUFBRTtZQUN2RHdFLE9BQU9HLElBQUksQ0FBQ2YsSUFBSUksVUFBVTtZQUMxQlMsT0FBTyxFQUFFO1lBQ1Q7UUFDRjtRQUVBLElBQUl6RSxNQUFNckMsTUFBTXFHLFVBQVUsQ0FBQ2pHLElBQUksQ0FBQ3dELE1BQU07WUFDcENBLE1BQU1BLElBQUlPLFNBQVMsQ0FBQzlCLEdBQUcsQ0FBQyxFQUFFLENBQUN4QyxNQUFNO1lBQ2pDc0QsS0FBS2QsR0FBRyxDQUFDLEVBQUUsSUFBSUEsR0FBRyxDQUFDLEVBQUUsSUFBSUEsR0FBRyxDQUFDLEVBQUU7WUFDL0IsSUFBSWMsT0FBTyxLQUFLO2dCQUNkMEQsT0FBT0csSUFBSSxDQUFDakIsWUFBWXNCLElBQUksQ0FBQ0QsV0FBV047Z0JBQ3hDO1lBQ0Y7UUFDRixPQUFPO1lBQ0wzRCxLQUFLO1FBQ1A7UUFFQSxJQUFJLENBQUM0QyxXQUFXLENBQUM1QyxHQUFHLEVBQUU7WUFBRSxNQUFNLElBQUkrRCxZQUFZO1FBQW9CO1FBQ2xFTCxPQUFPRyxJQUFJLENBQUNqQixXQUFXLENBQUM1QyxHQUFHLENBQUNpRSxXQUFXTjtRQUN2Q0EsT0FBTyxFQUFFO0lBQ1g7SUFFQW5HLE9BQU8yRyxTQUFTVDtJQUNoQmxHLEtBQUs2RixLQUFLLEdBQUdBO0lBQ2I3RixLQUFLaUQsR0FBRyxHQUFHQTtJQUVYLElBQUltRCxTQUFTO1FBQ1hBLFFBQVFRLEtBQUssR0FBRzVHLEtBQUs2RixLQUFLO1FBRTFCTyxRQUFRcEcsSUFBSSxHQUFHQTtRQUNmb0csUUFBUVAsS0FBSyxHQUFHTyxRQUFRUCxLQUFLO1FBQzdCTyxRQUFRbkQsR0FBRyxHQUFHakQsS0FBS2lELEdBQUc7UUFDdEJqRCxPQUFPb0c7SUFDVDtJQUVBLElBQUlkLEtBQUs7UUFDUEEsSUFBSXRGLElBQUksR0FBR0E7UUFDWHNGLElBQUlPLEtBQUssR0FBRzdGLEtBQUs2RixLQUFLO1FBQ3RCUCxJQUFJckMsR0FBRyxHQUFHakQsS0FBS2lELEdBQUc7UUFDbEJqRCxPQUFPc0Y7SUFDVDtJQUVBLE9BQU90RjtBQUNUO0FBRUEsSUFBSXNHLE1BQU0sU0FBUzVFLEdBQUcsRUFBRW1FLEtBQUs7SUFDM0IsUUFBUTtJQUNSLElBQUlBLE9BQU87UUFDVCxPQUFPbkUsUUFBUSxNQUNYUyxTQUFTLENBQUMsSUFBSSxHQUNkQSxVQUFVQyxJQUFJLENBQUNWO0lBQ3JCO0lBRUEsV0FBVztJQUNYLElBQUlBLEdBQUcsQ0FBQyxFQUFFLEVBQUU7UUFDVixPQUFPQSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxNQUVqQlMsVUFBVU8sSUFBSSxDQUFDLFNBQVMsTUFBTXpDLFNBQVN5QixHQUFHLENBQUMsRUFBRSxDQUFDOEIsU0FBUyxDQUFDLEtBQUssU0FDN0RyQixVQUFVTyxJQUFJLENBQUMsTUFBTSxLQUFLekMsU0FBU3lCLEdBQUcsQ0FBQyxFQUFFLENBQUM4QixTQUFTLENBQUMsS0FBSztJQUMvRDtJQUVBLGNBQWM7SUFDZCxnQkFBZ0I7SUFDaEIsSUFBSTlCLEdBQUcsQ0FBQyxFQUFFLEVBQUU7UUFDVixPQUFPQSxHQUFHLENBQUMsRUFBRSxHQUNUUyxTQUFTLENBQUNsQyxTQUFTeUIsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDM0MsUUFBUTJDLEdBQUcsQ0FBQyxFQUFFLEtBQzFDUyxTQUFTLENBQUNsQyxTQUFTeUIsR0FBRyxDQUFDLEVBQUUsRUFBRTtJQUNqQztJQUVBLFlBQVk7SUFDWixVQUFVO0lBQ1YsYUFBYTtJQUNiLElBQUlBLEdBQUcsQ0FBQyxFQUFFLEVBQUU7UUFDVixJQUFJNkMsUUFBUTdDLEdBQUcsQ0FBQyxFQUFFO1FBQ2xCLElBQUlsQixJQUFJLGVBQWVSLElBQUksQ0FBQ3VFO1FBQzVCLElBQUkvRCxHQUFHO1lBQ0wrRCxRQUFRQSxNQUFNbkYsT0FBTyxDQUFDLFVBQVU7UUFDbEM7UUFDQSxPQUFPK0MsVUFBVU8sSUFBSSxDQUFDekMsU0FBU3lCLEdBQUcsQ0FBQyxFQUFFLEdBQUdBLEdBQUcsQ0FBQyxFQUFFLElBQUksS0FBSzNDLFFBQVF3RixRQUFRL0Q7SUFDekU7SUFFQSxNQUFNLElBQUkrRixZQUFZO0FBQ3hCO0FBRUEsSUFBSUUsYUFBYSxTQUFTSSxJQUFJO0lBQzVCLElBQUkzQixJQUFJMkIsS0FBSzNILE1BQU0sRUFDZnNCO0lBRUosd0JBQXdCO0lBQ3hCLGtCQUFrQjtJQUNsQixJQUFJMEUsSUFBSSxHQUFHLE9BQU8yQixJQUFJLENBQUMsRUFBRTtJQUV6QixPQUFPLFNBQVN6SSxFQUFFO1FBQ2hCLElBQUksQ0FBQ0EsSUFBSTtRQUNULElBQUtvQyxJQUFJLEdBQUdBLElBQUkwRSxHQUFHMUUsSUFBSztZQUN0QixJQUFJLENBQUNxRyxJQUFJLENBQUNyRyxFQUFFLENBQUNwQyxLQUFLO1FBQ3BCO1FBQ0EsT0FBTztJQUNUO0FBQ0Y7QUFFQSxJQUFJdUksV0FBVyxTQUFTRSxJQUFJO0lBQzFCLElBQUlBLEtBQUszSCxNQUFNLEdBQUcsR0FBRztRQUNuQixPQUFPLFNBQVNkLEVBQUU7WUFDaEIsT0FBTyxDQUFDLENBQUN5SSxJQUFJLENBQUMsRUFBRSxDQUFDekk7UUFDbkI7SUFDRjtJQUNBLE9BQU8sU0FBU0EsRUFBRTtRQUNoQixJQUFJb0MsSUFBSXFHLEtBQUszSCxNQUFNO1FBQ25CLE1BQU9zQixJQUFLO1lBQ1YsSUFBSSxDQUFFcEMsQ0FBQUEsS0FBS3lJLElBQUksQ0FBQ3JHLEVBQUUsQ0FBQ3BDLEdBQUUsR0FBSTtRQUMzQjtRQUNBLE9BQU87SUFDVDtBQUNGO0FBRUEsSUFBSW9JLGNBQWM7SUFDaEIsSUFBSU07SUFFSixTQUFTVixRQUFRaEksRUFBRTtRQUNqQixJQUFJaUgsT0FBT2pILEdBQUcyRSxhQUFhLEVBQ3ZCZ0UsUUFBUTFCLEtBQUtJLG9CQUFvQixDQUFDVyxRQUFRUSxLQUFLLEdBQy9DcEcsSUFBSXVHLE1BQU03SCxNQUFNO1FBRXBCLE1BQU9zQixJQUFLO1lBQ1YsSUFBSTRGLFFBQVFwRyxJQUFJLENBQUMrRyxLQUFLLENBQUN2RyxFQUFFLEtBQUtzRyxXQUFXMUksSUFBSTtnQkFDM0MwSSxTQUFTO2dCQUNULE9BQU87WUFDVDtRQUNGO1FBRUFBLFNBQVM7SUFDWDtJQUVBVixRQUFRTixNQUFNLEdBQUcsU0FBUzFILEVBQUU7UUFDMUIwSSxTQUFTMUk7UUFDVCxPQUFPO0lBQ1Q7SUFFQSxPQUFPZ0k7QUFDVDtBQUVBLElBQUlsRCxlQUFlLFNBQVNELEdBQUc7SUFDN0IsSUFBSWpELE9BQU9nRyxRQUFRL0MsTUFDZitELFFBQVE7UUFBRWhIO0tBQU07SUFFcEIsTUFBT0EsS0FBS2lELEdBQUcsQ0FBRTtRQUNmakQsT0FBT2dHLFFBQVFoRyxLQUFLaUQsR0FBRztRQUN2QitELE1BQU1YLElBQUksQ0FBQ3JHO0lBQ2I7SUFFQSxJQUFJZ0gsTUFBTTlILE1BQU0sR0FBRyxHQUFHLE9BQU9jO0lBRTdCLE9BQU8sU0FBUzVCLEVBQUU7UUFDaEIsSUFBSThHLElBQUk4QixNQUFNOUgsTUFBTSxFQUNoQnNCLElBQUk7UUFFUixNQUFPQSxJQUFJMEUsR0FBRzFFLElBQUs7WUFDakIsSUFBSXdHLEtBQUssQ0FBQ3hHLEVBQUUsQ0FBQ3BDLEtBQUssT0FBTztRQUMzQjtJQUNGO0FBQ0Y7QUFFQTs7Q0FFQyxHQUVELElBQUkyRCxPQUFPLFNBQVNrQixHQUFHLEVBQUVvQyxJQUFJO0lBQzNCLElBQUk0QixVQUFVLEVBQUUsRUFDWmpILE9BQU9nRyxRQUFRL0MsTUFDZjhELFFBQVExQixLQUFLSSxvQkFBb0IsQ0FBQ3pGLEtBQUs2RixLQUFLLEdBQzVDckYsSUFBSSxHQUNKcEM7SUFFSixlQUFlLEdBQ2YsTUFBT0EsS0FBSzJJLEtBQUssQ0FBQ3ZHLElBQUksQ0FBRTtRQUN0QixJQUFJUixLQUFLNUIsS0FBSzZJLFFBQVFaLElBQUksQ0FBQ2pJO0lBQzdCO0lBRUEsSUFBSTRCLEtBQUtpRCxHQUFHLEVBQUU7UUFDWixNQUFPakQsS0FBS2lELEdBQUcsQ0FBRTtZQUNmakQsT0FBT2dHLFFBQVFoRyxLQUFLaUQsR0FBRztZQUN2QjhELFFBQVExQixLQUFLSSxvQkFBb0IsQ0FBQ3pGLEtBQUs2RixLQUFLO1lBQzVDckYsSUFBSTtZQUNKLGVBQWUsR0FDZixNQUFPcEMsS0FBSzJJLEtBQUssQ0FBQ3ZHLElBQUksQ0FBRTtnQkFDdEIsSUFBSVIsS0FBSzVCLE9BQU8rQixRQUFRK0csSUFBSSxDQUFDRCxTQUFTN0ksUUFBUSxDQUFDLEdBQUc7b0JBQ2hENkksUUFBUVosSUFBSSxDQUFDakk7Z0JBQ2Y7WUFDRjtRQUNGO1FBQ0E2SSxRQUFRRSxJQUFJLENBQUNqSjtJQUNmO0lBRUEsT0FBTytJO0FBQ1Q7QUFFQTs7Q0FFQyxHQUVERyxPQUFPQyxPQUFPLEdBQUdBLFVBQVUsU0FBU3BFLEdBQUcsRUFBRWUsT0FBTztJQUM5QyxxRUFBcUUsR0FDckUsSUFBSVYsSUFBSWdFO0lBQ1IsSUFBSXRELFFBQVExRixRQUFRLEtBQUssTUFBTTJFLElBQUk5QyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUc7UUFDdEQsSUFBSThDLEdBQUcsQ0FBQyxFQUFFLEtBQUssT0FBT2UsUUFBUXVELE1BQU0sSUFBSSx3QkFBd0J2SCxJQUFJLENBQUNpRCxNQUFNO1lBQ3pFLElBQUllLFFBQVF1QixHQUFHLENBQUNpQywwQkFBMEIsRUFBRTtnQkFDMUNsRSxLQUFLTCxJQUFJTyxTQUFTLENBQUM7Z0JBQ25CLElBQUksQ0FBQ1EsUUFBUXVCLEdBQUcsQ0FBQ2lDLDBCQUEwQixDQUFDbEUsS0FBSztvQkFDL0NnRSxJQUFJdEQsUUFBUXVCLEdBQUcsQ0FBQ2tDLGNBQWMsQ0FBQ25FO29CQUMvQixPQUFPZ0UsSUFBSTt3QkFBQ0E7cUJBQUUsR0FBRyxFQUFFO2dCQUNyQjtZQUNGO1FBQ0Y7UUFDQSxJQUFJckUsR0FBRyxDQUFDLEVBQUUsS0FBSyxPQUFPLFVBQVVqRCxJQUFJLENBQUNpRCxNQUFNO1lBQ3pDLE9BQU9lLFFBQVEwRCxzQkFBc0IsQ0FBQ3pFLElBQUlPLFNBQVMsQ0FBQztRQUN0RDtRQUNBLElBQUksUUFBUXhELElBQUksQ0FBQ2lELE1BQU07WUFDckIsT0FBT2UsUUFBUXlCLG9CQUFvQixDQUFDeEM7UUFDdEM7SUFDRjtJQUNBLCtCQUErQixHQUMvQixPQUFPbEIsS0FBS2tCLEtBQUtlO0FBQ25CO0FBRUFxRCxpQkFBaUIsR0FBR2xGO0FBQ3BCa0YsaUJBQWlCLEdBQUc1RTtBQUNwQjRFLG1CQUFtQixHQUFHakM7QUFFdEJpQyxlQUFlLEdBQUcsU0FBU2pKLEVBQUUsRUFBRTZFLEdBQUc7SUFDaEMsSUFBSWpELE9BQU87UUFBRWlELEtBQUtBO0lBQUk7SUFDdEIsR0FBRztRQUNEakQsT0FBT2dHLFFBQVFoRyxLQUFLaUQsR0FBRztRQUN2QixJQUFJakQsS0FBSzVCLEtBQUs7WUFBRSxPQUFPO1FBQU07SUFDL0IsUUFBUzRCLEtBQUtpRCxHQUFHLEVBQUU7SUFDbkIsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BtYXRocGl4L2RvbWluby9saWIvc2VsZWN0LmpzPzE3OGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBqc2hpbnQgZXFudWxsOiB0cnVlICovXG4vKipcbiAqIFplc3QgKGh0dHBzOi8vZ2l0aHViLmNvbS9jaGpqL3plc3QpXG4gKiBBIGNzcyBzZWxlY3RvciBlbmdpbmUuXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMiwgQ2hyaXN0b3BoZXIgSmVmZnJleS4gKE1JVCBMaWNlbnNlZClcbiAqIERvbWlubyB2ZXJzaW9uIGJhc2VkIG9uIFplc3QgdjAuMS4zIHdpdGggYnVnZml4ZXMgYXBwbGllZC5cbiAqL1xuXG4vKipcbiAqIEhlbHBlcnNcbiAqL1xuXG52YXIgd2luZG93ID0gT2JqZWN0LmNyZWF0ZShudWxsLCB7XG4gIGxvY2F0aW9uOiB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd3aW5kb3cubG9jYXRpb24gaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfSB9XG59KTtcblxudmFyIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYik7XG59O1xuXG52YXIgb3JkZXIgPSBmdW5jdGlvbihhLCBiKSB7XG4gIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuICByZXR1cm4gY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSwgYikgJiAyID8gMSA6IC0xO1xufTtcblxudmFyIG5leHQgPSBmdW5jdGlvbihlbCkge1xuICB3aGlsZSAoKGVsID0gZWwubmV4dFNpYmxpbmcpXG4gICAgICAgICAmJiBlbC5ub2RlVHlwZSAhPT0gMSk7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBwcmV2ID0gZnVuY3Rpb24oZWwpIHtcbiAgd2hpbGUgKChlbCA9IGVsLnByZXZpb3VzU2libGluZylcbiAgICAgICAgICYmIGVsLm5vZGVUeXBlICE9PSAxKTtcbiAgcmV0dXJuIGVsO1xufTtcblxudmFyIGNoaWxkID0gZnVuY3Rpb24oZWwpIHtcbiAgLypqc2hpbnQgLVcwODQgKi9cbiAgaWYgKGVsID0gZWwuZmlyc3RDaGlsZCkge1xuICAgIHdoaWxlIChlbC5ub2RlVHlwZSAhPT0gMVxuICAgICAgICAgICAmJiAoZWwgPSBlbC5uZXh0U2libGluZykpO1xuICB9XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBsYXN0Q2hpbGQgPSBmdW5jdGlvbihlbCkge1xuICAvKmpzaGludCAtVzA4NCAqL1xuICBpZiAoZWwgPSBlbC5sYXN0Q2hpbGQpIHtcbiAgICB3aGlsZSAoZWwubm9kZVR5cGUgIT09IDFcbiAgICAgICAgICAgJiYgKGVsID0gZWwucHJldmlvdXNTaWJsaW5nKSk7XG4gIH1cbiAgcmV0dXJuIGVsO1xufTtcblxudmFyIHBhcmVudElzRWxlbWVudCA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFuLnBhcmVudE5vZGUpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIHZhciBub2RlVHlwZSA9IG4ucGFyZW50Tm9kZS5ub2RlVHlwZTtcbiAgLy8gVGhlIHJvb3QgYGh0bWxgIGVsZW1lbnQgY2FuIGJlIGEgZmlyc3QtIG9yIGxhc3QtY2hpbGQsIHRvby5cbiAgcmV0dXJuIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5O1xufTtcblxudmFyIHVucXVvdGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgaWYgKCFzdHIpIHJldHVybiBzdHI7XG4gIHZhciBjaCA9IHN0clswXTtcbiAgaWYgKGNoID09PSAnXCInIHx8IGNoID09PSAnXFwnJykge1xuICAgIGlmIChzdHJbc3RyLmxlbmd0aC0xXSA9PT0gY2gpIHtcbiAgICAgIHN0ciA9IHN0ci5zbGljZSgxLCAtMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGJhZCBzdHJpbmcuXG4gICAgICBzdHIgPSBzdHIuc2xpY2UoMSk7XG4gICAgfVxuICAgIHJldHVybiBzdHIucmVwbGFjZShydWxlcy5zdHJfZXNjYXBlLCBmdW5jdGlvbihzKSB7XG4gICAgICB2YXIgbSA9IC9eXFxcXCg/OihbMC05QS1GYS1mXSspfChbXFxyXFxuXFxmXSspKS8uZXhlYyhzKTtcbiAgICAgIGlmICghbSkgeyByZXR1cm4gcy5zbGljZSgxKTsgfVxuICAgICAgaWYgKG1bMl0pIHsgcmV0dXJuICcnOyAvKiBlc2NhcGVkIG5ld2xpbmVzIGFyZSBpZ25vcmVkIGluIHN0cmluZ3MuICovIH1cbiAgICAgIHZhciBjcCA9IHBhcnNlSW50KG1bMV0sIDE2KTtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludCA/IFN0cmluZy5mcm9tQ29kZVBvaW50KGNwKSA6XG4gICAgICAgIC8vIE5vdCBhbGwgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbnMgaGF2ZSBTdHJpbmcuZnJvbUNvZGVQb2ludCB5ZXQuXG4gICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoY3ApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHJ1bGVzLmlkZW50LnRlc3Qoc3RyKSkge1xuICAgIHJldHVybiBkZWNvZGVpZChzdHIpO1xuICB9IGVsc2Uge1xuICAgIC8vIE5VTUJFUiwgUEVSQ0VOVEFHRSwgRElNRU5TSU9OLCBldGNcbiAgICByZXR1cm4gc3RyO1xuICB9XG59O1xuXG52YXIgZGVjb2RlaWQgPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJ1bGVzLmVzY2FwZSwgZnVuY3Rpb24ocykge1xuICAgIHZhciBtID0gL15cXFxcKFswLTlBLUZhLWZdKykvLmV4ZWMocyk7XG4gICAgaWYgKCFtKSB7IHJldHVybiBzWzFdOyB9XG4gICAgdmFyIGNwID0gcGFyc2VJbnQobVsxXSwgMTYpO1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludCA/IFN0cmluZy5mcm9tQ29kZVBvaW50KGNwKSA6XG4gICAgICAvLyBOb3QgYWxsIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb25zIGhhdmUgU3RyaW5nLmZyb21Db2RlUG9pbnQgeWV0LlxuICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShjcCk7XG4gIH0pO1xufTtcblxudmFyIGluZGV4T2YgPSAoZnVuY3Rpb24oKSB7XG4gIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVtKSB7XG4gICAgdmFyIGkgPSB0aGlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpZiAodGhpc1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfTtcbn0pKCk7XG5cbnZhciBtYWtlSW5zaWRlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICB2YXIgcmVnZXggPSBydWxlcy5pbnNpZGUuc291cmNlXG4gICAgLnJlcGxhY2UoLzwvZywgc3RhcnQpXG4gICAgLnJlcGxhY2UoLz4vZywgZW5kKTtcblxuICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleCk7XG59O1xuXG52YXIgcmVwbGFjZSA9IGZ1bmN0aW9uKHJlZ2V4LCBuYW1lLCB2YWwpIHtcbiAgcmVnZXggPSByZWdleC5zb3VyY2U7XG4gIHJlZ2V4ID0gcmVnZXgucmVwbGFjZShuYW1lLCB2YWwuc291cmNlIHx8IHZhbCk7XG4gIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4KTtcbn07XG5cbnZhciB0cnVuY2F0ZVVybCA9IGZ1bmN0aW9uKHVybCwgbnVtKSB7XG4gIHJldHVybiB1cmxcbiAgICAucmVwbGFjZSgvXig/Olxcdys6XFwvXFwvfFxcLyspLywgJycpXG4gICAgLnJlcGxhY2UoLyg/OlxcLyt8XFwvKiMuKj8pJC8sICcnKVxuICAgIC5zcGxpdCgnLycsIG51bSlcbiAgICAuam9pbignLycpO1xufTtcblxuLyoqXG4gKiBIYW5kbGUgYG50aGAgU2VsZWN0b3JzXG4gKi9cblxudmFyIHBhcnNlTnRoID0gZnVuY3Rpb24ocGFyYW1fLCB0ZXN0KSB7XG4gIHZhciBwYXJhbSA9IHBhcmFtXy5yZXBsYWNlKC9cXHMrL2csICcnKVxuICAgICwgY2FwO1xuXG4gIGlmIChwYXJhbSA9PT0gJ2V2ZW4nKSB7XG4gICAgcGFyYW0gPSAnMm4rMCc7XG4gIH0gZWxzZSBpZiAocGFyYW0gPT09ICdvZGQnKSB7XG4gICAgcGFyYW0gPSAnMm4rMSc7XG4gIH0gZWxzZSBpZiAocGFyYW0uaW5kZXhPZignbicpID09PSAtMSkge1xuICAgIHBhcmFtID0gJzBuJyArIHBhcmFtO1xuICB9XG5cbiAgY2FwID0gL14oWystXSk/KFxcZCspP24oWystXSk/KFxcZCspPyQvLmV4ZWMocGFyYW0pO1xuXG4gIHJldHVybiB7XG4gICAgZ3JvdXA6IGNhcFsxXSA9PT0gJy0nXG4gICAgICA/IC0oY2FwWzJdIHx8IDEpXG4gICAgICA6ICsoY2FwWzJdIHx8IDEpLFxuICAgIG9mZnNldDogY2FwWzRdXG4gICAgICA/IChjYXBbM10gPT09ICctJyA/IC1jYXBbNF0gOiArY2FwWzRdKVxuICAgICAgOiAwXG4gIH07XG59O1xuXG52YXIgbnRoID0gZnVuY3Rpb24ocGFyYW1fLCB0ZXN0LCBsYXN0KSB7XG4gIHZhciBwYXJhbSA9IHBhcnNlTnRoKHBhcmFtXylcbiAgICAsIGdyb3VwID0gcGFyYW0uZ3JvdXBcbiAgICAsIG9mZnNldCA9IHBhcmFtLm9mZnNldFxuICAgICwgZmluZCA9ICFsYXN0ID8gY2hpbGQgOiBsYXN0Q2hpbGRcbiAgICAsIGFkdmFuY2UgPSAhbGFzdCA/IG5leHQgOiBwcmV2O1xuXG4gIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgIGlmICghcGFyZW50SXNFbGVtZW50KGVsKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJlbCA9IGZpbmQoZWwucGFyZW50Tm9kZSlcbiAgICAgICwgcG9zID0gMDtcblxuICAgIHdoaWxlIChyZWwpIHtcbiAgICAgIGlmICh0ZXN0KHJlbCwgZWwpKSBwb3MrKztcbiAgICAgIGlmIChyZWwgPT09IGVsKSB7XG4gICAgICAgIHBvcyAtPSBvZmZzZXQ7XG4gICAgICAgIHJldHVybiBncm91cCAmJiBwb3NcbiAgICAgICAgICA/IChwb3MgJSBncm91cCkgPT09IDAgJiYgKHBvcyA8IDAgPT09IGdyb3VwIDwgMClcbiAgICAgICAgICA6ICFwb3M7XG4gICAgICB9XG4gICAgICByZWwgPSBhZHZhbmNlKHJlbCk7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBTaW1wbGUgU2VsZWN0b3JzXG4gKi9cblxudmFyIHNlbGVjdG9ycyA9IHtcbiAgJyonOiAoZnVuY3Rpb24oKSB7XG4gICAgaWYgKGZhbHNlLypmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnJykpO1xuICAgICAgcmV0dXJuICEhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKVswXTtcbiAgICB9KCkqLykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMSkgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpLFxuICAndHlwZSc6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgcmV0dXJuIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHR5cGU7XG4gICAgfTtcbiAgfSxcbiAgJ2F0dHInOiBmdW5jdGlvbihrZXksIG9wLCB2YWwsIGkpIHtcbiAgICBvcCA9IG9wZXJhdG9yc1tvcF07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgICB2YXIgYXR0cjtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ2Zvcic6XG4gICAgICAgICAgYXR0ciA9IGVsLmh0bWxGb3I7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NsYXNzJzpcbiAgICAgICAgICAvLyBjbGFzc05hbWUgaXMgJycgd2hlbiBub24tZXhpc3RlbnRcbiAgICAgICAgICAvLyBnZXRBdHRyaWJ1dGUoJ2NsYXNzJykgaXMgbnVsbFxuICAgICAgICAgIGF0dHIgPSBlbC5jbGFzc05hbWU7XG4gICAgICAgICAgaWYgKGF0dHIgPT09ICcnICYmIGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSA9PSBudWxsKSB7XG4gICAgICAgICAgICBhdHRyID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2hyZWYnOlxuICAgICAgICBjYXNlICdzcmMnOlxuICAgICAgICAgIGF0dHIgPSBlbC5nZXRBdHRyaWJ1dGUoa2V5LCAyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndGl0bGUnOlxuICAgICAgICAgIC8vIGdldEF0dHJpYnV0ZSgndGl0bGUnKSBjYW4gYmUgJycgd2hlbiBub24tZXhpc3RlbnQgc29tZXRpbWVzP1xuICAgICAgICAgIGF0dHIgPSBlbC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gY2FyZWZ1bCB3aXRoIGF0dHJpYnV0ZXMgd2l0aCBzcGVjaWFsIGdldHRlciBmdW5jdGlvbnNcbiAgICAgICAgY2FzZSAnaWQnOlxuICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgY2FzZSAnZGlyJzpcbiAgICAgICAgY2FzZSAnYWNjZXNzS2V5JzpcbiAgICAgICAgY2FzZSAnaGlkZGVuJzpcbiAgICAgICAgY2FzZSAndGFiSW5kZXgnOlxuICAgICAgICBjYXNlICdzdHlsZSc6XG4gICAgICAgICAgaWYgKGVsLmdldEF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgYXR0ciA9IGVsLmdldEF0dHJpYnV0ZShrZXkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSAmJiAhZWwuaGFzQXR0cmlidXRlKGtleSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhdHRyID0gZWxba2V5XSAhPSBudWxsXG4gICAgICAgICAgICA/IGVsW2tleV1cbiAgICAgICAgICAgIDogZWwuZ2V0QXR0cmlidXRlICYmIGVsLmdldEF0dHJpYnV0ZShrZXkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGF0dHIgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgYXR0ciA9IGF0dHIgKyAnJztcbiAgICAgIGlmIChpKSB7XG4gICAgICAgIGF0dHIgPSBhdHRyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhbCA9IHZhbC50b0xvd2VyQ2FzZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wKGF0dHIsIHZhbCk7XG4gICAgfTtcbiAgfSxcbiAgJzpmaXJzdC1jaGlsZCc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuICFwcmV2KGVsKSAmJiBwYXJlbnRJc0VsZW1lbnQoZWwpO1xuICB9LFxuICAnOmxhc3QtY2hpbGQnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiAhbmV4dChlbCkgJiYgcGFyZW50SXNFbGVtZW50KGVsKTtcbiAgfSxcbiAgJzpvbmx5LWNoaWxkJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gIXByZXYoZWwpICYmICFuZXh0KGVsKSAmJiBwYXJlbnRJc0VsZW1lbnQoZWwpO1xuICB9LFxuICAnOm50aC1jaGlsZCc6IGZ1bmN0aW9uKHBhcmFtLCBsYXN0KSB7XG4gICAgcmV0dXJuIG50aChwYXJhbSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LCBsYXN0KTtcbiAgfSxcbiAgJzpudGgtbGFzdC1jaGlsZCc6IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1snOm50aC1jaGlsZCddKHBhcmFtLCB0cnVlKTtcbiAgfSxcbiAgJzpyb290JzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gZWwub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPT09IGVsO1xuICB9LFxuICAnOmVtcHR5JzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gIWVsLmZpcnN0Q2hpbGQ7XG4gIH0sXG4gICc6bm90JzogZnVuY3Rpb24oc2VsKSB7XG4gICAgdmFyIHRlc3QgPSBjb21waWxlR3JvdXAoc2VsKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICAgIHJldHVybiAhdGVzdChlbCk7XG4gICAgfTtcbiAgfSxcbiAgJzpmaXJzdC1vZi10eXBlJzogZnVuY3Rpb24oZWwpIHtcbiAgICBpZiAoIXBhcmVudElzRWxlbWVudChlbCkpIHJldHVybjtcbiAgICB2YXIgdHlwZSA9IGVsLm5vZGVOYW1lO1xuICAgIC8qanNoaW50IC1XMDg0ICovXG4gICAgd2hpbGUgKGVsID0gcHJldihlbCkpIHtcbiAgICAgIGlmIChlbC5ub2RlTmFtZSA9PT0gdHlwZSkgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgJzpsYXN0LW9mLXR5cGUnOiBmdW5jdGlvbihlbCkge1xuICAgIGlmICghcGFyZW50SXNFbGVtZW50KGVsKSkgcmV0dXJuO1xuICAgIHZhciB0eXBlID0gZWwubm9kZU5hbWU7XG4gICAgLypqc2hpbnQgLVcwODQgKi9cbiAgICB3aGlsZSAoZWwgPSBuZXh0KGVsKSkge1xuICAgICAgaWYgKGVsLm5vZGVOYW1lID09PSB0eXBlKSByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICAnOm9ubHktb2YtdHlwZSc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1snOmZpcnN0LW9mLXR5cGUnXShlbClcbiAgICAgICAgJiYgc2VsZWN0b3JzWyc6bGFzdC1vZi10eXBlJ10oZWwpO1xuICB9LFxuICAnOm50aC1vZi10eXBlJzogZnVuY3Rpb24ocGFyYW0sIGxhc3QpIHtcbiAgICByZXR1cm4gbnRoKHBhcmFtLCBmdW5jdGlvbihyZWwsIGVsKSB7XG4gICAgICByZXR1cm4gcmVsLm5vZGVOYW1lID09PSBlbC5ub2RlTmFtZTtcbiAgICB9LCBsYXN0KTtcbiAgfSxcbiAgJzpudGgtbGFzdC1vZi10eXBlJzogZnVuY3Rpb24ocGFyYW0pIHtcbiAgICByZXR1cm4gc2VsZWN0b3JzWyc6bnRoLW9mLXR5cGUnXShwYXJhbSwgdHJ1ZSk7XG4gIH0sXG4gICc6Y2hlY2tlZCc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuICEhKGVsLmNoZWNrZWQgfHwgZWwuc2VsZWN0ZWQpO1xuICB9LFxuICAnOmluZGV0ZXJtaW5hdGUnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiAhc2VsZWN0b3JzWyc6Y2hlY2tlZCddKGVsKTtcbiAgfSxcbiAgJzplbmFibGVkJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gIWVsLmRpc2FibGVkICYmIGVsLnR5cGUgIT09ICdoaWRkZW4nO1xuICB9LFxuICAnOmRpc2FibGVkJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gISFlbC5kaXNhYmxlZDtcbiAgfSxcbiAgJzp0YXJnZXQnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiBlbC5pZCA9PT0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpO1xuICB9LFxuICAnOmZvY3VzJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gZWwgPT09IGVsLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgfSxcbiAgJzppcyc6IGZ1bmN0aW9uKHNlbCkge1xuICAgIHJldHVybiBjb21waWxlR3JvdXAoc2VsKTtcbiAgfSxcbiAgLy8gOm1hdGNoZXMgaXMgYW4gb2xkZXIgbmFtZSBmb3IgOmlzOyBzZWVcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3czYy9jc3N3Zy1kcmFmdHMvaXNzdWVzLzMyNThcbiAgJzptYXRjaGVzJzogZnVuY3Rpb24oc2VsKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1snOmlzJ10oc2VsKTtcbiAgfSxcbiAgJzpudGgtbWF0Y2gnOiBmdW5jdGlvbihwYXJhbSwgbGFzdCkge1xuICAgIHZhciBhcmdzID0gcGFyYW0uc3BsaXQoL1xccyosXFxzKi8pXG4gICAgICAsIGFyZyA9IGFyZ3Muc2hpZnQoKVxuICAgICAgLCB0ZXN0ID0gY29tcGlsZUdyb3VwKGFyZ3Muam9pbignLCcpKTtcblxuICAgIHJldHVybiBudGgoYXJnLCB0ZXN0LCBsYXN0KTtcbiAgfSxcbiAgJzpudGgtbGFzdC1tYXRjaCc6IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1snOm50aC1tYXRjaCddKHBhcmFtLCB0cnVlKTtcbiAgfSxcbiAgJzpsaW5rcy1oZXJlJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gZWwgKyAnJyA9PT0gd2luZG93LmxvY2F0aW9uICsgJyc7XG4gIH0sXG4gICc6bGFuZyc6IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgICB3aGlsZSAoZWwpIHtcbiAgICAgICAgaWYgKGVsLmxhbmcpIHJldHVybiBlbC5sYW5nLmluZGV4T2YocGFyYW0pID09PSAwO1xuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgJzpkaXInOiBmdW5jdGlvbihwYXJhbSkge1xuICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgd2hpbGUgKGVsKSB7XG4gICAgICAgIGlmIChlbC5kaXIpIHJldHVybiBlbC5kaXIgPT09IHBhcmFtO1xuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgJzpzY29wZSc6IGZ1bmN0aW9uKGVsLCBjb24pIHtcbiAgICB2YXIgY29udGV4dCA9IGNvbiB8fCBlbC5vd25lckRvY3VtZW50O1xuICAgIGlmIChjb250ZXh0Lm5vZGVUeXBlID09PSA5KSB7XG4gICAgICByZXR1cm4gZWwgPT09IGNvbnRleHQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH1cbiAgICByZXR1cm4gZWwgPT09IGNvbnRleHQ7XG4gIH0sXG4gICc6YW55LWxpbmsnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiB0eXBlb2YgZWwuaHJlZiA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gICc6bG9jYWwtbGluayc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgaWYgKGVsLm5vZGVOYW1lKSB7XG4gICAgICByZXR1cm4gZWwuaHJlZiAmJiBlbC5ob3N0ID09PSB3aW5kb3cubG9jYXRpb24uaG9zdDtcbiAgICB9XG4gICAgdmFyIHBhcmFtID0gK2VsICsgMTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICAgIGlmICghZWwuaHJlZikgcmV0dXJuO1xuXG4gICAgICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uICsgJydcbiAgICAgICAgLCBocmVmID0gZWwgKyAnJztcblxuICAgICAgcmV0dXJuIHRydW5jYXRlVXJsKHVybCwgcGFyYW0pID09PSB0cnVuY2F0ZVVybChocmVmLCBwYXJhbSk7XG4gICAgfTtcbiAgfSxcbiAgJzpkZWZhdWx0JzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gISFlbC5kZWZhdWx0U2VsZWN0ZWQ7XG4gIH0sXG4gICc6dmFsaWQnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiBlbC53aWxsVmFsaWRhdGUgfHwgKGVsLnZhbGlkaXR5ICYmIGVsLnZhbGlkaXR5LnZhbGlkKTtcbiAgfSxcbiAgJzppbnZhbGlkJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gIXNlbGVjdG9yc1snOnZhbGlkJ10oZWwpO1xuICB9LFxuICAnOmluLXJhbmdlJzogZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gZWwudmFsdWUgPiBlbC5taW4gJiYgZWwudmFsdWUgPD0gZWwubWF4O1xuICB9LFxuICAnOm91dC1vZi1yYW5nZSc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuICFzZWxlY3RvcnNbJzppbi1yYW5nZSddKGVsKTtcbiAgfSxcbiAgJzpyZXF1aXJlZCc6IGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuICEhZWwucmVxdWlyZWQ7XG4gIH0sXG4gICc6b3B0aW9uYWwnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiAhZWwucmVxdWlyZWQ7XG4gIH0sXG4gICc6cmVhZC1vbmx5JzogZnVuY3Rpb24oZWwpIHtcbiAgICBpZiAoZWwucmVhZE9ubHkpIHJldHVybiB0cnVlO1xuXG4gICAgdmFyIGF0dHIgPSBlbC5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpXG4gICAgICAsIHByb3AgPSBlbC5jb250ZW50RWRpdGFibGVcbiAgICAgICwgbmFtZSA9IGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBuYW1lID0gbmFtZSAhPT0gJ2lucHV0JyAmJiBuYW1lICE9PSAndGV4dGFyZWEnO1xuXG4gICAgcmV0dXJuIChuYW1lIHx8IGVsLmRpc2FibGVkKSAmJiBhdHRyID09IG51bGwgJiYgcHJvcCAhPT0gJ3RydWUnO1xuICB9LFxuICAnOnJlYWQtd3JpdGUnOiBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiAhc2VsZWN0b3JzWyc6cmVhZC1vbmx5J10oZWwpO1xuICB9LFxuICAnOmhvdmVyJzogZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCc6aG92ZXIgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfSxcbiAgJzphY3RpdmUnOiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJzphY3RpdmUgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfSxcbiAgJzpsaW5rJzogZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCc6bGluayBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICB9LFxuICAnOnZpc2l0ZWQnOiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJzp2aXNpdGVkIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gIH0sXG4gICc6Y29sdW1uJzogZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCc6Y29sdW1uIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gIH0sXG4gICc6bnRoLWNvbHVtbic6IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignOm50aC1jb2x1bW4gaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfSxcbiAgJzpudGgtbGFzdC1jb2x1bW4nOiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJzpudGgtbGFzdC1jb2x1bW4gaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgfSxcbiAgJzpjdXJyZW50JzogZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCc6Y3VycmVudCBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICB9LFxuICAnOnBhc3QnOiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJzpwYXN0IGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gIH0sXG4gICc6ZnV0dXJlJzogZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCc6ZnV0dXJlIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gIH0sXG4gIC8vIE5vbi1zdGFuZGFyZCwgZm9yIGNvbXBhdGliaWxpdHkgcHVycG9zZXMuXG4gICc6Y29udGFpbnMnOiBmdW5jdGlvbihwYXJhbSkge1xuICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgdmFyIHRleHQgPSBlbC5pbm5lclRleHQgfHwgZWwudGV4dENvbnRlbnQgfHwgZWwudmFsdWUgfHwgJyc7XG4gICAgICByZXR1cm4gdGV4dC5pbmRleE9mKHBhcmFtKSAhPT0gLTE7XG4gICAgfTtcbiAgfSxcbiAgJzpoYXMnOiBmdW5jdGlvbihwYXJhbSkge1xuICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgcmV0dXJuIGZpbmQocGFyYW0sIGVsKS5sZW5ndGggPiAwO1xuICAgIH07XG4gIH1cbiAgLy8gUG90ZW50aWFsbHkgYWRkIG1vcmUgcHNldWRvIHNlbGVjdG9ycyBmb3JcbiAgLy8gY29tcGF0aWJpbGl0eSB3aXRoIHNpenpsZSBhbmQgbW9zdCBvdGhlclxuICAvLyBzZWxlY3RvciBlbmdpbmVzICg/KS5cbn07XG5cbi8qKlxuICogQXR0cmlidXRlIE9wZXJhdG9yc1xuICovXG5cbnZhciBvcGVyYXRvcnMgPSB7XG4gICctJzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gICc9JzogZnVuY3Rpb24oYXR0ciwgdmFsKSB7XG4gICAgcmV0dXJuIGF0dHIgPT09IHZhbDtcbiAgfSxcbiAgJyo9JzogZnVuY3Rpb24oYXR0ciwgdmFsKSB7XG4gICAgcmV0dXJuIGF0dHIuaW5kZXhPZih2YWwpICE9PSAtMTtcbiAgfSxcbiAgJ349JzogZnVuY3Rpb24oYXR0ciwgdmFsKSB7XG4gICAgdmFyIGlcbiAgICAgICwgc1xuICAgICAgLCBmXG4gICAgICAsIGw7XG5cbiAgICBmb3IgKHMgPSAwOyB0cnVlOyBzID0gaSArIDEpIHtcbiAgICAgIGkgPSBhdHRyLmluZGV4T2YodmFsLCBzKTtcbiAgICAgIGlmIChpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZiA9IGF0dHJbaSAtIDFdO1xuICAgICAgbCA9IGF0dHJbaSArIHZhbC5sZW5ndGhdO1xuICAgICAgaWYgKCghZiB8fCBmID09PSAnICcpICYmICghbCB8fCBsID09PSAnICcpKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gICd8PSc6IGZ1bmN0aW9uKGF0dHIsIHZhbCkge1xuICAgIHZhciBpID0gYXR0ci5pbmRleE9mKHZhbClcbiAgICAgICwgbDtcblxuICAgIGlmIChpICE9PSAwKSByZXR1cm47XG4gICAgbCA9IGF0dHJbaSArIHZhbC5sZW5ndGhdO1xuXG4gICAgcmV0dXJuIGwgPT09ICctJyB8fCAhbDtcbiAgfSxcbiAgJ149JzogZnVuY3Rpb24oYXR0ciwgdmFsKSB7XG4gICAgcmV0dXJuIGF0dHIuaW5kZXhPZih2YWwpID09PSAwO1xuICB9LFxuICAnJD0nOiBmdW5jdGlvbihhdHRyLCB2YWwpIHtcbiAgICB2YXIgaSA9IGF0dHIubGFzdEluZGV4T2YodmFsKTtcbiAgICByZXR1cm4gaSAhPT0gLTEgJiYgaSArIHZhbC5sZW5ndGggPT09IGF0dHIubGVuZ3RoO1xuICB9LFxuICAvLyBub24tc3RhbmRhcmRcbiAgJyE9JzogZnVuY3Rpb24oYXR0ciwgdmFsKSB7XG4gICAgcmV0dXJuIGF0dHIgIT09IHZhbDtcbiAgfVxufTtcblxuLyoqXG4gKiBDb21iaW5hdG9yIExvZ2ljXG4gKi9cblxudmFyIGNvbWJpbmF0b3JzID0ge1xuICAnICc6IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICAgIC8qanNoaW50IC1XMDg0ICovXG4gICAgICB3aGlsZSAoZWwgPSBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGlmICh0ZXN0KGVsKSkgcmV0dXJuIGVsO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gICc+JzogZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgLypqc2hpbnQgLVcwODQgKi9cbiAgICAgIGlmIChlbCA9IGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRlc3QoZWwpICYmIGVsO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gICcrJzogZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgLypqc2hpbnQgLVcwODQgKi9cbiAgICAgIGlmIChlbCA9IHByZXYoZWwpKSB7XG4gICAgICAgIHJldHVybiB0ZXN0KGVsKSAmJiBlbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICAnfic6IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICAgIC8qanNoaW50IC1XMDg0ICovXG4gICAgICB3aGlsZSAoZWwgPSBwcmV2KGVsKSkge1xuICAgICAgICBpZiAodGVzdChlbCkpIHJldHVybiBlbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICAnbm9vcCc6IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICAgIHJldHVybiB0ZXN0KGVsKSAmJiBlbDtcbiAgICB9O1xuICB9LFxuICAncmVmJzogZnVuY3Rpb24odGVzdCwgbmFtZSkge1xuICAgIHZhciBub2RlO1xuXG4gICAgZnVuY3Rpb24gcmVmKGVsKSB7XG4gICAgICB2YXIgZG9jID0gZWwub3duZXJEb2N1bWVudFxuICAgICAgICAsIG5vZGVzID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJylcbiAgICAgICAgLCBpID0gbm9kZXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKHJlZi50ZXN0KGVsKSkge1xuICAgICAgICAgIG5vZGUgPSBudWxsO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJlZi5jb21iaW5hdG9yID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgIGlmICghbm9kZSB8fCAhbm9kZS5nZXRBdHRyaWJ1dGUpIHJldHVybjtcblxuICAgICAgdmFyIGF0dHIgPSBub2RlLmdldEF0dHJpYnV0ZShuYW1lKSB8fCAnJztcbiAgICAgIGlmIChhdHRyWzBdID09PSAnIycpIGF0dHIgPSBhdHRyLnN1YnN0cmluZygxKTtcblxuICAgICAgaWYgKGF0dHIgPT09IGVsLmlkICYmIHRlc3Qobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiByZWY7XG4gIH1cbn07XG5cbi8qKlxuICogR3JhbW1hclxuICovXG5cbnZhciBydWxlcyA9IHtcbiAgZXNjYXBlOiAvXFxcXCg/OlteMC05QS1GYS1mXFxyXFxuXXxbMC05QS1GYS1mXXsxLDZ9W1xcclxcblxcdCBdPykvZyxcbiAgc3RyX2VzY2FwZTogLyhlc2NhcGUpfFxcXFwoXFxufFxcclxcbj98XFxmKS9nLFxuICBub25hc2NpaTogL1tcXHUwMEEwLVxcdUZGRkZdLyxcbiAgY3NzaWQ6IC8oPzooPyEtP1swLTldKSg/OmVzY2FwZXxub25hc2NpaXxbLV9hLXpBLVowLTldKSspLyxcbiAgcW5hbWU6IC9eICooY3NzaWR8XFwqKS8sXG4gIHNpbXBsZTogL14oPzooWy4jXWNzc2lkKXxwc2V1ZG98YXR0cikvLFxuICByZWY6IC9eICpcXC8oY3NzaWQpXFwvICovLFxuICBjb21iaW5hdG9yOiAvXig/OiArKFteIFxcdyouI1xcXFxdKSArfCggKSt8KFteIFxcdyouI1xcXFxdKSkoPyEgKiQpLyxcbiAgYXR0cjogL15cXFsoY3NzaWQpKD86KFteXFx3XT89KShpbnNpZGUpKT9cXF0vLFxuICBwc2V1ZG86IC9eKDpjc3NpZCkoPzpcXCgoaW5zaWRlKVxcKSk/LyxcbiAgaW5zaWRlOiAvKD86XCIoPzpcXFxcXCJ8W15cIl0pKlwifCcoPzpcXFxcJ3xbXiddKSonfDxbXlwiJz5dKj58XFxcXFtcIic+XXxbXlwiJz5dKSovLFxuICBpZGVudDogL14oY3NzaWQpJC9cbn07XG5cbnJ1bGVzLmNzc2lkID0gcmVwbGFjZShydWxlcy5jc3NpZCwgJ25vbmFzY2lpJywgcnVsZXMubm9uYXNjaWkpO1xucnVsZXMuY3NzaWQgPSByZXBsYWNlKHJ1bGVzLmNzc2lkLCAnZXNjYXBlJywgcnVsZXMuZXNjYXBlKTtcbnJ1bGVzLnFuYW1lID0gcmVwbGFjZShydWxlcy5xbmFtZSwgJ2Nzc2lkJywgcnVsZXMuY3NzaWQpO1xucnVsZXMuc2ltcGxlID0gcmVwbGFjZShydWxlcy5zaW1wbGUsICdjc3NpZCcsIHJ1bGVzLmNzc2lkKTtcbnJ1bGVzLnJlZiA9IHJlcGxhY2UocnVsZXMucmVmLCAnY3NzaWQnLCBydWxlcy5jc3NpZCk7XG5ydWxlcy5hdHRyID0gcmVwbGFjZShydWxlcy5hdHRyLCAnY3NzaWQnLCBydWxlcy5jc3NpZCk7XG5ydWxlcy5wc2V1ZG8gPSByZXBsYWNlKHJ1bGVzLnBzZXVkbywgJ2Nzc2lkJywgcnVsZXMuY3NzaWQpO1xucnVsZXMuaW5zaWRlID0gcmVwbGFjZShydWxlcy5pbnNpZGUsICdbXlwiXFwnPl0qJywgcnVsZXMuaW5zaWRlKTtcbnJ1bGVzLmF0dHIgPSByZXBsYWNlKHJ1bGVzLmF0dHIsICdpbnNpZGUnLCBtYWtlSW5zaWRlKCdcXFxcWycsICdcXFxcXScpKTtcbnJ1bGVzLnBzZXVkbyA9IHJlcGxhY2UocnVsZXMucHNldWRvLCAnaW5zaWRlJywgbWFrZUluc2lkZSgnXFxcXCgnLCAnXFxcXCknKSk7XG5ydWxlcy5zaW1wbGUgPSByZXBsYWNlKHJ1bGVzLnNpbXBsZSwgJ3BzZXVkbycsIHJ1bGVzLnBzZXVkbyk7XG5ydWxlcy5zaW1wbGUgPSByZXBsYWNlKHJ1bGVzLnNpbXBsZSwgJ2F0dHInLCBydWxlcy5hdHRyKTtcbnJ1bGVzLmlkZW50ID0gcmVwbGFjZShydWxlcy5pZGVudCwgJ2Nzc2lkJywgcnVsZXMuY3NzaWQpO1xucnVsZXMuc3RyX2VzY2FwZSA9IHJlcGxhY2UocnVsZXMuc3RyX2VzY2FwZSwgJ2VzY2FwZScsIHJ1bGVzLmVzY2FwZSk7XG5cbi8qKlxuICogQ29tcGlsaW5nXG4gKi9cblxudmFyIGNvbXBpbGUgPSBmdW5jdGlvbihzZWxfKSB7XG4gIHZhciBzZWwgPSBzZWxfLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxuICAgICwgdGVzdFxuICAgICwgZmlsdGVyID0gW11cbiAgICAsIGJ1ZmYgPSBbXVxuICAgICwgc3ViamVjdFxuICAgICwgcW5hbWVcbiAgICAsIGNhcFxuICAgICwgb3BcbiAgICAsIHJlZjtcblxuICAvKmpzaGludCAtVzA4NCAqL1xuICB3aGlsZSAoc2VsKSB7XG4gICAgaWYgKGNhcCA9IHJ1bGVzLnFuYW1lLmV4ZWMoc2VsKSkge1xuICAgICAgc2VsID0gc2VsLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHFuYW1lID0gZGVjb2RlaWQoY2FwWzFdKTtcbiAgICAgIGJ1ZmYucHVzaCh0b2socW5hbWUsIHRydWUpKTtcbiAgICB9IGVsc2UgaWYgKGNhcCA9IHJ1bGVzLnNpbXBsZS5leGVjKHNlbCkpIHtcbiAgICAgIHNlbCA9IHNlbC5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBxbmFtZSA9ICcqJztcbiAgICAgIGJ1ZmYucHVzaCh0b2socW5hbWUsIHRydWUpKTtcbiAgICAgIGJ1ZmYucHVzaCh0b2soY2FwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignSW52YWxpZCBzZWxlY3Rvci4nKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2FwID0gcnVsZXMuc2ltcGxlLmV4ZWMoc2VsKSkge1xuICAgICAgc2VsID0gc2VsLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGJ1ZmYucHVzaCh0b2soY2FwKSk7XG4gICAgfVxuXG4gICAgaWYgKHNlbFswXSA9PT0gJyEnKSB7XG4gICAgICBzZWwgPSBzZWwuc3Vic3RyaW5nKDEpO1xuICAgICAgc3ViamVjdCA9IG1ha2VTdWJqZWN0KCk7XG4gICAgICBzdWJqZWN0LnFuYW1lID0gcW5hbWU7XG4gICAgICBidWZmLnB1c2goc3ViamVjdC5zaW1wbGUpO1xuICAgIH1cblxuICAgIGlmIChjYXAgPSBydWxlcy5yZWYuZXhlYyhzZWwpKSB7XG4gICAgICBzZWwgPSBzZWwuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgcmVmID0gY29tYmluYXRvcnMucmVmKG1ha2VTaW1wbGUoYnVmZiksIGRlY29kZWlkKGNhcFsxXSkpO1xuICAgICAgZmlsdGVyLnB1c2gocmVmLmNvbWJpbmF0b3IpO1xuICAgICAgYnVmZiA9IFtdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGNhcCA9IHJ1bGVzLmNvbWJpbmF0b3IuZXhlYyhzZWwpKSB7XG4gICAgICBzZWwgPSBzZWwuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3AgPSBjYXBbMV0gfHwgY2FwWzJdIHx8IGNhcFszXTtcbiAgICAgIGlmIChvcCA9PT0gJywnKSB7XG4gICAgICAgIGZpbHRlci5wdXNoKGNvbWJpbmF0b3JzLm5vb3AobWFrZVNpbXBsZShidWZmKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3AgPSAnbm9vcCc7XG4gICAgfVxuXG4gICAgaWYgKCFjb21iaW5hdG9yc1tvcF0pIHsgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdCYWQgY29tYmluYXRvci4nKTsgfVxuICAgIGZpbHRlci5wdXNoKGNvbWJpbmF0b3JzW29wXShtYWtlU2ltcGxlKGJ1ZmYpKSk7XG4gICAgYnVmZiA9IFtdO1xuICB9XG5cbiAgdGVzdCA9IG1ha2VUZXN0KGZpbHRlcik7XG4gIHRlc3QucW5hbWUgPSBxbmFtZTtcbiAgdGVzdC5zZWwgPSBzZWw7XG5cbiAgaWYgKHN1YmplY3QpIHtcbiAgICBzdWJqZWN0LmxuYW1lID0gdGVzdC5xbmFtZTtcblxuICAgIHN1YmplY3QudGVzdCA9IHRlc3Q7XG4gICAgc3ViamVjdC5xbmFtZSA9IHN1YmplY3QucW5hbWU7XG4gICAgc3ViamVjdC5zZWwgPSB0ZXN0LnNlbDtcbiAgICB0ZXN0ID0gc3ViamVjdDtcbiAgfVxuXG4gIGlmIChyZWYpIHtcbiAgICByZWYudGVzdCA9IHRlc3Q7XG4gICAgcmVmLnFuYW1lID0gdGVzdC5xbmFtZTtcbiAgICByZWYuc2VsID0gdGVzdC5zZWw7XG4gICAgdGVzdCA9IHJlZjtcbiAgfVxuXG4gIHJldHVybiB0ZXN0O1xufTtcblxudmFyIHRvayA9IGZ1bmN0aW9uKGNhcCwgcW5hbWUpIHtcbiAgLy8gcW5hbWVcbiAgaWYgKHFuYW1lKSB7XG4gICAgcmV0dXJuIGNhcCA9PT0gJyonXG4gICAgICA/IHNlbGVjdG9yc1snKiddXG4gICAgICA6IHNlbGVjdG9ycy50eXBlKGNhcCk7XG4gIH1cblxuICAvLyBjbGFzcy9pZFxuICBpZiAoY2FwWzFdKSB7XG4gICAgcmV0dXJuIGNhcFsxXVswXSA9PT0gJy4nXG5cdCAgLy8gWFhYIHVuZXNjYXBlIGhlcmU/ICBvciBpbiBhdHRyP1xuICAgICAgPyBzZWxlY3RvcnMuYXR0cignY2xhc3MnLCAnfj0nLCBkZWNvZGVpZChjYXBbMV0uc3Vic3RyaW5nKDEpKSwgZmFsc2UpXG4gICAgICA6IHNlbGVjdG9ycy5hdHRyKCdpZCcsICc9JywgZGVjb2RlaWQoY2FwWzFdLnN1YnN0cmluZygxKSksIGZhbHNlKTtcbiAgfVxuXG4gIC8vIHBzZXVkby1uYW1lXG4gIC8vIGluc2lkZS1wc2V1ZG9cbiAgaWYgKGNhcFsyXSkge1xuICAgIHJldHVybiBjYXBbM11cbiAgICAgID8gc2VsZWN0b3JzW2RlY29kZWlkKGNhcFsyXSldKHVucXVvdGUoY2FwWzNdKSlcbiAgICAgIDogc2VsZWN0b3JzW2RlY29kZWlkKGNhcFsyXSldO1xuICB9XG5cbiAgLy8gYXR0ciBuYW1lXG4gIC8vIGF0dHIgb3BcbiAgLy8gYXR0ciB2YWx1ZVxuICBpZiAoY2FwWzRdKSB7XG4gICAgdmFyIHZhbHVlID0gY2FwWzZdO1xuICAgIHZhciBpID0gL1tcIidcXHNdXFxzKkkkL2kudGVzdCh2YWx1ZSk7XG4gICAgaWYgKGkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxzKkkkL2ksICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdG9ycy5hdHRyKGRlY29kZWlkKGNhcFs0XSksIGNhcFs1XSB8fCAnLScsIHVucXVvdGUodmFsdWUpLCBpKTtcbiAgfVxuXG4gIHRocm93IG5ldyBTeW50YXhFcnJvcignVW5rbm93biBTZWxlY3Rvci4nKTtcbn07XG5cbnZhciBtYWtlU2ltcGxlID0gZnVuY3Rpb24oZnVuYykge1xuICB2YXIgbCA9IGZ1bmMubGVuZ3RoXG4gICAgLCBpO1xuXG4gIC8vIFBvdGVudGlhbGx5IG1ha2Ugc3VyZVxuICAvLyBgZWxgIGlzIHRydXRoeS5cbiAgaWYgKGwgPCAyKSByZXR1cm4gZnVuY1swXTtcblxuICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICBpZiAoIWVsKSByZXR1cm47XG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKCFmdW5jW2ldKGVsKSkgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbn07XG5cbnZhciBtYWtlVGVzdCA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgaWYgKGZ1bmMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBmdW5jdGlvbihlbCkge1xuICAgICAgcmV0dXJuICEhZnVuY1swXShlbCk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oZWwpIHtcbiAgICB2YXIgaSA9IGZ1bmMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICghKGVsID0gZnVuY1tpXShlbCkpKSByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xufTtcblxudmFyIG1ha2VTdWJqZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0YXJnZXQ7XG5cbiAgZnVuY3Rpb24gc3ViamVjdChlbCkge1xuICAgIHZhciBub2RlID0gZWwub3duZXJEb2N1bWVudFxuICAgICAgLCBzY29wZSA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc3ViamVjdC5sbmFtZSlcbiAgICAgICwgaSA9IHNjb3BlLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChzdWJqZWN0LnRlc3Qoc2NvcGVbaV0pICYmIHRhcmdldCA9PT0gZWwpIHtcbiAgICAgICAgdGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gbnVsbDtcbiAgfVxuXG4gIHN1YmplY3Quc2ltcGxlID0gZnVuY3Rpb24oZWwpIHtcbiAgICB0YXJnZXQgPSBlbDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICByZXR1cm4gc3ViamVjdDtcbn07XG5cbnZhciBjb21waWxlR3JvdXAgPSBmdW5jdGlvbihzZWwpIHtcbiAgdmFyIHRlc3QgPSBjb21waWxlKHNlbClcbiAgICAsIHRlc3RzID0gWyB0ZXN0IF07XG5cbiAgd2hpbGUgKHRlc3Quc2VsKSB7XG4gICAgdGVzdCA9IGNvbXBpbGUodGVzdC5zZWwpO1xuICAgIHRlc3RzLnB1c2godGVzdCk7XG4gIH1cblxuICBpZiAodGVzdHMubGVuZ3RoIDwgMikgcmV0dXJuIHRlc3Q7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGVsKSB7XG4gICAgdmFyIGwgPSB0ZXN0cy5sZW5ndGhcbiAgICAgICwgaSA9IDA7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHRlc3RzW2ldKGVsKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBTZWxlY3Rpb25cbiAqL1xuXG52YXIgZmluZCA9IGZ1bmN0aW9uKHNlbCwgbm9kZSkge1xuICB2YXIgcmVzdWx0cyA9IFtdXG4gICAgLCB0ZXN0ID0gY29tcGlsZShzZWwpXG4gICAgLCBzY29wZSA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGVzdC5xbmFtZSlcbiAgICAsIGkgPSAwXG4gICAgLCBlbDtcblxuICAvKmpzaGludCAtVzA4NCAqL1xuICB3aGlsZSAoZWwgPSBzY29wZVtpKytdKSB7XG4gICAgaWYgKHRlc3QoZWwpKSByZXN1bHRzLnB1c2goZWwpO1xuICB9XG5cbiAgaWYgKHRlc3Quc2VsKSB7XG4gICAgd2hpbGUgKHRlc3Quc2VsKSB7XG4gICAgICB0ZXN0ID0gY29tcGlsZSh0ZXN0LnNlbCk7XG4gICAgICBzY29wZSA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGVzdC5xbmFtZSk7XG4gICAgICBpID0gMDtcbiAgICAgIC8qanNoaW50IC1XMDg0ICovXG4gICAgICB3aGlsZSAoZWwgPSBzY29wZVtpKytdKSB7XG4gICAgICAgIGlmICh0ZXN0KGVsKSAmJiBpbmRleE9mLmNhbGwocmVzdWx0cywgZWwpID09PSAtMSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChlbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0cy5zb3J0KG9yZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBFeHBvc2VcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmdW5jdGlvbihzZWwsIGNvbnRleHQpIHtcbiAgLyogd2hlbiBjb250ZXh0IGlzbid0IGEgRG9jdW1lbnRGcmFnbWVudCBhbmQgdGhlIHNlbGVjdG9yIGlzIHNpbXBsZTogKi9cbiAgdmFyIGlkLCByO1xuICBpZiAoY29udGV4dC5ub2RlVHlwZSAhPT0gMTEgJiYgc2VsLmluZGV4T2YoJyAnKSA9PT0gLTEpIHtcbiAgICBpZiAoc2VsWzBdID09PSAnIycgJiYgY29udGV4dC5yb290ZWQgJiYgL14jW0EtWl9dWy1BLVowLTlfXSokL2kudGVzdChzZWwpKSB7XG4gICAgICBpZiAoY29udGV4dC5kb2MuX2hhc011bHRpcGxlRWxlbWVudHNXaXRoSWQpIHtcbiAgICAgICAgaWQgPSBzZWwuc3Vic3RyaW5nKDEpO1xuICAgICAgICBpZiAoIWNvbnRleHQuZG9jLl9oYXNNdWx0aXBsZUVsZW1lbnRzV2l0aElkKGlkKSkge1xuICAgICAgICAgIHIgPSBjb250ZXh0LmRvYy5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgICAgcmV0dXJuIHIgPyBbcl0gOiBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2VsWzBdID09PSAnLicgJiYgL15cXC5cXHcrJC8udGVzdChzZWwpKSB7XG4gICAgICByZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHNlbC5zdWJzdHJpbmcoMSkpO1xuICAgIH1cbiAgICBpZiAoL15cXHcrJC8udGVzdChzZWwpKSB7XG4gICAgICByZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWwpO1xuICAgIH1cbiAgfVxuICAvKiBkbyB0aGluZ3MgdGhlIGhhcmQvc2xvdyB3YXkgKi9cbiAgcmV0dXJuIGZpbmQoc2VsLCBjb250ZXh0KTtcbn07XG5cbmV4cG9ydHMuc2VsZWN0b3JzID0gc2VsZWN0b3JzO1xuZXhwb3J0cy5vcGVyYXRvcnMgPSBvcGVyYXRvcnM7XG5leHBvcnRzLmNvbWJpbmF0b3JzID0gY29tYmluYXRvcnM7XG5cbmV4cG9ydHMubWF0Y2hlcyA9IGZ1bmN0aW9uKGVsLCBzZWwpIHtcbiAgdmFyIHRlc3QgPSB7IHNlbDogc2VsIH07XG4gIGRvIHtcbiAgICB0ZXN0ID0gY29tcGlsZSh0ZXN0LnNlbCk7XG4gICAgaWYgKHRlc3QoZWwpKSB7IHJldHVybiB0cnVlOyB9XG4gIH0gd2hpbGUgKHRlc3Quc2VsKTtcbiAgcmV0dXJuIGZhbHNlO1xufTtcbiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJPYmplY3QiLCJjcmVhdGUiLCJsb2NhdGlvbiIsImdldCIsIkVycm9yIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhIiwiYiIsIm9yZGVyIiwibmV4dCIsImVsIiwibmV4dFNpYmxpbmciLCJub2RlVHlwZSIsInByZXYiLCJwcmV2aW91c1NpYmxpbmciLCJjaGlsZCIsImZpcnN0Q2hpbGQiLCJsYXN0Q2hpbGQiLCJwYXJlbnRJc0VsZW1lbnQiLCJuIiwicGFyZW50Tm9kZSIsInVucXVvdGUiLCJzdHIiLCJjaCIsImxlbmd0aCIsInNsaWNlIiwicmVwbGFjZSIsInJ1bGVzIiwic3RyX2VzY2FwZSIsInMiLCJtIiwiZXhlYyIsImNwIiwicGFyc2VJbnQiLCJTdHJpbmciLCJmcm9tQ29kZVBvaW50IiwiZnJvbUNoYXJDb2RlIiwiaWRlbnQiLCJ0ZXN0IiwiZGVjb2RlaWQiLCJlc2NhcGUiLCJpbmRleE9mIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJvYmoiLCJpdGVtIiwiaSIsIm1ha2VJbnNpZGUiLCJzdGFydCIsImVuZCIsInJlZ2V4IiwiaW5zaWRlIiwic291cmNlIiwiUmVnRXhwIiwibmFtZSIsInZhbCIsInRydW5jYXRlVXJsIiwidXJsIiwibnVtIiwic3BsaXQiLCJqb2luIiwicGFyc2VOdGgiLCJwYXJhbV8iLCJwYXJhbSIsImNhcCIsImdyb3VwIiwib2Zmc2V0IiwibnRoIiwibGFzdCIsImZpbmQiLCJhZHZhbmNlIiwicmVsIiwicG9zIiwic2VsZWN0b3JzIiwidHlwZSIsInRvTG93ZXJDYXNlIiwibm9kZU5hbWUiLCJrZXkiLCJvcCIsIm9wZXJhdG9ycyIsImF0dHIiLCJodG1sRm9yIiwiY2xhc3NOYW1lIiwiZ2V0QXR0cmlidXRlIiwiaGFzQXR0cmlidXRlIiwib3duZXJEb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInNlbCIsImNvbXBpbGVHcm91cCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsImRpc2FibGVkIiwiaWQiLCJoYXNoIiwic3Vic3RyaW5nIiwiYWN0aXZlRWxlbWVudCIsImFyZ3MiLCJhcmciLCJzaGlmdCIsImxhbmciLCJkaXIiLCJjb24iLCJjb250ZXh0IiwiaHJlZiIsImhvc3QiLCJkZWZhdWx0U2VsZWN0ZWQiLCJ3aWxsVmFsaWRhdGUiLCJ2YWxpZGl0eSIsInZhbGlkIiwidmFsdWUiLCJtaW4iLCJtYXgiLCJyZXF1aXJlZCIsInJlYWRPbmx5IiwicHJvcCIsImNvbnRlbnRFZGl0YWJsZSIsInRleHQiLCJpbm5lclRleHQiLCJ0ZXh0Q29udGVudCIsImYiLCJsIiwibGFzdEluZGV4T2YiLCJjb21iaW5hdG9ycyIsIm5vZGUiLCJyZWYiLCJkb2MiLCJub2RlcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY29tYmluYXRvciIsIm5vbmFzY2lpIiwiY3NzaWQiLCJxbmFtZSIsInNpbXBsZSIsInBzZXVkbyIsImNvbXBpbGUiLCJzZWxfIiwiZmlsdGVyIiwiYnVmZiIsInN1YmplY3QiLCJwdXNoIiwidG9rIiwiU3ludGF4RXJyb3IiLCJtYWtlU3ViamVjdCIsIm1ha2VTaW1wbGUiLCJub29wIiwibWFrZVRlc3QiLCJsbmFtZSIsImZ1bmMiLCJ0YXJnZXQiLCJzY29wZSIsInRlc3RzIiwicmVzdWx0cyIsImNhbGwiLCJzb3J0IiwibW9kdWxlIiwiZXhwb3J0cyIsInIiLCJyb290ZWQiLCJfaGFzTXVsdGlwbGVFbGVtZW50c1dpdGhJZCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIm1hdGNoZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/select.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/sloppy.js":
/*!****************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/sloppy.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("/* Domino uses sloppy-mode features (in particular, `with`) for a few\n * minor things.  This file encapsulates all the sloppiness; every\n * other module should be strict. */ /* jshint evil: true */ \nmodule.exports = {\n    Window_run: function _run(code, file) {\n        \"use strict\";\n        if (file) code += \"\\n//@ sourceURL=\" + file;\n        new Function(\"code\", \"with(this) eval(code)\").call(this, code);\n    },\n    EventHandlerBuilder_build: function build() {\n        \"use strict\";\n        try {\n            return new Function(\"defaultView\", \"document\", \"form\", \"element\", \"event\", \"with(defaultView)with(document)with(form)with(element){\" + this.body + \"};\").bind(this, this.document.defaultView || Object.create(null), this.document, this.form, this.element);\n        } catch (err) {\n            return function() {\n                throw err;\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9zbG9wcHkuanMiLCJtYXBwaW5ncyI6IkFBQUE7O2tDQUVrQyxHQUNsQyxxQkFBcUI7QUFDckJBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxZQUFZLFNBQVNDLEtBQUtDLElBQUksRUFBRUMsSUFBSTtRQUNsQztRQUNBLElBQUlBLE1BQU1ELFFBQVEscUJBQXFCQztRQUN2QyxJQUFJQyxTQUFTLFFBQVEseUJBQXlCQyxJQUFJLENBQUMsSUFBSSxFQUFFSDtJQUMzRDtJQUNBSSwyQkFBMkIsU0FBU0M7UUFDbEM7UUFDQSxJQUFJO1lBQ0YsT0FBTyxJQUFJSCxTQUFTLGVBQWUsWUFBWSxRQUFRLFdBQVcsU0FBUyw0REFBMEQsSUFBSSxDQUFDSSxJQUFJLEdBQUMsTUFBTUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNDLFFBQVEsQ0FBQ0MsV0FBVyxJQUFJQyxPQUFPQyxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUNILFFBQVEsRUFBRSxJQUFJLENBQUNJLElBQUksRUFBRSxJQUFJLENBQUNDLE9BQU87UUFDMVAsRUFBRSxPQUFPQyxLQUFLO1lBQ1osT0FBTztnQkFBYyxNQUFNQTtZQUFLO1FBQ2xDO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbWF0aHBpeC9kb21pbm8vbGliL3Nsb3BweS5qcz9kMDZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIERvbWlubyB1c2VzIHNsb3BweS1tb2RlIGZlYXR1cmVzIChpbiBwYXJ0aWN1bGFyLCBgd2l0aGApIGZvciBhIGZld1xuICogbWlub3IgdGhpbmdzLiAgVGhpcyBmaWxlIGVuY2Fwc3VsYXRlcyBhbGwgdGhlIHNsb3BwaW5lc3M7IGV2ZXJ5XG4gKiBvdGhlciBtb2R1bGUgc2hvdWxkIGJlIHN0cmljdC4gKi9cbi8qIGpzaGludCBldmlsOiB0cnVlICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgV2luZG93X3J1bjogZnVuY3Rpb24gX3J1bihjb2RlLCBmaWxlKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgaWYgKGZpbGUpIGNvZGUgKz0gJ1xcbi8vQCBzb3VyY2VVUkw9JyArIGZpbGU7XG4gICAgbmV3IEZ1bmN0aW9uKFwiY29kZVwiLCBcIndpdGgodGhpcykgZXZhbChjb2RlKVwiKS5jYWxsKHRoaXMsIGNvZGUpO1xuICB9LFxuICBFdmVudEhhbmRsZXJCdWlsZGVyX2J1aWxkOiBmdW5jdGlvbiBidWlsZCgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRlZmF1bHRWaWV3XCIsIFwiZG9jdW1lbnRcIiwgXCJmb3JtXCIsIFwiZWxlbWVudFwiLCBcImV2ZW50XCIsIFwid2l0aChkZWZhdWx0Vmlldyl3aXRoKGRvY3VtZW50KXdpdGgoZm9ybSl3aXRoKGVsZW1lbnQpe1wiK3RoaXMuYm9keStcIn07XCIpLmJpbmQodGhpcywgdGhpcy5kb2N1bWVudC5kZWZhdWx0VmlldyB8fCBPYmplY3QuY3JlYXRlKG51bGwpLCB0aGlzLmRvY3VtZW50LCB0aGlzLmZvcm0sIHRoaXMuZWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnI7IH07XG4gICAgfVxuICB9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXaW5kb3dfcnVuIiwiX3J1biIsImNvZGUiLCJmaWxlIiwiRnVuY3Rpb24iLCJjYWxsIiwiRXZlbnRIYW5kbGVyQnVpbGRlcl9idWlsZCIsImJ1aWxkIiwiYm9keSIsImJpbmQiLCJkb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiT2JqZWN0IiwiY3JlYXRlIiwiZm9ybSIsImVsZW1lbnQiLCJlcnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/sloppy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/svg.js":
/*!*************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/svg.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar Element = __webpack_require__(/*! ./Element */ \"(ssr)/./node_modules/@mathpix/domino/lib/Element.js\");\nvar defineElement = __webpack_require__(/*! ./defineElement */ \"(ssr)/./node_modules/@mathpix/domino/lib/defineElement.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mathpix/domino/lib/utils.js\");\nvar CSSStyleDeclaration = __webpack_require__(/*! ./CSSStyleDeclaration */ \"(ssr)/./node_modules/@mathpix/domino/lib/CSSStyleDeclaration.js\");\nvar svgElements = exports.elements = {};\nvar svgNameToImpl = Object.create(null);\nexports.createElement = function(doc, localName, prefix) {\n    var impl = svgNameToImpl[localName] || SVGElement;\n    return new impl(doc, localName, prefix);\n};\nfunction define(spec) {\n    return defineElement(spec, SVGElement, svgElements, svgNameToImpl);\n}\nvar SVGElement = define({\n    superclass: Element,\n    ctor: function SVGElement(doc, localName, prefix) {\n        Element.call(this, doc, localName, utils.NAMESPACE.SVG, prefix);\n    },\n    props: {\n        style: {\n            get: function() {\n                if (!this._style) this._style = new CSSStyleDeclaration(this);\n                return this._style;\n            }\n        }\n    }\n});\ndefine({\n    ctor: function SVGSVGElement(doc, localName, prefix) {\n        SVGElement.call(this, doc, localName, prefix);\n    },\n    tag: \"svg\",\n    props: {\n        createSVGRect: {\n            value: function() {\n                return exports.createElement(this.ownerDocument, \"rect\", null);\n            }\n        }\n    }\n});\ndefine({\n    tags: [\n        \"a\",\n        \"altGlyph\",\n        \"altGlyphDef\",\n        \"altGlyphItem\",\n        \"animate\",\n        \"animateColor\",\n        \"animateMotion\",\n        \"animateTransform\",\n        \"circle\",\n        \"clipPath\",\n        \"color-profile\",\n        \"cursor\",\n        \"defs\",\n        \"desc\",\n        \"ellipse\",\n        \"feBlend\",\n        \"feColorMatrix\",\n        \"feComponentTransfer\",\n        \"feComposite\",\n        \"feConvolveMatrix\",\n        \"feDiffuseLighting\",\n        \"feDisplacementMap\",\n        \"feDistantLight\",\n        \"feFlood\",\n        \"feFuncA\",\n        \"feFuncB\",\n        \"feFuncG\",\n        \"feFuncR\",\n        \"feGaussianBlur\",\n        \"feImage\",\n        \"feMerge\",\n        \"feMergeNode\",\n        \"feMorphology\",\n        \"feOffset\",\n        \"fePointLight\",\n        \"feSpecularLighting\",\n        \"feSpotLight\",\n        \"feTile\",\n        \"feTurbulence\",\n        \"filter\",\n        \"font\",\n        \"font-face\",\n        \"font-face-format\",\n        \"font-face-name\",\n        \"font-face-src\",\n        \"font-face-uri\",\n        \"foreignObject\",\n        \"g\",\n        \"glyph\",\n        \"glyphRef\",\n        \"hkern\",\n        \"image\",\n        \"line\",\n        \"linearGradient\",\n        \"marker\",\n        \"mask\",\n        \"metadata\",\n        \"missing-glyph\",\n        \"mpath\",\n        \"path\",\n        \"pattern\",\n        \"polygon\",\n        \"polyline\",\n        \"radialGradient\",\n        \"rect\",\n        \"script\",\n        \"set\",\n        \"stop\",\n        \"style\",\n        \"switch\",\n        \"symbol\",\n        \"text\",\n        \"textPath\",\n        \"title\",\n        \"tref\",\n        \"tspan\",\n        \"use\",\n        \"view\",\n        \"vkern\"\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi9zdmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN0QixJQUFJQyxnQkFBZ0JELG1CQUFPQSxDQUFDO0FBQzVCLElBQUlFLFFBQVFGLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlHLHNCQUFzQkgsbUJBQU9BLENBQUM7QUFFbEMsSUFBSUksY0FBY0MsZ0JBQWdCLEdBQUcsQ0FBQztBQUN0QyxJQUFJRSxnQkFBZ0JDLE9BQU9DLE1BQU0sQ0FBQztBQUVsQ0oscUJBQXFCLEdBQUcsU0FBU00sR0FBRyxFQUFFQyxTQUFTLEVBQUVDLE1BQU07SUFDckQsSUFBSUMsT0FBT1AsYUFBYSxDQUFDSyxVQUFVLElBQUlHO0lBQ3ZDLE9BQU8sSUFBSUQsS0FBS0gsS0FBS0MsV0FBV0M7QUFDbEM7QUFFQSxTQUFTRyxPQUFPQyxJQUFJO0lBQ2xCLE9BQU9oQixjQUFjZ0IsTUFBTUYsWUFBWVgsYUFBYUc7QUFDdEQ7QUFFQSxJQUFJUSxhQUFhQyxPQUFPO0lBQ3RCRSxZQUFZbkI7SUFDWm9CLE1BQU0sU0FBU0osV0FBV0osR0FBRyxFQUFFQyxTQUFTLEVBQUVDLE1BQU07UUFDOUNkLFFBQVFxQixJQUFJLENBQUMsSUFBSSxFQUFFVCxLQUFLQyxXQUFXVixNQUFNbUIsU0FBUyxDQUFDQyxHQUFHLEVBQUVUO0lBQzFEO0lBQ0FVLE9BQU87UUFDTEMsT0FBTztZQUFFQyxLQUFLO2dCQUNaLElBQUksQ0FBQyxJQUFJLENBQUNDLE1BQU0sRUFDZCxJQUFJLENBQUNBLE1BQU0sR0FBRyxJQUFJdkIsb0JBQW9CLElBQUk7Z0JBQzVDLE9BQU8sSUFBSSxDQUFDdUIsTUFBTTtZQUNwQjtRQUFDO0lBQ0g7QUFDRjtBQUVBVixPQUFPO0lBQ0xHLE1BQU0sU0FBU1EsY0FBY2hCLEdBQUcsRUFBRUMsU0FBUyxFQUFFQyxNQUFNO1FBQ2pERSxXQUFXSyxJQUFJLENBQUMsSUFBSSxFQUFFVCxLQUFLQyxXQUFXQztJQUN4QztJQUNBZSxLQUFLO0lBQ0xMLE9BQU87UUFDTE0sZUFBZTtZQUFFQyxPQUFPO2dCQUN0QixPQUFPekIsUUFBUUssYUFBYSxDQUFDLElBQUksQ0FBQ3FCLGFBQWEsRUFBRSxRQUFRO1lBQzNEO1FBQUU7SUFDSjtBQUNGO0FBRUFmLE9BQU87SUFDTGdCLE1BQU07UUFDSjtRQUFLO1FBQVk7UUFBZTtRQUFnQjtRQUFXO1FBQWdCO1FBQWlCO1FBQzVGO1FBQVU7UUFBWTtRQUFpQjtRQUFVO1FBQVE7UUFBUTtRQUFXO1FBQVc7UUFDdkY7UUFBdUI7UUFBZTtRQUFvQjtRQUFxQjtRQUFxQjtRQUNwRztRQUFXO1FBQVc7UUFBVztRQUFXO1FBQVc7UUFBa0I7UUFBVztRQUFXO1FBQy9GO1FBQWdCO1FBQVk7UUFBZ0I7UUFBc0I7UUFBZTtRQUFVO1FBQWdCO1FBQzNHO1FBQVE7UUFBYTtRQUFvQjtRQUFrQjtRQUFpQjtRQUFpQjtRQUFpQjtRQUM5RztRQUFTO1FBQVk7UUFBUztRQUFTO1FBQVE7UUFBa0I7UUFBVTtRQUFRO1FBQVk7UUFDL0Y7UUFBUztRQUFRO1FBQVc7UUFBVztRQUFZO1FBQWtCO1FBQVE7UUFBVTtRQUFPO1FBQVM7UUFDdkc7UUFBVTtRQUFVO1FBQVE7UUFBWTtRQUFTO1FBQVE7UUFBUztRQUFPO1FBQVE7S0FDbEY7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AbWF0aHBpeC9kb21pbm8vbGliL3N2Zy5qcz8wM2M3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIEVsZW1lbnQgPSByZXF1aXJlKCcuL0VsZW1lbnQnKTtcbnZhciBkZWZpbmVFbGVtZW50ID0gcmVxdWlyZSgnLi9kZWZpbmVFbGVtZW50Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgQ1NTU3R5bGVEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vQ1NTU3R5bGVEZWNsYXJhdGlvbicpO1xuXG52YXIgc3ZnRWxlbWVudHMgPSBleHBvcnRzLmVsZW1lbnRzID0ge307XG52YXIgc3ZnTmFtZVRvSW1wbCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpIHtcbiAgdmFyIGltcGwgPSBzdmdOYW1lVG9JbXBsW2xvY2FsTmFtZV0gfHwgU1ZHRWxlbWVudDtcbiAgcmV0dXJuIG5ldyBpbXBsKGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xufTtcblxuZnVuY3Rpb24gZGVmaW5lKHNwZWMpIHtcbiAgcmV0dXJuIGRlZmluZUVsZW1lbnQoc3BlYywgU1ZHRWxlbWVudCwgc3ZnRWxlbWVudHMsIHN2Z05hbWVUb0ltcGwpO1xufVxuXG52YXIgU1ZHRWxlbWVudCA9IGRlZmluZSh7XG4gIHN1cGVyY2xhc3M6IEVsZW1lbnQsXG4gIGN0b3I6IGZ1bmN0aW9uIFNWR0VsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xuICAgIEVsZW1lbnQuY2FsbCh0aGlzLCBkb2MsIGxvY2FsTmFtZSwgdXRpbHMuTkFNRVNQQUNFLlNWRywgcHJlZml4KTtcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBzdHlsZTogeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLl9zdHlsZSlcbiAgICAgICAgdGhpcy5fc3R5bGUgPSBuZXcgQ1NTU3R5bGVEZWNsYXJhdGlvbih0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzLl9zdHlsZTtcbiAgICB9fVxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgY3RvcjogZnVuY3Rpb24gU1ZHU1ZHRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XG4gICAgU1ZHRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCBwcmVmaXgpO1xuICB9LFxuICB0YWc6ICdzdmcnLFxuICBwcm9wczoge1xuICAgIGNyZWF0ZVNWR1JlY3Q6IHsgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmNyZWF0ZUVsZW1lbnQodGhpcy5vd25lckRvY3VtZW50LCAncmVjdCcsIG51bGwpO1xuICAgIH0gfVxuICB9XG59KTtcblxuZGVmaW5lKHtcbiAgdGFnczogW1xuICAgICdhJywgJ2FsdEdseXBoJywgJ2FsdEdseXBoRGVmJywgJ2FsdEdseXBoSXRlbScsICdhbmltYXRlJywgJ2FuaW1hdGVDb2xvcicsICdhbmltYXRlTW90aW9uJywgJ2FuaW1hdGVUcmFuc2Zvcm0nLFxuICAgICdjaXJjbGUnLCAnY2xpcFBhdGgnLCAnY29sb3ItcHJvZmlsZScsICdjdXJzb3InLCAnZGVmcycsICdkZXNjJywgJ2VsbGlwc2UnLCAnZmVCbGVuZCcsICdmZUNvbG9yTWF0cml4JyxcbiAgICAnZmVDb21wb25lbnRUcmFuc2ZlcicsICdmZUNvbXBvc2l0ZScsICdmZUNvbnZvbHZlTWF0cml4JywgJ2ZlRGlmZnVzZUxpZ2h0aW5nJywgJ2ZlRGlzcGxhY2VtZW50TWFwJywgJ2ZlRGlzdGFudExpZ2h0JyxcbiAgICAnZmVGbG9vZCcsICdmZUZ1bmNBJywgJ2ZlRnVuY0InLCAnZmVGdW5jRycsICdmZUZ1bmNSJywgJ2ZlR2F1c3NpYW5CbHVyJywgJ2ZlSW1hZ2UnLCAnZmVNZXJnZScsICdmZU1lcmdlTm9kZScsXG4gICAgJ2ZlTW9ycGhvbG9neScsICdmZU9mZnNldCcsICdmZVBvaW50TGlnaHQnLCAnZmVTcGVjdWxhckxpZ2h0aW5nJywgJ2ZlU3BvdExpZ2h0JywgJ2ZlVGlsZScsICdmZVR1cmJ1bGVuY2UnLCAnZmlsdGVyJyxcbiAgICAnZm9udCcsICdmb250LWZhY2UnLCAnZm9udC1mYWNlLWZvcm1hdCcsICdmb250LWZhY2UtbmFtZScsICdmb250LWZhY2Utc3JjJywgJ2ZvbnQtZmFjZS11cmknLCAnZm9yZWlnbk9iamVjdCcsICdnJyxcbiAgICAnZ2x5cGgnLCAnZ2x5cGhSZWYnLCAnaGtlcm4nLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXJrZXInLCAnbWFzaycsICdtZXRhZGF0YScsICdtaXNzaW5nLWdseXBoJyxcbiAgICAnbXBhdGgnLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzY3JpcHQnLCAnc2V0JywgJ3N0b3AnLCAgJ3N0eWxlJyxcbiAgICAnc3dpdGNoJywgJ3N5bWJvbCcsICd0ZXh0JywgJ3RleHRQYXRoJywgJ3RpdGxlJywgJ3RyZWYnLCAndHNwYW4nLCAndXNlJywgJ3ZpZXcnLCAndmtlcm4nXG4gIF1cbn0pO1xuIl0sIm5hbWVzIjpbIkVsZW1lbnQiLCJyZXF1aXJlIiwiZGVmaW5lRWxlbWVudCIsInV0aWxzIiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsInN2Z0VsZW1lbnRzIiwiZXhwb3J0cyIsImVsZW1lbnRzIiwic3ZnTmFtZVRvSW1wbCIsIk9iamVjdCIsImNyZWF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJkb2MiLCJsb2NhbE5hbWUiLCJwcmVmaXgiLCJpbXBsIiwiU1ZHRWxlbWVudCIsImRlZmluZSIsInNwZWMiLCJzdXBlcmNsYXNzIiwiY3RvciIsImNhbGwiLCJOQU1FU1BBQ0UiLCJTVkciLCJwcm9wcyIsInN0eWxlIiwiZ2V0IiwiX3N0eWxlIiwiU1ZHU1ZHRWxlbWVudCIsInRhZyIsImNyZWF0ZVNWR1JlY3QiLCJ2YWx1ZSIsIm93bmVyRG9jdW1lbnQiLCJ0YWdzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/utils.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar DOMException = __webpack_require__(/*! ./DOMException */ \"(ssr)/./node_modules/@mathpix/domino/lib/DOMException.js\");\nvar ERR = DOMException;\nvar isApiWritable = (__webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@mathpix/domino/lib/config.js\").isApiWritable);\nexports.NAMESPACE = {\n    HTML: \"http://www.w3.org/1999/xhtml\",\n    XML: \"http://www.w3.org/XML/1998/namespace\",\n    XMLNS: \"http://www.w3.org/2000/xmlns/\",\n    MATHML: \"http://www.w3.org/1998/Math/MathML\",\n    SVG: \"http://www.w3.org/2000/svg\",\n    XLINK: \"http://www.w3.org/1999/xlink\"\n};\n//\n// Shortcut functions for throwing errors of various types.\n//\nexports.IndexSizeError = function() {\n    throw new DOMException(ERR.INDEX_SIZE_ERR);\n};\nexports.HierarchyRequestError = function() {\n    throw new DOMException(ERR.HIERARCHY_REQUEST_ERR);\n};\nexports.WrongDocumentError = function() {\n    throw new DOMException(ERR.WRONG_DOCUMENT_ERR);\n};\nexports.InvalidCharacterError = function() {\n    throw new DOMException(ERR.INVALID_CHARACTER_ERR);\n};\nexports.NoModificationAllowedError = function() {\n    throw new DOMException(ERR.NO_MODIFICATION_ALLOWED_ERR);\n};\nexports.NotFoundError = function() {\n    throw new DOMException(ERR.NOT_FOUND_ERR);\n};\nexports.NotSupportedError = function() {\n    throw new DOMException(ERR.NOT_SUPPORTED_ERR);\n};\nexports.InvalidStateError = function() {\n    throw new DOMException(ERR.INVALID_STATE_ERR);\n};\nexports.SyntaxError = function() {\n    throw new DOMException(ERR.SYNTAX_ERR);\n};\nexports.InvalidModificationError = function() {\n    throw new DOMException(ERR.INVALID_MODIFICATION_ERR);\n};\nexports.NamespaceError = function() {\n    throw new DOMException(ERR.NAMESPACE_ERR);\n};\nexports.InvalidAccessError = function() {\n    throw new DOMException(ERR.INVALID_ACCESS_ERR);\n};\nexports.TypeMismatchError = function() {\n    throw new DOMException(ERR.TYPE_MISMATCH_ERR);\n};\nexports.SecurityError = function() {\n    throw new DOMException(ERR.SECURITY_ERR);\n};\nexports.NetworkError = function() {\n    throw new DOMException(ERR.NETWORK_ERR);\n};\nexports.AbortError = function() {\n    throw new DOMException(ERR.ABORT_ERR);\n};\nexports.UrlMismatchError = function() {\n    throw new DOMException(ERR.URL_MISMATCH_ERR);\n};\nexports.QuotaExceededError = function() {\n    throw new DOMException(ERR.QUOTA_EXCEEDED_ERR);\n};\nexports.TimeoutError = function() {\n    throw new DOMException(ERR.TIMEOUT_ERR);\n};\nexports.InvalidNodeTypeError = function() {\n    throw new DOMException(ERR.INVALID_NODE_TYPE_ERR);\n};\nexports.DataCloneError = function() {\n    throw new DOMException(ERR.DATA_CLONE_ERR);\n};\nexports.nyi = function() {\n    throw new Error(\"NotYetImplemented\");\n};\nexports.shouldOverride = function() {\n    throw new Error(\"Abstract function; should be overriding in subclass.\");\n};\nexports.assert = function(expr, msg) {\n    if (!expr) {\n        throw new Error(\"Assertion failed: \" + (msg || \"\") + \"\\n\" + new Error().stack);\n    }\n};\nexports.expose = function(src, c) {\n    for(var n in src){\n        Object.defineProperty(c.prototype, n, {\n            value: src[n],\n            writable: isApiWritable\n        });\n    }\n};\nexports.merge = function(a, b) {\n    for(var n in b){\n        a[n] = b[n];\n    }\n};\n// Compare two nodes based on their document order. This function is intended\n// to be passed to sort(). Assumes that the array being sorted does not\n// contain duplicates.  And that all nodes are connected and comparable.\n// Clever code by ppk via jeresig.\nexports.documentOrder = function(n, m) {\n    /* jshint bitwise: false */ return 3 - (n.compareDocumentPosition(m) & 6);\n};\nexports.toASCIILowerCase = function(s) {\n    return s.replace(/[A-Z]+/g, function(c) {\n        return c.toLowerCase();\n    });\n};\nexports.toASCIIUpperCase = function(s) {\n    return s.replace(/[a-z]+/g, function(c) {\n        return c.toUpperCase();\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDO0FBQzNCLElBQUlDLE1BQU1GO0FBQ1YsSUFBSUcsZ0JBQWdCRix5R0FBaUM7QUFFckRHLGlCQUFpQixHQUFHO0lBQ2xCRSxNQUFNO0lBQ05DLEtBQUs7SUFDTEMsT0FBTztJQUNQQyxRQUFRO0lBQ1JDLEtBQUs7SUFDTEMsT0FBTztBQUNUO0FBRUEsRUFBRTtBQUNGLDJEQUEyRDtBQUMzRCxFQUFFO0FBQ0ZQLHNCQUFzQixHQUFHO0lBQWEsTUFBTSxJQUFJSixhQUFhRSxJQUFJVyxjQUFjO0FBQUc7QUFDbEZULDZCQUE2QixHQUFHO0lBQWEsTUFBTSxJQUFJSixhQUFhRSxJQUFJYSxxQkFBcUI7QUFBRztBQUNoR1gsMEJBQTBCLEdBQUc7SUFBYSxNQUFNLElBQUlKLGFBQWFFLElBQUllLGtCQUFrQjtBQUFHO0FBQzFGYiw2QkFBNkIsR0FBRztJQUFhLE1BQU0sSUFBSUosYUFBYUUsSUFBSWlCLHFCQUFxQjtBQUFHO0FBQ2hHZixrQ0FBa0MsR0FBRztJQUFhLE1BQU0sSUFBSUosYUFBYUUsSUFBSW1CLDJCQUEyQjtBQUFHO0FBQzNHakIscUJBQXFCLEdBQUc7SUFBYSxNQUFNLElBQUlKLGFBQWFFLElBQUlxQixhQUFhO0FBQUc7QUFDaEZuQix5QkFBeUIsR0FBRztJQUFhLE1BQU0sSUFBSUosYUFBYUUsSUFBSXVCLGlCQUFpQjtBQUFHO0FBQ3hGckIseUJBQXlCLEdBQUc7SUFBYSxNQUFNLElBQUlKLGFBQWFFLElBQUl5QixpQkFBaUI7QUFBRztBQUN4RnZCLG1CQUFtQixHQUFHO0lBQWEsTUFBTSxJQUFJSixhQUFhRSxJQUFJMkIsVUFBVTtBQUFHO0FBQzNFekIsZ0NBQWdDLEdBQUc7SUFBYSxNQUFNLElBQUlKLGFBQWFFLElBQUk2Qix3QkFBd0I7QUFBRztBQUN0RzNCLHNCQUFzQixHQUFHO0lBQWEsTUFBTSxJQUFJSixhQUFhRSxJQUFJK0IsYUFBYTtBQUFHO0FBQ2pGN0IsMEJBQTBCLEdBQUc7SUFBYSxNQUFNLElBQUlKLGFBQWFFLElBQUlpQyxrQkFBa0I7QUFBRztBQUMxRi9CLHlCQUF5QixHQUFHO0lBQWEsTUFBTSxJQUFJSixhQUFhRSxJQUFJbUMsaUJBQWlCO0FBQUc7QUFDeEZqQyxxQkFBcUIsR0FBRztJQUFhLE1BQU0sSUFBSUosYUFBYUUsSUFBSXFDLFlBQVk7QUFBRztBQUMvRW5DLG9CQUFvQixHQUFHO0lBQWEsTUFBTSxJQUFJSixhQUFhRSxJQUFJdUMsV0FBVztBQUFHO0FBQzdFckMsa0JBQWtCLEdBQUc7SUFBYSxNQUFNLElBQUlKLGFBQWFFLElBQUl5QyxTQUFTO0FBQUc7QUFDekV2Qyx3QkFBd0IsR0FBRztJQUFhLE1BQU0sSUFBSUosYUFBYUUsSUFBSTJDLGdCQUFnQjtBQUFHO0FBQ3RGekMsMEJBQTBCLEdBQUc7SUFBYSxNQUFNLElBQUlKLGFBQWFFLElBQUk2QyxrQkFBa0I7QUFBRztBQUMxRjNDLG9CQUFvQixHQUFHO0lBQWEsTUFBTSxJQUFJSixhQUFhRSxJQUFJK0MsV0FBVztBQUFHO0FBQzdFN0MsNEJBQTRCLEdBQUc7SUFBYSxNQUFNLElBQUlKLGFBQWFFLElBQUlpRCxxQkFBcUI7QUFBRztBQUMvRi9DLHNCQUFzQixHQUFHO0lBQWEsTUFBTSxJQUFJSixhQUFhRSxJQUFJbUQsY0FBYztBQUFHO0FBRWxGakQsV0FBVyxHQUFHO0lBQ1osTUFBTSxJQUFJbUQsTUFBTTtBQUNsQjtBQUVBbkQsc0JBQXNCLEdBQUc7SUFDdkIsTUFBTSxJQUFJbUQsTUFBTTtBQUNsQjtBQUVBbkQsY0FBYyxHQUFHLFNBQVNzRCxJQUFJLEVBQUVDLEdBQUc7SUFDakMsSUFBSSxDQUFDRCxNQUFNO1FBQ1QsTUFBTSxJQUFJSCxNQUFNLHVCQUF3QkksQ0FBQUEsT0FBTyxFQUFDLElBQUssT0FBTyxJQUFJSixRQUFRSyxLQUFLO0lBQy9FO0FBQ0Y7QUFFQXhELGNBQWMsR0FBRyxTQUFTMEQsR0FBRyxFQUFFQyxDQUFDO0lBQzlCLElBQUssSUFBSUMsS0FBS0YsSUFBSztRQUNqQkcsT0FBT0MsY0FBYyxDQUFDSCxFQUFFSSxTQUFTLEVBQUVILEdBQUc7WUFBRUksT0FBT04sR0FBRyxDQUFDRSxFQUFFO1lBQUVLLFVBQVVsRTtRQUFjO0lBQ2pGO0FBQ0Y7QUFFQUMsYUFBYSxHQUFHLFNBQVNtRSxDQUFDLEVBQUVDLENBQUM7SUFDM0IsSUFBSyxJQUFJUixLQUFLUSxFQUFHO1FBQ2ZELENBQUMsQ0FBQ1AsRUFBRSxHQUFHUSxDQUFDLENBQUNSLEVBQUU7SUFDYjtBQUNGO0FBRUEsNkVBQTZFO0FBQzdFLHVFQUF1RTtBQUN2RSx3RUFBd0U7QUFDeEUsa0NBQWtDO0FBQ2xDNUQscUJBQXFCLEdBQUcsU0FBUzRELENBQUMsRUFBQ1UsQ0FBQztJQUNsQyx5QkFBeUIsR0FDekIsT0FBTyxJQUFLVixDQUFBQSxFQUFFVyx1QkFBdUIsQ0FBQ0QsS0FBSztBQUM3QztBQUVBdEUsd0JBQXdCLEdBQUcsU0FBU3lFLENBQUM7SUFDbkMsT0FBT0EsRUFBRUMsT0FBTyxDQUFDLFdBQVcsU0FBU2YsQ0FBQztRQUNwQyxPQUFPQSxFQUFFZ0IsV0FBVztJQUN0QjtBQUNGO0FBRUEzRSx3QkFBd0IsR0FBRyxTQUFTeUUsQ0FBQztJQUNuQyxPQUFPQSxFQUFFQyxPQUFPLENBQUMsV0FBVyxTQUFTZixDQUFDO1FBQ3BDLE9BQU9BLEVBQUVrQixXQUFXO0lBQ3RCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQG1hdGhwaXgvZG9taW5vL2xpYi91dGlscy5qcz8wMWU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIERPTUV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRE9NRXhjZXB0aW9uJyk7XG52YXIgRVJSID0gRE9NRXhjZXB0aW9uO1xudmFyIGlzQXBpV3JpdGFibGUgPSByZXF1aXJlKFwiLi9jb25maWdcIikuaXNBcGlXcml0YWJsZTtcblxuZXhwb3J0cy5OQU1FU1BBQ0UgPSB7XG4gIEhUTUw6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJyxcbiAgWE1MOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJyxcbiAgWE1MTlM6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLycsXG4gIE1BVEhNTDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnLFxuICBTVkc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIFhMSU5LOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaydcbn07XG5cbi8vXG4vLyBTaG9ydGN1dCBmdW5jdGlvbnMgZm9yIHRocm93aW5nIGVycm9ycyBvZiB2YXJpb3VzIHR5cGVzLlxuLy9cbmV4cG9ydHMuSW5kZXhTaXplRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuSU5ERVhfU0laRV9FUlIpOyB9O1xuZXhwb3J0cy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuSElFUkFSQ0hZX1JFUVVFU1RfRVJSKTsgfTtcbmV4cG9ydHMuV3JvbmdEb2N1bWVudEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLldST05HX0RPQ1VNRU5UX0VSUik7IH07XG5leHBvcnRzLkludmFsaWRDaGFyYWN0ZXJFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5JTlZBTElEX0NIQVJBQ1RFUl9FUlIpOyB9O1xuZXhwb3J0cy5Ob01vZGlmaWNhdGlvbkFsbG93ZWRFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5OT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlIpOyB9O1xuZXhwb3J0cy5Ob3RGb3VuZEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLk5PVF9GT1VORF9FUlIpOyB9O1xuZXhwb3J0cy5Ob3RTdXBwb3J0ZWRFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5OT1RfU1VQUE9SVEVEX0VSUik7IH07XG5leHBvcnRzLkludmFsaWRTdGF0ZUVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLklOVkFMSURfU1RBVEVfRVJSKTsgfTtcbmV4cG9ydHMuU3ludGF4RXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuU1lOVEFYX0VSUik7IH07XG5leHBvcnRzLkludmFsaWRNb2RpZmljYXRpb25FcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5JTlZBTElEX01PRElGSUNBVElPTl9FUlIpOyB9O1xuZXhwb3J0cy5OYW1lc3BhY2VFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5OQU1FU1BBQ0VfRVJSKTsgfTtcbmV4cG9ydHMuSW52YWxpZEFjY2Vzc0Vycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLklOVkFMSURfQUNDRVNTX0VSUik7IH07XG5leHBvcnRzLlR5cGVNaXNtYXRjaEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLlRZUEVfTUlTTUFUQ0hfRVJSKTsgfTtcbmV4cG9ydHMuU2VjdXJpdHlFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5TRUNVUklUWV9FUlIpOyB9O1xuZXhwb3J0cy5OZXR3b3JrRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuTkVUV09SS19FUlIpOyB9O1xuZXhwb3J0cy5BYm9ydEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLkFCT1JUX0VSUik7IH07XG5leHBvcnRzLlVybE1pc21hdGNoRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuVVJMX01JU01BVENIX0VSUik7IH07XG5leHBvcnRzLlF1b3RhRXhjZWVkZWRFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5RVU9UQV9FWENFRURFRF9FUlIpOyB9O1xuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuVElNRU9VVF9FUlIpOyB9O1xuZXhwb3J0cy5JbnZhbGlkTm9kZVR5cGVFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5JTlZBTElEX05PREVfVFlQRV9FUlIpOyB9O1xuZXhwb3J0cy5EYXRhQ2xvbmVFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5EQVRBX0NMT05FX0VSUik7IH07XG5cbmV4cG9ydHMubnlpID0gZnVuY3Rpb24oKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIk5vdFlldEltcGxlbWVudGVkXCIpO1xufTtcblxuZXhwb3J0cy5zaG91bGRPdmVycmlkZSA9IGZ1bmN0aW9uKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJBYnN0cmFjdCBmdW5jdGlvbjsgc2hvdWxkIGJlIG92ZXJyaWRpbmcgaW4gc3ViY2xhc3MuXCIpO1xufTtcblxuZXhwb3J0cy5hc3NlcnQgPSBmdW5jdGlvbihleHByLCBtc2cpIHtcbiAgaWYgKCFleHByKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQXNzZXJ0aW9uIGZhaWxlZDogXCIgKyAobXNnIHx8IFwiXCIpICsgXCJcXG5cIiArIG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgfVxufTtcblxuZXhwb3J0cy5leHBvc2UgPSBmdW5jdGlvbihzcmMsIGMpIHtcbiAgZm9yICh2YXIgbiBpbiBzcmMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYy5wcm90b3R5cGUsIG4sIHsgdmFsdWU6IHNyY1tuXSwgd3JpdGFibGU6IGlzQXBpV3JpdGFibGUgfSk7XG4gIH1cbn07XG5cbmV4cG9ydHMubWVyZ2UgPSBmdW5jdGlvbihhLCBiKSB7XG4gIGZvciAodmFyIG4gaW4gYikge1xuICAgIGFbbl0gPSBiW25dO1xuICB9XG59O1xuXG4vLyBDb21wYXJlIHR3byBub2RlcyBiYXNlZCBvbiB0aGVpciBkb2N1bWVudCBvcmRlci4gVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZFxuLy8gdG8gYmUgcGFzc2VkIHRvIHNvcnQoKS4gQXNzdW1lcyB0aGF0IHRoZSBhcnJheSBiZWluZyBzb3J0ZWQgZG9lcyBub3Rcbi8vIGNvbnRhaW4gZHVwbGljYXRlcy4gIEFuZCB0aGF0IGFsbCBub2RlcyBhcmUgY29ubmVjdGVkIGFuZCBjb21wYXJhYmxlLlxuLy8gQ2xldmVyIGNvZGUgYnkgcHBrIHZpYSBqZXJlc2lnLlxuZXhwb3J0cy5kb2N1bWVudE9yZGVyID0gZnVuY3Rpb24obixtKSB7XG4gIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuICByZXR1cm4gMyAtIChuLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG0pICYgNik7XG59O1xuXG5leHBvcnRzLnRvQVNDSUlMb3dlckNhc2UgPSBmdW5jdGlvbihzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoL1tBLVpdKy9nLCBmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuIGMudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG59O1xuXG5leHBvcnRzLnRvQVNDSUlVcHBlckNhc2UgPSBmdW5jdGlvbihzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoL1thLXpdKy9nLCBmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuIGMudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbIkRPTUV4Y2VwdGlvbiIsInJlcXVpcmUiLCJFUlIiLCJpc0FwaVdyaXRhYmxlIiwiZXhwb3J0cyIsIk5BTUVTUEFDRSIsIkhUTUwiLCJYTUwiLCJYTUxOUyIsIk1BVEhNTCIsIlNWRyIsIlhMSU5LIiwiSW5kZXhTaXplRXJyb3IiLCJJTkRFWF9TSVpFX0VSUiIsIkhpZXJhcmNoeVJlcXVlc3RFcnJvciIsIkhJRVJBUkNIWV9SRVFVRVNUX0VSUiIsIldyb25nRG9jdW1lbnRFcnJvciIsIldST05HX0RPQ1VNRU5UX0VSUiIsIkludmFsaWRDaGFyYWN0ZXJFcnJvciIsIklOVkFMSURfQ0hBUkFDVEVSX0VSUiIsIk5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yIiwiTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSIiwiTm90Rm91bmRFcnJvciIsIk5PVF9GT1VORF9FUlIiLCJOb3RTdXBwb3J0ZWRFcnJvciIsIk5PVF9TVVBQT1JURURfRVJSIiwiSW52YWxpZFN0YXRlRXJyb3IiLCJJTlZBTElEX1NUQVRFX0VSUiIsIlN5bnRheEVycm9yIiwiU1lOVEFYX0VSUiIsIkludmFsaWRNb2RpZmljYXRpb25FcnJvciIsIklOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUiIsIk5hbWVzcGFjZUVycm9yIiwiTkFNRVNQQUNFX0VSUiIsIkludmFsaWRBY2Nlc3NFcnJvciIsIklOVkFMSURfQUNDRVNTX0VSUiIsIlR5cGVNaXNtYXRjaEVycm9yIiwiVFlQRV9NSVNNQVRDSF9FUlIiLCJTZWN1cml0eUVycm9yIiwiU0VDVVJJVFlfRVJSIiwiTmV0d29ya0Vycm9yIiwiTkVUV09SS19FUlIiLCJBYm9ydEVycm9yIiwiQUJPUlRfRVJSIiwiVXJsTWlzbWF0Y2hFcnJvciIsIlVSTF9NSVNNQVRDSF9FUlIiLCJRdW90YUV4Y2VlZGVkRXJyb3IiLCJRVU9UQV9FWENFRURFRF9FUlIiLCJUaW1lb3V0RXJyb3IiLCJUSU1FT1VUX0VSUiIsIkludmFsaWROb2RlVHlwZUVycm9yIiwiSU5WQUxJRF9OT0RFX1RZUEVfRVJSIiwiRGF0YUNsb25lRXJyb3IiLCJEQVRBX0NMT05FX0VSUiIsIm55aSIsIkVycm9yIiwic2hvdWxkT3ZlcnJpZGUiLCJhc3NlcnQiLCJleHByIiwibXNnIiwic3RhY2siLCJleHBvc2UiLCJzcmMiLCJjIiwibiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwidmFsdWUiLCJ3cml0YWJsZSIsIm1lcmdlIiwiYSIsImIiLCJkb2N1bWVudE9yZGVyIiwibSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwidG9BU0NJSUxvd2VyQ2FzZSIsInMiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJ0b0FTQ0lJVXBwZXJDYXNlIiwidG9VcHBlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mathpix/domino/lib/xmlnames.js":
/*!******************************************************!*\
  !*** ./node_modules/@mathpix/domino/lib/xmlnames.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// This grammar is from the XML and XML Namespace specs. It specifies whether\n// a string (such as an element or attribute name) is a valid Name or QName.\n//\n// Name           ::= NameStartChar (NameChar)*\n// NameStartChar  ::= \":\" | [A-Z] | \"_\" | [a-z] |\n//                    [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] |\n//                    [#x370-#x37D] | [#x37F-#x1FFF] |\n//                    [#x200C-#x200D] | [#x2070-#x218F] |\n//                    [#x2C00-#x2FEF] | [#x3001-#xD7FF] |\n//                    [#xF900-#xFDCF] | [#xFDF0-#xFFFD] |\n//                    [#x10000-#xEFFFF]\n//\n// NameChar       ::= NameStartChar | \"-\" | \".\" | [0-9] |\n//                    #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\n//\n// QName          ::= PrefixedName| UnprefixedName\n// PrefixedName   ::= Prefix ':' LocalPart\n// UnprefixedName ::= LocalPart\n// Prefix         ::= NCName\n// LocalPart      ::= NCName\n// NCName         ::= Name - (Char* ':' Char*)\n//                    # An XML Name, minus the \":\"\n//\nexports.isValidName = isValidName;\nexports.isValidQName = isValidQName;\n// Most names will be ASCII only. Try matching against simple regexps first\nvar simplename = /^[_:A-Za-z][-.:\\w]+$/;\nvar simpleqname = /^([_A-Za-z][-.\\w]+|[_A-Za-z][-.\\w]+:[_A-Za-z][-.\\w]+)$/;\n// If the regular expressions above fail, try more complex ones that work\n// for any identifiers using codepoints from the Unicode BMP\nvar ncnamestartchars = \"_A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�\";\nvar ncnamechars = \"-._A-Za-z0-9\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-˿̀-ͽͿ-῿‌‍‿⁀⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�\";\nvar ncname = \"[\" + ncnamestartchars + \"][\" + ncnamechars + \"]*\";\nvar namestartchars = ncnamestartchars + \":\";\nvar namechars = ncnamechars + \":\";\nvar name = new RegExp(\"^[\" + namestartchars + \"]\" + \"[\" + namechars + \"]*$\");\nvar qname = new RegExp(\"^(\" + ncname + \"|\" + ncname + \":\" + ncname + \")$\");\n// XML says that these characters are also legal:\n// [#x10000-#xEFFFF].  So if the patterns above fail, and the\n// target string includes surrogates, then try the following\n// patterns that allow surrogates and then run an extra validation\n// step to make sure that the surrogates are in valid pairs and in\n// the right range.  Note that since the characters \\uf0000 to \\u1f0000\n// are not allowed, it means that the high surrogate can only go up to\n// \\uDB7f instead of \\uDBFF.\nvar hassurrogates = /[\\uD800-\\uDB7F\\uDC00-\\uDFFF]/;\nvar surrogatechars = /[\\uD800-\\uDB7F\\uDC00-\\uDFFF]/g;\nvar surrogatepairs = /[\\uD800-\\uDB7F][\\uDC00-\\uDFFF]/g;\n// Modify the variables above to allow surrogates\nncnamestartchars += \"\\uD800-\\uDB7F\\uDC00-\\uDFFF\";\nncnamechars += \"\\uD800-\\uDB7F\\uDC00-\\uDFFF\";\nncname = \"[\" + ncnamestartchars + \"][\" + ncnamechars + \"]*\";\nnamestartchars = ncnamestartchars + \":\";\nnamechars = ncnamechars + \":\";\n// Build another set of regexps that include surrogates\nvar surrogatename = new RegExp(\"^[\" + namestartchars + \"]\" + \"[\" + namechars + \"]*$\");\nvar surrogateqname = new RegExp(\"^(\" + ncname + \"|\" + ncname + \":\" + ncname + \")$\");\nfunction isValidName(s) {\n    if (simplename.test(s)) return true; // Plain ASCII\n    if (name.test(s)) return true; // Unicode BMP\n    // Maybe the tests above failed because s includes surrogate pairs\n    // Most likely, though, they failed for some more basic syntax problem\n    if (!hassurrogates.test(s)) return false;\n    // Is the string a valid name if we allow surrogates?\n    if (!surrogatename.test(s)) return false;\n    // Finally, are the surrogates all correctly paired up?\n    var chars = s.match(surrogatechars), pairs = s.match(surrogatepairs);\n    return pairs !== null && 2 * pairs.length === chars.length;\n}\nfunction isValidQName(s) {\n    if (simpleqname.test(s)) return true; // Plain ASCII\n    if (qname.test(s)) return true; // Unicode BMP\n    if (!hassurrogates.test(s)) return false;\n    if (!surrogateqname.test(s)) return false;\n    var chars = s.match(surrogatechars), pairs = s.match(surrogatepairs);\n    return pairs !== null && 2 * pairs.length === chars.length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mathpix/domino/lib/xmlnames.js\n");

/***/ })

};
;